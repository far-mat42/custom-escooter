#include "stm32l4xx_hal.h"
#include "bq76952.h"
#include <math.h>
#include <stdbool.h>
#include <string.h>
#include <stdio.h>

// Function prototypes
// Initializing peripherals
void SystemClock_Config(void);
void GPIO_Init(void);
void SPI1_Init(void);
void USART1_Init(void);
void TIM1_Init(void);
void ADC1_Init(void);

uint8_t crc8(uint8_t *data, size_t len);

// Functions to handle communication with the AFE
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len);
void DirectCmdWrite(uint8_t cmd, uint8_t *writeData, uint8_t len);
void SubCmdNoData(uint16_t cmd);
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len);
void RAMRegisterRead(uint16_t addr, uint8_t *returnData, uint8_t len);
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len);

// Helper functions that do the handling for verifying the AFE received a SPI command
void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize);
void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize);

// Other helper functions to transmit the data from the AFE to the UART lines
void TransmitCellVoltages(uint16_t *volts, uint8_t len);
void TransmitADCReadings(uint32_t *counts, uint8_t len);
void TransmitTemperatures(int16_t *temps, uint8_t len);
void TransmitSafetyStatusA(void);
void TransmitSafetyStatusB(void);

int16_t T4_Acquire(void);

void Error_Handler(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);

// Global defines
#define T4_BETA 3435.0
#define T4_R0 10000.0
#define T4_PU 17800.0

// Global handles
SPI_HandleTypeDef hspi1;
UART_HandleTypeDef huart1;
TIM_HandleTypeDef htim1;
ADC_HandleTypeDef hadc1;

// Global variables - used for ISRs to raise flags
bool logDataFlag = 0;
bool logAlertsFlag = 0;

int main(void) {
    // HAL initialization
    HAL_Init();

    // System clock configuration
    SystemClock_Config();

    // Initialize GPIO, SPI, UART, TIM1, ADC1
    GPIO_Init();
    SPI1_Init();
    USART1_Init();
    TIM1_Init();
    ADC1_Init();

    // Start the logging timer
    TIM1->CR1 |= TIM_CR1_CEN;

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};

    uint16_t ctrlStatus = 0;
    uint16_t cellVolt = 0;
    uint16_t cellVolts[17] = {0};
    int16_t cellGains[16] = {12000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11900};
    uint32_t MCUTemperature = 0;
    int16_t AFETemperature = 0;
    int16_t temperatures[4] = {0};
//    uint32_t adcCounts[16] = {0};
//    uint32_t adcCount = 0;
    uint16_t currentRead = 0;
    uint8_t fetStatus = 0;
    uint8_t safetyStatAlrt[6] = {0};
    uint8_t cmdAddr = 0;

    uint8_t writeData[32] = {0};

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
	SubCmdReadData(0x0057, readData, 2);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
	HAL_Delay(250);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
	HAL_Delay(750);

	// Disable SLEEP mode and disable FET_TEST mode if already in FET_TEST
	SubCmdNoData(0x009A);
	if (!(readData[0] & (1 << 4))) SubCmdNoData(0x0022);

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
	SubCmdReadData(0x0057, readData, 2);

	// Enter CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
	// Wait for Battery Status to confirm transition to CONFIG_UPDATE mode
	do {
		DirectCmdRead(0x12, readData, 2);
	} while (!(readData[0] & 0x01));

	// Configuring Settings in RAM
	writeData[0] = 0x02;
	RAMRegisterWrite(PROT_SCD_THLD, writeData, 1); // Set SCD threshold to 40mV

	// Disable body diode protection
	writeData[0] = 0x0C;
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1);

	// Set calibration gain values for all cell voltages
	for (int i = 0; i < 16; i++) {
		format_int16(writeData, cellGains[i]);
		RAMRegisterWrite(CAL_GAIN_CL1 + i*2, writeData, 2);
	}
	// Set calibration offset value for cell voltages
//	format_int16(writeData, 80);
//	RAMRegisterWrite(CAL_OFST_VCELL, writeData, 2);

	// Configure TS pins
	writeData[0] = 0x07; // Thermistor temperature, for cell AFETemperature protection
	RAMRegisterWrite(SET_CONF_TS1_CFG, writeData, 1);
	RAMRegisterWrite(SET_CONF_TS2_CFG, writeData, 1);
	writeData[0] = 0x0F; // Thermistor temperature, for FET AFETemperature protection
	RAMRegisterWrite(SET_CONF_TS3_CFG, writeData, 1);

	// Setting MFG Status Init to disable FET Test commands
	format_uint16(writeData, 0x0050);
	RAMRegisterWrite(SET_MFG_STATUS_INIT, writeData, 2);
	// Exit CONFIG_UPDATE mode, read manufacturing status register again
	SubCmdNoData(0x0092);
	SubCmdReadData(0x0057, readData, 2);

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
	HAL_Delay(250);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
	HAL_Delay(750);

    while (1) {
    	// Read the control status register
//    	DirectCmdRead(0x02, readData, 2);
//    	ctrlStatus = (readData[0]) + (readData[1] << 8);

    	// Check if flag to log data was raised
    	if (logDataFlag) {
    		logDataFlag = false; // Clear the flag
    		// Read the cell voltage for all 16 cells and then the pack voltage
			for (int i = 0; i < 17; i++) {
				cmdAddr = 0x14 + 2*i;
				DirectCmdRead(cmdAddr, readData, 2);
				// Combine the 2 8-bit cell voltage bytes into a single 16-byte variable
				cellVolt = (readData[0]) + (readData[1] << 8);
				cellVolts[i] = cellVolt;
			}

			// Read the AFETemperature measured at TS1-3
			for (int i = 0; i < 3; i++) {
				cmdAddr = 0x70 + 2*i;
				DirectCmdRead(cmdAddr, readData, 2);
				AFETemperature = (readData[0]) + (readData[1] << 8);
				temperatures[i] = AFETemperature;
			}
			// Calculate temperature measured by MCU's ADC
			MCUTemperature = T4_Acquire();
			temperatures[3] = MCUTemperature;

    		// Use the DASTATUS subcommands to get the raw 32-bit ADC counts for cell voltages
//    		for (int i = 0; i < 4; i++) {
//    			cmdAddr = 0x0071 + i;
//				SubCmdReadData(cmdAddr, readData, 32);
//    			for (int j = 0; j < 4; j++) {
//    				adcCount = (readData[j*8]) + (readData[j*8 + 1] << 8) + (readData[j*8 + 2] << 16) + (readData[j*8 + 3] << 24);
//    				adcCounts[i*4 + j] = adcCount;
//    			}
//    		}
//			TransmitCellVoltages(cellVolts, sizeof(cellVolts));
//			TransmitCellVoltages(cellVolts, 17);
//    		TransmitADCReadings(adcCounts, 16);
			TransmitTemperatures(temperatures, 4);

			// Read the CC2 current and FET status
			DirectCmdRead(0x3A, readData, 2);
			currentRead = (readData[0]) + (readData[1] << 8);
			DirectCmdRead(0x7F, readData, 1);
			fetStatus = readData[0];
    	}

    	// Check if flag indicating a fault occurred was raised
    	if (logAlertsFlag) {
    		logAlertsFlag = false;
			// Read the Alarm Status register to figure out what's causing the alert
    		DirectCmdRead(0x62, readData, 2);
    		writeData[0] = 0x00;
    		writeData[1] = 0x00;
    		// Check each bit and determine where to look for the cause of the alert
    		// Safety status B/C
    		if (readData[1] & (1 << 7)) {
    			TransmitSafetyStatusB();
    			// No need to check safety status C as no protections there are enabled
    			writeData[1] |= (1 << 7);
    		}
    		// Safety status A
    		if (readData[1] & (1 << 6)) {
    			TransmitSafetyStatusA();
    			writeData[1] |= (1 << 6);
    		}
    		// Permanent failure
    		if (readData[1] & (1 << 5)) {
    			// If there's a permanent failure, continuously transmit a distress signal
    			uint8_t msg[] = "Permanent failure! All BMS operations halted, requesting attention...";
    			while (1) {
    				HAL_Delay(10000);
    				HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
    			}
    		}
    		// Clear the bits for the received safety statuses, as well as the masked safety alerts
    		writeData[1] |= 0x18;
    		DirectCmdWrite(0xE2, writeData, 2);
    	}
    }
}

/**
 * Configures the clocks for the STM32
 */
void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    HAL_RCC_OscConfig(&RCC_OscInitStruct);

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
}

/**
 * Initializes all GPIO pins
 */
void GPIO_Init(void) {
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_SYSCFG_CLK_ENABLE();

    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    // Configure PB6 (UART_TX), PB7 (UART_RX)
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Alternate function for USART1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	// Configure PA4 (AFE ALERT pin) as an external interrupt
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);

	// Configure PA1 (T4 pin) as an analog input
	GPIO_InitStruct.Pin = GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

// Initializes the SPI1 peripheral in master mode
void SPI1_Init(void) {
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();

    // Configure SPI1
    hspi1.Instance = SPI1;
    hspi1.Init.Mode = SPI_MODE_MASTER;
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    hspi1.Init.NSS = SPI_NSS_SOFT;
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hspi1.Init.CRCPolynomial = 7;

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
    {
        // Initialization error
        while (1);
    }
}

/**
 * Initializes the USART1 peripheral in UART TX/RX mode
 */
void USART1_Init(void) {
	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();

	// Configure UART peripheral
	huart1.Instance = USART1;
	huart1.Init.BaudRate = 9600;
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;

	if (HAL_UART_Init(&huart1) != HAL_OK)
	{
		// Initialization error
		while (1);
	}
}

/**
 * Initializes the TIM1 peripheral with interrupts enabled
 */
void TIM1_Init(void) {
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Enable TIM1 clock

	TIM1->PSC = 2000 - 1; // Given 2MHz clock, 2000 cycles for 1ms
	TIM1->ARR = 2000 - 1; // Generate interrupt every 2000ms (2s)

	TIM1->DIER |= TIM_DIER_UIE; // Enable update interrupt

	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0); // Set TIM1 interrupt priority
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); // Enable TIM1 interrupt

	TIM1->CR1 |= TIM_CR1_CEN; // Enable TIM1
}

/**
 * Defining the ISR for the STM32 timers
 */
void TIM1_UP_TIM16_IRQHandler(void) {
	// Check if UIF flag is set for TIM1
	if (TIM1->SR & TIM_SR_UIF) {
		logDataFlag = true; // Raise a flag to log data from the AFE
		TIM1->SR &= ~TIM_SR_UIF; // Clear UIF flag
	}
}

void ADC1_Init(void) {
    ADC_ChannelConfTypeDef sConfig = {0};

    // Enable the clock for ADC1
    __HAL_RCC_ADC_CLK_ENABLE();

    // Configure the ADC peripheral
    hadc1.Instance = ADC1;
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;  // 12-bit resolution
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;  // Right data alignment
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;  // Single channel
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;  // End of conversion flag after each conversion
    hadc1.Init.ContinuousConvMode = DISABLE;  // Single conversion mode
    hadc1.Init.NbrOfConversion = 1;  // Single conversion
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;  // Start conversion by software
    hadc1.Init.DMAContinuousRequests = DISABLE;
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
        // Initialization error
        Error_Handler();
    }

    // Configure the ADC regular channel (PA1 = ADC_CHANNEL_6)
    sConfig.Channel = ADC_CHANNEL_6;
    sConfig.Rank = ADC_REGULAR_RANK_1;
    sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;  // Sample time (adjust as necessary)

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
        // Channel configuration error
        Error_Handler();
    }
}

/**
 * Calculates a CRC value according to the polynomial x^8 + x^2 + x + 1
 * @param data Pointer to an array storing the data bytes that will be transmitted
 * @param len Number of bytes that will be transmitted
 */
uint8_t crc8(uint8_t *data, size_t len) {
    uint8_t crc = 0x00;
    while (len--)
    {
        crc ^= *data++;
        for (uint8_t i = 0; i < 8; ++i)
        {
            if (crc & 0x80)
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
            else
                crc <<= 1;
        }
    }
    return crc;
}

/**
 * Sends a direct command to the AFE and reads the data that is output
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len) {
	uint8_t rxData[3] = {0};
	uint8_t txData[3] = {0};
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
	uint8_t crcLower = 0;
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++)
	{
		fullCmd[0] = cmd + i; // Increment the address
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
		txData[1] = fullCmd[1];
		txData[2] = crcLower;

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
		returnData[i] = rxData[1]; // Save data byte received from last transaction
	}
}

/**
 * Sends a direct command to the AFE and writes the provided data to it
 * @param cmd The address byte for the command
 * @param writeData Pointer to the 8-bit integer array containing the data to write
 * @param len Number of bytes to write to the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdWrite(uint8_t cmd, uint8_t *writeData, uint8_t len) {
	uint8_t rxData[3] = {0};
	uint8_t txData[3] = {0};
	uint8_t fullCmd[2] = {0};
	uint8_t crcLower = 0;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++) {
		fullCmd[0] = cmd + i;
		fullCmd[1] = writeData[i];
		crcLower = crc8(fullCmd, 2);
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
		txData[1] = fullCmd[1];
		txData[2] = crcLower;

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
	}
}

/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd) {
	uint8_t rxData[3] = {0};
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
	uint8_t crcLower = crc8(commandLowerAddr, 2);
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
	uint8_t crcUpper = crc8(commandUpperAddr, 2);

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
	txData[1] = commandUpperAddr[1];
	txData[2] = crcUpper;
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
}

/**
 * Sends a sub-command to the AFE and reads the data that is output
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len) {
	uint8_t rxData[3] = {0};
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
	uint8_t crcLower = crc8(commandLowerAddr, 2);
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
	uint8_t crcUpper = crc8(commandUpperAddr, 2);

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
	txData[1] = commandUpperAddr[1];
	txData[2] = crcUpper;
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
	for (int i = 0; i < len; i++) {
		readData[0] = READ_DATA_BUFF_LSB + i;
		readData[1] = 0xFF;

		txData[0] = readData[0];
		txData[1] = readData[1];
		txData[2] = crc8(readData, 2);

		AFETransmitReadCmd(txData, rxData, sizeof(txData));

		returnData[i] = rxData[1]; // Save data byte received from last transaction
	}
}

/**
 * Reads the value stored in one of the AFE's RAM registers
 * Might remove this function, it's exactly the same as the SubCmd read data function
 * @param addr The register address
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void RAMRegisterRead(uint16_t addr, uint8_t *returnData, uint8_t len) {
	// Preparing the SPI transaction to send to tell the AFE a RAM register read is happening
	uint8_t rxData[3] = {0};
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
	uint8_t crcLower = crc8(commandLowerAddr, 2);
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
	uint8_t crcUpper = crc8(commandUpperAddr, 2);

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
	txData[1] = commandUpperAddr[1];
	txData[2] = crcUpper;
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
	for (int i = 0; i < len; i++) {
		readData[0] = READ_DATA_BUFF_LSB + i;
		readData[1] = 0xFF;

		txData[0] = readData[0];
		txData[1] = readData[1];
		txData[2] = crc8(readData, 2);

		AFETransmitReadCmd(txData, rxData, sizeof(txData));

		returnData[i] = rxData[1]; // Save data byte received from last transaction
	}
}

/**
 * Writes the given value in one of the AFE's RAM registers
 * Might remove this function, it's exactly the same as the SubCmd read data function
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len) {
	uint8_t rxData[3] = {0};
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
	uint8_t crcLower = crc8(lowerAddr, 2);
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
	uint8_t crcUpper = crc8(upperAddr, 2);

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));

	// Continue to upper byte
	txData[0] = upperAddr[0];
	txData[1] = upperAddr[1];
	txData[2] = crcUpper;
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
	for (int i = 0; i < len; i++)
	{
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
		writeBytes[1] = writeData[i];

		txData[0] = writeBytes[0];
		txData[1] = writeBytes[1];
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
	for (int i = 0; i < len; i++) {
		checkSum += writeData[i];
	}
	checkSum += lowerAddr[1];
	checkSum += upperAddr[1];
	checkSum = ~(checkSum);

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
	writeBytes[1] = checkSum;

	txData[0] = writeBytes[0];
	txData[1] = writeBytes[1];
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes

	txData[0] = writeBytes[0];
	txData[1] = writeBytes[1];
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
}

/**
 * Handles the proper SPI communication procedure with the AFE for a SPI read command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
	while (!commReceived)
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		if (txBytes[0] == rxBytes[0]) commReceived = true;
		// TODO: implement CRC checking for received data

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		HAL_Delay(1);
	}

}

/**
 * Handles the proper SPI communication procedure with the AFE for a SPI write command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
	while (!commReceived)
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
		for (int i = 0; i < arrSize; i++)
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		HAL_Delay(1);
	}
}

/**
 * Helper function to transmit all the cell voltage readings over UART
 * @param volts Array containing the cell voltage readings
 * @param len Length of the provided array
 */
void TransmitCellVoltages(uint16_t *volts, uint8_t len) {
	char buffer[1024] = {0}; // Initialize buffer to store message
	char temp[32]; // Temporary buffer for each line

	for (int i = 1; i <= len; i++) {
		// Format the data into a single line
		snprintf(temp, sizeof(temp), "CV%d: %d mV\n", i, volts[i-1]);
		// Append the formatted data to the buffer
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
	}

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void TransmitADCReadings(uint32_t *counts, uint8_t len) {
	char buffer[1024] = {0}; // Initialize buffer to store message
	char temp[32]; // Temporary buffer for each line

	for (int i = 1; i <= len; i++) {
		// Format the data into a single line
		snprintf(temp, sizeof(temp), "CV%d: %lu mV\n", i, counts[i-1]);
		// Append the formatted data to the buffer
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
	}

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void TransmitTemperatures(int16_t *temps, uint8_t len) {
	char buffer[1024] = {0}; // Initialize buffer to store message
	char temp[32]; // Temporary buffer for each line
	double degC = 0;

	for (int i = 1; i <= len; i++) {
		// Format the data into a single line
		degC = temps[i-1]/10 - 272.15;
		snprintf(temp, sizeof(temp), "TS%d: %.2f C\n", i, degC);
		// Append the formatted data to the buffer
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
	}

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status A register
 */
void TransmitSafetyStatusA(void) {
	// Read the bits of the Safety Status A register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusA[1] = {0};
	DirectCmdRead(0x03, statusA, 1);

	// Short Circuit Discharge
	if (statusA[0] & (1 << 7)) {
		uint8_t msg[] = "SCD fault triggered! Discharging will be disabled for a moment...\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Overcurrent in Discharge 1st Tier
	if (statusA[0] & (1 << 5)) {
		uint8_t msg[] = "OCD1 fault triggered! Discharging will be disabled for a moment...\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Overcurrent in Charge
	if (statusA[0] & (1 << 4)) {
		uint8_t msg[] = "OCC fault triggered! Charging will be disabled for a moment...\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Cell Overvoltage
	if (statusA[0] & (1 << 3)) {
		uint8_t msg[] = "COV fault triggered! Charging will be disabled until voltage drops sufficiently.\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Cell Undervoltage
	if (statusA[0] & (1 << 2)) {
		uint8_t msg[] = "CUV fault triggered! Discharging will be disabled until voltage rises sufficiently.\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
}

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status B register
 */
void TransmitSafetyStatusB(void) {
	// Read the bits of the Safety Status B register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusB[1] = {0};
	DirectCmdRead(0x05, statusB, 1);

	// FET Overtemperature
	if (statusB[0] & (1 << 7)) {
		uint8_t msg[] = "OTF fault triggered! Discharging will be disabled for a moment...\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Internal Overtemperature
	if (statusB[0] & (1 << 6)) {
		uint8_t msg[] = "OTINT fault triggered! All AFE operations will be disabled for a moment...\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Overtemperature in Discharge
	if (statusB[0] & (1 << 5)) {
		uint8_t msg[] = "OTD fault triggered! Discharging will be disabled for a moment...\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Overtemperature in Charge
	if (statusB[0] & (1 << 4)) {
		uint8_t msg[] = "OTC fault triggered! Charging will be disabled for a moment...\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Internal Undertemperature
	if (statusB[0] & (1 << 2)) {
		uint8_t msg[] = "UTINT fault triggered! All AFE operations will be disabled for a moment...\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Undertemperature in Discharge
	if (statusB[0] & (1 << 1)) {
		uint8_t msg[] = "UTD fault triggered! No operational changes, but prolonged operation is not advised.\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
	// Undertemperature in Charge
	if (statusB[0] & 0x01) {
		uint8_t msg[] = "UTC fault triggered! No operational changes, but prolonged operation is not advised.\n";
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	}
}

int16_t T4_Acquire(void) {
    uint32_t adcValue = 0;
    float T4_volt = 0.0;
    float T4_res = 0.0;
    float T4_temp = 0.0;
    int16_t T4 = 0;

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
        // Start error
        Error_Handler();
    }

    // Poll for end of conversion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
        // Read the ADC conversion result (12-bit resolution)
        adcValue = HAL_ADC_GetValue(&hadc1);

        // Convert ADC value to voltage (divide by max. ADC counts, multiply by VREF (3.3V))
        T4_volt = ((float)adcValue / 4095.0) * 3.3;
        // Calculate thermistor resistance based on voltage (voltage divider rearranged)
        T4_res = T4_PU * (T4_volt / (3.3 - T4_volt));
        // Using thermistor's beta value, calculate the temperature
        T4_temp = 1.0 / ((1.0 / 293.15) + (1.0 / T4_BETA) * log(T4_res / T4_R0));
        // Convert value in Kelvin to 16-bit integer like the other temperature measurements (units of 0.1K)
        T4 = (int16_t)(T4_temp * 10.0);
    }

    // Stop the ADC conversion
    HAL_ADC_Stop(&hadc1);

    return T4;
}

/**
 * Error handler if a UART transmission error occurs
 * TODO: Implement this
 */
void Error_Handler(void) {
    // Stay in an infinite loop to allow for debugging
    while (1);
}

/**
 * Callback function for handling an interrupt from a GPIO pin
 * @param GPIO_Pin The GPIO pin number where an interrupt was received
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	uint8_t msg[] = "Interrupt! ";
	HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);

	switch (GPIO_Pin) {
	case GPIO_PIN_4:
		logAlertsFlag = true;
	}
}
