
Nucleo-Test-Ground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000494  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000620  08000620  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000620  08000620  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000620  08000620  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000620  08000620  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000620  08000620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000624  08000624  00010624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000628  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800062c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800062c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000016d3  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000549  00000000  00000000  0002174a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00021c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000017d  00000000  00000000  00021eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017342  00000000  00000000  0002202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000229d  00000000  00000000  0003936f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000945d1  00000000  00000000  0003b60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006ac  00000000  00000000  000cfbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ad  00000000  00000000  000d028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000608 	.word	0x08000608

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	08000608 	.word	0x08000608

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
	// Initializing registers for GPIO, clocks and SPI
	initClocks();
 80001d2:	f000 f833 	bl	800023c <initClocks>
	configGPIO();
 80001d6:	f000 f847 	bl	8000268 <configGPIO>
	configSPI();
 80001da:	f000 f88f 	bl	80002fc <configSPI>
	configTIM1();
 80001de:	f000 f8e5 	bl	80003ac <configTIM1>

	// SPI addresses
	uint8_t addr[4] = {37, 89, 121, 14};
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <main+0x68>)
 80001e4:	607b      	str	r3, [r7, #4]
	uint8_t data[4] = {197, 5, 73, 41};
 80001e6:	4b14      	ldr	r3, [pc, #80]	; (8000238 <main+0x6c>)
 80001e8:	603b      	str	r3, [r7, #0]

	// Main loop
	while (1) {
		for (int i = 0; i < sizeof(addr); i++) {
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	e01c      	b.n	800022a <main+0x5e>
			for (int j = 0; j < sizeof(data); j++) {
 80001f0:	2300      	movs	r3, #0
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	e013      	b.n	800021e <main+0x52>
				writeSPI(addr[i], data[j]);
 80001f6:	1d3a      	adds	r2, r7, #4
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	4413      	add	r3, r2
 80001fc:	7818      	ldrb	r0, [r3, #0]
 80001fe:	463a      	mov	r2, r7
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	4413      	add	r3, r2
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4619      	mov	r1, r3
 8000208:	f000 f91e 	bl	8000448 <writeSPI>
				delay(1000);
 800020c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000210:	f000 f8e4 	bl	80003dc <delay>
				toggleLED();
 8000214:	f000 f908 	bl	8000428 <toggleLED>
			for (int j = 0; j < sizeof(data); j++) {
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	3301      	adds	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d9e8      	bls.n	80001f6 <main+0x2a>
		for (int i = 0; i < sizeof(addr); i++) {
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	2b03      	cmp	r3, #3
 800022e:	d9df      	bls.n	80001f0 <main+0x24>
 8000230:	e7db      	b.n	80001ea <main+0x1e>
 8000232:	bf00      	nop
 8000234:	0e795925 	.word	0x0e795925
 8000238:	294905c5 	.word	0x294905c5

0800023c <initClocks>:
		}
	}
}

/* Function definitions ------------------------------------------------------*/
void initClocks(void) {
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= 0x00000003; // Enable AHB2 peripheral clock for GPIOA and GPIOB
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <initClocks+0x28>)
 8000242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <initClocks+0x28>)
 8000246:	f043 0303 	orr.w	r3, r3, #3
 800024a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB2ENR |= 0x00001800; // Enable APB2 peripheral clock for SPI1 and TIM1
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <initClocks+0x28>)
 800024e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <initClocks+0x28>)
 8000252:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000256:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000

08000268 <configGPIO>:

void configGPIO(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	// Resetting registers to be set later to ensure they are in a known state
	GPIOA->MODER &= (~(0x0000FC00));
 800026c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000276:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800027a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= (~(0x000000C3));
 800027c:	4b1e      	ldr	r3, [pc, #120]	; (80002f8 <configGPIO+0x90>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1d      	ldr	r2, [pc, #116]	; (80002f8 <configGPIO+0x90>)
 8000282:	f023 03c3 	bic.w	r3, r3, #195	; 0xc3
 8000286:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= (~(0xFFF00000));
 8000288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028c:	6a1b      	ldr	r3, [r3, #32]
 800028e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000296:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= (~(0x0000000F));
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <configGPIO+0x90>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a16      	ldr	r2, [pc, #88]	; (80002f8 <configGPIO+0x90>)
 800029e:	f023 030f 	bic.w	r3, r3, #15
 80002a2:	6213      	str	r3, [r2, #32]

	GPIOA->MODER |= 0x0000A800; // Set PA5-7 to alternate function mode
 80002a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ae:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00000042; // Set PB0 to alternate function mode, PB3 to general output mode
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <configGPIO+0x90>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <configGPIO+0x90>)
 80002ba:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80002be:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= (~(0x00000008)); // Set PB3 to push-pull mode
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <configGPIO+0x90>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <configGPIO+0x90>)
 80002c6:	f023 0308 	bic.w	r3, r3, #8
 80002ca:	6053      	str	r3, [r2, #4]

	GPIOA->AFR[0] |= 0x55500000; // Set PA5-7 to AF5 (SPI1)
 80002cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d0:	6a1b      	ldr	r3, [r3, #32]
 80002d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002da:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80002de:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= 0x00000005; // Set PB0 to AF5 (SPI1)
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <configGPIO+0x90>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <configGPIO+0x90>)
 80002e6:	f043 0305 	orr.w	r3, r3, #5
 80002ea:	6213      	str	r3, [r2, #32]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	48000400 	.word	0x48000400

080002fc <configSPI>:

void configSPI(void) {
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	//SPI1->CR1 &= (~(0x0040)); // Disable SPI
	SPI1->CR1 &= (~(0x0003)); // Resetting CPOL and CPHA
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <configSPI+0xac>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <configSPI+0xac>)
 8000306:	f023 0303 	bic.w	r3, r3, #3
 800030a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x8400)); // Set to full duplex mode
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <configSPI+0xac>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a25      	ldr	r2, [pc, #148]	; (80003a8 <configSPI+0xac>)
 8000312:	f423 4304 	bic.w	r3, r3, #33792	; 0x8400
 8000316:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x0080)); // Set to MSB first
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <configSPI+0xac>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <configSPI+0xac>)
 800031e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000322:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x0038)); // Reset baud rate register to known state
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <configSPI+0xac>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a1f      	ldr	r2, [pc, #124]	; (80003a8 <configSPI+0xac>)
 800032a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800032e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x2000)); // Disable CRC calculation
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <configSPI+0xac>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <configSPI+0xac>)
 8000336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800033a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x0200)); // Disable software slave management (hardware mode only)
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <configSPI+0xac>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a19      	ldr	r2, [pc, #100]	; (80003a8 <configSPI+0xac>)
 8000342:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000346:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0x0010; // Set clock frequency to fPCLK/8 (250kHz)
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <configSPI+0xac>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <configSPI+0xac>)
 800034e:	f043 0310 	orr.w	r3, r3, #16
 8000352:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0x0004; // Set to master configuration
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <configSPI+0xac>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <configSPI+0xac>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6013      	str	r3, [r2, #0]

	SPI1->CR2 &= (~(0x1000)); // RXNE event triggers when FIFO level equals 16 bits (performing 16-bit transactions w/ AFE)
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <configSPI+0xac>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <configSPI+0xac>)
 8000366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800036a:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= 0x0F00; // Set data length for SPI transfers to 16-bit
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <configSPI+0xac>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <configSPI+0xac>)
 8000372:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000376:	6053      	str	r3, [r2, #4]
	SPI1->CR2 &= (~(0x00F0)); // Mask interrupts & set frame format to Motorola mode
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <configSPI+0xac>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <configSPI+0xac>)
 800037e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000382:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= 0x0004; // Enable slave select output
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <configSPI+0xac>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <configSPI+0xac>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6053      	str	r3, [r2, #4]
	SPI1->CR2 &= (~(0x0003)); // Disable DMA requests
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <configSPI+0xac>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <configSPI+0xac>)
 8000396:	f023 0303 	bic.w	r3, r3, #3
 800039a:	6053      	str	r3, [r2, #4]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40013000 	.word	0x40013000

080003ac <configTIM1>:

void configTIM1(void) {
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	TIM1->PSC = 0x0027; // Set prescaler to 40, dividing 4MHz input frequency down to 1kHz
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <configTIM1+0x28>)
 80003b2:	2227      	movs	r2, #39	; 0x27
 80003b4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = (uint32_t)1000000; // Set auto-reload value to 1 million
 80003b6:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <configTIM1+0x28>)
 80003b8:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <configTIM1+0x2c>)
 80003ba:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CNT &= (~(0x0000FFFF)); // Set timer's initial count to 0
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <configTIM1+0x28>)
 80003be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <configTIM1+0x28>)
 80003c2:	0c1b      	lsrs	r3, r3, #16
 80003c4:	041b      	lsls	r3, r3, #16
 80003c6:	6253      	str	r3, [r2, #36]	; 0x24
//	TIM1->CR1 |= 0x0001; // Enable TIM1
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40012c00 	.word	0x40012c00
 80003d8:	000f4240 	.word	0x000f4240

080003dc <delay>:

void delay(uint16_t milliseconds) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	80fb      	strh	r3, [r7, #6]
//			counter += currCount - prevCount;
//		}
//		prevCount = currCount; // Previous count is assigned value of current count for next iteration
//	}

	TIM1->CNT &= (~(0x0000FFFF)); // Reset initial count value to 0
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <delay+0x48>)
 80003e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <delay+0x48>)
 80003ec:	0c1b      	lsrs	r3, r3, #16
 80003ee:	041b      	lsls	r3, r3, #16
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
	TIM1->CR1 |= 0x0001; // Enable the timer
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <delay+0x48>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <delay+0x48>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6013      	str	r3, [r2, #0]
	while (TIM1->CNT <= milliseconds) {} // Tight poll until timer count exceeds value in milliseconds
 80003fe:	bf00      	nop
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <delay+0x48>)
 8000402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000404:	88fb      	ldrh	r3, [r7, #6]
 8000406:	429a      	cmp	r2, r3
 8000408:	d9fa      	bls.n	8000400 <delay+0x24>
	TIM1->CR1 &= (~(0x0001)); // Disable the timer
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <delay+0x48>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a05      	ldr	r2, [pc, #20]	; (8000424 <delay+0x48>)
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	6013      	str	r3, [r2, #0]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40012c00 	.word	0x40012c00

08000428 <toggleLED>:

void toggleLED(void) {
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	GPIOB->ODR ^= (0x00000008); // Toggles PB3 (LED GPIO)
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <toggleLED+0x1c>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <toggleLED+0x1c>)
 8000432:	f083 0308 	eor.w	r3, r3, #8
 8000436:	6153      	str	r3, [r2, #20]
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	48000400 	.word	0x48000400

08000448 <writeSPI>:
	SPI1->CR1 &= (~(0x0040)); // Disable SPI, also pulls CS high

	return rx_data;
}

uint8_t writeSPI(uint8_t addr, uint8_t tx_data) {
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	460a      	mov	r2, r1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	4613      	mov	r3, r2
 8000456:	71bb      	strb	r3, [r7, #6]
	uint16_t rx_data = 0; // Variable for storing slave's response to write
 8000458:	2300      	movs	r3, #0
 800045a:	81fb      	strh	r3, [r7, #14]

	SPI1->CR1 |= 0x0040; // Enable SPI, also pulls CS low
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <writeSPI+0x80>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a19      	ldr	r2, [pc, #100]	; (80004c8 <writeSPI+0x80>)
 8000462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000466:	6013      	str	r3, [r2, #0]

	// Shift in address & tx_data into data frame
	SPI1->DR = (uint16_t)(addr << 8);
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	b29b      	uxth	r3, r3
 800046c:	021b      	lsls	r3, r3, #8
 800046e:	b29a      	uxth	r2, r3
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <writeSPI+0x80>)
 8000472:	60da      	str	r2, [r3, #12]
	SPI1->DR |= (uint16_t)(tx_data);
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <writeSPI+0x80>)
 8000476:	68da      	ldr	r2, [r3, #12]
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	4913      	ldr	r1, [pc, #76]	; (80004c8 <writeSPI+0x80>)
 800047c:	4313      	orrs	r3, r2
 800047e:	60cb      	str	r3, [r1, #12]
	SPI1->DR &= (~(0x8000)); // Set the R/W bit low to indicate a write
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <writeSPI+0x80>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <writeSPI+0x80>)
 8000486:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800048a:	60d3      	str	r3, [r2, #12]
	// Tight poll until SPI not busy and TX buffer is empty
	while ( ((SPI1->SR) & 0x0080) || (!((SPI1->SR) & 0x0002)) ) {}
 800048c:	bf00      	nop
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <writeSPI+0x80>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1f9      	bne.n	800048e <writeSPI+0x46>
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <writeSPI+0x80>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f003 0302 	and.w	r3, r3, #2
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d0f3      	beq.n	800048e <writeSPI+0x46>
//	while ( ((SPI1->SR) & 0x0080) ) {}

	rx_data = SPI1->DR; // Store slave's response to write
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <writeSPI+0x80>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	81fb      	strh	r3, [r7, #14]

	SPI1->CR1 &= (~(0x0040)); // Disable SPI, also pulls CS high
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <writeSPI+0x80>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <writeSPI+0x80>)
 80004b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004b6:	6013      	str	r3, [r2, #0]

	return rx_data;
 80004b8:	89fb      	ldrh	r3, [r7, #14]
 80004ba:	b2db      	uxtb	r3, r3
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	40013000 	.word	0x40013000

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <MemManage_Handler+0x4>

080004de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000518:	f000 f83e 	bl	8000598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <SystemInit+0x20>)
 8000526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800052a:	4a05      	ldr	r2, [pc, #20]	; (8000540 <SystemInit+0x20>)
 800052c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800057c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000548:	f7ff ffea 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054e:	490d      	ldr	r1, [pc, #52]	; (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000550:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <LoopForever+0xe>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000564:	4c0a      	ldr	r4, [pc, #40]	; (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000572:	f000 f825 	bl	80005c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000576:	f7ff fe29 	bl	80001cc <main>

0800057a <LoopForever>:

LoopForever:
    b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800057c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000588:	08000628 	.word	0x08000628
  ldr r2, =_sbss
 800058c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000590:	20000024 	.word	0x20000024

08000594 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC1_2_IRQHandler>
	...

08000598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x20>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x24>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_IncTick+0x24>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000020 	.word	0x20000020

080005c0 <__libc_init_array>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	4d0d      	ldr	r5, [pc, #52]	; (80005f8 <__libc_init_array+0x38>)
 80005c4:	4c0d      	ldr	r4, [pc, #52]	; (80005fc <__libc_init_array+0x3c>)
 80005c6:	1b64      	subs	r4, r4, r5
 80005c8:	10a4      	asrs	r4, r4, #2
 80005ca:	2600      	movs	r6, #0
 80005cc:	42a6      	cmp	r6, r4
 80005ce:	d109      	bne.n	80005e4 <__libc_init_array+0x24>
 80005d0:	4d0b      	ldr	r5, [pc, #44]	; (8000600 <__libc_init_array+0x40>)
 80005d2:	4c0c      	ldr	r4, [pc, #48]	; (8000604 <__libc_init_array+0x44>)
 80005d4:	f000 f818 	bl	8000608 <_init>
 80005d8:	1b64      	subs	r4, r4, r5
 80005da:	10a4      	asrs	r4, r4, #2
 80005dc:	2600      	movs	r6, #0
 80005de:	42a6      	cmp	r6, r4
 80005e0:	d105      	bne.n	80005ee <__libc_init_array+0x2e>
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e8:	4798      	blx	r3
 80005ea:	3601      	adds	r6, #1
 80005ec:	e7ee      	b.n	80005cc <__libc_init_array+0xc>
 80005ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f2:	4798      	blx	r3
 80005f4:	3601      	adds	r6, #1
 80005f6:	e7f2      	b.n	80005de <__libc_init_array+0x1e>
 80005f8:	08000620 	.word	0x08000620
 80005fc:	08000620 	.word	0x08000620
 8000600:	08000620 	.word	0x08000620
 8000604:	08000624 	.word	0x08000624

08000608 <_init>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	bf00      	nop
 800060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060e:	bc08      	pop	{r3}
 8000610:	469e      	mov	lr, r3
 8000612:	4770      	bx	lr

08000614 <_fini>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	bf00      	nop
 8000618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061a:	bc08      	pop	{r3}
 800061c:	469e      	mov	lr, r3
 800061e:	4770      	bx	lr
