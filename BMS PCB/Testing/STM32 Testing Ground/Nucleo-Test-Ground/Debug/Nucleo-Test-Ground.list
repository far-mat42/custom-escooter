
Nucleo-Test-Ground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000284c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a20  08002a20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a28  08002a28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a28  08002a28  00012a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a2c  08002a2c  00012a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002a3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002a3c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a47e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ee  00000000  00000000  0002a4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  0002bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006dd  00000000  00000000  0002c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001881c  00000000  00000000  0002cdcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8fc  00000000  00000000  000455e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009acd6  00000000  00000000  0004fee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002390  00000000  00000000  000eabbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ecf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080029c0 	.word	0x080029c0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080029c0 	.word	0x080029c0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f9db 	bl	8000886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f810 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f894 	bl	8000600 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f862 	bl	80005a0 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80004dc:	2120      	movs	r1, #32
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <main+0x28>)
 80004e0:	f000 fcda 	bl	8000e98 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e8:	f000 fa42 	bl	8000970 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80004ec:	e7f6      	b.n	80004dc <main+0x14>
 80004ee:	bf00      	nop
 80004f0:	48000400 	.word	0x48000400

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b096      	sub	sp, #88	; 0x58
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2244      	movs	r2, #68	; 0x44
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 fa2f 	bl	8002966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	463b      	mov	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000516:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051a:	f000 fcf5 	bl	8000f08 <HAL_PWREx_ControlVoltageScaling>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000524:	f000 f8b6 	bl	8000694 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000528:	f000 fcd0 	bl	8000ecc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <SystemClock_Config+0xa8>)
 800052e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000532:	4a1a      	ldr	r2, [pc, #104]	; (800059c <SystemClock_Config+0xa8>)
 8000534:	f023 0318 	bic.w	r3, r3, #24
 8000538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800053c:	2314      	movs	r3, #20
 800053e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000550:	2300      	movs	r3, #0
 8000552:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fd2b 	bl	8000fb4 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000564:	f000 f896 	bl	8000694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	2101      	movs	r1, #1
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f979 	bl	8001878 <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800058c:	f000 f882 	bl	8000694 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000590:	f001 fd1c 	bl	8001fcc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000594:	bf00      	nop
 8000596:	3758      	adds	r7, #88	; 0x58
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000

080005a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <MX_USART2_UART_Init+0x5c>)
 80005a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005e4:	f001 fd02 	bl	8001fec <HAL_UART_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ee:	f000 f851 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028
 80005fc:	40004400 	.word	0x40004400

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_GPIO_Init+0x8c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a1c      	ldr	r2, [pc, #112]	; (800068c <MX_GPIO_Init+0x8c>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_GPIO_Init+0x8c>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_GPIO_Init+0x8c>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a16      	ldr	r2, [pc, #88]	; (800068c <MX_GPIO_Init+0x8c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_GPIO_Init+0x8c>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_GPIO_Init+0x8c>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_GPIO_Init+0x8c>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_GPIO_Init+0x8c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <MX_GPIO_Init+0x90>)
 8000664:	f000 fc00 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
//  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000668:	2320      	movs	r3, #32
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
//  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0x90>)
 8000680:	f000 fa80 	bl	8000b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	48000400 	.word	0x48000400

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x44>)
 80006a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_MspInit+0x44>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6613      	str	r3, [r2, #96]	; 0x60
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x44>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x44>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x44>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x44>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b096      	sub	sp, #88	; 0x58
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2234      	movs	r2, #52	; 0x34
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f92c 	bl	8002966 <memset>
  if(huart->Instance==USART2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a28      	ldr	r2, [pc, #160]	; (80007b4 <HAL_UART_MspInit+0xcc>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d148      	bne.n	80007aa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4618      	mov	r0, r3
 8000726:	f001 facb 	bl	8001cc0 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000730:	f7ff ffb0 	bl	8000694 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <HAL_UART_MspInit+0xd0>)
 8000736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000738:	4a1f      	ldr	r2, [pc, #124]	; (80007b8 <HAL_UART_MspInit+0xd0>)
 800073a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073e:	6593      	str	r3, [r2, #88]	; 0x58
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_UART_MspInit+0xd0>)
 8000742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_UART_MspInit+0xd0>)
 800074e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_UART_MspInit+0xd0>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_UART_MspInit+0xd0>)
 800075a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000764:	2304      	movs	r3, #4
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000774:	2307      	movs	r3, #7
 8000776:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800077c:	4619      	mov	r1, r3
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f000 f9ff 	bl	8000b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000798:	2303      	movs	r3, #3
 800079a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007a0:	4619      	mov	r1, r3
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f000 f9ed 	bl	8000b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007aa:	bf00      	nop
 80007ac:	3758      	adds	r7, #88	; 0x58
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f892 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800086c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000838:	f7ff ffea 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f002 f889 	bl	8002978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000866:	f7ff fe2f 	bl	80004c8 <main>

0800086a <LoopForever>:

LoopForever:
    b LoopForever
 800086a:	e7fe      	b.n	800086a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800086c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	08002a30 	.word	0x08002a30
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	200000b4 	.word	0x200000b4

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>

08000886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800088c:	2300      	movs	r3, #0
 800088e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f943 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f80e 	bl	80008b8 <HAL_InitTick>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	e001      	b.n	80008ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008a8:	f7ff fefa 	bl	80006a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_InitTick+0x6c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d023      	beq.n	8000914 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <HAL_InitTick+0x70>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_InitTick+0x6c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f941 	bl	8000b6a <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10f      	bne.n	800090e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d809      	bhi.n	8000908 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f919 	bl	8000b32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_InitTick+0x74>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e007      	b.n	8000918 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e004      	b.n	8000918 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e001      	b.n	8000918 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	20000000 	.word	0x20000000
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	200000b0 	.word	0x200000b0

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200000b0 	.word	0x200000b0

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff ffee 	bl	8000958 <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_Delay+0x44>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffde 	bl	8000958 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff8e 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff47 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b44:	f7ff ff5c 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f7ff ff8e 	bl	8000a70 <NVIC_EncodePriority>
 8000b54:	4602      	mov	r2, r0
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5d 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffb0 	bl	8000ad8 <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b92:	e14e      	b.n	8000e32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8140 	beq.w	8000e2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d005      	beq.n	8000bc4 <HAL_GPIO_Init+0x40>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d130      	bne.n	8000c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 0201 	and.w	r2, r3, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d017      	beq.n	8000c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d123      	bne.n	8000cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3208      	adds	r2, #8
 8000c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	6939      	ldr	r1, [r7, #16]
 8000cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0203 	and.w	r2, r3, #3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 809a 	beq.w	8000e2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf8:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfc:	4a54      	ldr	r2, [pc, #336]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6613      	str	r3, [r2, #96]	; 0x60
 8000d04:	4b52      	ldr	r3, [pc, #328]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d10:	4a50      	ldr	r2, [pc, #320]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	3302      	adds	r3, #2
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d3a:	d013      	beq.n	8000d64 <HAL_GPIO_Init+0x1e0>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a46      	ldr	r2, [pc, #280]	; (8000e58 <HAL_GPIO_Init+0x2d4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d00d      	beq.n	8000d60 <HAL_GPIO_Init+0x1dc>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <HAL_GPIO_Init+0x2d8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d007      	beq.n	8000d5c <HAL_GPIO_Init+0x1d8>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a44      	ldr	r2, [pc, #272]	; (8000e60 <HAL_GPIO_Init+0x2dc>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d101      	bne.n	8000d58 <HAL_GPIO_Init+0x1d4>
 8000d54:	2303      	movs	r3, #3
 8000d56:	e006      	b.n	8000d66 <HAL_GPIO_Init+0x1e2>
 8000d58:	2307      	movs	r3, #7
 8000d5a:	e004      	b.n	8000d66 <HAL_GPIO_Init+0x1e2>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e002      	b.n	8000d66 <HAL_GPIO_Init+0x1e2>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <HAL_GPIO_Init+0x1e2>
 8000d64:	2300      	movs	r3, #0
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	f002 0203 	and.w	r2, r2, #3
 8000d6c:	0092      	lsls	r2, r2, #2
 8000d6e:	4093      	lsls	r3, r2
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d76:	4937      	ldr	r1, [pc, #220]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d84:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000da8:	4a2e      	ldr	r2, [pc, #184]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dd2:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_GPIO_Init+0x2e0>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f47f aea9 	bne.w	8000b94 <HAL_GPIO_Init+0x10>
  }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	48000800 	.word	0x48000800
 8000e60:	48000c00 	.word	0x48000c00
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43d9      	mvns	r1, r3
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	400b      	ands	r3, r1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40007000 	.word	0x40007000

08000eec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40007000 	.word	0x40007000

08000f08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f16:	d130      	bne.n	8000f7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f24:	d038      	beq.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2232      	movs	r2, #50	; 0x32
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9b      	lsrs	r3, r3, #18
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f4c:	e002      	b.n	8000f54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f60:	d102      	bne.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f2      	bne.n	8000f4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f74:	d110      	bne.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e00f      	b.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f86:	d007      	beq.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40007000 	.word	0x40007000
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	431bde83 	.word	0x431bde83

08000fb4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f000 bc4f 	b.w	8001866 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fc8:	4b97      	ldr	r3, [pc, #604]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd2:	4b95      	ldr	r3, [pc, #596]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80e6 	beq.w	80011b6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d007      	beq.n	8001000 <HAL_RCC_OscConfig+0x4c>
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	2b0c      	cmp	r3, #12
 8000ff4:	f040 808d 	bne.w	8001112 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	f040 8089 	bne.w	8001112 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001000:	4b89      	ldr	r3, [pc, #548]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_RCC_OscConfig+0x66>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	f000 bc26 	b.w	8001866 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800101e:	4b82      	ldr	r3, [pc, #520]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <HAL_RCC_OscConfig+0x80>
 800102a:	4b7f      	ldr	r3, [pc, #508]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001032:	e005      	b.n	8001040 <HAL_RCC_OscConfig+0x8c>
 8001034:	4b7c      	ldr	r3, [pc, #496]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001040:	4293      	cmp	r3, r2
 8001042:	d224      	bcs.n	800108e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fdd9 	bl	8001c00 <RCC_SetFlashLatencyFromMSIRange>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	f000 bc06 	b.w	8001866 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800105a:	4b73      	ldr	r3, [pc, #460]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a72      	ldr	r2, [pc, #456]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b70      	ldr	r3, [pc, #448]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	496d      	ldr	r1, [pc, #436]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	4968      	ldr	r1, [pc, #416]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
 800108c:	e025      	b.n	80010da <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800108e:	4b66      	ldr	r3, [pc, #408]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a65      	ldr	r2, [pc, #404]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b63      	ldr	r3, [pc, #396]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	4960      	ldr	r1, [pc, #384]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ac:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	495b      	ldr	r1, [pc, #364]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd98 	bl	8001c00 <RCC_SetFlashLatencyFromMSIRange>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e3c5      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010da:	f000 fccd 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 80010de:	4602      	mov	r2, r0
 80010e0:	4b51      	ldr	r3, [pc, #324]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	4950      	ldr	r1, [pc, #320]	; (800122c <HAL_RCC_OscConfig+0x278>)
 80010ec:	5ccb      	ldrb	r3, [r1, r3]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	fa22 f303 	lsr.w	r3, r2, r3
 80010f6:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <HAL_RCC_OscConfig+0x27c>)
 80010f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010fa:	4b4e      	ldr	r3, [pc, #312]	; (8001234 <HAL_RCC_OscConfig+0x280>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fbda 	bl	80008b8 <HAL_InitTick>
 8001104:	4603      	mov	r3, r0
 8001106:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d052      	beq.n	80011b4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	e3a9      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d032      	beq.n	8001180 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a42      	ldr	r2, [pc, #264]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001126:	f7ff fc17 	bl	8000958 <HAL_GetTick>
 800112a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800112e:	f7ff fc13 	bl	8000958 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e392      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a35      	ldr	r2, [pc, #212]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	4930      	ldr	r1, [pc, #192]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116a:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	492b      	ldr	r1, [pc, #172]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800117a:	4313      	orrs	r3, r2
 800117c:	604b      	str	r3, [r1, #4]
 800117e:	e01a      	b.n	80011b6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a28      	ldr	r2, [pc, #160]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800118c:	f7ff fbe4 	bl	8000958 <HAL_GetTick>
 8001190:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001194:	f7ff fbe0 	bl	8000958 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e35f      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x1e0>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d073      	beq.n	80012aa <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_OscConfig+0x220>
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	d10e      	bne.n	80011ec <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d10b      	bne.n	80011ec <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d063      	beq.n	80012a8 <HAL_RCC_OscConfig+0x2f4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d15f      	bne.n	80012a8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e33c      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f4:	d106      	bne.n	8001204 <HAL_RCC_OscConfig+0x250>
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e025      	b.n	8001250 <HAL_RCC_OscConfig+0x29c>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800120c:	d114      	bne.n	8001238 <HAL_RCC_OscConfig+0x284>
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a02      	ldr	r2, [pc, #8]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e013      	b.n	8001250 <HAL_RCC_OscConfig+0x29c>
 8001228:	40021000 	.word	0x40021000
 800122c:	080029d8 	.word	0x080029d8
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004
 8001238:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a8e      	ldr	r2, [pc, #568]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b8c      	ldr	r3, [pc, #560]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a8b      	ldr	r2, [pc, #556]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fb7e 	bl	8000958 <HAL_GetTick>
 800125c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fb7a 	bl	8000958 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e2f9      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001272:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x2ac>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fb6a 	bl	8000958 <HAL_GetTick>
 8001284:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fb66 	bl	8000958 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e2e5      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800129a:	4b77      	ldr	r3, [pc, #476]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x2d4>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d060      	beq.n	8001378 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_OscConfig+0x314>
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	d119      	bne.n	80012f6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d116      	bne.n	80012f6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c8:	4b6b      	ldr	r3, [pc, #428]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_OscConfig+0x32c>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e2c2      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	4962      	ldr	r1, [pc, #392]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f4:	e040      	b.n	8001378 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d023      	beq.n	8001346 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fe:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a5d      	ldr	r2, [pc, #372]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fb25 	bl	8000958 <HAL_GetTick>
 800130e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fb21 	bl	8000958 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e2a0      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001324:	4b54      	ldr	r3, [pc, #336]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	494e      	ldr	r1, [pc, #312]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
 8001344:	e018      	b.n	8001378 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fb01 	bl	8000958 <HAL_GetTick>
 8001356:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fafd 	bl	8000958 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e27c      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800136c:	4b42      	ldr	r3, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 8082 	beq.w	800148a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d05f      	beq.n	800144e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001394:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d037      	beq.n	8001414 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e254      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01b      	beq.n	80013fe <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013cc:	4a2a      	ldr	r2, [pc, #168]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013d6:	f7ff fabf 	bl	8000958 <HAL_GetTick>
 80013da:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fabb 	bl	8000958 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b11      	cmp	r3, #17
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e23a      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ef      	bne.n	80013de <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001404:	f023 0210 	bic.w	r2, r3, #16
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	491a      	ldr	r1, [pc, #104]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	4313      	orrs	r3, r2
 8001410:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff fa98 	bl	8000958 <HAL_GetTick>
 8001428:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fa94 	bl	8000958 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b11      	cmp	r3, #17
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e213      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ef      	beq.n	800142c <HAL_RCC_OscConfig+0x478>
 800144c:	e01d      	b.n	800148a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001454:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff fa7b 	bl	8000958 <HAL_GetTick>
 8001462:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fa77 	bl	8000958 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b11      	cmp	r3, #17
 8001472:	d903      	bls.n	800147c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1f6      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
 8001478:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800147c:	4ba9      	ldr	r3, [pc, #676]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 800147e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ed      	bne.n	8001466 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80bd 	beq.w	8001612 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800149e:	4ba1      	ldr	r3, [pc, #644]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10e      	bne.n	80014c8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b9e      	ldr	r3, [pc, #632]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	4a9d      	ldr	r2, [pc, #628]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
 80014b6:	4b9b      	ldr	r3, [pc, #620]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c8:	4b97      	ldr	r3, [pc, #604]	; (8001728 <HAL_RCC_OscConfig+0x774>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d118      	bne.n	8001506 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d4:	4b94      	ldr	r3, [pc, #592]	; (8001728 <HAL_RCC_OscConfig+0x774>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a93      	ldr	r2, [pc, #588]	; (8001728 <HAL_RCC_OscConfig+0x774>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e0:	f7ff fa3a 	bl	8000958 <HAL_GetTick>
 80014e4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e8:	f7ff fa36 	bl	8000958 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e1b5      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fa:	4b8b      	ldr	r3, [pc, #556]	; (8001728 <HAL_RCC_OscConfig+0x774>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d02c      	beq.n	800156c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001512:	4b84      	ldr	r3, [pc, #528]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001518:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001524:	497f      	ldr	r1, [pc, #508]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001526:	4313      	orrs	r3, r2
 8001528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d010      	beq.n	800155a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001538:	4b7a      	ldr	r3, [pc, #488]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	4a79      	ldr	r2, [pc, #484]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001548:	4b76      	ldr	r3, [pc, #472]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 800154a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154e:	4a75      	ldr	r2, [pc, #468]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001558:	e018      	b.n	800158c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800155a:	4b72      	ldr	r3, [pc, #456]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001560:	4a70      	ldr	r2, [pc, #448]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800156a:	e00f      	b.n	800158c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800156c:	4b6d      	ldr	r3, [pc, #436]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 800156e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001572:	4a6c      	ldr	r2, [pc, #432]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800157c:	4b69      	ldr	r3, [pc, #420]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001582:	4a68      	ldr	r2, [pc, #416]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001584:	f023 0304 	bic.w	r3, r3, #4
 8001588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d016      	beq.n	80015c2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff f9e0 	bl	8000958 <HAL_GetTick>
 8001598:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff f9dc 	bl	8000958 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e159      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015b2:	4b5c      	ldr	r3, [pc, #368]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 80015b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0ed      	beq.n	800159c <HAL_RCC_OscConfig+0x5e8>
 80015c0:	e01d      	b.n	80015fe <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c2:	f7ff f9c9 	bl	8000958 <HAL_GetTick>
 80015c6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c8:	e00a      	b.n	80015e0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff f9c5 	bl	8000958 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d8:	4293      	cmp	r3, r2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e142      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015e0:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1ed      	bne.n	80015ca <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 80015f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f4:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 80015f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001602:	2b01      	cmp	r3, #1
 8001604:	d105      	bne.n	8001612 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	4a46      	ldr	r2, [pc, #280]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 800160c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001610:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b00      	cmp	r3, #0
 800161c:	d03c      	beq.n	8001698 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01c      	beq.n	8001660 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001626:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800162c:	4a3d      	ldr	r2, [pc, #244]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001636:	f7ff f98f 	bl	8000958 <HAL_GetTick>
 800163a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800163e:	f7ff f98b 	bl	8000958 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e10a      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001652:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0ef      	beq.n	800163e <HAL_RCC_OscConfig+0x68a>
 800165e:	e01b      	b.n	8001698 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001666:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff f972 	bl	8000958 <HAL_GetTick>
 8001674:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001678:	f7ff f96e 	bl	8000958 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0ed      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 800168c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ef      	bne.n	8001678 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80e1 	beq.w	8001864 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	f040 80b5 	bne.w	8001816 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0203 	and.w	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	429a      	cmp	r2, r3
 80016be:	d124      	bne.n	800170a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ca:	3b01      	subs	r3, #1
 80016cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d11b      	bne.n	800170a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d113      	bne.n	800170a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d109      	bne.n	800170a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	3b01      	subs	r3, #1
 8001704:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d05f      	beq.n	80017ca <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d05a      	beq.n	80017c6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_RCC_OscConfig+0x770>)
 8001716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800171a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800171c:	f7ff f91c 	bl	8000958 <HAL_GetTick>
 8001720:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001722:	e00c      	b.n	800173e <HAL_RCC_OscConfig+0x78a>
 8001724:	40021000 	.word	0x40021000
 8001728:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff f914 	bl	8000958 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e093      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173e:	4b4c      	ldr	r3, [pc, #304]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800174a:	4b49      	ldr	r3, [pc, #292]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <HAL_RCC_OscConfig+0x8c0>)
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800175a:	3a01      	subs	r2, #1
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	4311      	orrs	r1, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001764:	0212      	lsls	r2, r2, #8
 8001766:	4311      	orrs	r1, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800176c:	0852      	lsrs	r2, r2, #1
 800176e:	3a01      	subs	r2, #1
 8001770:	0552      	lsls	r2, r2, #21
 8001772:	4311      	orrs	r1, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001778:	0852      	lsrs	r2, r2, #1
 800177a:	3a01      	subs	r2, #1
 800177c:	0652      	lsls	r2, r2, #25
 800177e:	430a      	orrs	r2, r1
 8001780:	493b      	ldr	r1, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001786:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a39      	ldr	r2, [pc, #228]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 800178c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001790:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	4a36      	ldr	r2, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 8001798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800179c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800179e:	f7ff f8db 	bl	8000958 <HAL_GetTick>
 80017a2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff f8d7 	bl	8000958 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e056      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017c4:	e04e      	b.n	8001864 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e04d      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d146      	bne.n	8001864 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a25      	ldr	r2, [pc, #148]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 80017dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4a22      	ldr	r2, [pc, #136]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 80017e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ec:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017ee:	f7ff f8b3 	bl	8000958 <HAL_GetTick>
 80017f2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff f8af 	bl	8000958 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e02e      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x842>
 8001814:	e026      	b.n	8001864 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d021      	beq.n	8001860 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a13      	ldr	r2, [pc, #76]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 8001822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff f896 	bl	8000958 <HAL_GetTick>
 800182c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f892 	bl	8000958 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e011      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_RCC_OscConfig+0x8bc>)
 8001854:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001858:	f023 0303 	bic.w	r3, r3, #3
 800185c:	60d3      	str	r3, [r2, #12]
 800185e:	e001      	b.n	8001864 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3728      	adds	r7, #40	; 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	f99f808c 	.word	0xf99f808c

08001878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0e7      	b.n	8001a5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800188c:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <HAL_RCC_ClockConfig+0x1ec>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d910      	bls.n	80018bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_RCC_ClockConfig+0x1ec>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0207 	bic.w	r2, r3, #7
 80018a2:	4970      	ldr	r1, [pc, #448]	; (8001a64 <HAL_RCC_ClockConfig+0x1ec>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b6e      	ldr	r3, [pc, #440]	; (8001a64 <HAL_RCC_ClockConfig+0x1ec>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0cf      	b.n	8001a5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d010      	beq.n	80018ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	4b66      	ldr	r3, [pc, #408]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d908      	bls.n	80018ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b63      	ldr	r3, [pc, #396]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4960      	ldr	r1, [pc, #384]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d04c      	beq.n	8001990 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fe:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d121      	bne.n	800194e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0a6      	b.n	8001a5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d115      	bne.n	800194e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e09a      	b.n	8001a5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800192e:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e08e      	b.n	8001a5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e086      	b.n	8001a5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4943      	ldr	r1, [pc, #268]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001960:	f7fe fffa 	bl	8000958 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7fe fff6 	bl	8000958 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e06e      	b.n	8001a5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d010      	beq.n	80019be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d208      	bcs.n	80019be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	492b      	ldr	r1, [pc, #172]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_RCC_ClockConfig+0x1ec>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d210      	bcs.n	80019ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_ClockConfig+0x1ec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 0207 	bic.w	r2, r3, #7
 80019d4:	4923      	ldr	r1, [pc, #140]	; (8001a64 <HAL_RCC_ClockConfig+0x1ec>)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_RCC_ClockConfig+0x1ec>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e036      	b.n	8001a5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	4918      	ldr	r1, [pc, #96]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d009      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4910      	ldr	r1, [pc, #64]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a2c:	f000 f824 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	490b      	ldr	r1, [pc, #44]	; (8001a6c <HAL_RCC_ClockConfig+0x1f4>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
 8001a48:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1f8>)
 8001a4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1fc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe ff31 	bl	80008b8 <HAL_InitTick>
 8001a56:	4603      	mov	r3, r0
 8001a58:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40022000 	.word	0x40022000
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	080029d8 	.word	0x080029d8
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a86:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a90:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x34>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d121      	bne.n	8001aea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d11e      	bne.n	8001aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e005      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ad4:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d102      	bne.n	8001af6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	e004      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001afe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d134      	bne.n	8001b70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d003      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0xac>
 8001b1c:	e005      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b20:	617b      	str	r3, [r7, #20]
      break;
 8001b22:	e005      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b26:	617b      	str	r3, [r7, #20]
      break;
 8001b28:	e002      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	617b      	str	r3, [r7, #20]
      break;
 8001b2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	fb03 f202 	mul.w	r2, r3, r2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	0e5b      	lsrs	r3, r3, #25
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	3301      	adds	r3, #1
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b70:	69bb      	ldr	r3, [r7, #24]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	080029f0 	.word	0x080029f0
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	080029e8 	.word	0x080029e8

08001bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bd8:	f7ff ffda 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0adb      	lsrs	r3, r3, #11
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4904      	ldr	r1, [pc, #16]	; (8001bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	080029e8 	.word	0x080029e8

08001c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c18:	f7ff f968 	bl	8000eec <HAL_PWREx_GetVoltageRange>
 8001c1c:	6178      	str	r0, [r7, #20]
 8001c1e:	e014      	b.n	8001c4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c38:	f7ff f958 	bl	8000eec <HAL_PWREx_GetVoltageRange>
 8001c3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c50:	d10b      	bne.n	8001c6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b80      	cmp	r3, #128	; 0x80
 8001c56:	d919      	bls.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c5c:	d902      	bls.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c5e:	2302      	movs	r3, #2
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	e013      	b.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c64:	2301      	movs	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	e010      	b.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b80      	cmp	r3, #128	; 0x80
 8001c6e:	d902      	bls.n	8001c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c70:	2303      	movs	r3, #3
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	e00a      	b.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b80      	cmp	r3, #128	; 0x80
 8001c7a:	d102      	bne.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	e004      	b.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b70      	cmp	r3, #112	; 0x70
 8001c86:	d101      	bne.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 0207 	bic.w	r2, r3, #7
 8001c94:	4909      	ldr	r1, [pc, #36]	; (8001cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cc8:	2300      	movs	r3, #0
 8001cca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ccc:	2300      	movs	r3, #0
 8001cce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 809e 	beq.w	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ce2:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00d      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d02:	6593      	str	r3, [r2, #88]	; 0x58
 8001d04:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d10:	2301      	movs	r3, #1
 8001d12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d14:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a39      	ldr	r2, [pc, #228]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d20:	f7fe fe1a 	bl	8000958 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d26:	e009      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d28:	f7fe fe16 	bl	8000958 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d902      	bls.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	74fb      	strb	r3, [r7, #19]
        break;
 8001d3a:	e005      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d3c:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ef      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001d48:	7cfb      	ldrb	r3, [r7, #19]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d15a      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01e      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d019      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7c:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d96:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d016      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7fe fdd6 	bl	8000958 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7fe fdd2 	bl	8000958 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d902      	bls.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	74fb      	strb	r3, [r7, #19]
            break;
 8001dc6:	e006      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ec      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4904      	ldr	r1, [pc, #16]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001df2:	e009      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	74bb      	strb	r3, [r7, #18]
 8001df8:	e006      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
 8001e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e08:	7c7b      	ldrb	r3, [r7, #17]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	4a6d      	ldr	r2, [pc, #436]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e26:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	f023 0203 	bic.w	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4964      	ldr	r1, [pc, #400]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e48:	4b5f      	ldr	r3, [pc, #380]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	f023 020c 	bic.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	495c      	ldr	r1, [pc, #368]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e6a:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4953      	ldr	r1, [pc, #332]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e8c:	4b4e      	ldr	r3, [pc, #312]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	494b      	ldr	r1, [pc, #300]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eae:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4942      	ldr	r1, [pc, #264]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	493a      	ldr	r1, [pc, #232]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef2:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	4931      	ldr	r1, [pc, #196]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f14:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	4929      	ldr	r1, [pc, #164]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	4920      	ldr	r1, [pc, #128]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d015      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	4918      	ldr	r1, [pc, #96]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f76:	d105      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f82:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	490a      	ldr	r1, [pc, #40]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fae:	d105      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e040      	b.n	8002080 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fb6a 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	; 0x24
 8002018:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa82 	bl	800253c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f825 	bl	8002088 <UART_SetConfig>
 800203e:	4603      	mov	r3, r0
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e01b      	b.n	8002080 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fb01 	bl	8002680 <UART_CheckIdleState>
 800207e:	4603      	mov	r3, r0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800208c:	b08a      	sub	sp, #40	; 0x28
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b9e      	ldr	r3, [pc, #632]	; (8002330 <UART_SetConfig+0x2a8>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c0:	430b      	orrs	r3, r1
 80020c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a93      	ldr	r2, [pc, #588]	; (8002334 <UART_SetConfig+0x2ac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d004      	beq.n	80020f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f0:	4313      	orrs	r3, r2
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a8a      	ldr	r2, [pc, #552]	; (8002338 <UART_SetConfig+0x2b0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d126      	bne.n	8002160 <UART_SetConfig+0xd8>
 8002112:	4b8a      	ldr	r3, [pc, #552]	; (800233c <UART_SetConfig+0x2b4>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b03      	cmp	r3, #3
 800211e:	d81b      	bhi.n	8002158 <UART_SetConfig+0xd0>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <UART_SetConfig+0xa0>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	08002139 	.word	0x08002139
 800212c:	08002149 	.word	0x08002149
 8002130:	08002141 	.word	0x08002141
 8002134:	08002151 	.word	0x08002151
 8002138:	2301      	movs	r3, #1
 800213a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800213e:	e0ab      	b.n	8002298 <UART_SetConfig+0x210>
 8002140:	2302      	movs	r3, #2
 8002142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002146:	e0a7      	b.n	8002298 <UART_SetConfig+0x210>
 8002148:	2304      	movs	r3, #4
 800214a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800214e:	e0a3      	b.n	8002298 <UART_SetConfig+0x210>
 8002150:	2308      	movs	r3, #8
 8002152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002156:	e09f      	b.n	8002298 <UART_SetConfig+0x210>
 8002158:	2310      	movs	r3, #16
 800215a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800215e:	e09b      	b.n	8002298 <UART_SetConfig+0x210>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a76      	ldr	r2, [pc, #472]	; (8002340 <UART_SetConfig+0x2b8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d138      	bne.n	80021dc <UART_SetConfig+0x154>
 800216a:	4b74      	ldr	r3, [pc, #464]	; (800233c <UART_SetConfig+0x2b4>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d82d      	bhi.n	80021d4 <UART_SetConfig+0x14c>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <UART_SetConfig+0xf8>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	080021b5 	.word	0x080021b5
 8002184:	080021d5 	.word	0x080021d5
 8002188:	080021d5 	.word	0x080021d5
 800218c:	080021d5 	.word	0x080021d5
 8002190:	080021c5 	.word	0x080021c5
 8002194:	080021d5 	.word	0x080021d5
 8002198:	080021d5 	.word	0x080021d5
 800219c:	080021d5 	.word	0x080021d5
 80021a0:	080021bd 	.word	0x080021bd
 80021a4:	080021d5 	.word	0x080021d5
 80021a8:	080021d5 	.word	0x080021d5
 80021ac:	080021d5 	.word	0x080021d5
 80021b0:	080021cd 	.word	0x080021cd
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021ba:	e06d      	b.n	8002298 <UART_SetConfig+0x210>
 80021bc:	2302      	movs	r3, #2
 80021be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021c2:	e069      	b.n	8002298 <UART_SetConfig+0x210>
 80021c4:	2304      	movs	r3, #4
 80021c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021ca:	e065      	b.n	8002298 <UART_SetConfig+0x210>
 80021cc:	2308      	movs	r3, #8
 80021ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021d2:	e061      	b.n	8002298 <UART_SetConfig+0x210>
 80021d4:	2310      	movs	r3, #16
 80021d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021da:	e05d      	b.n	8002298 <UART_SetConfig+0x210>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a58      	ldr	r2, [pc, #352]	; (8002344 <UART_SetConfig+0x2bc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d125      	bne.n	8002232 <UART_SetConfig+0x1aa>
 80021e6:	4b55      	ldr	r3, [pc, #340]	; (800233c <UART_SetConfig+0x2b4>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80021f0:	2b30      	cmp	r3, #48	; 0x30
 80021f2:	d016      	beq.n	8002222 <UART_SetConfig+0x19a>
 80021f4:	2b30      	cmp	r3, #48	; 0x30
 80021f6:	d818      	bhi.n	800222a <UART_SetConfig+0x1a2>
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d00a      	beq.n	8002212 <UART_SetConfig+0x18a>
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d814      	bhi.n	800222a <UART_SetConfig+0x1a2>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <UART_SetConfig+0x182>
 8002204:	2b10      	cmp	r3, #16
 8002206:	d008      	beq.n	800221a <UART_SetConfig+0x192>
 8002208:	e00f      	b.n	800222a <UART_SetConfig+0x1a2>
 800220a:	2300      	movs	r3, #0
 800220c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002210:	e042      	b.n	8002298 <UART_SetConfig+0x210>
 8002212:	2302      	movs	r3, #2
 8002214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002218:	e03e      	b.n	8002298 <UART_SetConfig+0x210>
 800221a:	2304      	movs	r3, #4
 800221c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002220:	e03a      	b.n	8002298 <UART_SetConfig+0x210>
 8002222:	2308      	movs	r3, #8
 8002224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002228:	e036      	b.n	8002298 <UART_SetConfig+0x210>
 800222a:	2310      	movs	r3, #16
 800222c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002230:	e032      	b.n	8002298 <UART_SetConfig+0x210>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a3f      	ldr	r2, [pc, #252]	; (8002334 <UART_SetConfig+0x2ac>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d12a      	bne.n	8002292 <UART_SetConfig+0x20a>
 800223c:	4b3f      	ldr	r3, [pc, #252]	; (800233c <UART_SetConfig+0x2b4>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002246:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800224a:	d01a      	beq.n	8002282 <UART_SetConfig+0x1fa>
 800224c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002250:	d81b      	bhi.n	800228a <UART_SetConfig+0x202>
 8002252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002256:	d00c      	beq.n	8002272 <UART_SetConfig+0x1ea>
 8002258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800225c:	d815      	bhi.n	800228a <UART_SetConfig+0x202>
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <UART_SetConfig+0x1e2>
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	d008      	beq.n	800227a <UART_SetConfig+0x1f2>
 8002268:	e00f      	b.n	800228a <UART_SetConfig+0x202>
 800226a:	2300      	movs	r3, #0
 800226c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002270:	e012      	b.n	8002298 <UART_SetConfig+0x210>
 8002272:	2302      	movs	r3, #2
 8002274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002278:	e00e      	b.n	8002298 <UART_SetConfig+0x210>
 800227a:	2304      	movs	r3, #4
 800227c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002280:	e00a      	b.n	8002298 <UART_SetConfig+0x210>
 8002282:	2308      	movs	r3, #8
 8002284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002288:	e006      	b.n	8002298 <UART_SetConfig+0x210>
 800228a:	2310      	movs	r3, #16
 800228c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002290:	e002      	b.n	8002298 <UART_SetConfig+0x210>
 8002292:	2310      	movs	r3, #16
 8002294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a25      	ldr	r2, [pc, #148]	; (8002334 <UART_SetConfig+0x2ac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	f040 808a 	bne.w	80023b8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80022a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d824      	bhi.n	80022f6 <UART_SetConfig+0x26e>
 80022ac:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <UART_SetConfig+0x22c>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	080022d9 	.word	0x080022d9
 80022b8:	080022f7 	.word	0x080022f7
 80022bc:	080022e1 	.word	0x080022e1
 80022c0:	080022f7 	.word	0x080022f7
 80022c4:	080022e7 	.word	0x080022e7
 80022c8:	080022f7 	.word	0x080022f7
 80022cc:	080022f7 	.word	0x080022f7
 80022d0:	080022f7 	.word	0x080022f7
 80022d4:	080022ef 	.word	0x080022ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022d8:	f7ff fc66 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 80022dc:	61f8      	str	r0, [r7, #28]
        break;
 80022de:	e010      	b.n	8002302 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <UART_SetConfig+0x2c0>)
 80022e2:	61fb      	str	r3, [r7, #28]
        break;
 80022e4:	e00d      	b.n	8002302 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022e6:	f7ff fbc7 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 80022ea:	61f8      	str	r0, [r7, #28]
        break;
 80022ec:	e009      	b.n	8002302 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f2:	61fb      	str	r3, [r7, #28]
        break;
 80022f4:	e005      	b.n	8002302 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002300:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8109 	beq.w	800251c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	429a      	cmp	r2, r3
 8002318:	d305      	bcc.n	8002326 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	429a      	cmp	r2, r3
 8002324:	d912      	bls.n	800234c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800232c:	e0f6      	b.n	800251c <UART_SetConfig+0x494>
 800232e:	bf00      	nop
 8002330:	efff69f3 	.word	0xefff69f3
 8002334:	40008000 	.word	0x40008000
 8002338:	40013800 	.word	0x40013800
 800233c:	40021000 	.word	0x40021000
 8002340:	40004400 	.word	0x40004400
 8002344:	40004800 	.word	0x40004800
 8002348:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2200      	movs	r2, #0
 8002350:	461c      	mov	r4, r3
 8002352:	4615      	mov	r5, r2
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	022b      	lsls	r3, r5, #8
 800235e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002362:	0222      	lsls	r2, r4, #8
 8002364:	68f9      	ldr	r1, [r7, #12]
 8002366:	6849      	ldr	r1, [r1, #4]
 8002368:	0849      	lsrs	r1, r1, #1
 800236a:	2000      	movs	r0, #0
 800236c:	4688      	mov	r8, r1
 800236e:	4681      	mov	r9, r0
 8002370:	eb12 0a08 	adds.w	sl, r2, r8
 8002374:	eb43 0b09 	adc.w	fp, r3, r9
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002386:	4650      	mov	r0, sl
 8002388:	4659      	mov	r1, fp
 800238a:	f7fd ff1f 	bl	80001cc <__aeabi_uldivmod>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4613      	mov	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800239c:	d308      	bcc.n	80023b0 <UART_SetConfig+0x328>
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a4:	d204      	bcs.n	80023b0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	e0b5      	b.n	800251c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80023b6:	e0b1      	b.n	800251c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c0:	d15d      	bne.n	800247e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80023c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d827      	bhi.n	800241a <UART_SetConfig+0x392>
 80023ca:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <UART_SetConfig+0x348>)
 80023cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d0:	080023f5 	.word	0x080023f5
 80023d4:	080023fd 	.word	0x080023fd
 80023d8:	08002405 	.word	0x08002405
 80023dc:	0800241b 	.word	0x0800241b
 80023e0:	0800240b 	.word	0x0800240b
 80023e4:	0800241b 	.word	0x0800241b
 80023e8:	0800241b 	.word	0x0800241b
 80023ec:	0800241b 	.word	0x0800241b
 80023f0:	08002413 	.word	0x08002413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023f4:	f7ff fbd8 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 80023f8:	61f8      	str	r0, [r7, #28]
        break;
 80023fa:	e014      	b.n	8002426 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023fc:	f7ff fbea 	bl	8001bd4 <HAL_RCC_GetPCLK2Freq>
 8002400:	61f8      	str	r0, [r7, #28]
        break;
 8002402:	e010      	b.n	8002426 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002404:	4b4c      	ldr	r3, [pc, #304]	; (8002538 <UART_SetConfig+0x4b0>)
 8002406:	61fb      	str	r3, [r7, #28]
        break;
 8002408:	e00d      	b.n	8002426 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800240a:	f7ff fb35 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 800240e:	61f8      	str	r0, [r7, #28]
        break;
 8002410:	e009      	b.n	8002426 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002416:	61fb      	str	r3, [r7, #28]
        break;
 8002418:	e005      	b.n	8002426 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d077      	beq.n	800251c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005a      	lsls	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	441a      	add	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d916      	bls.n	8002476 <UART_SetConfig+0x3ee>
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244e:	d212      	bcs.n	8002476 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	b29b      	uxth	r3, r3
 8002454:	f023 030f 	bic.w	r3, r3, #15
 8002458:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	b29b      	uxth	r3, r3
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	b29a      	uxth	r2, r3
 8002466:	8afb      	ldrh	r3, [r7, #22]
 8002468:	4313      	orrs	r3, r2
 800246a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	8afa      	ldrh	r2, [r7, #22]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	e052      	b.n	800251c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800247c:	e04e      	b.n	800251c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800247e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002482:	2b08      	cmp	r3, #8
 8002484:	d827      	bhi.n	80024d6 <UART_SetConfig+0x44e>
 8002486:	a201      	add	r2, pc, #4	; (adr r2, 800248c <UART_SetConfig+0x404>)
 8002488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248c:	080024b1 	.word	0x080024b1
 8002490:	080024b9 	.word	0x080024b9
 8002494:	080024c1 	.word	0x080024c1
 8002498:	080024d7 	.word	0x080024d7
 800249c:	080024c7 	.word	0x080024c7
 80024a0:	080024d7 	.word	0x080024d7
 80024a4:	080024d7 	.word	0x080024d7
 80024a8:	080024d7 	.word	0x080024d7
 80024ac:	080024cf 	.word	0x080024cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024b0:	f7ff fb7a 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 80024b4:	61f8      	str	r0, [r7, #28]
        break;
 80024b6:	e014      	b.n	80024e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80024b8:	f7ff fb8c 	bl	8001bd4 <HAL_RCC_GetPCLK2Freq>
 80024bc:	61f8      	str	r0, [r7, #28]
        break;
 80024be:	e010      	b.n	80024e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <UART_SetConfig+0x4b0>)
 80024c2:	61fb      	str	r3, [r7, #28]
        break;
 80024c4:	e00d      	b.n	80024e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024c6:	f7ff fad7 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 80024ca:	61f8      	str	r0, [r7, #28]
        break;
 80024cc:	e009      	b.n	80024e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d2:	61fb      	str	r3, [r7, #28]
        break;
 80024d4:	e005      	b.n	80024e2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80024e0:	bf00      	nop
    }

    if (pclk != 0U)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d019      	beq.n	800251c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	085a      	lsrs	r2, r3, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	441a      	add	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	d909      	bls.n	8002516 <UART_SetConfig+0x48e>
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d205      	bcs.n	8002516 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60da      	str	r2, [r3, #12]
 8002514:	e002      	b.n	800251c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002528:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800252c:	4618      	mov	r0, r3
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002536:	bf00      	nop
 8002538:	00f42400 	.word	0x00f42400

0800253c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01a      	beq.n	8002652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800263a:	d10a      	bne.n	8002652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	605a      	str	r2, [r3, #4]
  }
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b098      	sub	sp, #96	; 0x60
 8002684:	af02      	add	r7, sp, #8
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002690:	f7fe f962 	bl	8000958 <HAL_GetTick>
 8002694:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d12e      	bne.n	8002702 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f88c 	bl	80027d0 <UART_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d021      	beq.n	8002702 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	e853 3f00 	ldrex	r3, [r3]
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d2:	653b      	str	r3, [r7, #80]	; 0x50
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026dc:	647b      	str	r3, [r7, #68]	; 0x44
 80026de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026e4:	e841 2300 	strex	r3, r2, [r1]
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e6      	bne.n	80026be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e062      	b.n	80027c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b04      	cmp	r3, #4
 800270e:	d149      	bne.n	80027a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002718:	2200      	movs	r2, #0
 800271a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f856 	bl	80027d0 <UART_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d03c      	beq.n	80027a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	e853 3f00 	ldrex	r3, [r3]
 8002736:	623b      	str	r3, [r7, #32]
   return(result);
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
 800274a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800274e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002750:	e841 2300 	strex	r3, r2, [r1]
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e6      	bne.n	800272a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3308      	adds	r3, #8
 8002762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	60fb      	str	r3, [r7, #12]
   return(result);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3308      	adds	r3, #8
 800277a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800277c:	61fa      	str	r2, [r7, #28]
 800277e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002780:	69b9      	ldr	r1, [r7, #24]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	e841 2300 	strex	r3, r2, [r1]
 8002788:	617b      	str	r3, [r7, #20]
   return(result);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e5      	bne.n	800275c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e011      	b.n	80027c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3758      	adds	r7, #88	; 0x58
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e0:	e049      	b.n	8002876 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d045      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ea:	f7fe f8b5 	bl	8000958 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d302      	bcc.n	8002800 <UART_WaitOnFlagUntilTimeout+0x30>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e048      	b.n	8002896 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d031      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b08      	cmp	r3, #8
 800281e:	d110      	bne.n	8002842 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2208      	movs	r2, #8
 8002826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f838 	bl	800289e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2208      	movs	r2, #8
 8002832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e029      	b.n	8002896 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800284c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002850:	d111      	bne.n	8002876 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800285a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f81e 	bl	800289e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e00f      	b.n	8002896 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	429a      	cmp	r2, r3
 8002892:	d0a6      	beq.n	80027e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800289e:	b480      	push	{r7}
 80028a0:	b095      	sub	sp, #84	; 0x54
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c4:	643b      	str	r3, [r7, #64]	; 0x40
 80028c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028cc:	e841 2300 	strex	r3, r2, [r1]
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e6      	bne.n	80028a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3308      	adds	r3, #8
 80028de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	e853 3f00 	ldrex	r3, [r3]
 80028e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3308      	adds	r3, #8
 80028f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e5      	bne.n	80028d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	2b01      	cmp	r3, #1
 8002912:	d118      	bne.n	8002946 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	e853 3f00 	ldrex	r3, [r3]
 8002920:	60bb      	str	r3, [r7, #8]
   return(result);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f023 0310 	bic.w	r3, r3, #16
 8002928:	647b      	str	r3, [r7, #68]	; 0x44
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	6979      	ldr	r1, [r7, #20]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	613b      	str	r3, [r7, #16]
   return(result);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e6      	bne.n	8002914 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	669a      	str	r2, [r3, #104]	; 0x68
}
 800295a:	bf00      	nop
 800295c:	3754      	adds	r7, #84	; 0x54
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <memset>:
 8002966:	4402      	add	r2, r0
 8002968:	4603      	mov	r3, r0
 800296a:	4293      	cmp	r3, r2
 800296c:	d100      	bne.n	8002970 <memset+0xa>
 800296e:	4770      	bx	lr
 8002970:	f803 1b01 	strb.w	r1, [r3], #1
 8002974:	e7f9      	b.n	800296a <memset+0x4>
	...

08002978 <__libc_init_array>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	4d0d      	ldr	r5, [pc, #52]	; (80029b0 <__libc_init_array+0x38>)
 800297c:	4c0d      	ldr	r4, [pc, #52]	; (80029b4 <__libc_init_array+0x3c>)
 800297e:	1b64      	subs	r4, r4, r5
 8002980:	10a4      	asrs	r4, r4, #2
 8002982:	2600      	movs	r6, #0
 8002984:	42a6      	cmp	r6, r4
 8002986:	d109      	bne.n	800299c <__libc_init_array+0x24>
 8002988:	4d0b      	ldr	r5, [pc, #44]	; (80029b8 <__libc_init_array+0x40>)
 800298a:	4c0c      	ldr	r4, [pc, #48]	; (80029bc <__libc_init_array+0x44>)
 800298c:	f000 f818 	bl	80029c0 <_init>
 8002990:	1b64      	subs	r4, r4, r5
 8002992:	10a4      	asrs	r4, r4, #2
 8002994:	2600      	movs	r6, #0
 8002996:	42a6      	cmp	r6, r4
 8002998:	d105      	bne.n	80029a6 <__libc_init_array+0x2e>
 800299a:	bd70      	pop	{r4, r5, r6, pc}
 800299c:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a0:	4798      	blx	r3
 80029a2:	3601      	adds	r6, #1
 80029a4:	e7ee      	b.n	8002984 <__libc_init_array+0xc>
 80029a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029aa:	4798      	blx	r3
 80029ac:	3601      	adds	r6, #1
 80029ae:	e7f2      	b.n	8002996 <__libc_init_array+0x1e>
 80029b0:	08002a28 	.word	0x08002a28
 80029b4:	08002a28 	.word	0x08002a28
 80029b8:	08002a28 	.word	0x08002a28
 80029bc:	08002a2c 	.word	0x08002a2c

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	bf00      	nop
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr
