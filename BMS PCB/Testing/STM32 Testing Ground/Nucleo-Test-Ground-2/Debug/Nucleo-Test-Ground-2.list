
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b50c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  0800b69c  0800b69c  0001b69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1b4  0800c1b4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1b4  0800c1b4  0001c1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1bc  0800c1bc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1bc  0800c1bc  0001c1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1c0  0800c1c0  0001c1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800c1c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200000d0  0800c294  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800c294  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bd7  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002395  00000000  00000000  00031d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  000340b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf7  00000000  00000000  00035040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e9d2  00000000  00000000  00035c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001219e  00000000  00000000  00054609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c69de  00000000  00000000  000667a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000565c  00000000  00000000  0012d188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  001327e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b684 	.word	0x0800b684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800b684 	.word	0x0800b684

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9bb 	b.w	8001000 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b970 	b.w	8001000 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9e08      	ldr	r6, [sp, #32]
 8000d3e:	460d      	mov	r5, r1
 8000d40:	4604      	mov	r4, r0
 8000d42:	460f      	mov	r7, r1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d14a      	bne.n	8000dde <__udivmoddi4+0xa6>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0xe2>
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	b143      	cbz	r3, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d58:	f1c3 0220 	rsb	r2, r3, #32
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d62:	4317      	orrs	r7, r2
 8000d64:	409c      	lsls	r4, r3
 8000d66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6a:	fa1f f58c 	uxth.w	r5, ip
 8000d6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d72:	0c22      	lsrs	r2, r4, #16
 8000d74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d7c:	fb01 f005 	mul.w	r0, r1, r5
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x62>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d8c:	f080 811c 	bcs.w	8000fc8 <__udivmoddi4+0x290>
 8000d90:	4290      	cmp	r0, r2
 8000d92:	f240 8119 	bls.w	8000fc8 <__udivmoddi4+0x290>
 8000d96:	3902      	subs	r1, #2
 8000d98:	4462      	add	r2, ip
 8000d9a:	1a12      	subs	r2, r2, r0
 8000d9c:	b2a4      	uxth	r4, r4
 8000d9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000da2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000daa:	fb00 f505 	mul.w	r5, r0, r5
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x90>
 8000db2:	eb1c 0404 	adds.w	r4, ip, r4
 8000db6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dba:	f080 8107 	bcs.w	8000fcc <__udivmoddi4+0x294>
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	f240 8104 	bls.w	8000fcc <__udivmoddi4+0x294>
 8000dc4:	4464      	add	r4, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dcc:	1b64      	subs	r4, r4, r5
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11e      	cbz	r6, 8000dda <__udivmoddi4+0xa2>
 8000dd2:	40dc      	lsrs	r4, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0xbc>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f000 80ed 	beq.w	8000fc2 <__udivmoddi4+0x28a>
 8000de8:	2100      	movs	r1, #0
 8000dea:	e9c6 0500 	strd	r0, r5, [r6]
 8000dee:	4608      	mov	r0, r1
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	fab3 f183 	clz	r1, r3
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d149      	bne.n	8000e90 <__udivmoddi4+0x158>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	d302      	bcc.n	8000e06 <__udivmoddi4+0xce>
 8000e00:	4282      	cmp	r2, r0
 8000e02:	f200 80f8 	bhi.w	8000ff6 <__udivmoddi4+0x2be>
 8000e06:	1a84      	subs	r4, r0, r2
 8000e08:	eb65 0203 	sbc.w	r2, r5, r3
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	4617      	mov	r7, r2
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d0e2      	beq.n	8000dda <__udivmoddi4+0xa2>
 8000e14:	e9c6 4700 	strd	r4, r7, [r6]
 8000e18:	e7df      	b.n	8000dda <__udivmoddi4+0xa2>
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xe6>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f382 	clz	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x210>
 8000e28:	1a8a      	subs	r2, r1, r2
 8000e2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2e:	fa1f fe8c 	uxth.w	lr, ip
 8000e32:	2101      	movs	r1, #1
 8000e34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e38:	fb07 2015 	mls	r0, r7, r5, r2
 8000e3c:	0c22      	lsrs	r2, r4, #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb0e f005 	mul.w	r0, lr, r5
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x124>
 8000e4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x122>
 8000e54:	4290      	cmp	r0, r2
 8000e56:	f200 80cb 	bhi.w	8000ff0 <__udivmoddi4+0x2b8>
 8000e5a:	4645      	mov	r5, r8
 8000e5c:	1a12      	subs	r2, r2, r0
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e64:	fb07 2210 	mls	r2, r7, r0, r2
 8000e68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x14e>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e7c:	d202      	bcs.n	8000e84 <__udivmoddi4+0x14c>
 8000e7e:	45a6      	cmp	lr, r4
 8000e80:	f200 80bb 	bhi.w	8000ffa <__udivmoddi4+0x2c2>
 8000e84:	4610      	mov	r0, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8e:	e79f      	b.n	8000dd0 <__udivmoddi4+0x98>
 8000e90:	f1c1 0720 	rsb	r7, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea6:	40fd      	lsrs	r5, r7
 8000ea8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ec0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec4:	42a5      	cmp	r5, r4
 8000ec6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eca:	fa00 f001 	lsl.w	r0, r0, r1
 8000ece:	d90b      	bls.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed8:	f080 8088 	bcs.w	8000fec <__udivmoddi4+0x2b4>
 8000edc:	42a5      	cmp	r5, r4
 8000ede:	f240 8085 	bls.w	8000fec <__udivmoddi4+0x2b4>
 8000ee2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee6:	4464      	add	r4, ip
 8000ee8:	1b64      	subs	r4, r4, r5
 8000eea:	b29d      	uxth	r5, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1da>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f08:	d26c      	bcs.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	d96a      	bls.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	4464      	add	r4, ip
 8000f12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f16:	fba3 9502 	umull	r9, r5, r3, r2
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	42ac      	cmp	r4, r5
 8000f20:	46c8      	mov	r8, r9
 8000f22:	46ae      	mov	lr, r5
 8000f24:	d356      	bcc.n	8000fd4 <__udivmoddi4+0x29c>
 8000f26:	d053      	beq.n	8000fd0 <__udivmoddi4+0x298>
 8000f28:	b156      	cbz	r6, 8000f40 <__udivmoddi4+0x208>
 8000f2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f32:	fa04 f707 	lsl.w	r7, r4, r7
 8000f36:	40ca      	lsrs	r2, r1
 8000f38:	40cc      	lsrs	r4, r1
 8000f3a:	4317      	orrs	r7, r2
 8000f3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	f1c3 0120 	rsb	r1, r3, #32
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	fa20 f201 	lsr.w	r2, r0, r1
 8000f54:	fa25 f101 	lsr.w	r1, r5, r1
 8000f58:	409d      	lsls	r5, r3
 8000f5a:	432a      	orrs	r2, r5
 8000f5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f68:	fb07 1510 	mls	r5, r7, r0, r1
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f72:	fb00 f50e 	mul.w	r5, r0, lr
 8000f76:	428d      	cmp	r5, r1
 8000f78:	fa04 f403 	lsl.w	r4, r4, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x258>
 8000f7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f86:	d22f      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f88:	428d      	cmp	r5, r1
 8000f8a:	d92d      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1b49      	subs	r1, r1, r5
 8000f92:	b292      	uxth	r2, r2
 8000f94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f98:	fb07 1115 	mls	r1, r7, r5, r1
 8000f9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa4:	4291      	cmp	r1, r2
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x282>
 8000fa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fb0:	d216      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb2:	4291      	cmp	r1, r2
 8000fb4:	d914      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb6:	3d02      	subs	r5, #2
 8000fb8:	4462      	add	r2, ip
 8000fba:	1a52      	subs	r2, r2, r1
 8000fbc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fc0:	e738      	b.n	8000e34 <__udivmoddi4+0xfc>
 8000fc2:	4631      	mov	r1, r6
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e708      	b.n	8000dda <__udivmoddi4+0xa2>
 8000fc8:	4639      	mov	r1, r7
 8000fca:	e6e6      	b.n	8000d9a <__udivmoddi4+0x62>
 8000fcc:	4610      	mov	r0, r2
 8000fce:	e6fb      	b.n	8000dc8 <__udivmoddi4+0x90>
 8000fd0:	4548      	cmp	r0, r9
 8000fd2:	d2a9      	bcs.n	8000f28 <__udivmoddi4+0x1f0>
 8000fd4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	e7a3      	b.n	8000f28 <__udivmoddi4+0x1f0>
 8000fe0:	4645      	mov	r5, r8
 8000fe2:	e7ea      	b.n	8000fba <__udivmoddi4+0x282>
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	e794      	b.n	8000f12 <__udivmoddi4+0x1da>
 8000fe8:	4640      	mov	r0, r8
 8000fea:	e7d1      	b.n	8000f90 <__udivmoddi4+0x258>
 8000fec:	46d0      	mov	r8, sl
 8000fee:	e77b      	b.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ff0:	3d02      	subs	r5, #2
 8000ff2:	4462      	add	r2, ip
 8000ff4:	e732      	b.n	8000e5c <__udivmoddi4+0x124>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e70a      	b.n	8000e10 <__udivmoddi4+0xd8>
 8000ffa:	4464      	add	r4, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e742      	b.n	8000e86 <__udivmoddi4+0x14e>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <format_uint16>:
/**
 * Formats an unsigned 16-bit integer into the AFE's data buffer (little-endian byte order)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_uint16(uint8_t *dataArr, uint16_t data) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
	dataArr[0] = ((uint8_t)(data & 0xFF));
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	701a      	strb	r2, [r3, #0]
	dataArr[1] = ((uint8_t)(data >> 8));
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b29a      	uxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <format_int16>:
/**
 * Formats a signed 16-bit integer into the AFE's data buffer (little-endian byte order, 2's complement)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_int16(uint8_t *dataArr, int data) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
	if (data < 0) format_uint16(dataArr, (~(abs(data)) + 1));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da0b      	bge.n	800105a <format_int16+0x28>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	bfb8      	it	lt
 8001048:	425b      	neglt	r3, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	425b      	negs	r3, r3
 800104e:	b29b      	uxth	r3, r3
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffd6 	bl	8001004 <format_uint16>
	else format_uint16(dataArr, data);
}
 8001058:	e005      	b.n	8001066 <format_int16+0x34>
	else format_uint16(dataArr, data);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffcf 	bl	8001004 <format_uint16>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <main>:

// Global variables - used for ISRs to raise flags
bool logDataFlag = 0;
bool logAlertsFlag = 0;

int main(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b0be      	sub	sp, #248	; 0xf8
 8001104:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 8001106:	f002 f9de 	bl	80034c6 <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 800110a:	f000 fa21 	bl	8001550 <SystemClock_Config>

    // Initialize GPIO, SPI, UART, TIM1, ADC1
    GPIO_Init();
 800110e:	f000 fa57 	bl	80015c0 <GPIO_Init>
    SPI1_Init();
 8001112:	f000 faef 	bl	80016f4 <SPI1_Init>
    USART1_Init();
 8001116:	f000 fb35 	bl	8001784 <USART1_Init>
    TIM1_Init();
 800111a:	f000 fb6d 	bl	80017f8 <TIM1_Init>
    TIM2_Init();
 800111e:	f000 fb95 	bl	800184c <TIM2_Init>
    ADC1_Init();
 8001122:	f000 fbf7 	bl	8001914 <ADC1_Init>
    RTC_Init();
 8001126:	f000 fc59 	bl	80019dc <RTC_Init>

    // Start the logging timer
    TIM1->CR1 |= TIM_CR1_CEN;
 800112a:	4b9e      	ldr	r3, [pc, #632]	; (80013a4 <main+0x2a4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a9d      	ldr	r2, [pc, #628]	; (80013a4 <main+0x2a4>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 8001136:	2200      	movs	r2, #0
 8001138:	2120      	movs	r1, #32
 800113a:	489b      	ldr	r0, [pc, #620]	; (80013a8 <main+0x2a8>)
 800113c:	f003 ffe0 	bl	8005100 <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001146:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	619a      	str	r2, [r3, #24]

    uint16_t ctrlStatus = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
    uint16_t cellVolt = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    uint16_t cellVolts[17] = {0};
 8001166:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800116a:	2222      	movs	r2, #34	; 0x22
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f006 fe5d 	bl	8007e2e <memset>
    int16_t cellGains[16] = {12000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11900};
 8001174:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001178:	2220      	movs	r2, #32
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f006 fe56 	bl	8007e2e <memset>
 8001182:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001186:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800118a:	f642 637c 	movw	r3, #11900	; 0x2e7c
 800118e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    uint32_t MCUTemperature = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int16_t AFETemperature = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    int16_t temperatures[4] = {0};
 800119e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
    int16_t currentRead = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    uint8_t fetStatus = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    uint8_t cmdAddr = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

    uint8_t writeData[32] = {0};
 80011ba:	2300      	movs	r3, #0
 80011bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 80011d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011d6:	2202      	movs	r2, #2
 80011d8:	4619      	mov	r1, r3
 80011da:	2012      	movs	r0, #18
 80011dc:	f000 fc8e 	bl	8001afc <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 80011e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011e4:	2202      	movs	r2, #2
 80011e6:	4619      	mov	r1, r3
 80011e8:	2057      	movs	r0, #87	; 0x57
 80011ea:	f000 fd61 	bl	8001cb0 <SubCmdReadData>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80011ee:	2120      	movs	r1, #32
 80011f0:	486d      	ldr	r0, [pc, #436]	; (80013a8 <main+0x2a8>)
 80011f2:	f003 ff9d 	bl	8005130 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80011f6:	20fa      	movs	r0, #250	; 0xfa
 80011f8:	f002 f9da 	bl	80035b0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80011fc:	2120      	movs	r1, #32
 80011fe:	486a      	ldr	r0, [pc, #424]	; (80013a8 <main+0x2a8>)
 8001200:	f003 ff96 	bl	8005130 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 8001204:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001208:	f002 f9d2 	bl	80035b0 <HAL_Delay>

	// Disable SLEEP mode and disable FET_TEST mode if already in FET_TEST
	SubCmdNoData(0x009A);
 800120c:	209a      	movs	r0, #154	; 0x9a
 800120e:	f000 fd07 	bl	8001c20 <SubCmdNoData>
	if (!(readData[0] & (1 << 4))) SubCmdNoData(0x0022);
 8001212:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <main+0x124>
 800121e:	2022      	movs	r0, #34	; 0x22
 8001220:	f000 fcfe 	bl	8001c20 <SubCmdNoData>

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 8001224:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001228:	2202      	movs	r2, #2
 800122a:	4619      	mov	r1, r3
 800122c:	2012      	movs	r0, #18
 800122e:	f000 fc65 	bl	8001afc <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 8001232:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001236:	2202      	movs	r2, #2
 8001238:	4619      	mov	r1, r3
 800123a:	2057      	movs	r0, #87	; 0x57
 800123c:	f000 fd38 	bl	8001cb0 <SubCmdReadData>

	// Enter CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
 8001240:	2090      	movs	r0, #144	; 0x90
 8001242:	f000 fced 	bl	8001c20 <SubCmdNoData>
	// Wait for Battery Status to confirm transition to CONFIG_UPDATE mode
	do {
		DirectCmdRead(0x12, readData, 2);
 8001246:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800124a:	2202      	movs	r2, #2
 800124c:	4619      	mov	r1, r3
 800124e:	2012      	movs	r0, #18
 8001250:	f000 fc54 	bl	8001afc <DirectCmdRead>
	} while (!(readData[0] & 0x01));
 8001254:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f2      	beq.n	8001246 <main+0x146>

	// Program configuration for all AFE registers
	RAMRegisterInit();
 8001260:	f000 fe76 	bl	8001f50 <RAMRegisterInit>

	/**
	 * Set calibration gain values for all cell voltages
	 */
	for (int i = 0; i < 16; i++) {
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800126a:	e020      	b.n	80012ae <main+0x1ae>
		format_int16(writeData, cellGains[i]);
 800126c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	33f8      	adds	r3, #248	; 0xf8
 8001274:	443b      	add	r3, r7
 8001276:	f933 3c84 	ldrsh.w	r3, [r3, #-132]
 800127a:	461a      	mov	r2, r3
 800127c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fed5 	bl	8001032 <format_int16>
		RAMRegisterWrite(CAL_GAIN_CL1 + i*2, writeData, 2);
 8001288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800128c:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8001290:	3340      	adds	r3, #64	; 0x40
 8001292:	b29b      	uxth	r3, r3
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	b29b      	uxth	r3, r3
 8001298:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800129c:	2202      	movs	r2, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fd82 	bl	8001da8 <RAMRegisterWrite>
	for (int i = 0; i < 16; i++) {
 80012a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012a8:	3301      	adds	r3, #1
 80012aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80012ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	ddda      	ble.n	800126c <main+0x16c>
	}

	// Exit CONFIG_UPDATE mode, disable SLEEP mode, read manufacturing status register again
	SubCmdNoData(0x0092);
 80012b6:	2092      	movs	r0, #146	; 0x92
 80012b8:	f000 fcb2 	bl	8001c20 <SubCmdNoData>
	SubCmdNoData(0x009A);
 80012bc:	209a      	movs	r0, #154	; 0x9a
 80012be:	f000 fcaf 	bl	8001c20 <SubCmdNoData>
	SubCmdReadData(0x0057, readData, 2);
 80012c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80012c6:	2202      	movs	r2, #2
 80012c8:	4619      	mov	r1, r3
 80012ca:	2057      	movs	r0, #87	; 0x57
 80012cc:	f000 fcf0 	bl	8001cb0 <SubCmdReadData>
	// Read battery status register
	DirectCmdRead(0x12, readData, 2);
 80012d0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80012d4:	2202      	movs	r2, #2
 80012d6:	4619      	mov	r1, r3
 80012d8:	2012      	movs	r0, #18
 80012da:	f000 fc0f 	bl	8001afc <DirectCmdRead>

	// Blink status LED a few times to indicate setup is complete
	for (int i = 0; i < 10; i++) {
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80012e4:	e00b      	b.n	80012fe <main+0x1fe>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80012e6:	2120      	movs	r1, #32
 80012e8:	482f      	ldr	r0, [pc, #188]	; (80013a8 <main+0x2a8>)
 80012ea:	f003 ff21 	bl	8005130 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80012ee:	2064      	movs	r0, #100	; 0x64
 80012f0:	f002 f95e 	bl	80035b0 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 80012f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80012f8:	3301      	adds	r3, #1
 80012fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80012fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001302:	2b09      	cmp	r3, #9
 8001304:	ddef      	ble.n	80012e6 <main+0x1e6>
	}

	// Clear bits in the alarm registers
	writeData[0] = 0xFF;
 8001306:	23ff      	movs	r3, #255	; 0xff
 8001308:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	writeData[1] = 0xFE;
 800130c:	23fe      	movs	r3, #254	; 0xfe
 800130e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	DirectCmdWrite(0xE2, writeData, 2);
 8001312:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001316:	2202      	movs	r2, #2
 8001318:	4619      	mov	r1, r3
 800131a:	20e2      	movs	r0, #226	; 0xe2
 800131c:	f000 fc38 	bl	8001b90 <DirectCmdWrite>
    	// Read the control status register
//    	DirectCmdRead(0x02, readData, 2);
//    	ctrlStatus = (readData[0]) + (readData[1] << 8);

    	// Check if flag to log data was raised
    	if (logDataFlag) {
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <main+0x2ac>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80b0 	beq.w	800148a <main+0x38a>
    		logDataFlag = false; // Clear the flag
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <main+0x2ac>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
    		//TODO: Only read measurements if FULLSCAN bit of Alarm Status is set, then clear bit after reading measurements
    		// Enable status LED to indicate data being logged
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	2120      	movs	r1, #32
 8001334:	481c      	ldr	r0, [pc, #112]	; (80013a8 <main+0x2a8>)
 8001336:	f003 fee3 	bl	8005100 <HAL_GPIO_WritePin>
    		// Read the cell voltage for all 16 cells and then the pack voltage
			for (int i = 0; i < 17; i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001340:	e027      	b.n	8001392 <main+0x292>
				cmdAddr = 0x14 + 2*i;
 8001342:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001346:	330a      	adds	r3, #10
 8001348:	b2db      	uxtb	r3, r3
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
				DirectCmdRead(cmdAddr, readData, 2);
 8001350:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001354:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8001358:	2202      	movs	r2, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fbce 	bl	8001afc <DirectCmdRead>
				// Combine the 2 8-bit cell voltage bytes into a single 16-byte variable
				cellVolt = (readData[0]) + (readData[1] << 8);
 8001360:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001364:	b29a      	uxth	r2, r3
 8001366:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800136a:	b29b      	uxth	r3, r3
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b29b      	uxth	r3, r3
 8001370:	4413      	add	r3, r2
 8001372:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
				cellVolts[i] = cellVolt;
 8001376:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	33f8      	adds	r3, #248	; 0xf8
 800137e:	443b      	add	r3, r7
 8001380:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8001384:	f823 2c64 	strh.w	r2, [r3, #-100]
			for (int i = 0; i < 17; i++) {
 8001388:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800138c:	3301      	adds	r3, #1
 800138e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001392:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001396:	2b10      	cmp	r3, #16
 8001398:	ddd3      	ble.n	8001342 <main+0x242>
			}

			// Read the AFETemperature measured at TS1-3
			for (int i = 0; i < 3; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80013a0:	e02f      	b.n	8001402 <main+0x302>
 80013a2:	bf00      	nop
 80013a4:	40012c00 	.word	0x40012c00
 80013a8:	48000400 	.word	0x48000400
 80013ac:	20000268 	.word	0x20000268
				cmdAddr = 0x70 + 2*i;
 80013b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80013b4:	3338      	adds	r3, #56	; 0x38
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
				DirectCmdRead(cmdAddr, readData, 2);
 80013be:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80013c2:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80013c6:	2202      	movs	r2, #2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fb97 	bl	8001afc <DirectCmdRead>
				AFETemperature = (readData[0]) + (readData[1] << 8);
 80013ce:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80013d8:	b29b      	uxth	r3, r3
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				temperatures[i] = AFETemperature;
 80013e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	33f8      	adds	r3, #248	; 0xf8
 80013ee:	443b      	add	r3, r7
 80013f0:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 80013f4:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for (int i = 0; i < 3; i++) {
 80013f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80013fc:	3301      	adds	r3, #1
 80013fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001402:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001406:	2b02      	cmp	r3, #2
 8001408:	ddd2      	ble.n	80013b0 <main+0x2b0>
			}
			// Calculate temperature measured by MCU's ADC
			MCUTemperature = T4_Acquire();
 800140a:	f001 fc85 	bl	8002d18 <T4_Acquire>
 800140e:	4603      	mov	r3, r0
 8001410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			temperatures[3] = MCUTemperature;
 8001414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001418:	b21b      	sxth	r3, r3
 800141a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

			// Read the CC2 current and FET status
			DirectCmdRead(0x3A, readData, 2);
 800141e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001422:	2202      	movs	r2, #2
 8001424:	4619      	mov	r1, r3
 8001426:	203a      	movs	r0, #58	; 0x3a
 8001428:	f000 fb68 	bl	8001afc <DirectCmdRead>
			currentRead = (readData[0]) + (readData[1] << 8);
 800142c:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001430:	b29a      	uxth	r2, r3
 8001432:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8001436:	b29b      	uxth	r3, r3
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b29b      	uxth	r3, r3
 800143c:	4413      	add	r3, r2
 800143e:	b29b      	uxth	r3, r3
 8001440:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			DirectCmdRead(0x7F, readData, 1);
 8001444:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001448:	2201      	movs	r2, #1
 800144a:	4619      	mov	r1, r3
 800144c:	207f      	movs	r0, #127	; 0x7f
 800144e:	f000 fb55 	bl	8001afc <DirectCmdRead>
			fetStatus = readData[0];
 8001452:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001456:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

			// Transmit logging information
			TransmitLogAndTimestamp();
 800145a:	f000 ffa5 	bl	80023a8 <TransmitLogAndTimestamp>
			TransmitCellVoltages(cellVolts, 17);
 800145e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001462:	2111      	movs	r1, #17
 8001464:	4618      	mov	r0, r3
 8001466:	f001 f84b 	bl	8002500 <TransmitCellVoltages>
			TransmitCurrentReading(currentRead);
 800146a:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	; 0xdc
 800146e:	4618      	mov	r0, r3
 8001470:	f001 f990 	bl	8002794 <TransmitCurrentReading>
			TransmitTemperatures(temperatures, 4);
 8001474:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001478:	2104      	movs	r1, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f001 fa00 	bl	8002880 <TransmitTemperatures>

			// Disable status LED to indicate data finished being logged
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2120      	movs	r1, #32
 8001484:	482e      	ldr	r0, [pc, #184]	; (8001540 <main+0x440>)
 8001486:	f003 fe3b 	bl	8005100 <HAL_GPIO_WritePin>
    	}

    	// Check if AFE Alarm Status indicates one of the safety status bits has been set
    	if (logAlertsFlag) {
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <main+0x444>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f43f af46 	beq.w	8001320 <main+0x220>
    		logAlertsFlag = false;
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <main+0x444>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
			// Read the Alarm Status register to figure out what's causing the alert
    		DirectCmdRead(0x62, readData, 2);
 800149a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800149e:	2202      	movs	r2, #2
 80014a0:	4619      	mov	r1, r3
 80014a2:	2062      	movs	r0, #98	; 0x62
 80014a4:	f000 fb2a 	bl	8001afc <DirectCmdRead>
    		writeData[0] = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    		writeData[1] = 0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		// Check each bit and determine where to look for the cause of the alert
    		// Safety status B/C
    		if (readData[1] & (1 << 7)) {
 80014b4:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da08      	bge.n	80014d0 <main+0x3d0>
    			TransmitSafetyStatusB();
 80014be:	f001 fb7f 	bl	8002bc0 <TransmitSafetyStatusB>
    			// No need to check safety status C as no protections there are enabled
    			writeData[1] |= (1 << 7);
 80014c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		}
    		// Safety status A
    		if (readData[1] & (1 << 6)) {
 80014d0:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80014d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <main+0x3ee>
    			TransmitSafetyStatusA();
 80014dc:	f001 faf0 	bl	8002ac0 <TransmitSafetyStatusA>
    			writeData[1] |= (1 << 6);
 80014e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		}
    		// Permanent failure
    		if (readData[1] & (1 << 5)) {
 80014ee:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <main+0x420>
    			// If there's a permanent failure, continuously transmit a distress signal
    			uint8_t msg[] = "Permanent failure! All BMS operations halted, requesting attention...";
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <main+0x448>)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4611      	mov	r1, r2
 8001500:	2246      	movs	r2, #70	; 0x46
 8001502:	4618      	mov	r0, r3
 8001504:	f008 f8e9 	bl	80096da <memcpy>
    			while (1) {
    				HAL_Delay(10000);
 8001508:	f242 7010 	movw	r0, #10000	; 0x2710
 800150c:	f002 f850 	bl	80035b0 <HAL_Delay>
    				HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001510:	1d39      	adds	r1, r7, #4
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	2245      	movs	r2, #69	; 0x45
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <main+0x44c>)
 800151a:	f005 fe53 	bl	80071c4 <HAL_UART_Transmit>
    				HAL_Delay(10000);
 800151e:	e7f3      	b.n	8001508 <main+0x408>
    			}
    		}
    		// Clear the bits for the received safety statuses, as well as the masked safety alerts
    		writeData[1] |= 0x18;
 8001520:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001524:	f043 0318 	orr.w	r3, r3, #24
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
//    		writeData[0] = 0xFF;
//    		writeData[1] = 0xFE;
    		DirectCmdWrite(0xE2, writeData, 2);
 800152e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001532:	2202      	movs	r2, #2
 8001534:	4619      	mov	r1, r3
 8001536:	20e2      	movs	r0, #226	; 0xe2
 8001538:	f000 fb2a 	bl	8001b90 <DirectCmdWrite>
    	if (logDataFlag) {
 800153c:	e6f0      	b.n	8001320 <main+0x220>
 800153e:	bf00      	nop
 8001540:	48000400 	.word	0x48000400
 8001544:	20000269 	.word	0x20000269
 8001548:	0800b69c 	.word	0x0800b69c
 800154c:	20000150 	.word	0x20000150

08001550 <SystemClock_Config>:
}

/**
 * Configures the clocks for the STM32
 */
void SystemClock_Config(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b096      	sub	sp, #88	; 0x58
 8001554:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2244      	movs	r2, #68	; 0x44
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f006 fc65 	bl	8007e2e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001572:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001576:	f003 fe1b 	bl	80051b0 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800157a:	2310      	movs	r3, #16
 800157c:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800157e:	2301      	movs	r3, #1
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001582:	2300      	movs	r3, #0
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001586:	2360      	movs	r3, #96	; 0x60
 8001588:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800158a:	2300      	movs	r3, #0
 800158c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fe62 	bl	800525c <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001598:	230f      	movs	r3, #15
 800159a:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80015ac:	463b      	mov	r3, r7
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 fab5 	bl	8005b20 <HAL_RCC_ClockConfig>
}
 80015b6:	bf00      	nop
 80015b8:	3758      	adds	r7, #88	; 0x58
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <GPIO_Init>:

/**
 * Initializes all GPIO pins
 */
void GPIO_Init(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b49      	ldr	r3, [pc, #292]	; (80016ec <GPIO_Init+0x12c>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a48      	ldr	r2, [pc, #288]	; (80016ec <GPIO_Init+0x12c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <GPIO_Init+0x12c>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b43      	ldr	r3, [pc, #268]	; (80016ec <GPIO_Init+0x12c>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a42      	ldr	r2, [pc, #264]	; (80016ec <GPIO_Init+0x12c>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b40      	ldr	r3, [pc, #256]	; (80016ec <GPIO_Init+0x12c>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <GPIO_Init+0x12c>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	4a3c      	ldr	r2, [pc, #240]	; (80016ec <GPIO_Init+0x12c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6613      	str	r3, [r2, #96]	; 0x60
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <GPIO_Init+0x12c>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800161e:	2301      	movs	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001622:	2311      	movs	r3, #17
 8001624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4619      	mov	r1, r3
 8001634:	482e      	ldr	r0, [pc, #184]	; (80016f0 <GPIO_Init+0x130>)
 8001636:	f003 fbf1 	bl	8004e1c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 800163a:	2201      	movs	r2, #1
 800163c:	2101      	movs	r1, #1
 800163e:	482c      	ldr	r0, [pc, #176]	; (80016f0 <GPIO_Init+0x130>)
 8001640:	f003 fd5e 	bl	8005100 <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001644:	2320      	movs	r3, #32
 8001646:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	4825      	ldr	r0, [pc, #148]	; (80016f0 <GPIO_Init+0x130>)
 800165c:	f003 fbde 	bl	8004e1c <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8001660:	23e0      	movs	r3, #224	; 0xe0
 8001662:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166c:	2302      	movs	r3, #2
 800166e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001670:	2305      	movs	r3, #5
 8001672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f003 fbcd 	bl	8004e1c <HAL_GPIO_Init>

    // Configure PB6 (UART_TX), PB7 (UART_RX)
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001682:	23c0      	movs	r3, #192	; 0xc0
 8001684:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2302      	movs	r3, #2
 8001690:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Alternate function for USART1
 8001692:	2307      	movs	r3, #7
 8001694:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <GPIO_Init+0x130>)
 800169e:	f003 fbbd 	bl	8004e1c <HAL_GPIO_Init>

	// Configure PA4 (AFE ALERT pin) as an external interrupt
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016a2:	2310      	movs	r3, #16
 80016a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f003 fbaf 	bl	8004e1c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	200a      	movs	r0, #10
 80016c4:	f003 fb73 	bl	8004dae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016c8:	200a      	movs	r0, #10
 80016ca:	f003 fb8c 	bl	8004de6 <HAL_NVIC_EnableIRQ>

	// Configure PA1 (T4 pin) as an analog input
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d2:	2303      	movs	r3, #3
 80016d4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f003 fb9c 	bl	8004e1c <HAL_GPIO_Init>
}
 80016e4:	bf00      	nop
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000400 	.word	0x48000400

080016f4 <SPI1_Init>:

// Initializes the SPI1 peripheral in master mode
void SPI1_Init(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <SPI1_Init+0x84>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <SPI1_Init+0x84>)
 8001700:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001704:	6613      	str	r3, [r2, #96]	; 0x60
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <SPI1_Init+0x84>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <SPI1_Init+0x88>)
 8001714:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <SPI1_Init+0x8c>)
 8001716:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <SPI1_Init+0x88>)
 800171a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800171e:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <SPI1_Init+0x88>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <SPI1_Init+0x88>)
 8001728:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800172c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <SPI1_Init+0x88>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <SPI1_Init+0x88>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <SPI1_Init+0x88>)
 800173c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001740:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <SPI1_Init+0x88>)
 8001744:	2228      	movs	r2, #40	; 0x28
 8001746:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <SPI1_Init+0x88>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <SPI1_Init+0x88>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <SPI1_Init+0x88>)
 8001756:	2200      	movs	r2, #0
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <SPI1_Init+0x88>)
 800175c:	2207      	movs	r2, #7
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001760:	4806      	ldr	r0, [pc, #24]	; (800177c <SPI1_Init+0x88>)
 8001762:	f005 f8b7 	bl	80068d4 <HAL_SPI_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d000      	beq.n	800176e <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 800176c:	e7fe      	b.n	800176c <SPI1_Init+0x78>
    }
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	200000ec 	.word	0x200000ec
 8001780:	40013000 	.word	0x40013000

08001784 <USART1_Init>:

/**
 * Initializes the USART1 peripheral in UART TX/RX mode
 */
void USART1_Init(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <USART1_Init+0x68>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <USART1_Init+0x68>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6613      	str	r3, [r2, #96]	; 0x60
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <USART1_Init+0x68>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

	// Configure UART peripheral
	huart1.Instance = USART1;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <USART1_Init+0x6c>)
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <USART1_Init+0x70>)
 80017a6:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <USART1_Init+0x6c>)
 80017aa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017ae:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <USART1_Init+0x6c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <USART1_Init+0x6c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <USART1_Init+0x6c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <USART1_Init+0x6c>)
 80017c4:	220c      	movs	r2, #12
 80017c6:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <USART1_Init+0x6c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <USART1_Init+0x6c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d4:	4806      	ldr	r0, [pc, #24]	; (80017f0 <USART1_Init+0x6c>)
 80017d6:	f005 fca7 	bl	8007128 <HAL_UART_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d000      	beq.n	80017e2 <USART1_Init+0x5e>
	{
		// Initialization error
		while (1);
 80017e0:	e7fe      	b.n	80017e0 <USART1_Init+0x5c>
	}
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	20000150 	.word	0x20000150
 80017f4:	40013800 	.word	0x40013800

080017f8 <TIM1_Init>:

/**
 * Initializes the TIM1 peripheral with interrupts enabled
 */
void TIM1_Init(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Enable TIM1 clock
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <TIM1_Init+0x4c>)
 80017fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001800:	4a10      	ldr	r2, [pc, #64]	; (8001844 <TIM1_Init+0x4c>)
 8001802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001806:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->PSC = 4000 - 1; // Given 4MHz clock, 4000 cycles for 1ms
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <TIM1_Init+0x50>)
 800180a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 5000 - 1; // Generate interrupt every 5000ms (5s)
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <TIM1_Init+0x50>)
 8001812:	f241 3287 	movw	r2, #4999	; 0x1387
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <TIM1_Init+0x50>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <TIM1_Init+0x50>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1); // Set TIM1 interrupt priority
 8001824:	2101      	movs	r1, #1
 8001826:	2019      	movs	r0, #25
 8001828:	f7ff fc40 	bl	80010ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); // Enable TIM1 interrupt
 800182c:	2019      	movs	r0, #25
 800182e:	f7ff fc1f 	bl	8001070 <__NVIC_EnableIRQ>

	TIM1->CR1 |= TIM_CR1_CEN; // Enable TIM1
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <TIM1_Init+0x50>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <TIM1_Init+0x50>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6013      	str	r3, [r2, #0]
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	40012c00 	.word	0x40012c00

0800184c <TIM2_Init>:

/**
 * Initializes the TIM2 peripheral with interrupts enabled
 */
void TIM2_Init(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // Enable TIM2 clock
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <TIM2_Init+0x58>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <TIM2_Init+0x58>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2->PSC = 4000 - 1; // Given 4MHz clock, 4000 cycles for 1ms
 800185c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001860:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 500 - 1; // Generate interrupt every 500ms (half second)
 8001866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8001870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM2_IRQn, 0); // Set TIM2 interrupt priority
 8001880:	2100      	movs	r1, #0
 8001882:	201c      	movs	r0, #28
 8001884:	f7ff fc12 	bl	80010ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable TIM2 interrupt
 8001888:	201c      	movs	r0, #28
 800188a:	f7ff fbf1 	bl	8001070 <__NVIC_EnableIRQ>

	TIM2->CR1 |= TIM_CR1_CEN; // Enable TIM2
 800188e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6013      	str	r3, [r2, #0]
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000

080018a8 <TIM1_UP_TIM16_IRQHandler>:

/**
 * Defining the ISR for the TIM1 timer
 */
void TIM1_UP_TIM16_IRQHandler(void) {
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	// Check if UIF flag is set for TIM1
	if (TIM1->SR & TIM_SR_UIF) {
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <TIM1_UP_TIM16_IRQHandler+0x22>
		logDataFlag = true; // Raise a flag to log data from the AFE
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <TIM1_UP_TIM16_IRQHandler+0x30>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~TIM_SR_UIF; // Clear UIF flag
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6113      	str	r3, [r2, #16]
	}
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40012c00 	.word	0x40012c00
 80018d8:	20000268 	.word	0x20000268

080018dc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	// Check if UIF flag is set for TIM2
    if (TIM2->SR & TIM_SR_UIF) {
 80018e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00a      	beq.n	8001904 <TIM2_IRQHandler+0x28>
    	logAlertsFlag = true; // Raise a flag to check for safety alerts from the AFE
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <TIM2_IRQHandler+0x34>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 80018f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6113      	str	r3, [r2, #16]
    }
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000269 	.word	0x20000269

08001914 <ADC1_Init>:

/**
 * Initializes the ADC1 peripheral in 12-bit resolution
 */
void ADC1_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]

    // Enable the clock for ADC1
    __HAL_RCC_ADC_CLK_ENABLE();
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <ADC1_Init+0xb8>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <ADC1_Init+0xb8>)
 8001932:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <ADC1_Init+0xb8>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]

    // Configure the ADC peripheral
    hadc1.Instance = ADC1;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <ADC1_Init+0xbc>)
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <ADC1_Init+0xc0>)
 8001948:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <ADC1_Init+0xbc>)
 800194c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001950:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;  // 12-bit resolution
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <ADC1_Init+0xbc>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;  // Right data alignment
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <ADC1_Init+0xbc>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;  // Single channel
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <ADC1_Init+0xbc>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;  // End of conversion flag after each conversion
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <ADC1_Init+0xbc>)
 8001966:	2204      	movs	r2, #4
 8001968:	615a      	str	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;  // Single conversion mode
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <ADC1_Init+0xbc>)
 800196c:	2200      	movs	r2, #0
 800196e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;  // Single conversion
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <ADC1_Init+0xbc>)
 8001972:	2201      	movs	r2, #1
 8001974:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <ADC1_Init+0xbc>)
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;  // Start conversion by software
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <ADC1_Init+0xbc>)
 8001980:	2200      	movs	r2, #0
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <ADC1_Init+0xbc>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <ADC1_Init+0xbc>)
 800198e:	2200      	movs	r2, #0
 8001990:	635a      	str	r2, [r3, #52]	; 0x34

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001992:	480f      	ldr	r0, [pc, #60]	; (80019d0 <ADC1_Init+0xbc>)
 8001994:	f002 f874 	bl	8003a80 <HAL_ADC_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <ADC1_Init+0x8e>
        // Initialization error
        Error_Handler();
 800199e:	f001 fb0d 	bl	8002fbc <Error_Handler>
    }

    // Configure the ADC regular channel (PA1 = ADC_CHANNEL_6)
    sConfig.Channel = ADC_CHANNEL_6;
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <ADC1_Init+0xc4>)
 80019a4:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80019a6:	2306      	movs	r3, #6
 80019a8:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;  // Sample time (adjust as necessary)
 80019aa:	2304      	movs	r3, #4
 80019ac:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	4619      	mov	r1, r3
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <ADC1_Init+0xbc>)
 80019b6:	f002 fb81 	bl	80040bc <HAL_ADC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <ADC1_Init+0xb0>
        // Channel configuration error
        Error_Handler();
 80019c0:	f001 fafc 	bl	8002fbc <Error_Handler>
    }
}
 80019c4:	bf00      	nop
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	200001d8 	.word	0x200001d8
 80019d4:	50040000 	.word	0x50040000
 80019d8:	19200040 	.word	0x19200040

080019dc <RTC_Init>:

/**
  * Initializes the RTC peripheral
  */
void RTC_Init(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80019f0:	2300      	movs	r3, #0
 80019f2:	603b      	str	r3, [r7, #0]

	// Initialize RTC
	hrtc.Instance = RTC;
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <RTC_Init+0xb0>)
 80019f6:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <RTC_Init+0xb4>)
 80019f8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <RTC_Init+0xb0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <RTC_Init+0xb0>)
 8001a02:	227f      	movs	r2, #127	; 0x7f
 8001a04:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <RTC_Init+0xb0>)
 8001a08:	22ff      	movs	r2, #255	; 0xff
 8001a0a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <RTC_Init+0xb0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <RTC_Init+0xb0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <RTC_Init+0xb0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <RTC_Init+0xb0>)
 8001a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a24:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <RTC_Init+0xb0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001a2c:	4817      	ldr	r0, [pc, #92]	; (8001a8c <RTC_Init+0xb0>)
 8001a2e:	f004 fc21 	bl	8006274 <HAL_RTC_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <RTC_Init+0x60>
		Error_Handler();
 8001a38:	f001 fac0 	bl	8002fbc <Error_Handler>
	}

	// Set initial time
	sTime.Hours = 0x09;
 8001a3c:	2309      	movs	r3, #9
 8001a3e:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x32;
 8001a40:	2332      	movs	r3, #50	; 0x32
 8001a42:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x00;
 8001a44:	2300      	movs	r3, #0
 8001a46:	71bb      	strb	r3, [r7, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480f      	ldr	r0, [pc, #60]	; (8001a8c <RTC_Init+0xb0>)
 8001a50:	f004 fca0 	bl	8006394 <HAL_RTC_SetTime>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <RTC_Init+0x82>
	{
		Error_Handler();
 8001a5a:	f001 faaf 	bl	8002fbc <Error_Handler>
	}

	// Set initial date
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_DECEMBER;
 8001a62:	2312      	movs	r3, #18
 8001a64:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x10;
 8001a66:	2310      	movs	r3, #16
 8001a68:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x24; // Year 2024
 8001a6a:	2324      	movs	r3, #36	; 0x24
 8001a6c:	70fb      	strb	r3, [r7, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	2201      	movs	r2, #1
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <RTC_Init+0xb0>)
 8001a76:	f004 fd86 	bl	8006586 <HAL_RTC_SetDate>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <RTC_Init+0xa8>
	{
		Error_Handler();
 8001a80:	f001 fa9c 	bl	8002fbc <Error_Handler>
	}
}
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000023c 	.word	0x2000023c
 8001a90:	40002800 	.word	0x40002800

08001a94 <crc8>:
/**
 * Calculates a CRC value according to the polynomial x^8 + x^2 + x + 1
 * @param data Pointer to an array storing the data bytes that will be transmitted
 * @param len Number of bytes that will be transmitted
 */
uint8_t crc8(uint8_t *data, size_t len) {
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
    while (len--)
 8001aa2:	e01e      	b.n	8001ae2 <crc8+0x4e>
    {
        crc ^= *data++;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	4053      	eors	r3, r2
 8001ab0:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73bb      	strb	r3, [r7, #14]
 8001ab6:	e011      	b.n	8001adc <crc8+0x48>
        {
            if (crc & 0x80)
 8001ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da07      	bge.n	8001ad0 <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	f083 0307 	eor.w	r3, r3, #7
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e002      	b.n	8001ad6 <crc8+0x42>
            else
                crc <<= 1;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73bb      	strb	r3, [r7, #14]
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	2b07      	cmp	r3, #7
 8001ae0:	d9ea      	bls.n	8001ab8 <crc8+0x24>
    while (len--)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	603a      	str	r2, [r7, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1db      	bne.n	8001aa4 <crc8+0x10>
        }
    }
    return crc;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <DirectCmdRead>:
 * Sends a direct command to the AFE and reads the data that is output
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <DirectCmdRead+0x90>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	823b      	strh	r3, [r7, #16]
 8001b12:	2300      	movs	r3, #0
 8001b14:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <DirectCmdRead+0x90>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	81bb      	strh	r3, [r7, #12]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	723b      	strb	r3, [r7, #8]
 8001b24:	23ff      	movs	r3, #255	; 0xff
 8001b26:	727b      	strb	r3, [r7, #9]
	uint8_t crcLower = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	74fb      	strb	r3, [r7, #19]
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e023      	b.n	8001b7a <DirectCmdRead+0x7e>
	{
		fullCmd[0] = cmd + i; // Increment the address
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4413      	add	r3, r2
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	723b      	strb	r3, [r7, #8]
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	2102      	movs	r1, #2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ffa5 	bl	8001a94 <crc8>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 8001b4e:	7a3b      	ldrb	r3, [r7, #8]
 8001b50:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 8001b52:	7a7b      	ldrb	r3, [r7, #9]
 8001b54:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 8001b56:	7cfb      	ldrb	r3, [r7, #19]
 8001b58:	73bb      	strb	r3, [r7, #14]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8001b5a:	f107 0110 	add.w	r1, r7, #16
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2203      	movs	r2, #3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fb9f 	bl	80022a8 <AFETransmitReadCmd>
		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7c7a      	ldrb	r2, [r7, #17]
 8001b72:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	79bb      	ldrb	r3, [r7, #6]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbd7      	blt.n	8001b32 <DirectCmdRead+0x36>
	}
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	0800b6e4 	.word	0x0800b6e4

08001b90 <DirectCmdWrite>:
 * Sends a direct command to the AFE and writes the provided data to it
 * @param cmd The address byte for the command
 * @param writeData Pointer to the 8-bit integer array containing the data to write
 * @param len Number of bytes to write to the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdWrite(uint8_t cmd, uint8_t *writeData, uint8_t len) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <DirectCmdWrite+0x8c>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	823b      	strh	r3, [r7, #16]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <DirectCmdWrite+0x8c>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	81bb      	strh	r3, [r7, #12]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[2] = {0};
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	813b      	strh	r3, [r7, #8]
	uint8_t crcLower = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	74fb      	strb	r3, [r7, #19]

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e023      	b.n	8001c0a <DirectCmdWrite+0x7a>
		fullCmd[0] = cmd + i;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	723b      	strb	r3, [r7, #8]
		fullCmd[1] = writeData[i];
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	727b      	strb	r3, [r7, #9]
		crcLower = crc8(fullCmd, 2);
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	2102      	movs	r1, #2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff58 	bl	8001a94 <crc8>
 8001be4:	4603      	mov	r3, r0
 8001be6:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 8001be8:	7a3b      	ldrb	r3, [r7, #8]
 8001bea:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 8001bec:	7a7b      	ldrb	r3, [r7, #9]
 8001bee:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	73bb      	strb	r3, [r7, #14]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001bf4:	f107 0110 	add.w	r1, r7, #16
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fb8a 	bl	8002318 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++) {
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	dbd7      	blt.n	8001bc2 <DirectCmdWrite+0x32>
	}
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	0800b6e4 	.word	0x0800b6e4

08001c20 <SubCmdNoData>:

/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <SubCmdNoData+0x8c>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	833b      	strh	r3, [r7, #24]
 8001c30:	2300      	movs	r3, #0
 8001c32:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001c34:	23be      	movs	r3, #190	; 0xbe
 8001c36:	753b      	strb	r3, [r7, #20]
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	2102      	movs	r1, #2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff25 	bl	8001a94 <crc8>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001c4e:	23bf      	movs	r3, #191	; 0xbf
 8001c50:	743b      	strb	r3, [r7, #16]
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2102      	movs	r1, #2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff16 	bl	8001a94 <crc8>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	77bb      	strb	r3, [r7, #30]

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001c6c:	7d3b      	ldrb	r3, [r7, #20]
 8001c6e:	733b      	strb	r3, [r7, #12]
 8001c70:	7d7b      	ldrb	r3, [r7, #21]
 8001c72:	737b      	strb	r3, [r7, #13]
 8001c74:	7ffb      	ldrb	r3, [r7, #31]
 8001c76:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001c78:	f107 0118 	add.w	r1, r7, #24
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	2203      	movs	r2, #3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fb48 	bl	8002318 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001c88:	7c3b      	ldrb	r3, [r7, #16]
 8001c8a:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 8001c8c:	7c7b      	ldrb	r3, [r7, #17]
 8001c8e:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 8001c90:	7fbb      	ldrb	r3, [r7, #30]
 8001c92:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001c94:	f107 0118 	add.w	r1, r7, #24
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fb3a 	bl	8002318 <AFETransmitWriteCmd>
}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	0800b6e4 	.word	0x0800b6e4

08001cb0 <SubCmdReadData>:
 * Sends a sub-command to the AFE and reads the data that is output
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	80fb      	strh	r3, [r7, #6]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001cc0:	4b38      	ldr	r3, [pc, #224]	; (8001da4 <SubCmdReadData+0xf4>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	83bb      	strh	r3, [r7, #28]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	77bb      	strb	r3, [r7, #30]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001cca:	23be      	movs	r3, #190	; 0xbe
 8001ccc:	763b      	strb	r3, [r7, #24]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	2102      	movs	r1, #2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff feda 	bl	8001a94 <crc8>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001ce6:	23bf      	movs	r3, #191	; 0xbf
 8001ce8:	753b      	strb	r3, [r7, #20]
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff feca 	bl	8001a94 <crc8>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001d06:	7e3b      	ldrb	r3, [r7, #24]
 8001d08:	743b      	strb	r3, [r7, #16]
 8001d0a:	7e7b      	ldrb	r3, [r7, #25]
 8001d0c:	747b      	strb	r3, [r7, #17]
 8001d0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d12:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001d14:	f107 011c 	add.w	r1, r7, #28
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fafa 	bl	8002318 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001d24:	7d3b      	ldrb	r3, [r7, #20]
 8001d26:	743b      	strb	r3, [r7, #16]
	txData[1] = commandUpperAddr[1];
 8001d28:	7d7b      	ldrb	r3, [r7, #21]
 8001d2a:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001d2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d30:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001d32:	f107 011c 	add.w	r1, r7, #28
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 faeb 	bl	8002318 <AFETransmitWriteCmd>

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 8001d42:	2300      	movs	r3, #0
 8001d44:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4a:	e022      	b.n	8001d92 <SubCmdReadData+0xe2>
		readData[0] = READ_DATA_BUFF_LSB + i;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3340      	adds	r3, #64	; 0x40
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	733b      	strb	r3, [r7, #12]
		readData[1] = 0xFF;
 8001d56:	23ff      	movs	r3, #255	; 0xff
 8001d58:	737b      	strb	r3, [r7, #13]

		txData[0] = readData[0];
 8001d5a:	7b3b      	ldrb	r3, [r7, #12]
 8001d5c:	743b      	strb	r3, [r7, #16]
		txData[1] = readData[1];
 8001d5e:	7b7b      	ldrb	r3, [r7, #13]
 8001d60:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(readData, 2);
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	2102      	movs	r1, #2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe93 	bl	8001a94 <crc8>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	74bb      	strb	r3, [r7, #18]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8001d72:	f107 011c 	add.w	r1, r7, #28
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fa93 	bl	80022a8 <AFETransmitReadCmd>

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	7f7a      	ldrb	r2, [r7, #29]
 8001d8a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3301      	adds	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	797b      	ldrb	r3, [r7, #5]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbd8      	blt.n	8001d4c <SubCmdReadData+0x9c>
	}
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	0800b6e4 	.word	0x0800b6e4

08001da8 <RAMRegisterWrite>:
 * Writes the given value in one of the AFE's RAM registers
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	80fb      	strh	r3, [r7, #6]
 8001db4:	4613      	mov	r3, r2
 8001db6:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001db8:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <RAMRegisterWrite+0x1a4>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	83bb      	strh	r3, [r7, #28]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	77bb      	strb	r3, [r7, #30]
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
 8001dc2:	23be      	movs	r3, #190	; 0xbe
 8001dc4:	763b      	strb	r3, [r7, #24]
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(lowerAddr, 2);
 8001dcc:	f107 0318 	add.w	r3, r7, #24
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fe5e 	bl	8001a94 <crc8>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
 8001dde:	23bf      	movs	r3, #191	; 0xbf
 8001de0:	753b      	strb	r3, [r7, #20]
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(upperAddr, 2);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2102      	movs	r1, #2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fe4e 	bl	8001a94 <crc8>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
 8001dfe:	7e3b      	ldrb	r3, [r7, #24]
 8001e00:	743b      	strb	r3, [r7, #16]
 8001e02:	7e7b      	ldrb	r3, [r7, #25]
 8001e04:	747b      	strb	r3, [r7, #17]
 8001e06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e0a:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001e0c:	f107 011c 	add.w	r1, r7, #28
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	2203      	movs	r2, #3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fa7e 	bl	8002318 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = upperAddr[0];
 8001e1c:	7d3b      	ldrb	r3, [r7, #20]
 8001e1e:	743b      	strb	r3, [r7, #16]
	txData[1] = upperAddr[1];
 8001e20:	7d7b      	ldrb	r3, [r7, #21]
 8001e22:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001e24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e28:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001e2a:	f107 011c 	add.w	r1, r7, #28
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	2203      	movs	r2, #3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fa6f 	bl	8002318 <AFETransmitWriteCmd>

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e42:	e020      	b.n	8001e86 <RAMRegisterWrite+0xde>
	{
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3b40      	subs	r3, #64	; 0x40
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	733b      	strb	r3, [r7, #12]
		writeBytes[1] = writeData[i];
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	737b      	strb	r3, [r7, #13]

		txData[0] = writeBytes[0];
 8001e58:	7b3b      	ldrb	r3, [r7, #12]
 8001e5a:	743b      	strb	r3, [r7, #16]
		txData[1] = writeBytes[1];
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2102      	movs	r1, #2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe14 	bl	8001a94 <crc8>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	74bb      	strb	r3, [r7, #18]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001e70:	f107 011c 	add.w	r1, r7, #28
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fa4c 	bl	8002318 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++)
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	3301      	adds	r3, #1
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e86:	797b      	ldrb	r3, [r7, #5]
 8001e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbda      	blt.n	8001e44 <RAMRegisterWrite+0x9c>
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	e00b      	b.n	8001eb2 <RAMRegisterWrite+0x10a>
		checkSum += writeData[i];
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	3301      	adds	r3, #1
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	797b      	ldrb	r3, [r7, #5]
 8001eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbef      	blt.n	8001e9a <RAMRegisterWrite+0xf2>
	}
	checkSum += lowerAddr[1];
 8001eba:	7e7a      	ldrb	r2, [r7, #25]
 8001ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum += upperAddr[1];
 8001ec6:	7d7a      	ldrb	r2, [r7, #21]
 8001ec8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ecc:	4413      	add	r3, r2
 8001ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum = ~(checkSum);
 8001ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
 8001edc:	23e0      	movs	r3, #224	; 0xe0
 8001ede:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = checkSum;
 8001ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ee4:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001ee6:	7b3b      	ldrb	r3, [r7, #12]
 8001ee8:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001eea:	7b7b      	ldrb	r3, [r7, #13]
 8001eec:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fdcd 	bl	8001a94 <crc8>
 8001efa:	4603      	mov	r3, r0
 8001efc:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001efe:	f107 011c 	add.w	r1, r7, #28
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	2203      	movs	r2, #3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fa05 	bl	8002318 <AFETransmitWriteCmd>

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
 8001f0e:	23e1      	movs	r3, #225	; 0xe1
 8001f10:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes
 8001f12:	797b      	ldrb	r3, [r7, #5]
 8001f14:	3304      	adds	r3, #4
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001f1a:	7b3b      	ldrb	r3, [r7, #12]
 8001f1c:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001f1e:	7b7b      	ldrb	r3, [r7, #13]
 8001f20:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	2102      	movs	r1, #2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fdb3 	bl	8001a94 <crc8>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001f32:	f107 011c 	add.w	r1, r7, #28
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f9eb 	bl	8002318 <AFETransmitWriteCmd>
}
 8001f42:	bf00      	nop
 8001f44:	3730      	adds	r7, #48	; 0x30
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	0800b6e4 	.word	0x0800b6e4

08001f50 <RAMRegisterInit>:

/**
 * Programs all the relevant AFE registers. To be used whenever BMS powers on or AFE enters SHUTDOWN
 */
void RAMRegisterInit(void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
	// Initializing buffer for writing data to AFE
	uint8_t writeData[32] = {0};
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	615a      	str	r2, [r3, #20]
 8001f6a:	619a      	str	r2, [r3, #24]

	/**
	 * Configuration settings registers
	 */
	// Configure TS pins
	writeData[0] = 0x07; // TS1 & TS2: Thermistor temperature, for cell temperature protection
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_TS1_CFG, writeData, 1);
 8001f70:	463b      	mov	r3, r7
 8001f72:	2201      	movs	r2, #1
 8001f74:	4619      	mov	r1, r3
 8001f76:	f249 20fd 	movw	r0, #37629	; 0x92fd
 8001f7a:	f7ff ff15 	bl	8001da8 <RAMRegisterWrite>
	RAMRegisterWrite(SET_CONF_TS2_CFG, writeData, 1);
 8001f7e:	463b      	mov	r3, r7
 8001f80:	2201      	movs	r2, #1
 8001f82:	4619      	mov	r1, r3
 8001f84:	f249 20fe 	movw	r0, #37630	; 0x92fe
 8001f88:	f7ff ff0e 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x0F; // TS3: Thermistor temperature, for FET temperature protection
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_TS3_CFG, writeData, 1);
 8001f90:	463b      	mov	r3, r7
 8001f92:	2201      	movs	r2, #1
 8001f94:	4619      	mov	r1, r3
 8001f96:	f249 20ff 	movw	r0, #37631	; 0x92ff
 8001f9a:	f7ff ff05 	bl	8001da8 <RAMRegisterWrite>
	// Configure ALERT pin
	writeData[0] = 0x2A;
 8001f9e:	232a      	movs	r3, #42	; 0x2a
 8001fa0:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_ALERT_CFG, writeData, 1);
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f249 20fc 	movw	r0, #37628	; 0x92fc
 8001fac:	f7ff fefc 	bl	8001da8 <RAMRegisterWrite>
	// Configure DA
	writeData[0] = 0x06;
 8001fb0:	2306      	movs	r3, #6
 8001fb2:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_DA_CFG, writeData, 1);
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f249 3003 	movw	r0, #37635	; 0x9303
 8001fbe:	f7ff fef3 	bl	8001da8 <RAMRegisterWrite>

	/**
	 * Protection settings registers
	 */
	writeData[0] = 0xFC;
 8001fc2:	23fc      	movs	r3, #252	; 0xfc
 8001fc4:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_ENPROT_A, writeData, 1); // Enables SCD, OCD1, OCC, COV, CUV protection
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f249 2061 	movw	r0, #37473	; 0x9261
 8001fd0:	f7ff feea 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0xF7;
 8001fd4:	23f7      	movs	r3, #247	; 0xf7
 8001fd6:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_ENPROT_B, writeData, 1); // Enables OTF, OTINT, OTD, OTC, and all UT protection
 8001fd8:	463b      	mov	r3, r7
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f249 2062 	movw	r0, #37474	; 0x9262
 8001fe2:	f7ff fee1 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_ENPROT_C, writeData, 1); // Disables all special/latch protections
 8001fea:	463b      	mov	r3, r7
 8001fec:	2201      	movs	r2, #1
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f249 2063 	movw	r0, #37475	; 0x9263
 8001ff4:	f7ff fed8 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x98;
 8001ff8:	2398      	movs	r3, #152	; 0x98
 8001ffa:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_CHGFET_PROT_A, writeData, 1); // SCD, OCC, and COV disable CHG FET
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2201      	movs	r2, #1
 8002000:	4619      	mov	r1, r3
 8002002:	f249 2065 	movw	r0, #37477	; 0x9265
 8002006:	f7ff fecf 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0xD4;
 800200a:	23d4      	movs	r3, #212	; 0xd4
 800200c:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_CHGFET_PROT_B, writeData, 1); // OTF, OTINT, OTC, and UTINT disable CHG FET
 800200e:	463b      	mov	r3, r7
 8002010:	2201      	movs	r2, #1
 8002012:	4619      	mov	r1, r3
 8002014:	f249 2066 	movw	r0, #37478	; 0x9266
 8002018:	f7ff fec6 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x00;
 800201c:	2300      	movs	r3, #0
 800201e:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_CHGFET_PROT_C, writeData, 1); // Type C protections are disabled anyways
 8002020:	463b      	mov	r3, r7
 8002022:	2201      	movs	r2, #1
 8002024:	4619      	mov	r1, r3
 8002026:	f249 2067 	movw	r0, #37479	; 0x9267
 800202a:	f7ff febd 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0xE4;
 800202e:	23e4      	movs	r3, #228	; 0xe4
 8002030:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_DSGFET_PROT_A, writeData, 1); // SCD, OCD1, OCD2, and CUV disable DSG FET
 8002032:	463b      	mov	r3, r7
 8002034:	2201      	movs	r2, #1
 8002036:	4619      	mov	r1, r3
 8002038:	f249 2069 	movw	r0, #37481	; 0x9269
 800203c:	f7ff feb4 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0xE4;
 8002040:	23e4      	movs	r3, #228	; 0xe4
 8002042:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_DSGFET_PROT_B, writeData, 1); // OTF, OTINT, OTD, and UTINT disable DSG FET
 8002044:	463b      	mov	r3, r7
 8002046:	2201      	movs	r2, #1
 8002048:	4619      	mov	r1, r3
 800204a:	f249 206a 	movw	r0, #37482	; 0x926a
 800204e:	f7ff feab 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x00;
 8002052:	2300      	movs	r3, #0
 8002054:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_DSGFET_PROT_C, writeData, 1); // Type C protections are disabled anyways
 8002056:	463b      	mov	r3, r7
 8002058:	2201      	movs	r2, #1
 800205a:	4619      	mov	r1, r3
 800205c:	f249 206b 	movw	r0, #37483	; 0x926b
 8002060:	f7ff fea2 	bl	8001da8 <RAMRegisterWrite>

	/**
	 * FET settings registers
	 */
	writeData[0] = 0x1E;
 8002064:	231e      	movs	r3, #30
 8002066:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1); // Enable PDSG, disable body diode protection, enable CHG FET in SLEEP
 8002068:	463b      	mov	r3, r7
 800206a:	2201      	movs	r2, #1
 800206c:	4619      	mov	r1, r3
 800206e:	f249 3008 	movw	r0, #37640	; 0x9308
 8002072:	f7ff fe99 	bl	8001da8 <RAMRegisterWrite>
	format_uint16(writeData, 0x06A4);
 8002076:	463b      	mov	r3, r7
 8002078:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ffc1 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_FET_PCHG_STRT_V, writeData, 2); // Min. cell voltage below 1700mV activates PCHG mode
 8002082:	463b      	mov	r3, r7
 8002084:	2202      	movs	r2, #2
 8002086:	4619      	mov	r1, r3
 8002088:	f249 300a 	movw	r0, #37642	; 0x930a
 800208c:	f7ff fe8c 	bl	8001da8 <RAMRegisterWrite>
	format_uint16(writeData, 0x06D6);
 8002090:	463b      	mov	r3, r7
 8002092:	f240 61d6 	movw	r1, #1750	; 0x6d6
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe ffb4 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_FET_PCHG_STP_V, writeData, 2); // Min. cell voltage above 1750mV deactivates PCHG mode
 800209c:	463b      	mov	r3, r7
 800209e:	2202      	movs	r2, #2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f249 300c 	movw	r0, #37644	; 0x930c
 80020a6:	f7ff fe7f 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x64;
 80020aa:	2364      	movs	r3, #100	; 0x64
 80020ac:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_PDSG_TO, writeData, 1); // PDSG timeout after 1000ms, enables DSG FET after
 80020ae:	463b      	mov	r3, r7
 80020b0:	2201      	movs	r2, #1
 80020b2:	4619      	mov	r1, r3
 80020b4:	f249 300e 	movw	r0, #37646	; 0x930e
 80020b8:	f7ff fe76 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x64;
 80020bc:	2364      	movs	r3, #100	; 0x64
 80020be:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_PDSG_STP_DLT, writeData, 1); // Exit PDSG and enable DSG FET when LD equals VBAT+ minus 1000mV
 80020c0:	463b      	mov	r3, r7
 80020c2:	2201      	movs	r2, #1
 80020c4:	4619      	mov	r1, r3
 80020c6:	f249 300f 	movw	r0, #37647	; 0x930f
 80020ca:	f7ff fe6d 	bl	8001da8 <RAMRegisterWrite>

	/**
	 * Misc. settings
	 */
	// Setting MFG Status Init to disable FET Test commands
	format_uint16(writeData, 0x0050);
 80020ce:	463b      	mov	r3, r7
 80020d0:	2150      	movs	r1, #80	; 0x50
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe ff96 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_MFG_STATUS_INIT, writeData, 2);
 80020d8:	463b      	mov	r3, r7
 80020da:	2202      	movs	r2, #2
 80020dc:	4619      	mov	r1, r3
 80020de:	f249 3033 	movw	r0, #37683	; 0x9333
 80020e2:	f7ff fe61 	bl	8001da8 <RAMRegisterWrite>
	// Setting DSG threshold to 100mA and CHG threshold to 50mA
	format_uint16(writeData, 0x000A);
 80020e6:	463b      	mov	r3, r7
 80020e8:	210a      	movs	r1, #10
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe ff8a 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_CURRTH_DSG_CURRTH, writeData, 2);
 80020f0:	463b      	mov	r3, r7
 80020f2:	2202      	movs	r2, #2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f249 3010 	movw	r0, #37648	; 0x9310
 80020fa:	f7ff fe55 	bl	8001da8 <RAMRegisterWrite>
	format_uint16(writeData, 0x0005);
 80020fe:	463b      	mov	r3, r7
 8002100:	2105      	movs	r1, #5
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe ff7e 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_CURRTH_CHG_CURRTH, writeData, 2);
 8002108:	463b      	mov	r3, r7
 800210a:	2202      	movs	r2, #2
 800210c:	4619      	mov	r1, r3
 800210e:	f249 3012 	movw	r0, #37650	; 0x9312
 8002112:	f7ff fe49 	bl	8001da8 <RAMRegisterWrite>

	/**
	 * Cell balancing settings registers
	 */
	writeData[0] = 0x0F;
 8002116:	230f      	movs	r3, #15
 8002118:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CLBCFG_CONFIG, writeData, 1); // Exits SLEEP to perform balancing, allow balancing while charging and in relax mode
 800211a:	463b      	mov	r3, r7
 800211c:	2201      	movs	r2, #1
 800211e:	4619      	mov	r1, r3
 8002120:	f249 3035 	movw	r0, #37685	; 0x9335
 8002124:	f7ff fe40 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x0A;
 8002128:	230a      	movs	r3, #10
 800212a:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CLBCFG_CB_INTRVL, writeData, 1); // Recalculates which cells to balance every 10 seconds
 800212c:	463b      	mov	r3, r7
 800212e:	2201      	movs	r2, #1
 8002130:	4619      	mov	r1, r3
 8002132:	f249 3039 	movw	r0, #37689	; 0x9339
 8002136:	f7ff fe37 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x08;
 800213a:	2308      	movs	r3, #8
 800213c:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CLBCFG_CB_MAX_CLS, writeData, 1); // Allows up to 8 cells to be balanced at once
 800213e:	463b      	mov	r3, r7
 8002140:	2201      	movs	r2, #1
 8002142:	4619      	mov	r1, r3
 8002144:	f249 303a 	movw	r0, #37690	; 0x933a
 8002148:	f7ff fe2e 	bl	8001da8 <RAMRegisterWrite>
	// Min. cell voltage must be at least 2500mV for cell balancing to occur while charging or in relax mode
	format_uint16(writeData, 0x09C4);
 800214c:	463b      	mov	r3, r7
 800214e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ff56 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_CLBCFG_CHG_MIN_V, writeData, 2);
 8002158:	463b      	mov	r3, r7
 800215a:	2202      	movs	r2, #2
 800215c:	4619      	mov	r1, r3
 800215e:	f249 303b 	movw	r0, #37691	; 0x933b
 8002162:	f7ff fe21 	bl	8001da8 <RAMRegisterWrite>
	RAMRegisterWrite(SET_CLBCFG_RLX_MIN_V, writeData, 2);
 8002166:	463b      	mov	r3, r7
 8002168:	2202      	movs	r2, #2
 800216a:	4619      	mov	r1, r3
 800216c:	f249 303f 	movw	r0, #37695	; 0x933f
 8002170:	f7ff fe1a 	bl	8001da8 <RAMRegisterWrite>

	/**
	 * Power registers
	 */
	format_uint16(writeData, 0x0960);
 8002174:	463b      	mov	r3, r7
 8002176:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ff42 	bl	8001004 <format_uint16>
	RAMRegisterWrite(PWR_SHDN_BATT_V, writeData, 2); // If pack voltage falls below 24000mV, AFE enters SHUTDOWN mode
 8002180:	463b      	mov	r3, r7
 8002182:	2202      	movs	r2, #2
 8002184:	4619      	mov	r1, r3
 8002186:	f249 2041 	movw	r0, #37441	; 0x9241
 800218a:	f7ff fe0d 	bl	8001da8 <RAMRegisterWrite>
	format_uint16(writeData, 0x000A);
 800218e:	463b      	mov	r3, r7
 8002190:	210a      	movs	r1, #10
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe ff36 	bl	8001004 <format_uint16>
	RAMRegisterWrite(PWR_SLP_CURR, writeData, 2); // Current above 10mA will cause device to exit SLEEP mode
 8002198:	463b      	mov	r3, r7
 800219a:	2202      	movs	r2, #2
 800219c:	4619      	mov	r1, r3
 800219e:	f249 2048 	movw	r0, #37448	; 0x9248
 80021a2:	f7ff fe01 	bl	8001da8 <RAMRegisterWrite>
	format_uint16(writeData, 0x0960);
 80021a6:	463b      	mov	r3, r7
 80021a8:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ff29 	bl	8001004 <format_uint16>
	RAMRegisterWrite(PWR_SLP_CHG_V_THLD, writeData, 2); // If pack voltage falls below 24000mV, SLEEP mode is blocked when charger detected
 80021b2:	463b      	mov	r3, r7
 80021b4:	2202      	movs	r2, #2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f249 204e 	movw	r0, #37454	; 0x924e
 80021bc:	f7ff fdf4 	bl	8001da8 <RAMRegisterWrite>

	/**
	 * Protections registers (testing only)
	 */
	writeData[0] = 0x1A;
 80021c0:	231a      	movs	r3, #26
 80021c2:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_CUV_THLD, writeData, 1); // CUV triggered at 1.265V, cleared above 1.3662V
 80021c4:	463b      	mov	r3, r7
 80021c6:	2201      	movs	r2, #1
 80021c8:	4619      	mov	r1, r3
 80021ca:	f249 2075 	movw	r0, #37493	; 0x9275
 80021ce:	f7ff fdeb 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x23;
 80021d2:	2323      	movs	r3, #35	; 0x23
 80021d4:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_COV_THLD, writeData, 1); // COV triggered at 1.771V, cleared below 1.6698V
 80021d6:	463b      	mov	r3, r7
 80021d8:	2201      	movs	r2, #1
 80021da:	4619      	mov	r1, r3
 80021dc:	f249 2078 	movw	r0, #37496	; 0x9278
 80021e0:	f7ff fde2 	bl	8001da8 <RAMRegisterWrite>
	 */
//	writeData[0] = 0x23;
//	RAMRegisterWrite(PROT_CUV_THLD, writeData, 1); // CUV triggered at 1.771V, cleared above 1.8732V
//	writeData[0] = 0x37;
//	RAMRegisterWrite(PROT_COV_THLD, writeData, 1); // COV triggered at 2.783V, cleared below 2.6818V
	writeData[0] = 0x08;
 80021e4:	2308      	movs	r3, #8
 80021e6:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCC_THLD, writeData, 1); // OCC triggered at 16A
 80021e8:	463b      	mov	r3, r7
 80021ea:	2201      	movs	r2, #1
 80021ec:	4619      	mov	r1, r3
 80021ee:	f249 2080 	movw	r0, #37504	; 0x9280
 80021f2:	f7ff fdd9 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x15;
 80021f6:	2315      	movs	r3, #21
 80021f8:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD1_THLD, writeData, 1); // OCD1 triggered at 42A
 80021fa:	463b      	mov	r3, r7
 80021fc:	2201      	movs	r2, #1
 80021fe:	4619      	mov	r1, r3
 8002200:	f249 2082 	movw	r0, #37506	; 0x9282
 8002204:	f7ff fdd0 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x64;
 8002208:	2364      	movs	r3, #100	; 0x64
 800220a:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD1_DLY, writeData, 1); // OCD1 triggered after 340ms delay
 800220c:	463b      	mov	r3, r7
 800220e:	2201      	movs	r2, #1
 8002210:	4619      	mov	r1, r3
 8002212:	f249 2083 	movw	r0, #37507	; 0x9283
 8002216:	f7ff fdc7 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x19;
 800221a:	2319      	movs	r3, #25
 800221c:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD2_THLD, writeData, 1); // OCD2 triggered at 50A
 800221e:	463b      	mov	r3, r7
 8002220:	2201      	movs	r2, #1
 8002222:	4619      	mov	r1, r3
 8002224:	f249 2084 	movw	r0, #37508	; 0x9284
 8002228:	f7ff fdbe 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x1C;
 800222c:	231c      	movs	r3, #28
 800222e:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD2_DLY, writeData, 1); // OCD2 triggered after 100ms delay
 8002230:	463b      	mov	r3, r7
 8002232:	2201      	movs	r2, #1
 8002234:	4619      	mov	r1, r3
 8002236:	f249 2085 	movw	r0, #37509	; 0x9285
 800223a:	f7ff fdb5 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0x03;
 800223e:	2303      	movs	r3, #3
 8002240:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_SCD_THLD, writeData, 1); // SCD triggered at 60A
 8002242:	463b      	mov	r3, r7
 8002244:	2201      	movs	r2, #1
 8002246:	4619      	mov	r1, r3
 8002248:	f249 2086 	movw	r0, #37510	; 0x9286
 800224c:	f7ff fdac 	bl	8001da8 <RAMRegisterWrite>
	RAMRegisterWrite(PROT_SCD_DLY, writeData, 1); // SCD triggered after 30µs delay
 8002250:	463b      	mov	r3, r7
 8002252:	2201      	movs	r2, #1
 8002254:	4619      	mov	r1, r3
 8002256:	f249 2087 	movw	r0, #37511	; 0x9287
 800225a:	f7ff fda5 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0xEC;
 800225e:	23ec      	movs	r3, #236	; 0xec
 8002260:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_UTD_THLD, writeData, 1); // UTD triggered at -20ºC
 8002262:	463b      	mov	r3, r7
 8002264:	2201      	movs	r2, #1
 8002266:	4619      	mov	r1, r3
 8002268:	f249 20a9 	movw	r0, #37545	; 0x92a9
 800226c:	f7ff fd9c 	bl	8001da8 <RAMRegisterWrite>
	RAMRegisterWrite(PROT_UTC_THLD, writeData, 1); // UTC triggered at -20ºC
 8002270:	463b      	mov	r3, r7
 8002272:	2201      	movs	r2, #1
 8002274:	4619      	mov	r1, r3
 8002276:	f249 20a6 	movw	r0, #37542	; 0x92a6
 800227a:	f7ff fd95 	bl	8001da8 <RAMRegisterWrite>
	writeData[0] = 0xF1;
 800227e:	23f1      	movs	r3, #241	; 0xf1
 8002280:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_UTD_RCVR, writeData, 1); // UTD cleared above -15ºC
 8002282:	463b      	mov	r3, r7
 8002284:	2201      	movs	r2, #1
 8002286:	4619      	mov	r1, r3
 8002288:	f249 20ab 	movw	r0, #37547	; 0x92ab
 800228c:	f7ff fd8c 	bl	8001da8 <RAMRegisterWrite>
	RAMRegisterWrite(PROT_UTC_RCVR, writeData, 1); // UTC cleared above -15ºC
 8002290:	463b      	mov	r3, r7
 8002292:	2201      	movs	r2, #1
 8002294:	4619      	mov	r1, r3
 8002296:	f249 20a8 	movw	r0, #37544	; 0x92a8
 800229a:	f7ff fd85 	bl	8001da8 <RAMRegisterWrite>
}
 800229e:	bf00      	nop
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <AFETransmitReadCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI read command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 80022ba:	e01e      	b.n	80022fa <AFETransmitReadCmd+0x52>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	2101      	movs	r1, #1
 80022c0:	4813      	ldr	r0, [pc, #76]	; (8002310 <AFETransmitReadCmd+0x68>)
 80022c2:	f002 ff1d 	bl	8005100 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295
 80022ce:	9200      	str	r2, [sp, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	68f9      	ldr	r1, [r7, #12]
 80022d4:	480f      	ldr	r0, [pc, #60]	; (8002314 <AFETransmitReadCmd+0x6c>)
 80022d6:	f004 fba0 	bl	8006a1a <HAL_SPI_TransmitReceive>

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		if (txBytes[0] == rxBytes[0]) commReceived = true;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d101      	bne.n	80022ea <AFETransmitReadCmd+0x42>
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
		// TODO: implement CRC checking for received data

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	2101      	movs	r1, #1
 80022ee:	4808      	ldr	r0, [pc, #32]	; (8002310 <AFETransmitReadCmd+0x68>)
 80022f0:	f002 ff06 	bl	8005100 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f001 f95b 	bl	80035b0 <HAL_Delay>
	while (!commReceived)
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	f083 0301 	eor.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1da      	bne.n	80022bc <AFETransmitReadCmd+0x14>
	}

}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	48000400 	.word	0x48000400
 8002314:	200000ec 	.word	0x200000ec

08002318 <AFETransmitWriteCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI write command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 800232a:	e02e      	b.n	800238a <AFETransmitWriteCmd+0x72>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2101      	movs	r1, #1
 8002330:	481b      	ldr	r0, [pc, #108]	; (80023a0 <AFETransmitWriteCmd+0x88>)
 8002332:	f002 fee5 	bl	8005100 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f04f 32ff 	mov.w	r2, #4294967295
 800233e:	9200      	str	r2, [sp, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	4817      	ldr	r0, [pc, #92]	; (80023a4 <AFETransmitWriteCmd+0x8c>)
 8002346:	f004 fb68 	bl	8006a1a <HAL_SPI_TransmitReceive>

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e00e      	b.n	8002372 <AFETransmitWriteCmd+0x5a>
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4413      	add	r3, r2
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	440b      	add	r3, r1
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <AFETransmitWriteCmd+0x54>
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	3301      	adds	r3, #1
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbec      	blt.n	8002354 <AFETransmitWriteCmd+0x3c>
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800237a:	2201      	movs	r2, #1
 800237c:	2101      	movs	r1, #1
 800237e:	4808      	ldr	r0, [pc, #32]	; (80023a0 <AFETransmitWriteCmd+0x88>)
 8002380:	f002 febe 	bl	8005100 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002384:	2001      	movs	r0, #1
 8002386:	f001 f913 	bl	80035b0 <HAL_Delay>
	while (!commReceived)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1ca      	bne.n	800232c <AFETransmitWriteCmd+0x14>
	}
}
 8002396:	bf00      	nop
 8002398:	bf00      	nop
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	48000400 	.word	0x48000400
 80023a4:	200000ec 	.word	0x200000ec

080023a8 <TransmitLogAndTimestamp>:

/**
 * Helper function to begin transmission of logging information with the current timestamp
 */
void TransmitLogAndTimestamp(void) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80023ae:	af00      	add	r7, sp, #0
	char buffer[512] = {0}; // Initialize buffer to store message
 80023b0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80023b4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	3304      	adds	r3, #4
 80023be:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f005 fd32 	bl	8007e2e <memset>
	char temp[48]; // Temporary buffer for each line

	// Preparing a heading for the data log
	snprintf(temp, sizeof(temp), "**************************************\n\r");
 80023ca:	463b      	mov	r3, r7
 80023cc:	4a47      	ldr	r2, [pc, #284]	; (80024ec <TransmitLogAndTimestamp+0x144>)
 80023ce:	2130      	movs	r1, #48	; 0x30
 80023d0:	4618      	mov	r0, r3
 80023d2:	f005 fcb3 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80023d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fd ff02 	bl	80001e4 <strlen>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 80023e6:	3301      	adds	r3, #1
 80023e8:	4639      	mov	r1, r7
 80023ea:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80023ee:	461a      	mov	r2, r3
 80023f0:	f005 fd25 	bl	8007e3e <strncat>
	snprintf(temp, sizeof(temp), "************ BMS DATA LOG ************\n\r");
 80023f4:	463b      	mov	r3, r7
 80023f6:	4a3e      	ldr	r2, [pc, #248]	; (80024f0 <TransmitLogAndTimestamp+0x148>)
 80023f8:	2130      	movs	r1, #48	; 0x30
 80023fa:	4618      	mov	r0, r3
 80023fc:	f005 fc9e 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002404:	4618      	mov	r0, r3
 8002406:	f7fd feed 	bl	80001e4 <strlen>
 800240a:	4603      	mov	r3, r0
 800240c:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8002410:	3301      	adds	r3, #1
 8002412:	4639      	mov	r1, r7
 8002414:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002418:	461a      	mov	r2, r3
 800241a:	f005 fd10 	bl	8007e3e <strncat>
	snprintf(temp, sizeof(temp), "**************************************\n\r");
 800241e:	463b      	mov	r3, r7
 8002420:	4a32      	ldr	r2, [pc, #200]	; (80024ec <TransmitLogAndTimestamp+0x144>)
 8002422:	2130      	movs	r1, #48	; 0x30
 8002424:	4618      	mov	r0, r3
 8002426:	f005 fc89 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800242a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800242e:	4618      	mov	r0, r3
 8002430:	f7fd fed8 	bl	80001e4 <strlen>
 8002434:	4603      	mov	r3, r0
 8002436:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800243a:	3301      	adds	r3, #1
 800243c:	4639      	mov	r1, r7
 800243e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002442:	461a      	mov	r2, r3
 8002444:	f005 fcfb 	bl	8007e3e <strncat>

	// Logging the timestamp
	snprintf(temp, sizeof(temp), "Timestamp: ");
 8002448:	463b      	mov	r3, r7
 800244a:	4a2a      	ldr	r2, [pc, #168]	; (80024f4 <TransmitLogAndTimestamp+0x14c>)
 800244c:	2130      	movs	r1, #48	; 0x30
 800244e:	4618      	mov	r0, r3
 8002450:	f005 fc74 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002458:	4618      	mov	r0, r3
 800245a:	f7fd fec3 	bl	80001e4 <strlen>
 800245e:	4603      	mov	r3, r0
 8002460:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8002464:	3301      	adds	r3, #1
 8002466:	4639      	mov	r1, r7
 8002468:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800246c:	461a      	mov	r2, r3
 800246e:	f005 fce6 	bl	8007e3e <strncat>
	GetDateTime(temp, sizeof(temp)); // Getting the current date and time
 8002472:	463b      	mov	r3, r7
 8002474:	2130      	movs	r1, #48	; 0x30
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fd4c 	bl	8002f14 <GetDateTime>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800247c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002480:	4618      	mov	r0, r3
 8002482:	f7fd feaf 	bl	80001e4 <strlen>
 8002486:	4603      	mov	r3, r0
 8002488:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800248c:	3301      	adds	r3, #1
 800248e:	4639      	mov	r1, r7
 8002490:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002494:	461a      	mov	r2, r3
 8002496:	f005 fcd2 	bl	8007e3e <strncat>
	snprintf(temp, sizeof(temp), "\n\n\r");
 800249a:	463b      	mov	r3, r7
 800249c:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <TransmitLogAndTimestamp+0x150>)
 800249e:	2130      	movs	r1, #48	; 0x30
 80024a0:	4618      	mov	r0, r3
 80024a2:	f005 fc4b 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80024a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd fe9a 	bl	80001e4 <strlen>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 80024b6:	3301      	adds	r3, #1
 80024b8:	4639      	mov	r1, r7
 80024ba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80024be:	461a      	mov	r2, r3
 80024c0:	f005 fcbd 	bl	8007e3e <strncat>

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80024c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd fe8b 	bl	80001e4 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	4808      	ldr	r0, [pc, #32]	; (80024fc <TransmitLogAndTimestamp+0x154>)
 80024dc:	f004 fe72 	bl	80071c4 <HAL_UART_Transmit>
}
 80024e0:	bf00      	nop
 80024e2:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	0800b6e8 	.word	0x0800b6e8
 80024f0:	0800b714 	.word	0x0800b714
 80024f4:	0800b740 	.word	0x0800b740
 80024f8:	0800b74c 	.word	0x0800b74c
 80024fc:	20000150 	.word	0x20000150

08002500 <TransmitCellVoltages>:
/**
 * Helper function to transmit all the cell voltage readings over UART
 * @param volts Array containing the cell voltage readings
 * @param len Length of the provided array
 */
void TransmitCellVoltages(uint16_t *volts, uint8_t len) {
 8002500:	b580      	push	{r7, lr}
 8002502:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002506:	af00      	add	r7, sp, #0
 8002508:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800250c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8002510:	6018      	str	r0, [r3, #0]
 8002512:	460a      	mov	r2, r1
 8002514:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002518:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 800251c:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0}; // Initialize buffer to store message
 800251e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002522:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	3304      	adds	r3, #4
 800252c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f005 fc7b 	bl	8007e2e <memset>
	char temp[32]; // Temporary buffer for each line

	uint8_t lines = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
	uint8_t entriesPerLine = 5;
 800253e:	2305      	movs	r3, #5
 8002540:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f

	// Preparing a heading for the current reading
	snprintf(temp, sizeof(temp), "******** VOLTAGE ********\n\r");
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	4a8c      	ldr	r2, [pc, #560]	; (800277c <TransmitCellVoltages+0x27c>)
 800254a:	2120      	movs	r1, #32
 800254c:	4618      	mov	r0, r3
 800254e:	f005 fbf5 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fe44 	bl	80001e4 <strlen>
 800255c:	4603      	mov	r3, r0
 800255e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002562:	3303      	adds	r3, #3
 8002564:	f107 010c 	add.w	r1, r7, #12
 8002568:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800256c:	461a      	mov	r2, r3
 800256e:	f005 fc66 	bl	8007e3e <strncat>

	// Calculate how many lines to make based on number of voltage readings (8 readings per line max.)
	if (len % entriesPerLine == 0) lines = len / entriesPerLine;
 8002572:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002576:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8002580:	fbb3 f1f2 	udiv	r1, r3, r2
 8002584:	fb01 f202 	mul.w	r2, r1, r2
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <TransmitCellVoltages+0xa8>
 8002590:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002594:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
 80025a6:	e00c      	b.n	80025c2 <TransmitCellVoltages+0xc2>
	else lines = len / entriesPerLine + 1;
 80025a8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80025ac:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 80025b0:	781a      	ldrb	r2, [r3, #0]
 80025b2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f

	for (int i = 0; i < lines; i++) {
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80025c8:	e0bd      	b.n	8002746 <TransmitCellVoltages+0x246>
		// First write out the cell numbers
		for (int j = 1; j <= entriesPerLine; j++) {
 80025ca:	2301      	movs	r3, #1
 80025cc:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80025d0:	e033      	b.n	800263a <TransmitCellVoltages+0x13a>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 80025d2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80025d6:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80025da:	fb03 f202 	mul.w	r2, r3, r2
 80025de:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80025e2:	441a      	add	r2, r3
 80025e4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80025e8:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dc2a      	bgt.n	8002648 <TransmitCellVoltages+0x148>
			snprintf(temp, sizeof(temp), "CV%d\t\t", (i*entriesPerLine + j));
 80025f2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80025f6:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80025fa:	fb03 f202 	mul.w	r2, r3, r2
 80025fe:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8002602:	4413      	add	r3, r2
 8002604:	f107 000c 	add.w	r0, r7, #12
 8002608:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <TransmitCellVoltages+0x280>)
 800260a:	2120      	movs	r1, #32
 800260c:	f005 fb96 	bl	8007d3c <sniprintf>
			strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd fde5 	bl	80001e4 <strlen>
 800261a:	4603      	mov	r3, r0
 800261c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002620:	3303      	adds	r3, #3
 8002622:	f107 010c 	add.w	r1, r7, #12
 8002626:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800262a:	461a      	mov	r2, r3
 800262c:	f005 fc07 	bl	8007e3e <strncat>
		for (int j = 1; j <= entriesPerLine; j++) {
 8002630:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8002634:	3301      	adds	r3, #1
 8002636:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800263a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800263e:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8002642:	429a      	cmp	r2, r3
 8002644:	ddc5      	ble.n	80025d2 <TransmitCellVoltages+0xd2>
 8002646:	e000      	b.n	800264a <TransmitCellVoltages+0x14a>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 8002648:	bf00      	nop
		}
		snprintf(temp, sizeof(temp), "\n\r");
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	4a4d      	ldr	r2, [pc, #308]	; (8002784 <TransmitCellVoltages+0x284>)
 8002650:	2120      	movs	r1, #32
 8002652:	4618      	mov	r0, r3
 8002654:	f005 fb72 	bl	8007d3c <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd fdc1 	bl	80001e4 <strlen>
 8002662:	4603      	mov	r3, r0
 8002664:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002668:	3303      	adds	r3, #3
 800266a:	f107 010c 	add.w	r1, r7, #12
 800266e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002672:	461a      	mov	r2, r3
 8002674:	f005 fbe3 	bl	8007e3e <strncat>
		// On the following line, write out the cell voltage readings
		for (int j = 1; j <= entriesPerLine; j++) {
 8002678:	2301      	movs	r3, #1
 800267a:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 800267e:	e03e      	b.n	80026fe <TransmitCellVoltages+0x1fe>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 8002680:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8002684:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002688:	fb03 f202 	mul.w	r2, r3, r2
 800268c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002690:	441a      	add	r2, r3
 8002692:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002696:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	dc35      	bgt.n	800270c <TransmitCellVoltages+0x20c>
			snprintf(temp, sizeof(temp), "%dmV\t\t", volts[i*entriesPerLine + j - 1]);
 80026a0:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80026a4:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80026a8:	fb03 f202 	mul.w	r2, r3, r2
 80026ac:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80026b0:	4413      	add	r3, r2
 80026b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80026b6:	3b01      	subs	r3, #1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80026be:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	4413      	add	r3, r2
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f107 000c 	add.w	r0, r7, #12
 80026cc:	4a2e      	ldr	r2, [pc, #184]	; (8002788 <TransmitCellVoltages+0x288>)
 80026ce:	2120      	movs	r1, #32
 80026d0:	f005 fb34 	bl	8007d3c <sniprintf>
			strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80026d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fd83 	bl	80001e4 <strlen>
 80026de:	4603      	mov	r3, r0
 80026e0:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80026e4:	3303      	adds	r3, #3
 80026e6:	f107 010c 	add.w	r1, r7, #12
 80026ea:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80026ee:	461a      	mov	r2, r3
 80026f0:	f005 fba5 	bl	8007e3e <strncat>
		for (int j = 1; j <= entriesPerLine; j++) {
 80026f4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80026f8:	3301      	adds	r3, #1
 80026fa:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80026fe:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8002702:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8002706:	429a      	cmp	r2, r3
 8002708:	ddba      	ble.n	8002680 <TransmitCellVoltages+0x180>
 800270a:	e000      	b.n	800270e <TransmitCellVoltages+0x20e>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 800270c:	bf00      	nop
		}
		snprintf(temp, sizeof(temp), "\n\n\r");
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <TransmitCellVoltages+0x28c>)
 8002714:	2120      	movs	r1, #32
 8002716:	4618      	mov	r0, r3
 8002718:	f005 fb10 	bl	8007d3c <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800271c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd fd5f 	bl	80001e4 <strlen>
 8002726:	4603      	mov	r3, r0
 8002728:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800272c:	3303      	adds	r3, #3
 800272e:	f107 010c 	add.w	r1, r7, #12
 8002732:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002736:	461a      	mov	r2, r3
 8002738:	f005 fb81 	bl	8007e3e <strncat>
	for (int i = 0; i < lines; i++) {
 800273c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8002740:	3301      	adds	r3, #1
 8002742:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8002746:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 800274a:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 800274e:	429a      	cmp	r2, r3
 8002750:	f6ff af3b 	blt.w	80025ca <TransmitCellVoltages+0xca>
	}

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fd43 	bl	80001e4 <strlen>
 800275e:	4603      	mov	r3, r0
 8002760:	b29a      	uxth	r2, r3
 8002762:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	4809      	ldr	r0, [pc, #36]	; (8002790 <TransmitCellVoltages+0x290>)
 800276c:	f004 fd2a 	bl	80071c4 <HAL_UART_Transmit>
}
 8002770:	bf00      	nop
 8002772:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	0800b750 	.word	0x0800b750
 8002780:	0800b76c 	.word	0x0800b76c
 8002784:	0800b774 	.word	0x0800b774
 8002788:	0800b778 	.word	0x0800b778
 800278c:	0800b74c 	.word	0x0800b74c
 8002790:	20000150 	.word	0x20000150

08002794 <TransmitCurrentReading>:

/**
 * Helper function to transmit the battery current reading over UART
 * @param current CC2 current reading - negative for discharging, positive for charging
 */
void TransmitCurrentReading(int16_t current) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b0aa      	sub	sp, #168	; 0xa8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
	char buffer[128] = {0}; // Initialize buffer to store message
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a6:	227c      	movs	r2, #124	; 0x7c
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 fb3f 	bl	8007e2e <memset>
	char temp[32] = {0}; // Temporary buffer for each line
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
 80027c4:	615a      	str	r2, [r3, #20]
 80027c6:	619a      	str	r2, [r3, #24]

	// Preparing a heading for the current reading
	snprintf(temp, sizeof(temp), "******** CURRENT ********\n\r");
 80027c8:	f107 0308 	add.w	r3, r7, #8
 80027cc:	4a28      	ldr	r2, [pc, #160]	; (8002870 <TransmitCurrentReading+0xdc>)
 80027ce:	2120      	movs	r1, #32
 80027d0:	4618      	mov	r0, r3
 80027d2:	f005 fab3 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80027d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fd02 	bl	80001e4 <strlen>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 80027e6:	f107 0108 	add.w	r1, r7, #8
 80027ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ee:	4618      	mov	r0, r3
 80027f0:	f005 fb25 	bl	8007e3e <strncat>

	// Determine if charging or discharging based on current value
	if (current > 0) {
 80027f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	dd0c      	ble.n	8002816 <TransmitCurrentReading+0x82>
		snprintf(temp, sizeof(temp), "CC2: Charging at %d mA\n\n\r", current*10);
 80027fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	f107 0008 	add.w	r0, r7, #8
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <TransmitCurrentReading+0xe0>)
 800280e:	2120      	movs	r1, #32
 8002810:	f005 fa94 	bl	8007d3c <sniprintf>
 8002814:	e00b      	b.n	800282e <TransmitCurrentReading+0x9a>
	}
	else {
		snprintf(temp, sizeof(temp), "CC2: Discharging at %d mA\n\n\r", current*(-10));
 8002816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800281a:	f06f 0209 	mvn.w	r2, #9
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	f107 0008 	add.w	r0, r7, #8
 8002826:	4a14      	ldr	r2, [pc, #80]	; (8002878 <TransmitCurrentReading+0xe4>)
 8002828:	2120      	movs	r1, #32
 800282a:	f005 fa87 	bl	8007d3c <sniprintf>
	}
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800282e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fcd6 	bl	80001e4 <strlen>
 8002838:	4603      	mov	r3, r0
 800283a:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 800283e:	f107 0108 	add.w	r1, r7, #8
 8002842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002846:	4618      	mov	r0, r3
 8002848:	f005 faf9 	bl	8007e3e <strncat>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800284c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fcc7 	bl	80001e4 <strlen>
 8002856:	4603      	mov	r3, r0
 8002858:	b29a      	uxth	r2, r3
 800285a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	4806      	ldr	r0, [pc, #24]	; (800287c <TransmitCurrentReading+0xe8>)
 8002864:	f004 fcae 	bl	80071c4 <HAL_UART_Transmit>
}
 8002868:	bf00      	nop
 800286a:	37a8      	adds	r7, #168	; 0xa8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	0800b790 	.word	0x0800b790
 8002874:	0800b7ac 	.word	0x0800b7ac
 8002878:	0800b7c8 	.word	0x0800b7c8
 800287c:	20000150 	.word	0x20000150

08002880 <TransmitTemperatures>:
/**
 * Helper function to transmit all the temperature readings over UART
 * @param temps Array containing the temperature readings
 * @param len Length of the provided array
 */
void TransmitTemperatures(int16_t *temps, uint8_t len) {
 8002880:	b580      	push	{r7, lr}
 8002882:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002886:	af02      	add	r7, sp, #8
 8002888:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800288c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002890:	6018      	str	r0, [r3, #0]
 8002892:	460a      	mov	r2, r1
 8002894:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002898:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 800289c:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0}; // Initialize buffer to store message
 800289e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80028a2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	3304      	adds	r3, #4
 80028ac:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f005 fabb 	bl	8007e2e <memset>
	char temp[32]; // Temporary buffer for each line

	// Separate variables for integer part and decimal part of temperature reading
	int16_t degC = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
	int16_t deg_int = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428
	int16_t deg_dec = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

	// Preparing a heading for the temperature readings
	snprintf(temp, sizeof(temp), "******** TEMPERATURE ********\n\r");
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	4a75      	ldr	r2, [pc, #468]	; (8002aa4 <TransmitTemperatures+0x224>)
 80028d0:	2120      	movs	r1, #32
 80028d2:	4618      	mov	r0, r3
 80028d4:	f005 fa32 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80028d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fc81 	bl	80001e4 <strlen>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80028e8:	3303      	adds	r3, #3
 80028ea:	f107 0108 	add.w	r1, r7, #8
 80028ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028f2:	461a      	mov	r2, r3
 80028f4:	f005 faa3 	bl	8007e3e <strncat>

	// Tabulating the temperature sensors
	for (int i = 1; i <= len; i++) {
 80028f8:	2301      	movs	r3, #1
 80028fa:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80028fe:	e01c      	b.n	800293a <TransmitTemperatures+0xba>
		snprintf(temp, sizeof(temp), "TS%d\t\t", i);
 8002900:	f107 0008 	add.w	r0, r7, #8
 8002904:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002908:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <TransmitTemperatures+0x228>)
 800290a:	2120      	movs	r1, #32
 800290c:	f005 fa16 	bl	8007d3c <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fc65 	bl	80001e4 <strlen>
 800291a:	4603      	mov	r3, r0
 800291c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002920:	3303      	adds	r3, #3
 8002922:	f107 0108 	add.w	r1, r7, #8
 8002926:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800292a:	461a      	mov	r2, r3
 800292c:	f005 fa87 	bl	8007e3e <strncat>
	for (int i = 1; i <= len; i++) {
 8002930:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002934:	3301      	adds	r3, #1
 8002936:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 800293a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800293e:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8002948:	429a      	cmp	r2, r3
 800294a:	ddd9      	ble.n	8002900 <TransmitTemperatures+0x80>
	}

	snprintf(temp, sizeof(temp), "\n\r");
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	4a56      	ldr	r2, [pc, #344]	; (8002aac <TransmitTemperatures+0x22c>)
 8002952:	2120      	movs	r1, #32
 8002954:	4618      	mov	r0, r3
 8002956:	f005 f9f1 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800295a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fc40 	bl	80001e4 <strlen>
 8002964:	4603      	mov	r3, r0
 8002966:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800296a:	3303      	adds	r3, #3
 800296c:	f107 0108 	add.w	r1, r7, #8
 8002970:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002974:	461a      	mov	r2, r3
 8002976:	f005 fa62 	bl	8007e3e <strncat>

	for (int i = 1; i <= len; i++) {
 800297a:	2301      	movs	r3, #1
 800297c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8002980:	e05d      	b.n	8002a3e <TransmitTemperatures+0x1be>
		// Convert from Kelvin into Celsius
		degC = temps[i-1] - 2731;
 8002982:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002986:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800298a:	3b01      	subs	r3, #1
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8002992:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	4413      	add	r3, r2
 800299a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
		deg_int = degC / 10;
 80029aa:	f9b7 342a 	ldrsh.w	r3, [r7, #1066]	; 0x42a
 80029ae:	4a40      	ldr	r2, [pc, #256]	; (8002ab0 <TransmitTemperatures+0x230>)
 80029b0:	fb82 1203 	smull	r1, r2, r2, r3
 80029b4:	1092      	asrs	r2, r2, #2
 80029b6:	17db      	asrs	r3, r3, #31
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428
		deg_dec = degC % 10;
 80029be:	f9b7 242a 	ldrsh.w	r2, [r7, #1066]	; 0x42a
 80029c2:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <TransmitTemperatures+0x230>)
 80029c4:	fb83 1302 	smull	r1, r3, r3, r2
 80029c8:	1099      	asrs	r1, r3, #2
 80029ca:	17d3      	asrs	r3, r2, #31
 80029cc:	1ac9      	subs	r1, r1, r3
 80029ce:	460b      	mov	r3, r1
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
		// If temperature is negative, keep the decimal part positive
		if (degC < 0 && deg_dec != 0) deg_dec = abs(deg_dec);
 80029dc:	f9b7 342a 	ldrsh.w	r3, [r7, #1066]	; 0x42a
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da0b      	bge.n	80029fc <TransmitTemperatures+0x17c>
 80029e4:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <TransmitTemperatures+0x17c>
 80029ec:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bfb8      	it	lt
 80029f4:	425b      	neglt	r3, r3
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

		snprintf(temp, sizeof(temp), "%d.%dºC\t\t", deg_int, deg_dec);
 80029fc:	f9b7 2428 	ldrsh.w	r2, [r7, #1064]	; 0x428
 8002a00:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 8002a04:	f107 0008 	add.w	r0, r7, #8
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	4a29      	ldr	r2, [pc, #164]	; (8002ab4 <TransmitTemperatures+0x234>)
 8002a0e:	2120      	movs	r1, #32
 8002a10:	f005 f994 	bl	8007d3c <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fbe3 	bl	80001e4 <strlen>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002a24:	3303      	adds	r3, #3
 8002a26:	f107 0108 	add.w	r1, r7, #8
 8002a2a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f005 fa05 	bl	8007e3e <strncat>
	for (int i = 1; i <= len; i++) {
 8002a34:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8002a3e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002a42:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dd98      	ble.n	8002982 <TransmitTemperatures+0x102>
	}

	snprintf(temp, sizeof(temp), "\n\n\r");
 8002a50:	f107 0308 	add.w	r3, r7, #8
 8002a54:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <TransmitTemperatures+0x238>)
 8002a56:	2120      	movs	r1, #32
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f005 f96f 	bl	8007d3c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fbbe 	bl	80001e4 <strlen>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002a6e:	3303      	adds	r3, #3
 8002a70:	f107 0108 	add.w	r1, r7, #8
 8002a74:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f005 f9e0 	bl	8007e3e <strncat>

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fbae 	bl	80001e4 <strlen>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
 8002a94:	4809      	ldr	r0, [pc, #36]	; (8002abc <TransmitTemperatures+0x23c>)
 8002a96:	f004 fb95 	bl	80071c4 <HAL_UART_Transmit>
}
 8002a9a:	bf00      	nop
 8002a9c:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	0800b7e8 	.word	0x0800b7e8
 8002aa8:	0800b808 	.word	0x0800b808
 8002aac:	0800b774 	.word	0x0800b774
 8002ab0:	66666667 	.word	0x66666667
 8002ab4:	0800b810 	.word	0x0800b810
 8002ab8:	0800b74c 	.word	0x0800b74c
 8002abc:	20000150 	.word	0x20000150

08002ac0 <TransmitSafetyStatusA>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status A register
 */
void TransmitSafetyStatusA(void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b098      	sub	sp, #96	; 0x60
 8002ac4:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status A register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusA[1] = {0};
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x03, statusA, 1);
 8002acc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f7ff f811 	bl	8001afc <DirectCmdRead>

	// Short Circuit Discharge
	if (statusA[0] & (1 << 7)) {
 8002ada:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002ade:	b25b      	sxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	da0d      	bge.n	8002b00 <TransmitSafetyStatusA+0x40>
		uint8_t msg[] = "SCD fault triggered! Discharging will be disabled for a moment...\n\r";
 8002ae4:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <TransmitSafetyStatusA+0xe8>)
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	4611      	mov	r1, r2
 8002aea:	2244      	movs	r2, #68	; 0x44
 8002aec:	4618      	mov	r0, r3
 8002aee:	f006 fdf4 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002af2:	1d39      	adds	r1, r7, #4
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295
 8002af8:	2243      	movs	r2, #67	; 0x43
 8002afa:	482c      	ldr	r0, [pc, #176]	; (8002bac <TransmitSafetyStatusA+0xec>)
 8002afc:	f004 fb62 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Overcurrent in Discharge 1st Tier
	if (statusA[0] & (1 << 5)) {
 8002b00:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <TransmitSafetyStatusA+0x68>
		uint8_t msg[] = "OCD1 fault triggered! Discharging will be disabled for a moment...\n\r";
 8002b0c:	4a28      	ldr	r2, [pc, #160]	; (8002bb0 <TransmitSafetyStatusA+0xf0>)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4611      	mov	r1, r2
 8002b12:	2245      	movs	r2, #69	; 0x45
 8002b14:	4618      	mov	r0, r3
 8002b16:	f006 fde0 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002b1a:	1d39      	adds	r1, r7, #4
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	2244      	movs	r2, #68	; 0x44
 8002b22:	4822      	ldr	r0, [pc, #136]	; (8002bac <TransmitSafetyStatusA+0xec>)
 8002b24:	f004 fb4e 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Overcurrent in Charge
	if (statusA[0] & (1 << 4)) {
 8002b28:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <TransmitSafetyStatusA+0x90>
		uint8_t msg[] = "OCC fault triggered! Charging will be disabled for a moment...\n\r";
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <TransmitSafetyStatusA+0xf4>)
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	4611      	mov	r1, r2
 8002b3a:	2241      	movs	r2, #65	; 0x41
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f006 fdcc 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002b42:	1d39      	adds	r1, r7, #4
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295
 8002b48:	2240      	movs	r2, #64	; 0x40
 8002b4a:	4818      	ldr	r0, [pc, #96]	; (8002bac <TransmitSafetyStatusA+0xec>)
 8002b4c:	f004 fb3a 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Cell Overvoltage
	if (statusA[0] & (1 << 3)) {
 8002b50:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <TransmitSafetyStatusA+0xb8>
		uint8_t msg[] = "COV fault triggered! Charging will be disabled until voltage drops sufficiently.\n\r";
 8002b5c:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <TransmitSafetyStatusA+0xf8>)
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	4611      	mov	r1, r2
 8002b62:	2253      	movs	r2, #83	; 0x53
 8002b64:	4618      	mov	r0, r3
 8002b66:	f006 fdb8 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002b6a:	1d39      	adds	r1, r7, #4
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	2252      	movs	r2, #82	; 0x52
 8002b72:	480e      	ldr	r0, [pc, #56]	; (8002bac <TransmitSafetyStatusA+0xec>)
 8002b74:	f004 fb26 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Cell Undervoltage
	if (statusA[0] & (1 << 2)) {
 8002b78:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <TransmitSafetyStatusA+0xe0>
		uint8_t msg[] = "CUV fault triggered! Discharging will be disabled until voltage rises sufficiently.\n\r";
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <TransmitSafetyStatusA+0xfc>)
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4611      	mov	r1, r2
 8002b8a:	2256      	movs	r2, #86	; 0x56
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f006 fda4 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002b92:	1d39      	adds	r1, r7, #4
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
 8002b98:	2255      	movs	r2, #85	; 0x55
 8002b9a:	4804      	ldr	r0, [pc, #16]	; (8002bac <TransmitSafetyStatusA+0xec>)
 8002b9c:	f004 fb12 	bl	80071c4 <HAL_UART_Transmit>
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	3760      	adds	r7, #96	; 0x60
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	0800b81c 	.word	0x0800b81c
 8002bac:	20000150 	.word	0x20000150
 8002bb0:	0800b860 	.word	0x0800b860
 8002bb4:	0800b8a8 	.word	0x0800b8a8
 8002bb8:	0800b8ec 	.word	0x0800b8ec
 8002bbc:	0800b940 	.word	0x0800b940

08002bc0 <TransmitSafetyStatusB>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status B register
 */
void TransmitSafetyStatusB(void) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b098      	sub	sp, #96	; 0x60
 8002bc4:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status B register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusB[1] = {0};
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x05, statusB, 1);
 8002bcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	2005      	movs	r0, #5
 8002bd6:	f7fe ff91 	bl	8001afc <DirectCmdRead>

	// FET Overtemperature
	if (statusB[0] & (1 << 7)) {
 8002bda:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	da0d      	bge.n	8002c00 <TransmitSafetyStatusB+0x40>
		uint8_t msg[] = "OTF fault triggered! Discharging will be disabled for a moment...\n\r";
 8002be4:	4a44      	ldr	r2, [pc, #272]	; (8002cf8 <TransmitSafetyStatusB+0x138>)
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	4611      	mov	r1, r2
 8002bea:	2244      	movs	r2, #68	; 0x44
 8002bec:	4618      	mov	r0, r3
 8002bee:	f006 fd74 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002bf2:	1d39      	adds	r1, r7, #4
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf8:	2243      	movs	r2, #67	; 0x43
 8002bfa:	4840      	ldr	r0, [pc, #256]	; (8002cfc <TransmitSafetyStatusB+0x13c>)
 8002bfc:	f004 fae2 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Internal Overtemperature
	if (statusB[0] & (1 << 6)) {
 8002c00:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <TransmitSafetyStatusB+0x68>
		uint8_t msg[] = "OTINT fault triggered! All AFE operations will be disabled for a moment...\n\r";
 8002c0c:	4a3c      	ldr	r2, [pc, #240]	; (8002d00 <TransmitSafetyStatusB+0x140>)
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	4611      	mov	r1, r2
 8002c12:	224d      	movs	r2, #77	; 0x4d
 8002c14:	4618      	mov	r0, r3
 8002c16:	f006 fd60 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002c1a:	1d39      	adds	r1, r7, #4
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c20:	224c      	movs	r2, #76	; 0x4c
 8002c22:	4836      	ldr	r0, [pc, #216]	; (8002cfc <TransmitSafetyStatusB+0x13c>)
 8002c24:	f004 face 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Overtemperature in Discharge
	if (statusB[0] & (1 << 5)) {
 8002c28:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <TransmitSafetyStatusB+0x90>
		uint8_t msg[] = "OTD fault triggered! Discharging will be disabled for a moment...\n\r";
 8002c34:	4a33      	ldr	r2, [pc, #204]	; (8002d04 <TransmitSafetyStatusB+0x144>)
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	4611      	mov	r1, r2
 8002c3a:	2244      	movs	r2, #68	; 0x44
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f006 fd4c 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002c42:	1d39      	adds	r1, r7, #4
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	2243      	movs	r2, #67	; 0x43
 8002c4a:	482c      	ldr	r0, [pc, #176]	; (8002cfc <TransmitSafetyStatusB+0x13c>)
 8002c4c:	f004 faba 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Overtemperature in Charge
	if (statusB[0] & (1 << 4)) {
 8002c50:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <TransmitSafetyStatusB+0xb8>
		uint8_t msg[] = "OTC fault triggered! Charging will be disabled for a moment...\n\r";
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <TransmitSafetyStatusB+0x148>)
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	4611      	mov	r1, r2
 8002c62:	2241      	movs	r2, #65	; 0x41
 8002c64:	4618      	mov	r0, r3
 8002c66:	f006 fd38 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002c6a:	1d39      	adds	r1, r7, #4
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c70:	2240      	movs	r2, #64	; 0x40
 8002c72:	4822      	ldr	r0, [pc, #136]	; (8002cfc <TransmitSafetyStatusB+0x13c>)
 8002c74:	f004 faa6 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Internal Undertemperature
	if (statusB[0] & (1 << 2)) {
 8002c78:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00d      	beq.n	8002ca0 <TransmitSafetyStatusB+0xe0>
		uint8_t msg[] = "UTINT fault triggered! All AFE operations will be disabled for a moment...\n\r";
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <TransmitSafetyStatusB+0x14c>)
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	4611      	mov	r1, r2
 8002c8a:	224d      	movs	r2, #77	; 0x4d
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f006 fd24 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002c92:	1d39      	adds	r1, r7, #4
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295
 8002c98:	224c      	movs	r2, #76	; 0x4c
 8002c9a:	4818      	ldr	r0, [pc, #96]	; (8002cfc <TransmitSafetyStatusB+0x13c>)
 8002c9c:	f004 fa92 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Undertemperature in Discharge
	if (statusB[0] & (1 << 1)) {
 8002ca0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <TransmitSafetyStatusB+0x108>
		uint8_t msg[] = "UTD fault triggered! No operational changes, but prolonged operation is not advised.\n\r";
 8002cac:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <TransmitSafetyStatusB+0x150>)
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	2257      	movs	r2, #87	; 0x57
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f006 fd10 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002cba:	1d39      	adds	r1, r7, #4
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	2256      	movs	r2, #86	; 0x56
 8002cc2:	480e      	ldr	r0, [pc, #56]	; (8002cfc <TransmitSafetyStatusB+0x13c>)
 8002cc4:	f004 fa7e 	bl	80071c4 <HAL_UART_Transmit>
	}
	// Undertemperature in Charge
	if (statusB[0] & 0x01) {
 8002cc8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <TransmitSafetyStatusB+0x130>
		uint8_t msg[] = "UTC fault triggered! No operational changes, but prolonged operation is not advised.\n\r";
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <TransmitSafetyStatusB+0x154>)
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	4611      	mov	r1, r2
 8002cda:	2257      	movs	r2, #87	; 0x57
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f006 fcfc 	bl	80096da <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002ce2:	1d39      	adds	r1, r7, #4
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	2256      	movs	r2, #86	; 0x56
 8002cea:	4804      	ldr	r0, [pc, #16]	; (8002cfc <TransmitSafetyStatusB+0x13c>)
 8002cec:	f004 fa6a 	bl	80071c4 <HAL_UART_Transmit>
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	3760      	adds	r7, #96	; 0x60
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	0800b998 	.word	0x0800b998
 8002cfc:	20000150 	.word	0x20000150
 8002d00:	0800b9dc 	.word	0x0800b9dc
 8002d04:	0800ba2c 	.word	0x0800ba2c
 8002d08:	0800ba70 	.word	0x0800ba70
 8002d0c:	0800bab4 	.word	0x0800bab4
 8002d10:	0800bb04 	.word	0x0800bb04
 8002d14:	0800bb5c 	.word	0x0800bb5c

08002d18 <T4_Acquire>:

/**
 * Measures the thermistor connected to the STM32's ADC and converts the reading to a temperature
 * @return Temperature of the thermistor in degrees Celsius
 */
int16_t T4_Acquire(void) {
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
    float T4_volt = 0.0;
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
    float T4_res = 0.0;
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
    float T4_temp = 0.0;
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	607b      	str	r3, [r7, #4]
    int16_t T4 = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	82fb      	strh	r3, [r7, #22]

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8002d38:	485f      	ldr	r0, [pc, #380]	; (8002eb8 <T4_Acquire+0x1a0>)
 8002d3a:	f000 ffeb 	bl	8003d14 <HAL_ADC_Start>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <T4_Acquire+0x30>
        // Start error
        Error_Handler();
 8002d44:	f000 f93a 	bl	8002fbc <Error_Handler>
    }

    // Poll for end of conversion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	485a      	ldr	r0, [pc, #360]	; (8002eb8 <T4_Acquire+0x1a0>)
 8002d4e:	f001 f8cf 	bl	8003ef0 <HAL_ADC_PollForConversion>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 808a 	bne.w	8002e6e <T4_Acquire+0x156>
        // Read the ADC conversion result (12-bit resolution)
        adcValue = HAL_ADC_GetValue(&hadc1);
 8002d5a:	4857      	ldr	r0, [pc, #348]	; (8002eb8 <T4_Acquire+0x1a0>)
 8002d5c:	f001 f9a0 	bl	80040a0 <HAL_ADC_GetValue>
 8002d60:	6138      	str	r0, [r7, #16]

        // Convert ADC value to voltage (divide by max. ADC counts, multiply by VREF (3.3V))
        T4_volt = ((float)adcValue / 4095.0) * V_REF;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6c:	ee17 0a90 	vmov	r0, s15
 8002d70:	f7fd fbfa 	bl	8000568 <__aeabi_f2d>
 8002d74:	a342      	add	r3, pc, #264	; (adr r3, 8002e80 <T4_Acquire+0x168>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fd77 	bl	800086c <__aeabi_ddiv>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	a340      	add	r3, pc, #256	; (adr r3, 8002e88 <T4_Acquire+0x170>)
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	f7fd fc44 	bl	8000618 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7fd ff16 	bl	8000bc8 <__aeabi_d2f>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]
        // Calculate thermistor resistance based on voltage (voltage divider rearranged)
        T4_res = T4_PU_R * (T4_volt / (T4_PU_V - T4_volt));
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7fd fbe1 	bl	8000568 <__aeabi_f2d>
 8002da6:	4604      	mov	r4, r0
 8002da8:	460d      	mov	r5, r1
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7fd fbdc 	bl	8000568 <__aeabi_f2d>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	a136      	add	r1, pc, #216	; (adr r1, 8002e90 <T4_Acquire+0x178>)
 8002db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dba:	f7fd fa75 	bl	80002a8 <__aeabi_dsub>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fd51 	bl	800086c <__aeabi_ddiv>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	a331      	add	r3, pc, #196	; (adr r3, 8002e98 <T4_Acquire+0x180>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fc1e 	bl	8000618 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7fd fef0 	bl	8000bc8 <__aeabi_d2f>
 8002de8:	4603      	mov	r3, r0
 8002dea:	60bb      	str	r3, [r7, #8]
        // Using thermistor's beta value, calculate the temperature
        T4_temp = 1.0 / ((1.0 / 298.15) + (log(T4_res / T4_R0)) / T4_BETA);
 8002dec:	68b8      	ldr	r0, [r7, #8]
 8002dee:	f7fd fbbb 	bl	8000568 <__aeabi_f2d>
 8002df2:	a32b      	add	r3, pc, #172	; (adr r3, 8002ea0 <T4_Acquire+0x188>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f7fd fd38 	bl	800086c <__aeabi_ddiv>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	ec43 2b17 	vmov	d7, r2, r3
 8002e04:	eeb0 0a47 	vmov.f32	s0, s14
 8002e08:	eef0 0a67 	vmov.f32	s1, s15
 8002e0c:	f008 fa38 	bl	800b280 <log>
 8002e10:	ec51 0b10 	vmov	r0, r1, d0
 8002e14:	a324      	add	r3, pc, #144	; (adr r3, 8002ea8 <T4_Acquire+0x190>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd fd27 	bl	800086c <__aeabi_ddiv>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	a322      	add	r3, pc, #136	; (adr r3, 8002eb0 <T4_Acquire+0x198>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fa3e 	bl	80002ac <__adddf3>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	4920      	ldr	r1, [pc, #128]	; (8002ebc <T4_Acquire+0x1a4>)
 8002e3a:	f7fd fd17 	bl	800086c <__aeabi_ddiv>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	f7fd febf 	bl	8000bc8 <__aeabi_d2f>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	607b      	str	r3, [r7, #4]
        // Convert value in Kelvin to 16-bit integer like the other temperature measurements (units of 0.1K)
        T4 = (int16_t)(T4_temp * 10.0);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fd fb8a 	bl	8000568 <__aeabi_f2d>
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <T4_Acquire+0x1a8>)
 8002e5a:	f7fd fbdd 	bl	8000618 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	f7fd fe87 	bl	8000b78 <__aeabi_d2iz>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	82fb      	strh	r3, [r7, #22]
    }

    // Stop the ADC conversion
    HAL_ADC_Stop(&hadc1);
 8002e6e:	4812      	ldr	r0, [pc, #72]	; (8002eb8 <T4_Acquire+0x1a0>)
 8002e70:	f001 f80a 	bl	8003e88 <HAL_ADC_Stop>

    return T4;
 8002e74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e80:	00000000 	.word	0x00000000
 8002e84:	40affe00 	.word	0x40affe00
 8002e88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e8c:	4000624d 	.word	0x4000624d
 8002e90:	66666666 	.word	0x66666666
 8002e94:	400a6666 	.word	0x400a6666
 8002e98:	00000000 	.word	0x00000000
 8002e9c:	40d16200 	.word	0x40d16200
 8002ea0:	00000000 	.word	0x00000000
 8002ea4:	40c38800 	.word	0x40c38800
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	40aad600 	.word	0x40aad600
 8002eb0:	dcb5db83 	.word	0xdcb5db83
 8002eb4:	3f6b79e1 	.word	0x3f6b79e1
 8002eb8:	200001d8 	.word	0x200001d8
 8002ebc:	3ff00000 	.word	0x3ff00000
 8002ec0:	40240000 	.word	0x40240000

08002ec4 <RTCToUnixTimestamp>:

time_t RTCToUnixTimestamp(RTC_DateTypeDef *date, RTC_TimeTypeDef *time) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
	struct tm tm_time;

	// Populate the tm structure
	tm_time.tm_year = date->Year + 100; // Years since 1900
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	78db      	ldrb	r3, [r3, #3]
 8002ed2:	3364      	adds	r3, #100	; 0x64
 8002ed4:	623b      	str	r3, [r7, #32]
	tm_time.tm_mon  = date->Month - 1;  // Months since January
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
	tm_time.tm_mday = date->Date;       // Day of the month
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	789b      	ldrb	r3, [r3, #2]
 8002ee2:	61bb      	str	r3, [r7, #24]
	tm_time.tm_hour = time->Hours;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]
	tm_time.tm_min  = time->Minutes;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	613b      	str	r3, [r7, #16]
	tm_time.tm_sec  = time->Seconds;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	789b      	ldrb	r3, [r3, #2]
 8002ef4:	60fb      	str	r3, [r7, #12]
	tm_time.tm_isdst = -1;              // No daylight saving time
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Convert to UNIX timestamp
	return mktime(&tm_time);
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	4618      	mov	r0, r3
 8002f02:	f005 f999 	bl	8008238 <mktime>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
}
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	3730      	adds	r7, #48	; 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <GetDateTime>:
/**
 * Helper function to get the current date and time and format it into a string
 * @param datetimeStr String to store the date & time in
 * @param size Size of the string (char array)
 */
void GetDateTime(char *datetimeStr, size_t size) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	time_t now;
	struct tm *timeinfo;

	// Get the current time
	time(&now);
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	4618      	mov	r0, r3
 8002f24:	f006 f858 	bl	8008fd8 <time>

	// Convert the time to local time structure
	timeinfo = localtime(&now);
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 ff99 	bl	8007e64 <localtime>
 8002f32:	6178      	str	r0, [r7, #20]

	// Format the time as a string
	strftime(datetimeStr, size, "%Y-%m-%d %H:%M:%S", timeinfo);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <GetDateTime+0x34>)
 8002f38:	6839      	ldr	r1, [r7, #0]
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f006 f84a 	bl	8008fd4 <strftime>
}
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	0800bbb4 	.word	0x0800bbb4

08002f4c <_gettimeofday>:

/**
 * Implementation of _gettimeofday using the STM32's RTC
 */
int _gettimeofday(struct timeval *tv, void *tzvp) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    // Get the current RTC time and date
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK || HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8002f56:	f107 030c 	add.w	r3, r7, #12
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4816      	ldr	r0, [pc, #88]	; (8002fb8 <_gettimeofday+0x6c>)
 8002f60:	f003 fab5 	bl	80064ce <HAL_RTC_GetTime>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <_gettimeofday+0x32>
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	2200      	movs	r2, #0
 8002f70:	4619      	mov	r1, r3
 8002f72:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <_gettimeofday+0x6c>)
 8002f74:	f003 fb8e 	bl	8006694 <HAL_RTC_GetDate>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <_gettimeofday+0x38>
        return -1; // Error reading RTC
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	e015      	b.n	8002fb0 <_gettimeofday+0x64>
    }

    // Convert to UNIX timestamp
    time_t timestamp = RTCToUnixTimestamp(&sDate, &sTime);
 8002f84:	f107 020c 	add.w	r2, r7, #12
 8002f88:	f107 0308 	add.w	r3, r7, #8
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff98 	bl	8002ec4 <RTCToUnixTimestamp>
 8002f94:	e9c7 0108 	strd	r0, r1, [r7, #32]

    // Populate the timeval structure
    if (tv) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <_gettimeofday+0x62>
        tv->tv_sec = timestamp; // Seconds since the Unix epoch
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fa4:	e9c1 2300 	strd	r2, r3, [r1]
        tv->tv_usec = 0;       // Microseconds (RTC typically doesn't support this)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
    }

    return 0;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	2000023c 	.word	0x2000023c

08002fbc <Error_Handler>:

/**
 * Error handler if a UART transmission error occurs
 * TODO: Implement this
 */
void Error_Handler(void) {
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
    // Stay in an infinite loop to allow for debugging
    while (1);
 8002fc0:	e7fe      	b.n	8002fc0 <Error_Handler+0x4>
	...

08002fc4 <HAL_GPIO_EXTI_Callback>:

/**
 * Callback function for handling an interrupt from a GPIO pin
 * @param GPIO_Pin The GPIO pin number where an interrupt was received
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
	uint8_t msg[] = "Interrupt! ";
 8002fce:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002fda:	f107 010c 	add.w	r1, r7, #12
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	220b      	movs	r2, #11
 8002fe4:	4807      	ldr	r0, [pc, #28]	; (8003004 <HAL_GPIO_EXTI_Callback+0x40>)
 8002fe6:	f004 f8ed 	bl	80071c4 <HAL_UART_Transmit>

	switch (GPIO_Pin) {
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d102      	bne.n	8002ff6 <HAL_GPIO_EXTI_Callback+0x32>
	case GPIO_PIN_4:
		logAlertsFlag = true;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_GPIO_EXTI_Callback+0x44>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
	}
}
 8002ff6:	bf00      	nop
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	0800bbc8 	.word	0x0800bbc8
 8003004:	20000150 	.word	0x20000150
 8003008:	20000269 	.word	0x20000269

0800300c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_MspInit+0x44>)
 8003014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003016:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <HAL_MspInit+0x44>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6613      	str	r3, [r2, #96]	; 0x60
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_MspInit+0x44>)
 8003020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_MspInit+0x44>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <HAL_MspInit+0x44>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	6593      	str	r3, [r2, #88]	; 0x58
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_MspInit+0x44>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000

08003054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a15      	ldr	r2, [pc, #84]	; (80030c8 <HAL_ADC_MspInit+0x74>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d124      	bne.n	80030c0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_ADC_MspInit+0x78>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <HAL_ADC_MspInit+0x78>)
 800307c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_ADC_MspInit+0x78>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_ADC_MspInit+0x78>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003092:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <HAL_ADC_MspInit+0x78>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_ADC_MspInit+0x78>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030a6:	2310      	movs	r3, #16
 80030a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80030aa:	230b      	movs	r3, #11
 80030ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030bc:	f001 feae 	bl	8004e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030c0:	bf00      	nop
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	50040000 	.word	0x50040000
 80030cc:	40021000 	.word	0x40021000

080030d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b090      	sub	sp, #64	; 0x40
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	2234      	movs	r2, #52	; 0x34
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f004 fea4 	bl	8007e2e <memset>
  if(hrtc->Instance==RTC)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <HAL_RTC_MspInit+0x58>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d117      	bne.n	8003120 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	4618      	mov	r0, r3
 8003102:	f002 ff31 	bl	8005f68 <HAL_RCCEx_PeriphCLKConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800310c:	f7ff ff56 	bl	8002fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RTC_MspInit+0x5c>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <HAL_RTC_MspInit+0x5c>)
 8003118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003120:	bf00      	nop
 8003122:	3740      	adds	r7, #64	; 0x40
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40002800 	.word	0x40002800
 800312c:	40021000 	.word	0x40021000

08003130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_SPI_MspInit+0x7c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d128      	bne.n	80031a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003152:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <HAL_SPI_MspInit+0x80>)
 8003154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003156:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <HAL_SPI_MspInit+0x80>)
 8003158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800315c:	6613      	str	r3, [r2, #96]	; 0x60
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_SPI_MspInit+0x80>)
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_SPI_MspInit+0x80>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <HAL_SPI_MspInit+0x80>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_SPI_MspInit+0x80>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003182:	23e0      	movs	r3, #224	; 0xe0
 8003184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318e:	2303      	movs	r3, #3
 8003190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003192:	2305      	movs	r3, #5
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	4619      	mov	r1, r3
 800319c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a0:	f001 fe3c 	bl	8004e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031a4:	bf00      	nop
 80031a6:	3728      	adds	r7, #40	; 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40013000 	.word	0x40013000
 80031b0:	40021000 	.word	0x40021000

080031b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b096      	sub	sp, #88	; 0x58
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031cc:	f107 0310 	add.w	r3, r7, #16
 80031d0:	2234      	movs	r2, #52	; 0x34
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f004 fe2a 	bl	8007e2e <memset>
  if(huart->Instance==USART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_UART_MspInit+0xa4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d135      	bne.n	8003250 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031e4:	2301      	movs	r3, #1
 80031e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ec:	f107 0310 	add.w	r3, r7, #16
 80031f0:	4618      	mov	r0, r3
 80031f2:	f002 feb9 	bl	8005f68 <HAL_RCCEx_PeriphCLKConfig>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031fc:	f7ff fede 	bl	8002fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_UART_MspInit+0xa8>)
 8003202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003204:	4a15      	ldr	r2, [pc, #84]	; (800325c <HAL_UART_MspInit+0xa8>)
 8003206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320a:	6613      	str	r3, [r2, #96]	; 0x60
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_UART_MspInit+0xa8>)
 800320e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <HAL_UART_MspInit+0xa8>)
 800321a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321c:	4a0f      	ldr	r2, [pc, #60]	; (800325c <HAL_UART_MspInit+0xa8>)
 800321e:	f043 0302 	orr.w	r3, r3, #2
 8003222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_UART_MspInit+0xa8>)
 8003226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003230:	23c0      	movs	r3, #192	; 0xc0
 8003232:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003240:	2307      	movs	r3, #7
 8003242:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003244:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003248:	4619      	mov	r1, r3
 800324a:	4805      	ldr	r0, [pc, #20]	; (8003260 <HAL_UART_MspInit+0xac>)
 800324c:	f001 fde6 	bl	8004e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003250:	bf00      	nop
 8003252:	3758      	adds	r7, #88	; 0x58
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40013800 	.word	0x40013800
 800325c:	40021000 	.word	0x40021000
 8003260:	48000400 	.word	0x48000400

08003264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003268:	e7fe      	b.n	8003268 <NMI_Handler+0x4>

0800326a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800326e:	e7fe      	b.n	800326e <HardFault_Handler+0x4>

08003270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003274:	e7fe      	b.n	8003274 <MemManage_Handler+0x4>

08003276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800327a:	e7fe      	b.n	800327a <BusFault_Handler+0x4>

0800327c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003280:	e7fe      	b.n	8003280 <UsageFault_Handler+0x4>

08003282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032b0:	f000 f95e 	bl	8003570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80032bc:	2002      	movs	r0, #2
 80032be:	f001 ff51 	bl	8005164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0
  return 1;
 80032ca:	2301      	movs	r3, #1
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_kill>:

int _kill(int pid, int sig)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032e0:	f006 f9c4 	bl	800966c <__errno>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2216      	movs	r2, #22
 80032e8:	601a      	str	r2, [r3, #0]
  return -1;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <_exit>:

void _exit (int status)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ffe7 	bl	80032d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003308:	e7fe      	b.n	8003308 <_exit+0x12>

0800330a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e00a      	b.n	8003332 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800331c:	f3af 8000 	nop.w
 8003320:	4601      	mov	r1, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	60ba      	str	r2, [r7, #8]
 8003328:	b2ca      	uxtb	r2, r1
 800332a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	3301      	adds	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	dbf0      	blt.n	800331c <_read+0x12>
  }

  return len;
 800333a:	687b      	ldr	r3, [r7, #4]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e009      	b.n	800336a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	60ba      	str	r2, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3301      	adds	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	dbf1      	blt.n	8003356 <_write+0x12>
  }
  return len;
 8003372:	687b      	ldr	r3, [r7, #4]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_close>:

int _close(int file)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033a4:	605a      	str	r2, [r3, #4]
  return 0;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <_isatty>:

int _isatty(int file)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033bc:	2301      	movs	r3, #1
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <_sbrk+0x5c>)
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <_sbrk+0x60>)
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <_sbrk+0x64>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <_sbrk+0x64>)
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <_sbrk+0x68>)
 8003404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <_sbrk+0x64>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	429a      	cmp	r2, r3
 8003412:	d207      	bcs.n	8003424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003414:	f006 f92a 	bl	800966c <__errno>
 8003418:	4603      	mov	r3, r0
 800341a:	220c      	movs	r2, #12
 800341c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	e009      	b.n	8003438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <_sbrk+0x64>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800342a:	4b07      	ldr	r3, [pc, #28]	; (8003448 <_sbrk+0x64>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	4a05      	ldr	r2, [pc, #20]	; (8003448 <_sbrk+0x64>)
 8003434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003436:	68fb      	ldr	r3, [r7, #12]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	2000a000 	.word	0x2000a000
 8003444:	00000400 	.word	0x00000400
 8003448:	20000270 	.word	0x20000270
 800344c:	200003e8 	.word	0x200003e8

08003450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <SystemInit+0x20>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	4a05      	ldr	r2, [pc, #20]	; (8003470 <SystemInit+0x20>)
 800345c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003478:	f7ff ffea 	bl	8003450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800347c:	480c      	ldr	r0, [pc, #48]	; (80034b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800347e:	490d      	ldr	r1, [pc, #52]	; (80034b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003480:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <LoopForever+0xe>)
  movs r3, #0
 8003482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003484:	e002      	b.n	800348c <LoopCopyDataInit>

08003486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348a:	3304      	adds	r3, #4

0800348c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800348c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800348e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003490:	d3f9      	bcc.n	8003486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <LoopForever+0x16>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003498:	e001      	b.n	800349e <LoopFillZerobss>

0800349a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800349c:	3204      	adds	r2, #4

0800349e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800349e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a0:	d3fb      	bcc.n	800349a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034a2:	f006 f8e9 	bl	8009678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034a6:	f7fd fe2b 	bl	8001100 <main>

080034aa <LoopForever>:

LoopForever:
    b LoopForever
 80034aa:	e7fe      	b.n	80034aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034ac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80034b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034b4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80034b8:	0800c1c4 	.word	0x0800c1c4
  ldr r2, =_sbss
 80034bc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80034c0:	200003e8 	.word	0x200003e8

080034c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034c4:	e7fe      	b.n	80034c4 <ADC1_2_IRQHandler>

080034c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f001 fc61 	bl	8004d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034d6:	200f      	movs	r0, #15
 80034d8:	f000 f80e 	bl	80034f8 <HAL_InitTick>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	71fb      	strb	r3, [r7, #7]
 80034e6:	e001      	b.n	80034ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034e8:	f7ff fd90 	bl	800300c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034ec:	79fb      	ldrb	r3, [r7, #7]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003504:	4b17      	ldr	r3, [pc, #92]	; (8003564 <HAL_InitTick+0x6c>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_InitTick+0x70>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b14      	ldr	r3, [pc, #80]	; (8003564 <HAL_InitTick+0x6c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4619      	mov	r1, r3
 8003516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800351a:	fbb3 f3f1 	udiv	r3, r3, r1
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fc6d 	bl	8004e02 <HAL_SYSTICK_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b0f      	cmp	r3, #15
 8003532:	d809      	bhi.n	8003548 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003534:	2200      	movs	r2, #0
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	f001 fc37 	bl	8004dae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <HAL_InitTick+0x74>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e007      	b.n	8003558 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	e004      	b.n	8003558 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e001      	b.n	8003558 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	2000000c 	.word	0x2000000c
 8003568:	20000004 	.word	0x20000004
 800356c:	20000008 	.word	0x20000008

08003570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_IncTick+0x20>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_IncTick+0x24>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4413      	add	r3, r2
 8003580:	4a04      	ldr	r2, [pc, #16]	; (8003594 <HAL_IncTick+0x24>)
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2000000c 	.word	0x2000000c
 8003594:	20000274 	.word	0x20000274

08003598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return uwTick;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_GetTick+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000274 	.word	0x20000274

080035b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b8:	f7ff ffee 	bl	8003598 <HAL_GetTick>
 80035bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d005      	beq.n	80035d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_Delay+0x44>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035d6:	bf00      	nop
 80035d8:	f7ff ffde 	bl	8003598 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d8f7      	bhi.n	80035d8 <HAL_Delay+0x28>
  {
  }
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2000000c 	.word	0x2000000c

080035f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	609a      	str	r2, [r3, #8]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3360      	adds	r3, #96	; 0x60
 8003672:	461a      	mov	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <LL_ADC_SetOffset+0x44>)
 8003682:	4013      	ands	r3, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	4313      	orrs	r3, r2
 8003690:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003698:	bf00      	nop
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	03fff000 	.word	0x03fff000

080036a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3360      	adds	r3, #96	; 0x60
 80036b6:	461a      	mov	r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3360      	adds	r3, #96	; 0x60
 80036e4:	461a      	mov	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	615a      	str	r2, [r3, #20]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003756:	b480      	push	{r7}
 8003758:	b087      	sub	sp, #28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3330      	adds	r3, #48	; 0x30
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	4413      	add	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	211f      	movs	r1, #31
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	401a      	ands	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0e9b      	lsrs	r3, r3, #26
 800378e:	f003 011f 	and.w	r1, r3, #31
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	431a      	orrs	r2, r3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b087      	sub	sp, #28
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3314      	adds	r3, #20
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	0e5b      	lsrs	r3, r3, #25
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	0d1b      	lsrs	r3, r3, #20
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2107      	movs	r1, #7
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	401a      	ands	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	0d1b      	lsrs	r3, r3, #20
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	431a      	orrs	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0318 	and.w	r3, r3, #24
 8003826:	4908      	ldr	r1, [pc, #32]	; (8003848 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003828:	40d9      	lsrs	r1, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	400b      	ands	r3, r1
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003832:	431a      	orrs	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	0007ffff 	.word	0x0007ffff

0800384c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 031f 	and.w	r3, r3, #31
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003894:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6093      	str	r3, [r2, #8]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038bc:	d101      	bne.n	80038c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390c:	d101      	bne.n	8003912 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003930:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800395c:	f043 0202 	orr.w	r2, r3, #2
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <LL_ADC_IsEnabled+0x18>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <LL_ADC_IsEnabled+0x1a>
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d101      	bne.n	80039ae <LL_ADC_IsDisableOngoing+0x18>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <LL_ADC_IsDisableOngoing+0x1a>
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039f8:	f043 0210 	orr.w	r2, r3, #16
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d101      	bne.n	8003a24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d101      	bne.n	8003a72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b089      	sub	sp, #36	; 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e12b      	b.n	8003cf2 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fad3 	bl	8003054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fef1 	bl	80038a8 <LL_ADC_IsDeepPowerDownEnabled>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fed7 	bl	8003884 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff0c 	bl	80038f8 <LL_ADC_IsInternalRegulatorEnabled>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d115      	bne.n	8003b12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fef0 	bl	80038d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af0:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_ADC_Init+0x27c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	4a82      	ldr	r2, [pc, #520]	; (8003d00 <HAL_ADC_Init+0x280>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f9      	bne.n	8003b06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff feee 	bl	80038f8 <LL_ADC_IsInternalRegulatorEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff62 	bl	8003a0c <LL_ADC_REG_IsConversionOngoing>
 8003b48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 80c4 	bne.w	8003ce0 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 80c0 	bne.w	8003ce0 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b68:	f043 0202 	orr.w	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fefb 	bl	8003970 <LL_ADC_IsEnabled>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d110      	bne.n	8003ba2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b80:	4860      	ldr	r0, [pc, #384]	; (8003d04 <HAL_ADC_Init+0x284>)
 8003b82:	f7ff fef5 	bl	8003970 <LL_ADC_IsEnabled>
 8003b86:	4604      	mov	r4, r0
 8003b88:	485f      	ldr	r0, [pc, #380]	; (8003d08 <HAL_ADC_Init+0x288>)
 8003b8a:	f7ff fef1 	bl	8003970 <LL_ADC_IsEnabled>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4323      	orrs	r3, r4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	485b      	ldr	r0, [pc, #364]	; (8003d0c <HAL_ADC_Init+0x28c>)
 8003b9e:	f7ff fd2b 	bl	80035f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7e5b      	ldrb	r3, [r3, #25]
 8003ba6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003bb2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003bb8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d106      	bne.n	8003bde <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	045b      	lsls	r3, r3, #17
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <HAL_ADC_Init+0x290>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	69b9      	ldr	r1, [r7, #24]
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff ff21 	bl	8003a5a <LL_ADC_INJ_IsConversionOngoing>
 8003c18:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d13d      	bne.n	8003c9c <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d13a      	bne.n	8003c9c <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c2a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c32:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c42:	f023 0302 	bic.w	r3, r3, #2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	69b9      	ldr	r1, [r7, #24]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d118      	bne.n	8003c8c <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c64:	f023 0304 	bic.w	r3, r3, #4
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c76:	4311      	orrs	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	e007      	b.n	8003c9c <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10c      	bne.n	8003cbe <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f023 010f 	bic.w	r1, r3, #15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	1e5a      	subs	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
 8003cbc:	e007      	b.n	8003cce <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 020f 	bic.w	r2, r2, #15
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
 8003cde:	e007      	b.n	8003cf0 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce4:	f043 0210 	orr.w	r2, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	; 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd90      	pop	{r4, r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	053e2d63 	.word	0x053e2d63
 8003d04:	50040000 	.word	0x50040000
 8003d08:	50040100 	.word	0x50040100
 8003d0c:	50040300 	.word	0x50040300
 8003d10:	fff0c007 	.word	0xfff0c007

08003d14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d1c:	4857      	ldr	r0, [pc, #348]	; (8003e7c <HAL_ADC_Start+0x168>)
 8003d1e:	f7ff fd95 	bl	800384c <LL_ADC_GetMultimode>
 8003d22:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fe6f 	bl	8003a0c <LL_ADC_REG_IsConversionOngoing>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f040 809c 	bne.w	8003e6e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_Start+0x30>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e097      	b.n	8003e74 <HAL_ADC_Start+0x160>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fe6d 	bl	8004a2c <ADC_Enable>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 8083 	bne.w	8003e64 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a42      	ldr	r2, [pc, #264]	; (8003e80 <HAL_ADC_Start+0x16c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d002      	beq.n	8003d82 <HAL_ADC_Start+0x6e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	e000      	b.n	8003d84 <HAL_ADC_Start+0x70>
 8003d82:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <HAL_ADC_Start+0x170>)
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d002      	beq.n	8003d92 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003daa:	d106      	bne.n	8003dba <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	f023 0206 	bic.w	r2, r3, #6
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	659a      	str	r2, [r3, #88]	; 0x58
 8003db8:	e002      	b.n	8003dc0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	221c      	movs	r2, #28
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a2a      	ldr	r2, [pc, #168]	; (8003e80 <HAL_ADC_Start+0x16c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d002      	beq.n	8003de0 <HAL_ADC_Start+0xcc>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	e000      	b.n	8003de2 <HAL_ADC_Start+0xce>
 8003de0:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <HAL_ADC_Start+0x170>)
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d008      	beq.n	8003dfc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d002      	beq.n	8003dfc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b09      	cmp	r3, #9
 8003dfa:	d114      	bne.n	8003e26 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fdcc 	bl	80039bc <LL_ADC_REG_StartConversion>
 8003e24:	e025      	b.n	8003e72 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <HAL_ADC_Start+0x16c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d002      	beq.n	8003e42 <HAL_ADC_Start+0x12e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	e000      	b.n	8003e44 <HAL_ADC_Start+0x130>
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <HAL_ADC_Start+0x170>)
 8003e44:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00f      	beq.n	8003e72 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
 8003e62:	e006      	b.n	8003e72 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e6c:	e001      	b.n	8003e72 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	50040300 	.word	0x50040300
 8003e80:	50040100 	.word	0x50040100
 8003e84:	50040000 	.word	0x50040000

08003e88 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_Stop+0x16>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e023      	b.n	8003ee6 <HAL_ADC_Stop+0x5e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003ea6:	2103      	movs	r1, #3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fd03 	bl	80048b4 <ADC_ConversionStop>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d111      	bne.n	8003edc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fe3d 	bl	8004b38 <ADC_Disable>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003efa:	4866      	ldr	r0, [pc, #408]	; (8004094 <HAL_ADC_PollForConversion+0x1a4>)
 8003efc:	f7ff fca6 	bl	800384c <LL_ADC_GetMultimode>
 8003f00:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d102      	bne.n	8003f10 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e02a      	b.n	8003f66 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b05      	cmp	r3, #5
 8003f1a:	d002      	beq.n	8003f22 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b09      	cmp	r3, #9
 8003f20:	d111      	bne.n	8003f46 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0a4      	b.n	800408a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003f40:	2304      	movs	r3, #4
 8003f42:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003f44:	e00f      	b.n	8003f66 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f46:	4853      	ldr	r0, [pc, #332]	; (8004094 <HAL_ADC_PollForConversion+0x1a4>)
 8003f48:	f7ff fc8e 	bl	8003868 <LL_ADC_GetMultiDMATransfer>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e093      	b.n	800408a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003f62:	2304      	movs	r3, #4
 8003f64:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f66:	f7ff fb17 	bl	8003598 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f6c:	e021      	b.n	8003fb2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d01d      	beq.n	8003fb2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003f76:	f7ff fb0f 	bl	8003598 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <HAL_ADC_PollForConversion+0x9c>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d112      	bne.n	8003fb2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	f043 0204 	orr.w	r2, r3, #4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e06b      	b.n	800408a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0d6      	beq.n	8003f6e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fbad 	bl	8003730 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01c      	beq.n	8004016 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	7e5b      	ldrb	r3, [r3, #25]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d118      	bne.n	8004016 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d111      	bne.n	8004016 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_ADC_PollForConversion+0x1a8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d002      	beq.n	8004026 <HAL_ADC_PollForConversion+0x136>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	e000      	b.n	8004028 <HAL_ADC_PollForConversion+0x138>
 8004026:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_ADC_PollForConversion+0x1ac>)
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	4293      	cmp	r3, r2
 800402e:	d008      	beq.n	8004042 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d002      	beq.n	8004042 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b09      	cmp	r3, #9
 8004040:	d104      	bne.n	800404c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	e00c      	b.n	8004066 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a11      	ldr	r2, [pc, #68]	; (8004098 <HAL_ADC_PollForConversion+0x1a8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d002      	beq.n	800405c <HAL_ADC_PollForConversion+0x16c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	e000      	b.n	800405e <HAL_ADC_PollForConversion+0x16e>
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <HAL_ADC_PollForConversion+0x1ac>)
 800405e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d104      	bne.n	8004076 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2208      	movs	r2, #8
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e008      	b.n	8004088 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	220c      	movs	r2, #12
 8004086:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	50040300 	.word	0x50040300
 8004098:	50040100 	.word	0x50040100
 800409c:	50040000 	.word	0x50040000

080040a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b0b6      	sub	sp, #216	; 0xd8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_ADC_ConfigChannel+0x22>
 80040da:	2302      	movs	r3, #2
 80040dc:	e3d5      	b.n	800488a <HAL_ADC_ConfigChannel+0x7ce>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fc8e 	bl	8003a0c <LL_ADC_REG_IsConversionOngoing>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 83ba 	bne.w	800486c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b05      	cmp	r3, #5
 8004106:	d824      	bhi.n	8004152 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	3b02      	subs	r3, #2
 800410e:	2b03      	cmp	r3, #3
 8004110:	d81b      	bhi.n	800414a <HAL_ADC_ConfigChannel+0x8e>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <HAL_ADC_ConfigChannel+0x5c>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004129 	.word	0x08004129
 800411c:	08004131 	.word	0x08004131
 8004120:	08004139 	.word	0x08004139
 8004124:	08004141 	.word	0x08004141
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004128:	230c      	movs	r3, #12
 800412a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800412e:	e010      	b.n	8004152 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004130:	2312      	movs	r3, #18
 8004132:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004136:	e00c      	b.n	8004152 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004138:	2318      	movs	r3, #24
 800413a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800413e:	e008      	b.n	8004152 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004148:	e003      	b.n	8004152 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800414a:	2306      	movs	r3, #6
 800414c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004150:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004160:	f7ff faf9 	bl	8003756 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fc4f 	bl	8003a0c <LL_ADC_REG_IsConversionOngoing>
 800416e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fc6f 	bl	8003a5a <LL_ADC_INJ_IsConversionOngoing>
 800417c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004180:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004184:	2b00      	cmp	r3, #0
 8004186:	f040 81bf 	bne.w	8004508 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800418a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 81ba 	bne.w	8004508 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800419c:	d10f      	bne.n	80041be <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	4619      	mov	r1, r3
 80041aa:	f7ff fb00 	bl	80037ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff faa7 	bl	800370a <LL_ADC_SetSamplingTimeCommonConfig>
 80041bc:	e00e      	b.n	80041dc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6819      	ldr	r1, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f7ff faef 	bl	80037ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fa97 	bl	800370a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	08db      	lsrs	r3, r3, #3
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d00a      	beq.n	8004214 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6919      	ldr	r1, [r3, #16]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800420e:	f7ff fa27 	bl	8003660 <LL_ADC_SetOffset>
 8004212:	e179      	b.n	8004508 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fa44 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 8004220:	4603      	mov	r3, r0
 8004222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x184>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fa39 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 8004236:	4603      	mov	r3, r0
 8004238:	0e9b      	lsrs	r3, r3, #26
 800423a:	f003 021f 	and.w	r2, r3, #31
 800423e:	e01e      	b.n	800427e <HAL_ADC_ConfigChannel+0x1c2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2100      	movs	r1, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fa2e 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 800424c:	4603      	mov	r3, r0
 800424e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800425e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004262:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004266:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800426e:	2320      	movs	r3, #32
 8004270:	e004      	b.n	800427c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004272:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x1da>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0e9b      	lsrs	r3, r3, #26
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	e018      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x20c>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80042aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80042b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80042ba:	2320      	movs	r3, #32
 80042bc:	e004      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80042be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d106      	bne.n	80042da <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2200      	movs	r2, #0
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff f9fd 	bl	80036d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2101      	movs	r1, #1
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff f9e1 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x24a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff f9d6 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	0e9b      	lsrs	r3, r3, #26
 8004300:	f003 021f 	and.w	r2, r3, #31
 8004304:	e01e      	b.n	8004344 <HAL_ADC_ConfigChannel+0x288>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2101      	movs	r1, #1
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff f9cb 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 8004312:	4603      	mov	r3, r0
 8004314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800432c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004334:	2320      	movs	r3, #32
 8004336:	e004      	b.n	8004342 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004338:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800433c:	fab3 f383 	clz	r3, r3
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <HAL_ADC_ConfigChannel+0x2a0>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	e018      	b.n	800438e <HAL_ADC_ConfigChannel+0x2d2>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004380:	2320      	movs	r3, #32
 8004382:	e004      	b.n	800438e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004388:	fab3 f383 	clz	r3, r3
 800438c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800438e:	429a      	cmp	r2, r3
 8004390:	d106      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2200      	movs	r2, #0
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff f99a 	bl	80036d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2102      	movs	r1, #2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff f97e 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x310>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff f973 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 80043c2:	4603      	mov	r3, r0
 80043c4:	0e9b      	lsrs	r3, r3, #26
 80043c6:	f003 021f 	and.w	r2, r3, #31
 80043ca:	e01e      	b.n	800440a <HAL_ADC_ConfigChannel+0x34e>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff f968 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 80043d8:	4603      	mov	r3, r0
 80043da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80043ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80043f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80043fa:	2320      	movs	r3, #32
 80043fc:	e004      	b.n	8004408 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80043fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004412:	2b00      	cmp	r3, #0
 8004414:	d105      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x366>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0e9b      	lsrs	r3, r3, #26
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	e014      	b.n	800444c <HAL_ADC_ConfigChannel+0x390>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004432:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004436:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800443e:	2320      	movs	r3, #32
 8004440:	e004      	b.n	800444c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004442:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800444c:	429a      	cmp	r2, r3
 800444e:	d106      	bne.n	800445e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2200      	movs	r2, #0
 8004456:	2102      	movs	r1, #2
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff f93b 	bl	80036d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2103      	movs	r1, #3
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff f91f 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 800446a:	4603      	mov	r3, r0
 800446c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <HAL_ADC_ConfigChannel+0x3ce>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2103      	movs	r1, #3
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff f914 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 8004480:	4603      	mov	r3, r0
 8004482:	0e9b      	lsrs	r3, r3, #26
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	e017      	b.n	80044ba <HAL_ADC_ConfigChannel+0x3fe>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2103      	movs	r1, #3
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff f909 	bl	80036a8 <LL_ADC_GetOffsetChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800449c:	fa93 f3a3 	rbit	r3, r3
 80044a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80044a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80044ac:	2320      	movs	r3, #32
 80044ae:	e003      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80044b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x416>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	0e9b      	lsrs	r3, r3, #26
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	e011      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x43a>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80044e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044e2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80044e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80044ea:	2320      	movs	r3, #32
 80044ec:	e003      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80044ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044f0:	fab3 f383 	clz	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d106      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	2103      	movs	r1, #3
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f8e6 	bl	80036d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fa2f 	bl	8003970 <LL_ADC_IsEnabled>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	f040 813f 	bne.w	8004798 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	461a      	mov	r2, r3
 8004528:	f7ff f96c 	bl	8003804 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a8e      	ldr	r2, [pc, #568]	; (800476c <HAL_ADC_ConfigChannel+0x6b0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	f040 8130 	bne.w	8004798 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x4a4>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	3301      	adds	r3, #1
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2b09      	cmp	r3, #9
 8004556:	bf94      	ite	ls
 8004558:	2301      	movls	r3, #1
 800455a:	2300      	movhi	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e019      	b.n	8004594 <HAL_ADC_ConfigChannel+0x4d8>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004568:	fa93 f3a3 	rbit	r3, r3
 800456c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800456e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004570:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004578:	2320      	movs	r3, #32
 800457a:	e003      	b.n	8004584 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800457c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	3301      	adds	r3, #1
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	2b09      	cmp	r3, #9
 800458c:	bf94      	ite	ls
 800458e:	2301      	movls	r3, #1
 8004590:	2300      	movhi	r3, #0
 8004592:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004594:	2b00      	cmp	r3, #0
 8004596:	d079      	beq.n	800468c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d107      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x4f8>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	3301      	adds	r3, #1
 80045ac:	069b      	lsls	r3, r3, #26
 80045ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045b2:	e015      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x524>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80045c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80045c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80045cc:	2320      	movs	r3, #32
 80045ce:	e003      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	069b      	lsls	r3, r3, #26
 80045dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x544>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0e9b      	lsrs	r3, r3, #26
 80045f2:	3301      	adds	r3, #1
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	e017      	b.n	8004630 <HAL_ADC_ConfigChannel+0x574>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800460e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004610:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e003      	b.n	8004624 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800461c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	3301      	adds	r3, #1
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2101      	movs	r1, #1
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	ea42 0103 	orr.w	r1, r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x59a>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	0e9b      	lsrs	r3, r3, #26
 8004646:	3301      	adds	r3, #1
 8004648:	f003 021f 	and.w	r2, r3, #31
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	051b      	lsls	r3, r3, #20
 8004654:	e018      	b.n	8004688 <HAL_ADC_ConfigChannel+0x5cc>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800466e:	2320      	movs	r3, #32
 8004670:	e003      	b.n	800467a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	3301      	adds	r3, #1
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004688:	430b      	orrs	r3, r1
 800468a:	e080      	b.n	800478e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004694:	2b00      	cmp	r3, #0
 8004696:	d107      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x5ec>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	0e9b      	lsrs	r3, r3, #26
 800469e:	3301      	adds	r3, #1
 80046a0:	069b      	lsls	r3, r3, #26
 80046a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046a6:	e015      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x618>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80046c0:	2320      	movs	r3, #32
 80046c2:	e003      	b.n	80046cc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3301      	adds	r3, #1
 80046ce:	069b      	lsls	r3, r3, #26
 80046d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x638>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	0e9b      	lsrs	r3, r3, #26
 80046e6:	3301      	adds	r3, #1
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	2101      	movs	r1, #1
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	e017      	b.n	8004724 <HAL_ADC_ConfigChannel+0x668>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	61bb      	str	r3, [r7, #24]
  return result;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800470c:	2320      	movs	r3, #32
 800470e:	e003      	b.n	8004718 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	3301      	adds	r3, #1
 800471a:	f003 031f 	and.w	r3, r3, #31
 800471e:	2101      	movs	r1, #1
 8004720:	fa01 f303 	lsl.w	r3, r1, r3
 8004724:	ea42 0103 	orr.w	r1, r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10d      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x694>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	0e9b      	lsrs	r3, r3, #26
 800473a:	3301      	adds	r3, #1
 800473c:	f003 021f 	and.w	r2, r3, #31
 8004740:	4613      	mov	r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4413      	add	r3, r2
 8004746:	3b1e      	subs	r3, #30
 8004748:	051b      	lsls	r3, r3, #20
 800474a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800474e:	e01d      	b.n	800478c <HAL_ADC_ConfigChannel+0x6d0>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	60fb      	str	r3, [r7, #12]
  return result;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d103      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004768:	2320      	movs	r3, #32
 800476a:	e005      	b.n	8004778 <HAL_ADC_ConfigChannel+0x6bc>
 800476c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	3301      	adds	r3, #1
 800477a:	f003 021f 	and.w	r2, r3, #31
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	3b1e      	subs	r3, #30
 8004786:	051b      	lsls	r3, r3, #20
 8004788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800478c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004792:	4619      	mov	r1, r3
 8004794:	f7ff f80b 	bl	80037ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b3d      	ldr	r3, [pc, #244]	; (8004894 <HAL_ADC_ConfigChannel+0x7d8>)
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d06c      	beq.n	800487e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047a4:	483c      	ldr	r0, [pc, #240]	; (8004898 <HAL_ADC_ConfigChannel+0x7dc>)
 80047a6:	f7fe ff4d 	bl	8003644 <LL_ADC_GetCommonPathInternalCh>
 80047aa:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3a      	ldr	r2, [pc, #232]	; (800489c <HAL_ADC_ConfigChannel+0x7e0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d127      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d121      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a35      	ldr	r2, [pc, #212]	; (80048a0 <HAL_ADC_ConfigChannel+0x7e4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d157      	bne.n	800487e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047d6:	4619      	mov	r1, r3
 80047d8:	482f      	ldr	r0, [pc, #188]	; (8004898 <HAL_ADC_ConfigChannel+0x7dc>)
 80047da:	f7fe ff20 	bl	800361e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <HAL_ADC_ConfigChannel+0x7e8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	4a30      	ldr	r2, [pc, #192]	; (80048a8 <HAL_ADC_ConfigChannel+0x7ec>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	4613      	mov	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80047f8:	e002      	b.n	8004800 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f9      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004806:	e03a      	b.n	800487e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a27      	ldr	r2, [pc, #156]	; (80048ac <HAL_ADC_ConfigChannel+0x7f0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d113      	bne.n	800483a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10d      	bne.n	800483a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d12a      	bne.n	800487e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800482c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004830:	4619      	mov	r1, r3
 8004832:	4819      	ldr	r0, [pc, #100]	; (8004898 <HAL_ADC_ConfigChannel+0x7dc>)
 8004834:	f7fe fef3 	bl	800361e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004838:	e021      	b.n	800487e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1c      	ldr	r2, [pc, #112]	; (80048b0 <HAL_ADC_ConfigChannel+0x7f4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d11c      	bne.n	800487e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004844:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d116      	bne.n	800487e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d111      	bne.n	800487e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800485a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800485e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004862:	4619      	mov	r1, r3
 8004864:	480c      	ldr	r0, [pc, #48]	; (8004898 <HAL_ADC_ConfigChannel+0x7dc>)
 8004866:	f7fe feda 	bl	800361e <LL_ADC_SetCommonPathInternalCh>
 800486a:	e008      	b.n	800487e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004886:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800488a:	4618      	mov	r0, r3
 800488c:	37d8      	adds	r7, #216	; 0xd8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	80080000 	.word	0x80080000
 8004898:	50040300 	.word	0x50040300
 800489c:	c7520000 	.word	0xc7520000
 80048a0:	50040000 	.word	0x50040000
 80048a4:	20000004 	.word	0x20000004
 80048a8:	053e2d63 	.word	0x053e2d63
 80048ac:	cb840000 	.word	0xcb840000
 80048b0:	80000001 	.word	0x80000001

080048b4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff f89e 	bl	8003a0c <LL_ADC_REG_IsConversionOngoing>
 80048d0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff f8bf 	bl	8003a5a <LL_ADC_INJ_IsConversionOngoing>
 80048dc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d103      	bne.n	80048ec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8098 	beq.w	8004a1c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d02a      	beq.n	8004950 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7e5b      	ldrb	r3, [r3, #25]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d126      	bne.n	8004950 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	7e1b      	ldrb	r3, [r3, #24]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d122      	bne.n	8004950 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800490a:	2301      	movs	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800490e:	e014      	b.n	800493a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4a45      	ldr	r2, [pc, #276]	; (8004a28 <ADC_ConversionStop+0x174>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d90d      	bls.n	8004934 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f043 0210 	orr.w	r2, r3, #16
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e074      	b.n	8004a1e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	d1e3      	bne.n	8004910 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2240      	movs	r2, #64	; 0x40
 800494e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d014      	beq.n	8004980 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff f856 	bl	8003a0c <LL_ADC_REG_IsConversionOngoing>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff f813 	bl	8003996 <LL_ADC_IsDisableOngoing>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff f832 	bl	80039e4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d014      	beq.n	80049b0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff f865 	bl	8003a5a <LL_ADC_INJ_IsConversionOngoing>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fffb 	bl	8003996 <LL_ADC_IsDisableOngoing>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d104      	bne.n	80049b0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff f841 	bl	8003a32 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d005      	beq.n	80049c2 <ADC_ConversionStop+0x10e>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d105      	bne.n	80049c8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80049bc:	230c      	movs	r3, #12
 80049be:	617b      	str	r3, [r7, #20]
        break;
 80049c0:	e005      	b.n	80049ce <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80049c2:	2308      	movs	r3, #8
 80049c4:	617b      	str	r3, [r7, #20]
        break;
 80049c6:	e002      	b.n	80049ce <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80049c8:	2304      	movs	r3, #4
 80049ca:	617b      	str	r3, [r7, #20]
        break;
 80049cc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80049ce:	f7fe fde3 	bl	8003598 <HAL_GetTick>
 80049d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049d4:	e01b      	b.n	8004a0e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80049d6:	f7fe fddf 	bl	8003598 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d914      	bls.n	8004a0e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f043 0210 	orr.w	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e007      	b.n	8004a1e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1dc      	bne.n	80049d6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	a33fffff 	.word	0xa33fffff

08004a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fe ff97 	bl	8003970 <LL_ADC_IsEnabled>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d169      	bne.n	8004b1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <ADC_Enable+0xfc>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	f043 0210 	orr.w	r2, r3, #16
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f043 0201 	orr.w	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e055      	b.n	8004b1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe ff52 	bl	8003920 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a7c:	482b      	ldr	r0, [pc, #172]	; (8004b2c <ADC_Enable+0x100>)
 8004a7e:	f7fe fde1 	bl	8003644 <LL_ADC_GetCommonPathInternalCh>
 8004a82:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a8c:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <ADC_Enable+0x104>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <ADC_Enable+0x108>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	099b      	lsrs	r3, r3, #6
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004aa6:	e002      	b.n	8004aae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f9      	bne.n	8004aa8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ab4:	f7fe fd70 	bl	8003598 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aba:	e028      	b.n	8004b0e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe ff55 	bl	8003970 <LL_ADC_IsEnabled>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe ff25 	bl	8003920 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ad6:	f7fe fd5f 	bl	8003598 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d914      	bls.n	8004b0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d00d      	beq.n	8004b0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f043 0210 	orr.w	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e007      	b.n	8004b1e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d1cf      	bne.n	8004abc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	8000003f 	.word	0x8000003f
 8004b2c:	50040300 	.word	0x50040300
 8004b30:	20000004 	.word	0x20000004
 8004b34:	053e2d63 	.word	0x053e2d63

08004b38 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe ff26 	bl	8003996 <LL_ADC_IsDisableOngoing>
 8004b4a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fe ff0d 	bl	8003970 <LL_ADC_IsEnabled>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d047      	beq.n	8004bec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d144      	bne.n	8004bec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 030d 	and.w	r3, r3, #13
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10c      	bne.n	8004b8a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe fee7 	bl	8003948 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2203      	movs	r2, #3
 8004b80:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b82:	f7fe fd09 	bl	8003598 <HAL_GetTick>
 8004b86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b88:	e029      	b.n	8004bde <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f043 0210 	orr.w	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e023      	b.n	8004bee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ba6:	f7fe fcf7 	bl	8003598 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d914      	bls.n	8004bde <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	f043 0201 	orr.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e007      	b.n	8004bee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1dc      	bne.n	8004ba6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <__NVIC_SetPriorityGrouping>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <__NVIC_SetPriorityGrouping+0x44>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c14:	4013      	ands	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c2a:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <__NVIC_SetPriorityGrouping+0x44>)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	60d3      	str	r3, [r2, #12]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	e000ed00 	.word	0xe000ed00

08004c40 <__NVIC_GetPriorityGrouping>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <__NVIC_GetPriorityGrouping+0x18>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	0a1b      	lsrs	r3, r3, #8
 8004c4a:	f003 0307 	and.w	r3, r3, #7
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <__NVIC_EnableIRQ>:
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	db0b      	blt.n	8004c86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	f003 021f 	and.w	r2, r3, #31
 8004c74:	4907      	ldr	r1, [pc, #28]	; (8004c94 <__NVIC_EnableIRQ+0x38>)
 8004c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	e000e100 	.word	0xe000e100

08004c98 <__NVIC_SetPriority>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	6039      	str	r1, [r7, #0]
 8004ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	db0a      	blt.n	8004cc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	490c      	ldr	r1, [pc, #48]	; (8004ce4 <__NVIC_SetPriority+0x4c>)
 8004cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb6:	0112      	lsls	r2, r2, #4
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	440b      	add	r3, r1
 8004cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cc0:	e00a      	b.n	8004cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4908      	ldr	r1, [pc, #32]	; (8004ce8 <__NVIC_SetPriority+0x50>)
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	3b04      	subs	r3, #4
 8004cd0:	0112      	lsls	r2, r2, #4
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	761a      	strb	r2, [r3, #24]
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	e000e100 	.word	0xe000e100
 8004ce8:	e000ed00 	.word	0xe000ed00

08004cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	; 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f1c3 0307 	rsb	r3, r3, #7
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	bf28      	it	cs
 8004d0a:	2304      	movcs	r3, #4
 8004d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	3304      	adds	r3, #4
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	d902      	bls.n	8004d1c <NVIC_EncodePriority+0x30>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3b03      	subs	r3, #3
 8004d1a:	e000      	b.n	8004d1e <NVIC_EncodePriority+0x32>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d20:	f04f 32ff 	mov.w	r2, #4294967295
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	401a      	ands	r2, r3
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d34:	f04f 31ff 	mov.w	r1, #4294967295
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3e:	43d9      	mvns	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d44:	4313      	orrs	r3, r2
         );
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3724      	adds	r7, #36	; 0x24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d64:	d301      	bcc.n	8004d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d66:	2301      	movs	r3, #1
 8004d68:	e00f      	b.n	8004d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <SysTick_Config+0x40>)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d72:	210f      	movs	r1, #15
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295
 8004d78:	f7ff ff8e 	bl	8004c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <SysTick_Config+0x40>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d82:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <SysTick_Config+0x40>)
 8004d84:	2207      	movs	r2, #7
 8004d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	e000e010 	.word	0xe000e010

08004d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff ff29 	bl	8004bf8 <__NVIC_SetPriorityGrouping>
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b086      	sub	sp, #24
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	4603      	mov	r3, r0
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dc0:	f7ff ff3e 	bl	8004c40 <__NVIC_GetPriorityGrouping>
 8004dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	6978      	ldr	r0, [r7, #20]
 8004dcc:	f7ff ff8e 	bl	8004cec <NVIC_EncodePriority>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff ff5d 	bl	8004c98 <__NVIC_SetPriority>
}
 8004dde:	bf00      	nop
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	4603      	mov	r3, r0
 8004dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff ff31 	bl	8004c5c <__NVIC_EnableIRQ>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff ffa2 	bl	8004d54 <SysTick_Config>
 8004e10:	4603      	mov	r3, r0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e2a:	e14e      	b.n	80050ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2101      	movs	r1, #1
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8140 	beq.w	80050c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d005      	beq.n	8004e5c <HAL_GPIO_Init+0x40>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d130      	bne.n	8004ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	2203      	movs	r2, #3
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4013      	ands	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e92:	2201      	movs	r2, #1
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 0201 	and.w	r2, r3, #1
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d017      	beq.n	8004efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d123      	bne.n	8004f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	08da      	lsrs	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3208      	adds	r2, #8
 8004f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	220f      	movs	r2, #15
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43db      	mvns	r3, r3
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	08da      	lsrs	r2, r3, #3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3208      	adds	r2, #8
 8004f48:	6939      	ldr	r1, [r7, #16]
 8004f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	2203      	movs	r2, #3
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f003 0203 	and.w	r2, r3, #3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 809a 	beq.w	80050c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f90:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <HAL_GPIO_Init+0x2cc>)
 8004f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f94:	4a54      	ldr	r2, [pc, #336]	; (80050e8 <HAL_GPIO_Init+0x2cc>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8004f9c:	4b52      	ldr	r3, [pc, #328]	; (80050e8 <HAL_GPIO_Init+0x2cc>)
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fa8:	4a50      	ldr	r2, [pc, #320]	; (80050ec <HAL_GPIO_Init+0x2d0>)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	089b      	lsrs	r3, r3, #2
 8004fae:	3302      	adds	r3, #2
 8004fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	220f      	movs	r2, #15
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fd2:	d013      	beq.n	8004ffc <HAL_GPIO_Init+0x1e0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a46      	ldr	r2, [pc, #280]	; (80050f0 <HAL_GPIO_Init+0x2d4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00d      	beq.n	8004ff8 <HAL_GPIO_Init+0x1dc>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a45      	ldr	r2, [pc, #276]	; (80050f4 <HAL_GPIO_Init+0x2d8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <HAL_GPIO_Init+0x1d8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a44      	ldr	r2, [pc, #272]	; (80050f8 <HAL_GPIO_Init+0x2dc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d101      	bne.n	8004ff0 <HAL_GPIO_Init+0x1d4>
 8004fec:	2303      	movs	r3, #3
 8004fee:	e006      	b.n	8004ffe <HAL_GPIO_Init+0x1e2>
 8004ff0:	2307      	movs	r3, #7
 8004ff2:	e004      	b.n	8004ffe <HAL_GPIO_Init+0x1e2>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e002      	b.n	8004ffe <HAL_GPIO_Init+0x1e2>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_GPIO_Init+0x1e2>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	f002 0203 	and.w	r2, r2, #3
 8005004:	0092      	lsls	r2, r2, #2
 8005006:	4093      	lsls	r3, r2
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800500e:	4937      	ldr	r1, [pc, #220]	; (80050ec <HAL_GPIO_Init+0x2d0>)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	089b      	lsrs	r3, r3, #2
 8005014:	3302      	adds	r3, #2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800501c:	4b37      	ldr	r3, [pc, #220]	; (80050fc <HAL_GPIO_Init+0x2e0>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	43db      	mvns	r3, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4013      	ands	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005040:	4a2e      	ldr	r2, [pc, #184]	; (80050fc <HAL_GPIO_Init+0x2e0>)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <HAL_GPIO_Init+0x2e0>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	43db      	mvns	r3, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800506a:	4a24      	ldr	r2, [pc, #144]	; (80050fc <HAL_GPIO_Init+0x2e0>)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005070:	4b22      	ldr	r3, [pc, #136]	; (80050fc <HAL_GPIO_Init+0x2e0>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	43db      	mvns	r3, r3
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4013      	ands	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_GPIO_Init+0x2e0>)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <HAL_GPIO_Init+0x2e0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	43db      	mvns	r3, r3
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4013      	ands	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050be:	4a0f      	ldr	r2, [pc, #60]	; (80050fc <HAL_GPIO_Init+0x2e0>)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	3301      	adds	r3, #1
 80050c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f47f aea9 	bne.w	8004e2c <HAL_GPIO_Init+0x10>
  }
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40010000 	.word	0x40010000
 80050f0:	48000400 	.word	0x48000400
 80050f4:	48000800 	.word	0x48000800
 80050f8:	48000c00 	.word	0x48000c00
 80050fc:	40010400 	.word	0x40010400

08005100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
 800510c:	4613      	mov	r3, r2
 800510e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005110:	787b      	ldrb	r3, [r7, #1]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800511c:	e002      	b.n	8005124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005142:	887a      	ldrh	r2, [r7, #2]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4013      	ands	r3, r2
 8005148:	041a      	lsls	r2, r3, #16
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	43d9      	mvns	r1, r3
 800514e:	887b      	ldrh	r3, [r7, #2]
 8005150:	400b      	ands	r3, r1
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	619a      	str	r2, [r3, #24]
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800516e:	4b08      	ldr	r3, [pc, #32]	; (8005190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d006      	beq.n	8005188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800517a:	4a05      	ldr	r2, [pc, #20]	; (8005190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fd ff1e 	bl	8002fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40010400 	.word	0x40010400

08005194 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005198:	4b04      	ldr	r3, [pc, #16]	; (80051ac <HAL_PWREx_GetVoltageRange+0x18>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40007000 	.word	0x40007000

080051b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051be:	d130      	bne.n	8005222 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051c0:	4b23      	ldr	r3, [pc, #140]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051cc:	d038      	beq.n	8005240 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051ce:	4b20      	ldr	r3, [pc, #128]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051d6:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051de:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2232      	movs	r2, #50	; 0x32
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051ea:	fba2 2303 	umull	r2, r3, r2, r3
 80051ee:	0c9b      	lsrs	r3, r3, #18
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051f4:	e002      	b.n	80051fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051fc:	4b14      	ldr	r3, [pc, #80]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005208:	d102      	bne.n	8005210 <HAL_PWREx_ControlVoltageScaling+0x60>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f2      	bne.n	80051f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521c:	d110      	bne.n	8005240 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e00f      	b.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522e:	d007      	beq.n	8005240 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005238:	4a05      	ldr	r2, [pc, #20]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800523a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800523e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40007000 	.word	0x40007000
 8005254:	20000004 	.word	0x20000004
 8005258:	431bde83 	.word	0x431bde83

0800525c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	; 0x28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f000 bc4f 	b.w	8005b0e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005270:	4b97      	ldr	r3, [pc, #604]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800527a:	4b95      	ldr	r3, [pc, #596]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80e6 	beq.w	800545e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <HAL_RCC_OscConfig+0x4c>
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	2b0c      	cmp	r3, #12
 800529c:	f040 808d 	bne.w	80053ba <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	f040 8089 	bne.w	80053ba <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052a8:	4b89      	ldr	r3, [pc, #548]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d006      	beq.n	80052c2 <HAL_RCC_OscConfig+0x66>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	f000 bc26 	b.w	8005b0e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052c6:	4b82      	ldr	r3, [pc, #520]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <HAL_RCC_OscConfig+0x80>
 80052d2:	4b7f      	ldr	r3, [pc, #508]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052da:	e005      	b.n	80052e8 <HAL_RCC_OscConfig+0x8c>
 80052dc:	4b7c      	ldr	r3, [pc, #496]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80052de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d224      	bcs.n	8005336 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fdd9 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f000 bc06 	b.w	8005b0e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005302:	4b73      	ldr	r3, [pc, #460]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a72      	ldr	r2, [pc, #456]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005308:	f043 0308 	orr.w	r3, r3, #8
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4b70      	ldr	r3, [pc, #448]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	496d      	ldr	r1, [pc, #436]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005320:	4b6b      	ldr	r3, [pc, #428]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	4968      	ldr	r1, [pc, #416]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005330:	4313      	orrs	r3, r2
 8005332:	604b      	str	r3, [r1, #4]
 8005334:	e025      	b.n	8005382 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005336:	4b66      	ldr	r3, [pc, #408]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a65      	ldr	r2, [pc, #404]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 800533c:	f043 0308 	orr.w	r3, r3, #8
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b63      	ldr	r3, [pc, #396]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	4960      	ldr	r1, [pc, #384]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005354:	4b5e      	ldr	r3, [pc, #376]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	495b      	ldr	r1, [pc, #364]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005364:	4313      	orrs	r3, r2
 8005366:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fd98 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e3c5      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005382:	f000 fccd 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8005386:	4602      	mov	r2, r0
 8005388:	4b51      	ldr	r3, [pc, #324]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	4950      	ldr	r1, [pc, #320]	; (80054d4 <HAL_RCC_OscConfig+0x278>)
 8005394:	5ccb      	ldrb	r3, [r1, r3]
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	fa22 f303 	lsr.w	r3, r2, r3
 800539e:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <HAL_RCC_OscConfig+0x27c>)
 80053a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053a2:	4b4e      	ldr	r3, [pc, #312]	; (80054dc <HAL_RCC_OscConfig+0x280>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe f8a6 	bl	80034f8 <HAL_InitTick>
 80053ac:	4603      	mov	r3, r0
 80053ae:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d052      	beq.n	800545c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	e3a9      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d032      	beq.n	8005428 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053c2:	4b43      	ldr	r3, [pc, #268]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a42      	ldr	r2, [pc, #264]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053ce:	f7fe f8e3 	bl	8003598 <HAL_GetTick>
 80053d2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053d6:	f7fe f8df 	bl	8003598 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e392      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053e8:	4b39      	ldr	r3, [pc, #228]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a35      	ldr	r2, [pc, #212]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80053fa:	f043 0308 	orr.w	r3, r3, #8
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	4b33      	ldr	r3, [pc, #204]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	4930      	ldr	r1, [pc, #192]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 800540e:	4313      	orrs	r3, r2
 8005410:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005412:	4b2f      	ldr	r3, [pc, #188]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	492b      	ldr	r1, [pc, #172]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005422:	4313      	orrs	r3, r2
 8005424:	604b      	str	r3, [r1, #4]
 8005426:	e01a      	b.n	800545e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005428:	4b29      	ldr	r3, [pc, #164]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a28      	ldr	r2, [pc, #160]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 800542e:	f023 0301 	bic.w	r3, r3, #1
 8005432:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005434:	f7fe f8b0 	bl	8003598 <HAL_GetTick>
 8005438:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800543c:	f7fe f8ac 	bl	8003598 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e35f      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800544e:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x1e0>
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800545c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d073      	beq.n	8005552 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d005      	beq.n	800547c <HAL_RCC_OscConfig+0x220>
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d10e      	bne.n	8005494 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d10b      	bne.n	8005494 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547c:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d063      	beq.n	8005550 <HAL_RCC_OscConfig+0x2f4>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d15f      	bne.n	8005550 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e33c      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549c:	d106      	bne.n	80054ac <HAL_RCC_OscConfig+0x250>
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80054a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e025      	b.n	80054f8 <HAL_RCC_OscConfig+0x29c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b4:	d114      	bne.n	80054e0 <HAL_RCC_OscConfig+0x284>
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a05      	ldr	r2, [pc, #20]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80054bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a02      	ldr	r2, [pc, #8]	; (80054d0 <HAL_RCC_OscConfig+0x274>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e013      	b.n	80054f8 <HAL_RCC_OscConfig+0x29c>
 80054d0:	40021000 	.word	0x40021000
 80054d4:	0800bbe0 	.word	0x0800bbe0
 80054d8:	20000004 	.word	0x20000004
 80054dc:	20000008 	.word	0x20000008
 80054e0:	4b8f      	ldr	r3, [pc, #572]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a8e      	ldr	r2, [pc, #568]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80054e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	4b8c      	ldr	r3, [pc, #560]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a8b      	ldr	r2, [pc, #556]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80054f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d013      	beq.n	8005528 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fe f84a 	bl	8003598 <HAL_GetTick>
 8005504:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005508:	f7fe f846 	bl	8003598 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b64      	cmp	r3, #100	; 0x64
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e2f9      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800551a:	4b81      	ldr	r3, [pc, #516]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0x2ac>
 8005526:	e014      	b.n	8005552 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fe f836 	bl	8003598 <HAL_GetTick>
 800552c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005530:	f7fe f832 	bl	8003598 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b64      	cmp	r3, #100	; 0x64
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e2e5      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005542:	4b77      	ldr	r3, [pc, #476]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x2d4>
 800554e:	e000      	b.n	8005552 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d060      	beq.n	8005620 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	2b04      	cmp	r3, #4
 8005562:	d005      	beq.n	8005570 <HAL_RCC_OscConfig+0x314>
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d119      	bne.n	800559e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d116      	bne.n	800559e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005570:	4b6b      	ldr	r3, [pc, #428]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_OscConfig+0x32c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e2c2      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005588:	4b65      	ldr	r3, [pc, #404]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	4962      	ldr	r1, [pc, #392]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 8005598:	4313      	orrs	r3, r2
 800559a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800559c:	e040      	b.n	8005620 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d023      	beq.n	80055ee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055a6:	4b5e      	ldr	r3, [pc, #376]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a5d      	ldr	r2, [pc, #372]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80055ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fd fff1 	bl	8003598 <HAL_GetTick>
 80055b6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fd ffed 	bl	8003598 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e2a0      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055cc:	4b54      	ldr	r3, [pc, #336]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	4b51      	ldr	r3, [pc, #324]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	061b      	lsls	r3, r3, #24
 80055e6:	494e      	ldr	r1, [pc, #312]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	e018      	b.n	8005620 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ee:	4b4c      	ldr	r3, [pc, #304]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a4b      	ldr	r2, [pc, #300]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80055f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fd ffcd 	bl	8003598 <HAL_GetTick>
 80055fe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005602:	f7fd ffc9 	bl	8003598 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e27c      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005614:	4b42      	ldr	r3, [pc, #264]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f0      	bne.n	8005602 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8082 	beq.w	8005732 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d05f      	beq.n	80056f6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005636:	4b3a      	ldr	r3, [pc, #232]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 8005638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800563c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	429a      	cmp	r2, r3
 800564a:	d037      	beq.n	80056bc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e254      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01b      	beq.n	80056a6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800566e:	4b2c      	ldr	r3, [pc, #176]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 8005670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005674:	4a2a      	ldr	r2, [pc, #168]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800567e:	f7fd ff8b 	bl	8003598 <HAL_GetTick>
 8005682:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005686:	f7fd ff87 	bl	8003598 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b11      	cmp	r3, #17
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e23a      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005698:	4b21      	ldr	r3, [pc, #132]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 800569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1ef      	bne.n	8005686 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80056a6:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80056a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ac:	f023 0210 	bic.w	r2, r3, #16
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	491a      	ldr	r1, [pc, #104]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056bc:	4b18      	ldr	r3, [pc, #96]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80056be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056c2:	4a17      	ldr	r2, [pc, #92]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056cc:	f7fd ff64 	bl	8003598 <HAL_GetTick>
 80056d0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d4:	f7fd ff60 	bl	8003598 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b11      	cmp	r3, #17
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e213      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0ef      	beq.n	80056d4 <HAL_RCC_OscConfig+0x478>
 80056f4:	e01d      	b.n	8005732 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056fc:	4a08      	ldr	r2, [pc, #32]	; (8005720 <HAL_RCC_OscConfig+0x4c4>)
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005706:	f7fd ff47 	bl	8003598 <HAL_GetTick>
 800570a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800570c:	e00a      	b.n	8005724 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800570e:	f7fd ff43 	bl	8003598 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b11      	cmp	r3, #17
 800571a:	d903      	bls.n	8005724 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e1f6      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
 8005720:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005724:	4ba9      	ldr	r3, [pc, #676]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1ed      	bne.n	800570e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80bd 	beq.w	80058ba <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005746:	4ba1      	ldr	r3, [pc, #644]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10e      	bne.n	8005770 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	4b9e      	ldr	r3, [pc, #632]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005756:	4a9d      	ldr	r2, [pc, #628]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575c:	6593      	str	r3, [r2, #88]	; 0x58
 800575e:	4b9b      	ldr	r3, [pc, #620]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005770:	4b97      	ldr	r3, [pc, #604]	; (80059d0 <HAL_RCC_OscConfig+0x774>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	2b00      	cmp	r3, #0
 800577a:	d118      	bne.n	80057ae <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800577c:	4b94      	ldr	r3, [pc, #592]	; (80059d0 <HAL_RCC_OscConfig+0x774>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a93      	ldr	r2, [pc, #588]	; (80059d0 <HAL_RCC_OscConfig+0x774>)
 8005782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005788:	f7fd ff06 	bl	8003598 <HAL_GetTick>
 800578c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005790:	f7fd ff02 	bl	8003598 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e1b5      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a2:	4b8b      	ldr	r3, [pc, #556]	; (80059d0 <HAL_RCC_OscConfig+0x774>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d02c      	beq.n	8005814 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80057ba:	4b84      	ldr	r3, [pc, #528]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057cc:	497f      	ldr	r1, [pc, #508]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d010      	beq.n	8005802 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80057e0:	4b7a      	ldr	r3, [pc, #488]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	4a79      	ldr	r2, [pc, #484]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80057e8:	f043 0304 	orr.w	r3, r3, #4
 80057ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057f0:	4b76      	ldr	r3, [pc, #472]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	4a75      	ldr	r2, [pc, #468]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005800:	e018      	b.n	8005834 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005802:	4b72      	ldr	r3, [pc, #456]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	4a70      	ldr	r2, [pc, #448]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005812:	e00f      	b.n	8005834 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005814:	4b6d      	ldr	r3, [pc, #436]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	4a6c      	ldr	r2, [pc, #432]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005824:	4b69      	ldr	r3, [pc, #420]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	4a68      	ldr	r2, [pc, #416]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 800582c:	f023 0304 	bic.w	r3, r3, #4
 8005830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d016      	beq.n	800586a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fd feac 	bl	8003598 <HAL_GetTick>
 8005840:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005842:	e00a      	b.n	800585a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005844:	f7fd fea8 	bl	8003598 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e159      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585a:	4b5c      	ldr	r3, [pc, #368]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0ed      	beq.n	8005844 <HAL_RCC_OscConfig+0x5e8>
 8005868:	e01d      	b.n	80058a6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fd fe95 	bl	8003598 <HAL_GetTick>
 800586e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005870:	e00a      	b.n	8005888 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005872:	f7fd fe91 	bl	8003598 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e142      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1ed      	bne.n	8005872 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005896:	4b4d      	ldr	r3, [pc, #308]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589c:	4a4b      	ldr	r2, [pc, #300]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 800589e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d105      	bne.n	80058ba <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80058b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b2:	4a46      	ldr	r2, [pc, #280]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80058b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d03c      	beq.n	8005940 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01c      	beq.n	8005908 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058ce:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80058d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058d4:	4a3d      	ldr	r2, [pc, #244]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058de:	f7fd fe5b 	bl	8003598 <HAL_GetTick>
 80058e2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058e6:	f7fd fe57 	bl	8003598 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e10a      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058f8:	4b34      	ldr	r3, [pc, #208]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80058fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0ef      	beq.n	80058e6 <HAL_RCC_OscConfig+0x68a>
 8005906:	e01b      	b.n	8005940 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005908:	4b30      	ldr	r3, [pc, #192]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 800590a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800590e:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fd fe3e 	bl	8003598 <HAL_GetTick>
 800591c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005920:	f7fd fe3a 	bl	8003598 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e0ed      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005932:	4b26      	ldr	r3, [pc, #152]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1ef      	bne.n	8005920 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80e1 	beq.w	8005b0c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	2b02      	cmp	r3, #2
 8005950:	f040 80b5 	bne.w	8005abe <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005954:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f003 0203 	and.w	r2, r3, #3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	429a      	cmp	r2, r3
 8005966:	d124      	bne.n	80059b2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	3b01      	subs	r3, #1
 8005974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005976:	429a      	cmp	r2, r3
 8005978:	d11b      	bne.n	80059b2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d113      	bne.n	80059b2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	3b01      	subs	r3, #1
 8005998:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d109      	bne.n	80059b2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	3b01      	subs	r3, #1
 80059ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d05f      	beq.n	8005a72 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d05a      	beq.n	8005a6e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a03      	ldr	r2, [pc, #12]	; (80059cc <HAL_RCC_OscConfig+0x770>)
 80059be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059c4:	f7fd fde8 	bl	8003598 <HAL_GetTick>
 80059c8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ca:	e00c      	b.n	80059e6 <HAL_RCC_OscConfig+0x78a>
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d4:	f7fd fde0 	bl	8003598 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e093      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e6:	4b4c      	ldr	r3, [pc, #304]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f2:	4b49      	ldr	r3, [pc, #292]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	4b49      	ldr	r3, [pc, #292]	; (8005b1c <HAL_RCC_OscConfig+0x8c0>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a02:	3a01      	subs	r2, #1
 8005a04:	0112      	lsls	r2, r2, #4
 8005a06:	4311      	orrs	r1, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a0c:	0212      	lsls	r2, r2, #8
 8005a0e:	4311      	orrs	r1, r2
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a14:	0852      	lsrs	r2, r2, #1
 8005a16:	3a01      	subs	r2, #1
 8005a18:	0552      	lsls	r2, r2, #21
 8005a1a:	4311      	orrs	r1, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a20:	0852      	lsrs	r2, r2, #1
 8005a22:	3a01      	subs	r2, #1
 8005a24:	0652      	lsls	r2, r2, #25
 8005a26:	430a      	orrs	r2, r1
 8005a28:	493b      	ldr	r1, [pc, #236]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a2e:	4b3a      	ldr	r3, [pc, #232]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a39      	ldr	r2, [pc, #228]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a38:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a3a:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4a36      	ldr	r2, [pc, #216]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a44:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a46:	f7fd fda7 	bl	8003598 <HAL_GetTick>
 8005a4a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fd fda3 	bl	8003598 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e056      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a60:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a6c:	e04e      	b.n	8005b0c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e04d      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a72:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d146      	bne.n	8005b0c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a7e:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a88:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a8a:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a94:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a96:	f7fd fd7f 	bl	8003598 <HAL_GetTick>
 8005a9a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9e:	f7fd fd7b 	bl	8003598 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e02e      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x842>
 8005abc:	e026      	b.n	8005b0c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	2b0c      	cmp	r3, #12
 8005ac2:	d021      	beq.n	8005b08 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac4:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fd fd62 	bl	8003598 <HAL_GetTick>
 8005ad4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad8:	f7fd fd5e 	bl	8003598 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e011      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aea:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005af6:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	4a07      	ldr	r2, [pc, #28]	; (8005b18 <HAL_RCC_OscConfig+0x8bc>)
 8005afc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b00:	f023 0303 	bic.w	r3, r3, #3
 8005b04:	60d3      	str	r3, [r2, #12]
 8005b06:	e001      	b.n	8005b0c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3728      	adds	r7, #40	; 0x28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	f99f808c 	.word	0xf99f808c

08005b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0e7      	b.n	8005d04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b34:	4b75      	ldr	r3, [pc, #468]	; (8005d0c <HAL_RCC_ClockConfig+0x1ec>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d910      	bls.n	8005b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b42:	4b72      	ldr	r3, [pc, #456]	; (8005d0c <HAL_RCC_ClockConfig+0x1ec>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f023 0207 	bic.w	r2, r3, #7
 8005b4a:	4970      	ldr	r1, [pc, #448]	; (8005d0c <HAL_RCC_ClockConfig+0x1ec>)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b52:	4b6e      	ldr	r3, [pc, #440]	; (8005d0c <HAL_RCC_ClockConfig+0x1ec>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0cf      	b.n	8005d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d010      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	4b66      	ldr	r3, [pc, #408]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d908      	bls.n	8005b92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b80:	4b63      	ldr	r3, [pc, #396]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4960      	ldr	r1, [pc, #384]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d04c      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d107      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ba6:	4b5a      	ldr	r3, [pc, #360]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d121      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e0a6      	b.n	8005d04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d107      	bne.n	8005bce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bbe:	4b54      	ldr	r3, [pc, #336]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d115      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e09a      	b.n	8005d04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d107      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bd6:	4b4e      	ldr	r3, [pc, #312]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e08e      	b.n	8005d04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005be6:	4b4a      	ldr	r3, [pc, #296]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e086      	b.n	8005d04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bf6:	4b46      	ldr	r3, [pc, #280]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f023 0203 	bic.w	r2, r3, #3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4943      	ldr	r1, [pc, #268]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c08:	f7fd fcc6 	bl	8003598 <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c10:	f7fd fcc2 	bl	8003598 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e06e      	b.n	8005d04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c26:	4b3a      	ldr	r3, [pc, #232]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 020c 	and.w	r2, r3, #12
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d1eb      	bne.n	8005c10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d010      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d208      	bcs.n	8005c66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c54:	4b2e      	ldr	r3, [pc, #184]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	492b      	ldr	r1, [pc, #172]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c66:	4b29      	ldr	r3, [pc, #164]	; (8005d0c <HAL_RCC_ClockConfig+0x1ec>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d210      	bcs.n	8005c96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c74:	4b25      	ldr	r3, [pc, #148]	; (8005d0c <HAL_RCC_ClockConfig+0x1ec>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f023 0207 	bic.w	r2, r3, #7
 8005c7c:	4923      	ldr	r1, [pc, #140]	; (8005d0c <HAL_RCC_ClockConfig+0x1ec>)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c84:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <HAL_RCC_ClockConfig+0x1ec>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d001      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e036      	b.n	8005d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	4918      	ldr	r1, [pc, #96]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cc0:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	4910      	ldr	r1, [pc, #64]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cd4:	f000 f824 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <HAL_RCC_ClockConfig+0x1f0>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	091b      	lsrs	r3, r3, #4
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	490b      	ldr	r1, [pc, #44]	; (8005d14 <HAL_RCC_ClockConfig+0x1f4>)
 8005ce6:	5ccb      	ldrb	r3, [r1, r3]
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf0:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <HAL_RCC_ClockConfig+0x1f8>)
 8005cf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <HAL_RCC_ClockConfig+0x1fc>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fd fbfd 	bl	80034f8 <HAL_InitTick>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d02:	7afb      	ldrb	r3, [r7, #11]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40022000 	.word	0x40022000
 8005d10:	40021000 	.word	0x40021000
 8005d14:	0800bbe0 	.word	0x0800bbe0
 8005d18:	20000004 	.word	0x20000004
 8005d1c:	20000008 	.word	0x20000008

08005d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b089      	sub	sp, #36	; 0x24
 8005d24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d2e:	4b3e      	ldr	r3, [pc, #248]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d38:	4b3b      	ldr	r3, [pc, #236]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x34>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	2b0c      	cmp	r3, #12
 8005d4c:	d121      	bne.n	8005d92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d11e      	bne.n	8005d92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d54:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d60:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	e005      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d70:	4b2d      	ldr	r3, [pc, #180]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d7c:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10d      	bne.n	8005da8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d102      	bne.n	8005d9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e004      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d101      	bne.n	8005da8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005da4:	4b23      	ldr	r3, [pc, #140]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8005da6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b0c      	cmp	r3, #12
 8005dac:	d134      	bne.n	8005e18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dae:	4b1e      	ldr	r3, [pc, #120]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d003      	beq.n	8005dc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d003      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0xac>
 8005dc4:	e005      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8005dc8:	617b      	str	r3, [r7, #20]
      break;
 8005dca:	e005      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dce:	617b      	str	r3, [r7, #20]
      break;
 8005dd0:	e002      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	617b      	str	r3, [r7, #20]
      break;
 8005dd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dd8:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	3301      	adds	r3, #1
 8005de4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	fb03 f202 	mul.w	r2, r3, r2
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	0e5b      	lsrs	r3, r3, #25
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	3301      	adds	r3, #1
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e18:	69bb      	ldr	r3, [r7, #24]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3724      	adds	r7, #36	; 0x24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	0800bbf8 	.word	0x0800bbf8
 8005e30:	00f42400 	.word	0x00f42400
 8005e34:	007a1200 	.word	0x007a1200

08005e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000004 	.word	0x20000004

08005e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e54:	f7ff fff0 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	4904      	ldr	r1, [pc, #16]	; (8005e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e66:	5ccb      	ldrb	r3, [r1, r3]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40021000 	.word	0x40021000
 8005e78:	0800bbf0 	.word	0x0800bbf0

08005e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e80:	f7ff ffda 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0adb      	lsrs	r3, r3, #11
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4904      	ldr	r1, [pc, #16]	; (8005ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	0800bbf0 	.word	0x0800bbf0

08005ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005eb4:	4b2a      	ldr	r3, [pc, #168]	; (8005f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ec0:	f7ff f968 	bl	8005194 <HAL_PWREx_GetVoltageRange>
 8005ec4:	6178      	str	r0, [r7, #20]
 8005ec6:	e014      	b.n	8005ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ec8:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	4a24      	ldr	r2, [pc, #144]	; (8005f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed4:	4b22      	ldr	r3, [pc, #136]	; (8005f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ee0:	f7ff f958 	bl	8005194 <HAL_PWREx_GetVoltageRange>
 8005ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ee6:	4b1e      	ldr	r3, [pc, #120]	; (8005f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d10b      	bne.n	8005f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d919      	bls.n	8005f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2ba0      	cmp	r3, #160	; 0xa0
 8005f04:	d902      	bls.n	8005f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f06:	2302      	movs	r3, #2
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	e013      	b.n	8005f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	e010      	b.n	8005f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b80      	cmp	r3, #128	; 0x80
 8005f16:	d902      	bls.n	8005f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f18:	2303      	movs	r3, #3
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	e00a      	b.n	8005f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b80      	cmp	r3, #128	; 0x80
 8005f22:	d102      	bne.n	8005f2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f24:	2302      	movs	r3, #2
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	e004      	b.n	8005f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b70      	cmp	r3, #112	; 0x70
 8005f2e:	d101      	bne.n	8005f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f30:	2301      	movs	r3, #1
 8005f32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f34:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f023 0207 	bic.w	r2, r3, #7
 8005f3c:	4909      	ldr	r1, [pc, #36]	; (8005f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f44:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d001      	beq.n	8005f56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000
 8005f64:	40022000 	.word	0x40022000

08005f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f70:	2300      	movs	r3, #0
 8005f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f74:	2300      	movs	r3, #0
 8005f76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 809e 	beq.w	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f86:	2300      	movs	r3, #0
 8005f88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f8a:	4b46      	ldr	r3, [pc, #280]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00d      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fa0:	4b40      	ldr	r3, [pc, #256]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa4:	4a3f      	ldr	r2, [pc, #252]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005faa:	6593      	str	r3, [r2, #88]	; 0x58
 8005fac:	4b3d      	ldr	r3, [pc, #244]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fbc:	4b3a      	ldr	r3, [pc, #232]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a39      	ldr	r2, [pc, #228]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fc8:	f7fd fae6 	bl	8003598 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fce:	e009      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd0:	f7fd fae2 	bl	8003598 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d902      	bls.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	74fb      	strb	r3, [r7, #19]
        break;
 8005fe2:	e005      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fe4:	4b30      	ldr	r3, [pc, #192]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0ef      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d15a      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ff6:	4b2b      	ldr	r3, [pc, #172]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006000:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01e      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	429a      	cmp	r2, r3
 8006010:	d019      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006012:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800601c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800601e:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800602e:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006034:	4a1b      	ldr	r2, [pc, #108]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800603e:	4a19      	ldr	r2, [pc, #100]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d016      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7fd faa2 	bl	8003598 <HAL_GetTick>
 8006054:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006056:	e00b      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f7fd fa9e 	bl	8003598 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d902      	bls.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	74fb      	strb	r3, [r7, #19]
            break;
 800606e:	e006      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006070:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0ec      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800607e:	7cfb      	ldrb	r3, [r7, #19]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006084:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	4904      	ldr	r1, [pc, #16]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800609a:	e009      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	74bb      	strb	r3, [r7, #18]
 80060a0:	e006      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80060a2:	bf00      	nop
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ac:	7cfb      	ldrb	r3, [r7, #19]
 80060ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060b0:	7c7b      	ldrb	r3, [r7, #17]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d105      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b6:	4b6e      	ldr	r3, [pc, #440]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ba:	4a6d      	ldr	r2, [pc, #436]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060ce:	4b68      	ldr	r3, [pc, #416]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d4:	f023 0203 	bic.w	r2, r3, #3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	4964      	ldr	r1, [pc, #400]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060f0:	4b5f      	ldr	r3, [pc, #380]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	f023 020c 	bic.w	r2, r3, #12
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	495c      	ldr	r1, [pc, #368]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006112:	4b57      	ldr	r3, [pc, #348]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006118:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4953      	ldr	r1, [pc, #332]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006134:	4b4e      	ldr	r3, [pc, #312]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	494b      	ldr	r1, [pc, #300]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006144:	4313      	orrs	r3, r2
 8006146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006156:	4b46      	ldr	r3, [pc, #280]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	4942      	ldr	r1, [pc, #264]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006178:	4b3d      	ldr	r3, [pc, #244]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	493a      	ldr	r1, [pc, #232]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006188:	4313      	orrs	r3, r2
 800618a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800619a:	4b35      	ldr	r3, [pc, #212]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	4931      	ldr	r1, [pc, #196]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061bc:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	4929      	ldr	r1, [pc, #164]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061de:	4b24      	ldr	r3, [pc, #144]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	4920      	ldr	r1, [pc, #128]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d015      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006200:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	4918      	ldr	r1, [pc, #96]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800621e:	d105      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006220:	4b13      	ldr	r3, [pc, #76]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	4a12      	ldr	r2, [pc, #72]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800622a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d015      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006238:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	490a      	ldr	r1, [pc, #40]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006248:	4313      	orrs	r3, r2
 800624a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006256:	d105      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4a04      	ldr	r2, [pc, #16]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800625e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006262:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006264:	7cbb      	ldrb	r3, [r7, #18]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40021000 	.word	0x40021000

08006274 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d07f      	beq.n	8006386 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fc ff18 	bl	80030d0 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80062a6:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80062b0:	4b37      	ldr	r3, [pc, #220]	; (8006390 <HAL_RTC_Init+0x11c>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d05b      	beq.n	8006374 <HAL_RTC_Init+0x100>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	22ca      	movs	r2, #202	; 0xca
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2253      	movs	r2, #83	; 0x53
 80062ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fa53 	bl	8006778 <RTC_EnterInitMode>
 80062d2:	4603      	mov	r3, r0
 80062d4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d127      	bne.n	800632c <HAL_RTC_Init+0xb8>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80062ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ee:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6999      	ldr	r1, [r3, #24]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6912      	ldr	r2, [r2, #16]
 8006316:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6919      	ldr	r1, [r3, #16]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	041a      	lsls	r2, r3, #16
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fa59 	bl	80067e4 <RTC_ExitInitMode>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d116      	bne.n	800636a <HAL_RTC_Init+0xf6>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800634a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6999      	ldr	r1, [r3, #24]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	22ff      	movs	r2, #255	; 0xff
 8006370:	625a      	str	r2, [r3, #36]	; 0x24
 8006372:	e001      	b.n	8006378 <HAL_RTC_Init+0x104>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <HAL_RTC_Init+0x112>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
  }

  return status;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40002800 	.word	0x40002800

08006394 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_RTC_SetTime+0x1a>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e08b      	b.n	80064c6 <HAL_RTC_SetTime+0x132>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	22ca      	movs	r2, #202	; 0xca
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2253      	movs	r2, #83	; 0x53
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f9d2 	bl	8006778 <RTC_EnterInitMode>
 80063d4:	4603      	mov	r3, r0
 80063d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80063d8:	7cfb      	ldrb	r3, [r7, #19]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d163      	bne.n	80064a6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d126      	bne.n	8006432 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fa2f 	bl	8006860 <RTC_ByteToBcd2>
 8006402:	4603      	mov	r3, r0
 8006404:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fa28 	bl	8006860 <RTC_ByteToBcd2>
 8006410:	4603      	mov	r3, r0
 8006412:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006414:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	789b      	ldrb	r3, [r3, #2]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fa20 	bl	8006860 <RTC_ByteToBcd2>
 8006420:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006422:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	e018      	b.n	8006464 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	785b      	ldrb	r3, [r3, #1]
 8006450:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006452:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006458:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	78db      	ldrb	r3, [r3, #3]
 800645e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800646e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006472:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006482:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6999      	ldr	r1, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	431a      	orrs	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f9a1 	bl	80067e4 <RTC_ExitInitMode>
 80064a2:	4603      	mov	r3, r0
 80064a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	22ff      	movs	r2, #255	; 0xff
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80064ae:	7cfb      	ldrb	r3, [r7, #19]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd90      	pop	{r4, r7, pc}

080064ce <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b086      	sub	sp, #24
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80064fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006500:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	b2db      	uxtb	r3, r3
 8006508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800650c:	b2da      	uxtb	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800652a:	b2da      	uxtb	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	0d9b      	lsrs	r3, r3, #22
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d11a      	bne.n	800657c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 f9a8 	bl	80068a0 <RTC_Bcd2ToByte>
 8006550:	4603      	mov	r3, r0
 8006552:	461a      	mov	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	4618      	mov	r0, r3
 800655e:	f000 f99f 	bl	80068a0 <RTC_Bcd2ToByte>
 8006562:	4603      	mov	r3, r0
 8006564:	461a      	mov	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	789b      	ldrb	r3, [r3, #2]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 f996 	bl	80068a0 <RTC_Bcd2ToByte>
 8006574:	4603      	mov	r3, r0
 8006576:	461a      	mov	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006586:	b590      	push	{r4, r7, lr}
 8006588:	b087      	sub	sp, #28
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_RTC_SetDate+0x1a>
 800659c:	2302      	movs	r3, #2
 800659e:	e075      	b.n	800668c <HAL_RTC_SetDate+0x106>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10e      	bne.n	80065d4 <HAL_RTC_SetDate+0x4e>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d008      	beq.n	80065d4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	f023 0310 	bic.w	r3, r3, #16
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	330a      	adds	r3, #10
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d11c      	bne.n	8006614 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	78db      	ldrb	r3, [r3, #3]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f93e 	bl	8006860 <RTC_ByteToBcd2>
 80065e4:	4603      	mov	r3, r0
 80065e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 f937 	bl	8006860 <RTC_ByteToBcd2>
 80065f2:	4603      	mov	r3, r0
 80065f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80065f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	789b      	ldrb	r3, [r3, #2]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 f92f 	bl	8006860 <RTC_ByteToBcd2>
 8006602:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006604:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	e00e      	b.n	8006632 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	78db      	ldrb	r3, [r3, #3]
 8006618:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	785b      	ldrb	r3, [r3, #1]
 800661e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006620:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006626:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	22ca      	movs	r2, #202	; 0xca
 8006638:	625a      	str	r2, [r3, #36]	; 0x24
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2253      	movs	r2, #83	; 0x53
 8006640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f898 	bl	8006778 <RTC_EnterInitMode>
 8006648:	4603      	mov	r3, r0
 800664a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800664c:	7cfb      	ldrb	r3, [r7, #19]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10c      	bne.n	800666c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800665c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006660:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f8be 	bl	80067e4 <RTC_ExitInitMode>
 8006668:	4603      	mov	r3, r0
 800666a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	22ff      	movs	r2, #255	; 0xff
 8006672:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006674:	7cfb      	ldrb	r3, [r7, #19]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 800668a:	7cfb      	ldrb	r3, [r7, #19]
}
 800668c:	4618      	mov	r0, r3
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	bd90      	pop	{r4, r7, pc}

08006694 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	0c1b      	lsrs	r3, r3, #16
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	0a1b      	lsrs	r3, r3, #8
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	0b5b      	lsrs	r3, r3, #13
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d11a      	bne.n	8006724 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	78db      	ldrb	r3, [r3, #3]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f8d4 	bl	80068a0 <RTC_Bcd2ToByte>
 80066f8:	4603      	mov	r3, r0
 80066fa:	461a      	mov	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 f8cb 	bl	80068a0 <RTC_Bcd2ToByte>
 800670a:	4603      	mov	r3, r0
 800670c:	461a      	mov	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	789b      	ldrb	r3, [r3, #2]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f8c2 	bl	80068a0 <RTC_Bcd2ToByte>
 800671c:	4603      	mov	r3, r0
 800671e:	461a      	mov	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a0d      	ldr	r2, [pc, #52]	; (8006774 <HAL_RTC_WaitForSynchro+0x44>)
 800673e:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 8006740:	f7fc ff2a 	bl	8003598 <HAL_GetTick>
 8006744:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006746:	e009      	b.n	800675c <HAL_RTC_WaitForSynchro+0x2c>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006748:	f7fc ff26 	bl	8003598 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006756:	d901      	bls.n	800675c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e007      	b.n	800676c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0ee      	beq.n	8006748 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	0001005c 	.word	0x0001005c

08006778 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d123      	bne.n	80067da <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80067a2:	f7fc fef9 	bl	8003598 <HAL_GetTick>
 80067a6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80067a8:	e00d      	b.n	80067c6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80067aa:	f7fc fef5 	bl	8003598 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067b8:	d905      	bls.n	80067c6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2203      	movs	r2, #3
 80067c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <RTC_EnterInitMode+0x62>
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d1e7      	bne.n	80067aa <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80067f0:	4b1a      	ldr	r3, [pc, #104]	; (800685c <RTC_ExitInitMode+0x78>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4a19      	ldr	r2, [pc, #100]	; (800685c <RTC_ExitInitMode+0x78>)
 80067f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fa:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80067fc:	4b17      	ldr	r3, [pc, #92]	; (800685c <RTC_ExitInitMode+0x78>)
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10c      	bne.n	8006822 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff ff91 	bl	8006730 <HAL_RTC_WaitForSynchro>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01e      	beq.n	8006852 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2203      	movs	r2, #3
 8006818:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	e017      	b.n	8006852 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006822:	4b0e      	ldr	r3, [pc, #56]	; (800685c <RTC_ExitInitMode+0x78>)
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	4a0d      	ldr	r2, [pc, #52]	; (800685c <RTC_ExitInitMode+0x78>)
 8006828:	f023 0320 	bic.w	r3, r3, #32
 800682c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff ff7e 	bl	8006730 <HAL_RTC_WaitForSynchro>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2203      	movs	r2, #3
 800683e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <RTC_ExitInitMode+0x78>)
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	4a04      	ldr	r2, [pc, #16]	; (800685c <RTC_ExitInitMode+0x78>)
 800684c:	f043 0320 	orr.w	r3, r3, #32
 8006850:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40002800 	.word	0x40002800

08006860 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006872:	e005      	b.n	8006880 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	3b0a      	subs	r3, #10
 800687e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	2b09      	cmp	r3, #9
 8006884:	d8f6      	bhi.n	8006874 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	b2da      	uxtb	r2, r3
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	4313      	orrs	r3, r2
 8006892:	b2db      	uxtb	r3, r3
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	0092      	lsls	r2, r2, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	4413      	add	r3, r2
 80068c6:	b2db      	uxtb	r3, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e095      	b.n	8006a12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d108      	bne.n	8006900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f6:	d009      	beq.n	800690c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	61da      	str	r2, [r3, #28]
 80068fe:	e005      	b.n	800690c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fc fc02 	bl	8003130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006942:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800694c:	d902      	bls.n	8006954 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e002      	b.n	800695a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006958:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006962:	d007      	beq.n	8006974 <HAL_SPI_Init+0xa0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800696c:	d002      	beq.n	8006974 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	ea42 0103 	orr.w	r1, r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	f003 0204 	and.w	r2, r3, #4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80069f0:	ea42 0103 	orr.w	r1, r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b08a      	sub	sp, #40	; 0x28
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_SPI_TransmitReceive+0x26>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e20a      	b.n	8006e56 <HAL_SPI_TransmitReceive+0x43c>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a48:	f7fc fda6 	bl	8003598 <HAL_GetTick>
 8006a4c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a54:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006a5c:	887b      	ldrh	r3, [r7, #2]
 8006a5e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006a60:	887b      	ldrh	r3, [r7, #2]
 8006a62:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a64:	7efb      	ldrb	r3, [r7, #27]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d00e      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x6e>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a70:	d106      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x66>
 8006a7a:	7efb      	ldrb	r3, [r7, #27]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d003      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a86:	e1e0      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x80>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x80>
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006aa0:	e1d3      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d003      	beq.n	8006ab6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	887a      	ldrh	r2, [r7, #2]
 8006ac6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	887a      	ldrh	r2, [r7, #2]
 8006ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	887a      	ldrh	r2, [r7, #2]
 8006adc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	887a      	ldrh	r2, [r7, #2]
 8006ae2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006af8:	d802      	bhi.n	8006b00 <HAL_SPI_TransmitReceive+0xe6>
 8006afa:	8a3b      	ldrh	r3, [r7, #16]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d908      	bls.n	8006b12 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b0e:	605a      	str	r2, [r3, #4]
 8006b10:	e007      	b.n	8006b22 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b20:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d007      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b48:	f240 8081 	bls.w	8006c4e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <HAL_SPI_TransmitReceive+0x140>
 8006b54:	8a7b      	ldrh	r3, [r7, #18]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d16d      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	881a      	ldrh	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	1c9a      	adds	r2, r3, #2
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b7e:	e05a      	b.n	8006c36 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d11b      	bne.n	8006bc6 <HAL_SPI_TransmitReceive+0x1ac>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d016      	beq.n	8006bc6 <HAL_SPI_TransmitReceive+0x1ac>
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d113      	bne.n	8006bc6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	881a      	ldrh	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	1c9a      	adds	r2, r3, #2
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d11c      	bne.n	8006c0e <HAL_SPI_TransmitReceive+0x1f4>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d016      	beq.n	8006c0e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	b292      	uxth	r2, r2
 8006bec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	1c9a      	adds	r2, r3, #2
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c0e:	f7fc fcc3 	bl	8003598 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d80b      	bhi.n	8006c36 <HAL_SPI_TransmitReceive+0x21c>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c24:	d007      	beq.n	8006c36 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006c34:	e109      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d19f      	bne.n	8006b80 <HAL_SPI_TransmitReceive+0x166>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d199      	bne.n	8006b80 <HAL_SPI_TransmitReceive+0x166>
 8006c4c:	e0e3      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_SPI_TransmitReceive+0x244>
 8006c56:	8a7b      	ldrh	r3, [r7, #18]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	f040 80cf 	bne.w	8006dfc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d912      	bls.n	8006c8e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	881a      	ldrh	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	1c9a      	adds	r2, r3, #2
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b02      	subs	r3, #2
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c8c:	e0b6      	b.n	8006dfc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	330c      	adds	r3, #12
 8006c98:	7812      	ldrb	r2, [r2, #0]
 8006c9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cb4:	e0a2      	b.n	8006dfc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d134      	bne.n	8006d2e <HAL_SPI_TransmitReceive+0x314>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d02f      	beq.n	8006d2e <HAL_SPI_TransmitReceive+0x314>
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d12c      	bne.n	8006d2e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d912      	bls.n	8006d04 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	881a      	ldrh	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	1c9a      	adds	r2, r3, #2
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b02      	subs	r3, #2
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d02:	e012      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	7812      	ldrb	r2, [r2, #0]
 8006d10:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d148      	bne.n	8006dce <HAL_SPI_TransmitReceive+0x3b4>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d042      	beq.n	8006dce <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d923      	bls.n	8006d9c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	b292      	uxth	r2, r2
 8006d60:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	1c9a      	adds	r2, r3, #2
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b02      	subs	r3, #2
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d81f      	bhi.n	8006dca <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d98:	605a      	str	r2, [r3, #4]
 8006d9a:	e016      	b.n	8006dca <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f103 020c 	add.w	r2, r3, #12
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	7812      	ldrb	r2, [r2, #0]
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dce:	f7fc fbe3 	bl	8003598 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d803      	bhi.n	8006de6 <HAL_SPI_TransmitReceive+0x3cc>
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d102      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x3d2>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d107      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006dfa:	e026      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f47f af57 	bne.w	8006cb6 <HAL_SPI_TransmitReceive+0x29c>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f47f af50 	bne.w	8006cb6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f93e 	bl	800709c <SPI_EndRxTxTransaction>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e40:	e003      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3728      	adds	r7, #40	; 0x28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e70:	f7fc fb92 	bl	8003598 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e80:	f7fc fb8a 	bl	8003598 <HAL_GetTick>
 8006e84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e86:	4b39      	ldr	r3, [pc, #228]	; (8006f6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	015b      	lsls	r3, r3, #5
 8006e8c:	0d1b      	lsrs	r3, r3, #20
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
 8006e94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e96:	e054      	b.n	8006f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d050      	beq.n	8006f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ea0:	f7fc fb7a 	bl	8003598 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d902      	bls.n	8006eb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d13d      	bne.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ece:	d111      	bne.n	8006ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed8:	d004      	beq.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee2:	d107      	bne.n	8006ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efc:	d10f      	bne.n	8006f1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e017      	b.n	8006f62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	bf0c      	ite	eq
 8006f52:	2301      	moveq	r3, #1
 8006f54:	2300      	movne	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d19b      	bne.n	8006e98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3720      	adds	r7, #32
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000004 	.word	0x20000004

08006f70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08a      	sub	sp, #40	; 0x28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f82:	f7fc fb09 	bl	8003598 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	4413      	add	r3, r2
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f92:	f7fc fb01 	bl	8003598 <HAL_GetTick>
 8006f96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fa0:	4b3d      	ldr	r3, [pc, #244]	; (8007098 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	00da      	lsls	r2, r3, #3
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	0d1b      	lsrs	r3, r3, #20
 8006fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb2:	fb02 f303 	mul.w	r3, r2, r3
 8006fb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fb8:	e060      	b.n	800707c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fc0:	d107      	bne.n	8006fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d050      	beq.n	800707c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fda:	f7fc fadd 	bl	8003598 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d902      	bls.n	8006ff0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d13d      	bne.n	800706c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ffe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007008:	d111      	bne.n	800702e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007012:	d004      	beq.n	800701e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800701c:	d107      	bne.n	800702e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007036:	d10f      	bne.n	8007058 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007056:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e010      	b.n	800708e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	3b01      	subs	r3, #1
 800707a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4013      	ands	r3, r2
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	429a      	cmp	r2, r3
 800708a:	d196      	bne.n	8006fba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3728      	adds	r7, #40	; 0x28
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000004 	.word	0x20000004

0800709c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff ff5b 	bl	8006f70 <SPI_WaitFifoStateUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c4:	f043 0220 	orr.w	r2, r3, #32
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e027      	b.n	8007120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	2180      	movs	r1, #128	; 0x80
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff fec0 	bl	8006e60 <SPI_WaitFlagStateUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ea:	f043 0220 	orr.w	r2, r3, #32
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e014      	b.n	8007120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff ff34 	bl	8006f70 <SPI_WaitFifoStateUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007112:	f043 0220 	orr.w	r2, r3, #32
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e000      	b.n	8007120 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e040      	b.n	80071bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fc f832 	bl	80031b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2224      	movs	r2, #36	; 0x24
 8007154:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0201 	bic.w	r2, r2, #1
 8007164:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fb0c 	bl	800778c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f8af 	bl	80072d8 <UART_SetConfig>
 800717a:	4603      	mov	r3, r0
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e01b      	b.n	80071bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fb8b 	bl	80078d0 <UART_CheckIdleState>
 80071ba:	4603      	mov	r3, r0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	; 0x28
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d178      	bne.n	80072ce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <HAL_UART_Transmit+0x24>
 80071e2:	88fb      	ldrh	r3, [r7, #6]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e071      	b.n	80072d0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2221      	movs	r2, #33	; 0x21
 80071f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071fa:	f7fc f9cd 	bl	8003598 <HAL_GetTick>
 80071fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	88fa      	ldrh	r2, [r7, #6]
 8007204:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	88fa      	ldrh	r2, [r7, #6]
 800720c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007218:	d108      	bne.n	800722c <HAL_UART_Transmit+0x68>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007222:	2300      	movs	r3, #0
 8007224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	e003      	b.n	8007234 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007230:	2300      	movs	r3, #0
 8007232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007234:	e030      	b.n	8007298 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2200      	movs	r2, #0
 800723e:	2180      	movs	r1, #128	; 0x80
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fbed 	bl	8007a20 <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e03c      	b.n	80072d0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10b      	bne.n	8007274 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	881a      	ldrh	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007268:	b292      	uxth	r2, r2
 800726a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	3302      	adds	r3, #2
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	e008      	b.n	8007286 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	b292      	uxth	r2, r2
 800727e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1c8      	bne.n	8007236 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2200      	movs	r2, #0
 80072ac:	2140      	movs	r1, #64	; 0x40
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fbb6 	bl	8007a20 <UART_WaitOnFlagUntilTimeout>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d004      	beq.n	80072c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e005      	b.n	80072d0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e000      	b.n	80072d0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80072ce:	2302      	movs	r3, #2
  }
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3720      	adds	r7, #32
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072dc:	b08a      	sub	sp, #40	; 0x28
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	431a      	orrs	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	431a      	orrs	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b9e      	ldr	r3, [pc, #632]	; (8007580 <UART_SetConfig+0x2a8>)
 8007308:	4013      	ands	r3, r2
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007310:	430b      	orrs	r3, r1
 8007312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a93      	ldr	r2, [pc, #588]	; (8007584 <UART_SetConfig+0x2ac>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007340:	4313      	orrs	r3, r2
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007354:	430a      	orrs	r2, r1
 8007356:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a8a      	ldr	r2, [pc, #552]	; (8007588 <UART_SetConfig+0x2b0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d126      	bne.n	80073b0 <UART_SetConfig+0xd8>
 8007362:	4b8a      	ldr	r3, [pc, #552]	; (800758c <UART_SetConfig+0x2b4>)
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	2b03      	cmp	r3, #3
 800736e:	d81b      	bhi.n	80073a8 <UART_SetConfig+0xd0>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <UART_SetConfig+0xa0>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	08007389 	.word	0x08007389
 800737c:	08007399 	.word	0x08007399
 8007380:	08007391 	.word	0x08007391
 8007384:	080073a1 	.word	0x080073a1
 8007388:	2301      	movs	r3, #1
 800738a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738e:	e0ab      	b.n	80074e8 <UART_SetConfig+0x210>
 8007390:	2302      	movs	r3, #2
 8007392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007396:	e0a7      	b.n	80074e8 <UART_SetConfig+0x210>
 8007398:	2304      	movs	r3, #4
 800739a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800739e:	e0a3      	b.n	80074e8 <UART_SetConfig+0x210>
 80073a0:	2308      	movs	r3, #8
 80073a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073a6:	e09f      	b.n	80074e8 <UART_SetConfig+0x210>
 80073a8:	2310      	movs	r3, #16
 80073aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ae:	e09b      	b.n	80074e8 <UART_SetConfig+0x210>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a76      	ldr	r2, [pc, #472]	; (8007590 <UART_SetConfig+0x2b8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d138      	bne.n	800742c <UART_SetConfig+0x154>
 80073ba:	4b74      	ldr	r3, [pc, #464]	; (800758c <UART_SetConfig+0x2b4>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	f003 030c 	and.w	r3, r3, #12
 80073c4:	2b0c      	cmp	r3, #12
 80073c6:	d82d      	bhi.n	8007424 <UART_SetConfig+0x14c>
 80073c8:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <UART_SetConfig+0xf8>)
 80073ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ce:	bf00      	nop
 80073d0:	08007405 	.word	0x08007405
 80073d4:	08007425 	.word	0x08007425
 80073d8:	08007425 	.word	0x08007425
 80073dc:	08007425 	.word	0x08007425
 80073e0:	08007415 	.word	0x08007415
 80073e4:	08007425 	.word	0x08007425
 80073e8:	08007425 	.word	0x08007425
 80073ec:	08007425 	.word	0x08007425
 80073f0:	0800740d 	.word	0x0800740d
 80073f4:	08007425 	.word	0x08007425
 80073f8:	08007425 	.word	0x08007425
 80073fc:	08007425 	.word	0x08007425
 8007400:	0800741d 	.word	0x0800741d
 8007404:	2300      	movs	r3, #0
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740a:	e06d      	b.n	80074e8 <UART_SetConfig+0x210>
 800740c:	2302      	movs	r3, #2
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007412:	e069      	b.n	80074e8 <UART_SetConfig+0x210>
 8007414:	2304      	movs	r3, #4
 8007416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741a:	e065      	b.n	80074e8 <UART_SetConfig+0x210>
 800741c:	2308      	movs	r3, #8
 800741e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007422:	e061      	b.n	80074e8 <UART_SetConfig+0x210>
 8007424:	2310      	movs	r3, #16
 8007426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800742a:	e05d      	b.n	80074e8 <UART_SetConfig+0x210>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a58      	ldr	r2, [pc, #352]	; (8007594 <UART_SetConfig+0x2bc>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d125      	bne.n	8007482 <UART_SetConfig+0x1aa>
 8007436:	4b55      	ldr	r3, [pc, #340]	; (800758c <UART_SetConfig+0x2b4>)
 8007438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007440:	2b30      	cmp	r3, #48	; 0x30
 8007442:	d016      	beq.n	8007472 <UART_SetConfig+0x19a>
 8007444:	2b30      	cmp	r3, #48	; 0x30
 8007446:	d818      	bhi.n	800747a <UART_SetConfig+0x1a2>
 8007448:	2b20      	cmp	r3, #32
 800744a:	d00a      	beq.n	8007462 <UART_SetConfig+0x18a>
 800744c:	2b20      	cmp	r3, #32
 800744e:	d814      	bhi.n	800747a <UART_SetConfig+0x1a2>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <UART_SetConfig+0x182>
 8007454:	2b10      	cmp	r3, #16
 8007456:	d008      	beq.n	800746a <UART_SetConfig+0x192>
 8007458:	e00f      	b.n	800747a <UART_SetConfig+0x1a2>
 800745a:	2300      	movs	r3, #0
 800745c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007460:	e042      	b.n	80074e8 <UART_SetConfig+0x210>
 8007462:	2302      	movs	r3, #2
 8007464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007468:	e03e      	b.n	80074e8 <UART_SetConfig+0x210>
 800746a:	2304      	movs	r3, #4
 800746c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007470:	e03a      	b.n	80074e8 <UART_SetConfig+0x210>
 8007472:	2308      	movs	r3, #8
 8007474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007478:	e036      	b.n	80074e8 <UART_SetConfig+0x210>
 800747a:	2310      	movs	r3, #16
 800747c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007480:	e032      	b.n	80074e8 <UART_SetConfig+0x210>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a3f      	ldr	r2, [pc, #252]	; (8007584 <UART_SetConfig+0x2ac>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d12a      	bne.n	80074e2 <UART_SetConfig+0x20a>
 800748c:	4b3f      	ldr	r3, [pc, #252]	; (800758c <UART_SetConfig+0x2b4>)
 800748e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007492:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800749a:	d01a      	beq.n	80074d2 <UART_SetConfig+0x1fa>
 800749c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074a0:	d81b      	bhi.n	80074da <UART_SetConfig+0x202>
 80074a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a6:	d00c      	beq.n	80074c2 <UART_SetConfig+0x1ea>
 80074a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ac:	d815      	bhi.n	80074da <UART_SetConfig+0x202>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <UART_SetConfig+0x1e2>
 80074b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b6:	d008      	beq.n	80074ca <UART_SetConfig+0x1f2>
 80074b8:	e00f      	b.n	80074da <UART_SetConfig+0x202>
 80074ba:	2300      	movs	r3, #0
 80074bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c0:	e012      	b.n	80074e8 <UART_SetConfig+0x210>
 80074c2:	2302      	movs	r3, #2
 80074c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c8:	e00e      	b.n	80074e8 <UART_SetConfig+0x210>
 80074ca:	2304      	movs	r3, #4
 80074cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d0:	e00a      	b.n	80074e8 <UART_SetConfig+0x210>
 80074d2:	2308      	movs	r3, #8
 80074d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d8:	e006      	b.n	80074e8 <UART_SetConfig+0x210>
 80074da:	2310      	movs	r3, #16
 80074dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e0:	e002      	b.n	80074e8 <UART_SetConfig+0x210>
 80074e2:	2310      	movs	r3, #16
 80074e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a25      	ldr	r2, [pc, #148]	; (8007584 <UART_SetConfig+0x2ac>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	f040 808a 	bne.w	8007608 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d824      	bhi.n	8007546 <UART_SetConfig+0x26e>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <UART_SetConfig+0x22c>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	08007529 	.word	0x08007529
 8007508:	08007547 	.word	0x08007547
 800750c:	08007531 	.word	0x08007531
 8007510:	08007547 	.word	0x08007547
 8007514:	08007537 	.word	0x08007537
 8007518:	08007547 	.word	0x08007547
 800751c:	08007547 	.word	0x08007547
 8007520:	08007547 	.word	0x08007547
 8007524:	0800753f 	.word	0x0800753f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007528:	f7fe fc92 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 800752c:	61f8      	str	r0, [r7, #28]
        break;
 800752e:	e010      	b.n	8007552 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007530:	4b19      	ldr	r3, [pc, #100]	; (8007598 <UART_SetConfig+0x2c0>)
 8007532:	61fb      	str	r3, [r7, #28]
        break;
 8007534:	e00d      	b.n	8007552 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007536:	f7fe fbf3 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 800753a:	61f8      	str	r0, [r7, #28]
        break;
 800753c:	e009      	b.n	8007552 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007542:	61fb      	str	r3, [r7, #28]
        break;
 8007544:	e005      	b.n	8007552 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8109 	beq.w	800776c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	4413      	add	r3, r2
 8007564:	69fa      	ldr	r2, [r7, #28]
 8007566:	429a      	cmp	r2, r3
 8007568:	d305      	bcc.n	8007576 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	429a      	cmp	r2, r3
 8007574:	d912      	bls.n	800759c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800757c:	e0f6      	b.n	800776c <UART_SetConfig+0x494>
 800757e:	bf00      	nop
 8007580:	efff69f3 	.word	0xefff69f3
 8007584:	40008000 	.word	0x40008000
 8007588:	40013800 	.word	0x40013800
 800758c:	40021000 	.word	0x40021000
 8007590:	40004400 	.word	0x40004400
 8007594:	40004800 	.word	0x40004800
 8007598:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	2200      	movs	r2, #0
 80075a0:	461c      	mov	r4, r3
 80075a2:	4615      	mov	r5, r2
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	022b      	lsls	r3, r5, #8
 80075ae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80075b2:	0222      	lsls	r2, r4, #8
 80075b4:	68f9      	ldr	r1, [r7, #12]
 80075b6:	6849      	ldr	r1, [r1, #4]
 80075b8:	0849      	lsrs	r1, r1, #1
 80075ba:	2000      	movs	r0, #0
 80075bc:	4688      	mov	r8, r1
 80075be:	4681      	mov	r9, r0
 80075c0:	eb12 0a08 	adds.w	sl, r2, r8
 80075c4:	eb43 0b09 	adc.w	fp, r3, r9
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	607a      	str	r2, [r7, #4]
 80075d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d6:	4650      	mov	r0, sl
 80075d8:	4659      	mov	r1, fp
 80075da:	f7f9 fb95 	bl	8000d08 <__aeabi_uldivmod>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4613      	mov	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ec:	d308      	bcc.n	8007600 <UART_SetConfig+0x328>
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075f4:	d204      	bcs.n	8007600 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	60da      	str	r2, [r3, #12]
 80075fe:	e0b5      	b.n	800776c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007606:	e0b1      	b.n	800776c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007610:	d15d      	bne.n	80076ce <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007616:	2b08      	cmp	r3, #8
 8007618:	d827      	bhi.n	800766a <UART_SetConfig+0x392>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <UART_SetConfig+0x348>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007645 	.word	0x08007645
 8007624:	0800764d 	.word	0x0800764d
 8007628:	08007655 	.word	0x08007655
 800762c:	0800766b 	.word	0x0800766b
 8007630:	0800765b 	.word	0x0800765b
 8007634:	0800766b 	.word	0x0800766b
 8007638:	0800766b 	.word	0x0800766b
 800763c:	0800766b 	.word	0x0800766b
 8007640:	08007663 	.word	0x08007663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007644:	f7fe fc04 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8007648:	61f8      	str	r0, [r7, #28]
        break;
 800764a:	e014      	b.n	8007676 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800764c:	f7fe fc16 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 8007650:	61f8      	str	r0, [r7, #28]
        break;
 8007652:	e010      	b.n	8007676 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007654:	4b4c      	ldr	r3, [pc, #304]	; (8007788 <UART_SetConfig+0x4b0>)
 8007656:	61fb      	str	r3, [r7, #28]
        break;
 8007658:	e00d      	b.n	8007676 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800765a:	f7fe fb61 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 800765e:	61f8      	str	r0, [r7, #28]
        break;
 8007660:	e009      	b.n	8007676 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007666:	61fb      	str	r3, [r7, #28]
        break;
 8007668:	e005      	b.n	8007676 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d077      	beq.n	800776c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	005a      	lsls	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	441a      	add	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b0f      	cmp	r3, #15
 8007696:	d916      	bls.n	80076c6 <UART_SetConfig+0x3ee>
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800769e:	d212      	bcs.n	80076c6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f023 030f 	bic.w	r3, r3, #15
 80076a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	8afb      	ldrh	r3, [r7, #22]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	8afa      	ldrh	r2, [r7, #22]
 80076c2:	60da      	str	r2, [r3, #12]
 80076c4:	e052      	b.n	800776c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076cc:	e04e      	b.n	800776c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d827      	bhi.n	8007726 <UART_SetConfig+0x44e>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0x404>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	08007701 	.word	0x08007701
 80076e0:	08007709 	.word	0x08007709
 80076e4:	08007711 	.word	0x08007711
 80076e8:	08007727 	.word	0x08007727
 80076ec:	08007717 	.word	0x08007717
 80076f0:	08007727 	.word	0x08007727
 80076f4:	08007727 	.word	0x08007727
 80076f8:	08007727 	.word	0x08007727
 80076fc:	0800771f 	.word	0x0800771f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007700:	f7fe fba6 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8007704:	61f8      	str	r0, [r7, #28]
        break;
 8007706:	e014      	b.n	8007732 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007708:	f7fe fbb8 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 800770c:	61f8      	str	r0, [r7, #28]
        break;
 800770e:	e010      	b.n	8007732 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007710:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <UART_SetConfig+0x4b0>)
 8007712:	61fb      	str	r3, [r7, #28]
        break;
 8007714:	e00d      	b.n	8007732 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007716:	f7fe fb03 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 800771a:	61f8      	str	r0, [r7, #28]
        break;
 800771c:	e009      	b.n	8007732 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800771e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007722:	61fb      	str	r3, [r7, #28]
        break;
 8007724:	e005      	b.n	8007732 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007730:	bf00      	nop
    }

    if (pclk != 0U)
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d019      	beq.n	800776c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	085a      	lsrs	r2, r3, #1
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	fbb2 f3f3 	udiv	r3, r2, r3
 800774a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	2b0f      	cmp	r3, #15
 8007750:	d909      	bls.n	8007766 <UART_SetConfig+0x48e>
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007758:	d205      	bcs.n	8007766 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60da      	str	r2, [r3, #12]
 8007764:	e002      	b.n	800776c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007778:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800777c:	4618      	mov	r0, r3
 800777e:	3728      	adds	r7, #40	; 0x28
 8007780:	46bd      	mov	sp, r7
 8007782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007786:	bf00      	nop
 8007788:	00f42400 	.word	0x00f42400

0800778c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01a      	beq.n	80078a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788a:	d10a      	bne.n	80078a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	605a      	str	r2, [r3, #4]
  }
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b098      	sub	sp, #96	; 0x60
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e0:	f7fb fe5a 	bl	8003598 <HAL_GetTick>
 80078e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d12e      	bne.n	8007952 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078fc:	2200      	movs	r2, #0
 80078fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f88c 	bl	8007a20 <UART_WaitOnFlagUntilTimeout>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d021      	beq.n	8007952 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800791c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007922:	653b      	str	r3, [r7, #80]	; 0x50
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800792c:	647b      	str	r3, [r7, #68]	; 0x44
 800792e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800793a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e6      	bne.n	800790e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e062      	b.n	8007a18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b04      	cmp	r3, #4
 800795e:	d149      	bne.n	80079f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007968:	2200      	movs	r2, #0
 800796a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f856 	bl	8007a20 <UART_WaitOnFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d03c      	beq.n	80079f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	623b      	str	r3, [r7, #32]
   return(result);
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007998:	633b      	str	r3, [r7, #48]	; 0x30
 800799a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800799e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e6      	bne.n	800797a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079cc:	61fa      	str	r2, [r7, #28]
 80079ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	69b9      	ldr	r1, [r7, #24]
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	617b      	str	r3, [r7, #20]
   return(result);
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e5      	bne.n	80079ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e011      	b.n	8007a18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3758      	adds	r7, #88	; 0x58
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	603b      	str	r3, [r7, #0]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a30:	e049      	b.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a38:	d045      	beq.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a3a:	f7fb fdad 	bl	8003598 <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d302      	bcc.n	8007a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e048      	b.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d031      	beq.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d110      	bne.n	8007a92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2208      	movs	r2, #8
 8007a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f838 	bl	8007aee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2208      	movs	r2, #8
 8007a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e029      	b.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa0:	d111      	bne.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f81e 	bl	8007aee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e00f      	b.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69da      	ldr	r2, [r3, #28]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2301      	moveq	r3, #1
 8007ad8:	2300      	movne	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	461a      	mov	r2, r3
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d0a6      	beq.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b095      	sub	sp, #84	; 0x54
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b14:	643b      	str	r3, [r7, #64]	; 0x40
 8007b16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e6      	bne.n	8007af6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f023 0301 	bic.w	r3, r3, #1
 8007b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3308      	adds	r3, #8
 8007b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e5      	bne.n	8007b28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d118      	bne.n	8007b96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f023 0310 	bic.w	r3, r3, #16
 8007b78:	647b      	str	r3, [r7, #68]	; 0x44
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b82:	61bb      	str	r3, [r7, #24]
 8007b84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6979      	ldr	r1, [r7, #20]
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e6      	bne.n	8007b64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007baa:	bf00      	nop
 8007bac:	3754      	adds	r7, #84	; 0x54
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <std>:
 8007bb8:	2300      	movs	r3, #0
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bc6:	6083      	str	r3, [r0, #8]
 8007bc8:	8181      	strh	r1, [r0, #12]
 8007bca:	6643      	str	r3, [r0, #100]	; 0x64
 8007bcc:	81c2      	strh	r2, [r0, #14]
 8007bce:	6183      	str	r3, [r0, #24]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	305c      	adds	r0, #92	; 0x5c
 8007bd6:	f000 f92a 	bl	8007e2e <memset>
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <std+0x58>)
 8007bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8007bde:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <std+0x5c>)
 8007be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007be2:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <std+0x60>)
 8007be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007be6:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <std+0x64>)
 8007be8:	6323      	str	r3, [r4, #48]	; 0x30
 8007bea:	4b0d      	ldr	r3, [pc, #52]	; (8007c20 <std+0x68>)
 8007bec:	6224      	str	r4, [r4, #32]
 8007bee:	429c      	cmp	r4, r3
 8007bf0:	d006      	beq.n	8007c00 <std+0x48>
 8007bf2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007bf6:	4294      	cmp	r4, r2
 8007bf8:	d002      	beq.n	8007c00 <std+0x48>
 8007bfa:	33d0      	adds	r3, #208	; 0xd0
 8007bfc:	429c      	cmp	r4, r3
 8007bfe:	d105      	bne.n	8007c0c <std+0x54>
 8007c00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c08:	f001 bd5a 	b.w	80096c0 <__retarget_lock_init_recursive>
 8007c0c:	bd10      	pop	{r4, pc}
 8007c0e:	bf00      	nop
 8007c10:	08007da5 	.word	0x08007da5
 8007c14:	08007dcb 	.word	0x08007dcb
 8007c18:	08007e03 	.word	0x08007e03
 8007c1c:	08007e27 	.word	0x08007e27
 8007c20:	20000278 	.word	0x20000278

08007c24 <stdio_exit_handler>:
 8007c24:	4a02      	ldr	r2, [pc, #8]	; (8007c30 <stdio_exit_handler+0xc>)
 8007c26:	4903      	ldr	r1, [pc, #12]	; (8007c34 <stdio_exit_handler+0x10>)
 8007c28:	4803      	ldr	r0, [pc, #12]	; (8007c38 <stdio_exit_handler+0x14>)
 8007c2a:	f000 b869 	b.w	8007d00 <_fwalk_sglue>
 8007c2e:	bf00      	nop
 8007c30:	20000010 	.word	0x20000010
 8007c34:	0800a1dd 	.word	0x0800a1dd
 8007c38:	20000024 	.word	0x20000024

08007c3c <cleanup_stdio>:
 8007c3c:	6841      	ldr	r1, [r0, #4]
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <cleanup_stdio+0x34>)
 8007c40:	4299      	cmp	r1, r3
 8007c42:	b510      	push	{r4, lr}
 8007c44:	4604      	mov	r4, r0
 8007c46:	d001      	beq.n	8007c4c <cleanup_stdio+0x10>
 8007c48:	f002 fac8 	bl	800a1dc <_fflush_r>
 8007c4c:	68a1      	ldr	r1, [r4, #8]
 8007c4e:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <cleanup_stdio+0x38>)
 8007c50:	4299      	cmp	r1, r3
 8007c52:	d002      	beq.n	8007c5a <cleanup_stdio+0x1e>
 8007c54:	4620      	mov	r0, r4
 8007c56:	f002 fac1 	bl	800a1dc <_fflush_r>
 8007c5a:	68e1      	ldr	r1, [r4, #12]
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <cleanup_stdio+0x3c>)
 8007c5e:	4299      	cmp	r1, r3
 8007c60:	d004      	beq.n	8007c6c <cleanup_stdio+0x30>
 8007c62:	4620      	mov	r0, r4
 8007c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c68:	f002 bab8 	b.w	800a1dc <_fflush_r>
 8007c6c:	bd10      	pop	{r4, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000278 	.word	0x20000278
 8007c74:	200002e0 	.word	0x200002e0
 8007c78:	20000348 	.word	0x20000348

08007c7c <global_stdio_init.part.0>:
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <global_stdio_init.part.0+0x30>)
 8007c80:	4c0b      	ldr	r4, [pc, #44]	; (8007cb0 <global_stdio_init.part.0+0x34>)
 8007c82:	4a0c      	ldr	r2, [pc, #48]	; (8007cb4 <global_stdio_init.part.0+0x38>)
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	4620      	mov	r0, r4
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2104      	movs	r1, #4
 8007c8c:	f7ff ff94 	bl	8007bb8 <std>
 8007c90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c94:	2201      	movs	r2, #1
 8007c96:	2109      	movs	r1, #9
 8007c98:	f7ff ff8e 	bl	8007bb8 <std>
 8007c9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca6:	2112      	movs	r1, #18
 8007ca8:	f7ff bf86 	b.w	8007bb8 <std>
 8007cac:	200003b0 	.word	0x200003b0
 8007cb0:	20000278 	.word	0x20000278
 8007cb4:	08007c25 	.word	0x08007c25

08007cb8 <__sfp_lock_acquire>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	; (8007cc0 <__sfp_lock_acquire+0x8>)
 8007cba:	f001 bd03 	b.w	80096c4 <__retarget_lock_acquire_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	200003de 	.word	0x200003de

08007cc4 <__sfp_lock_release>:
 8007cc4:	4801      	ldr	r0, [pc, #4]	; (8007ccc <__sfp_lock_release+0x8>)
 8007cc6:	f001 bcff 	b.w	80096c8 <__retarget_lock_release_recursive>
 8007cca:	bf00      	nop
 8007ccc:	200003de 	.word	0x200003de

08007cd0 <__sinit>:
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	f7ff fff0 	bl	8007cb8 <__sfp_lock_acquire>
 8007cd8:	6a23      	ldr	r3, [r4, #32]
 8007cda:	b11b      	cbz	r3, 8007ce4 <__sinit+0x14>
 8007cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce0:	f7ff bff0 	b.w	8007cc4 <__sfp_lock_release>
 8007ce4:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <__sinit+0x28>)
 8007ce6:	6223      	str	r3, [r4, #32]
 8007ce8:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <__sinit+0x2c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1f5      	bne.n	8007cdc <__sinit+0xc>
 8007cf0:	f7ff ffc4 	bl	8007c7c <global_stdio_init.part.0>
 8007cf4:	e7f2      	b.n	8007cdc <__sinit+0xc>
 8007cf6:	bf00      	nop
 8007cf8:	08007c3d 	.word	0x08007c3d
 8007cfc:	200003b0 	.word	0x200003b0

08007d00 <_fwalk_sglue>:
 8007d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d04:	4607      	mov	r7, r0
 8007d06:	4688      	mov	r8, r1
 8007d08:	4614      	mov	r4, r2
 8007d0a:	2600      	movs	r6, #0
 8007d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d10:	f1b9 0901 	subs.w	r9, r9, #1
 8007d14:	d505      	bpl.n	8007d22 <_fwalk_sglue+0x22>
 8007d16:	6824      	ldr	r4, [r4, #0]
 8007d18:	2c00      	cmp	r4, #0
 8007d1a:	d1f7      	bne.n	8007d0c <_fwalk_sglue+0xc>
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d22:	89ab      	ldrh	r3, [r5, #12]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d907      	bls.n	8007d38 <_fwalk_sglue+0x38>
 8007d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	d003      	beq.n	8007d38 <_fwalk_sglue+0x38>
 8007d30:	4629      	mov	r1, r5
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	4306      	orrs	r6, r0
 8007d38:	3568      	adds	r5, #104	; 0x68
 8007d3a:	e7e9      	b.n	8007d10 <_fwalk_sglue+0x10>

08007d3c <sniprintf>:
 8007d3c:	b40c      	push	{r2, r3}
 8007d3e:	b530      	push	{r4, r5, lr}
 8007d40:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <sniprintf+0x64>)
 8007d42:	1e0c      	subs	r4, r1, #0
 8007d44:	681d      	ldr	r5, [r3, #0]
 8007d46:	b09d      	sub	sp, #116	; 0x74
 8007d48:	da08      	bge.n	8007d5c <sniprintf+0x20>
 8007d4a:	238b      	movs	r3, #139	; 0x8b
 8007d4c:	602b      	str	r3, [r5, #0]
 8007d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d52:	b01d      	add	sp, #116	; 0x74
 8007d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d58:	b002      	add	sp, #8
 8007d5a:	4770      	bx	lr
 8007d5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007d60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d64:	bf14      	ite	ne
 8007d66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d6a:	4623      	moveq	r3, r4
 8007d6c:	9304      	str	r3, [sp, #16]
 8007d6e:	9307      	str	r3, [sp, #28]
 8007d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d74:	9002      	str	r0, [sp, #8]
 8007d76:	9006      	str	r0, [sp, #24]
 8007d78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d7e:	ab21      	add	r3, sp, #132	; 0x84
 8007d80:	a902      	add	r1, sp, #8
 8007d82:	4628      	mov	r0, r5
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	f001 ff15 	bl	8009bb4 <_svfiprintf_r>
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	bfbc      	itt	lt
 8007d8e:	238b      	movlt	r3, #139	; 0x8b
 8007d90:	602b      	strlt	r3, [r5, #0]
 8007d92:	2c00      	cmp	r4, #0
 8007d94:	d0dd      	beq.n	8007d52 <sniprintf+0x16>
 8007d96:	9b02      	ldr	r3, [sp, #8]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	e7d9      	b.n	8007d52 <sniprintf+0x16>
 8007d9e:	bf00      	nop
 8007da0:	20000070 	.word	0x20000070

08007da4 <__sread>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	460c      	mov	r4, r1
 8007da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dac:	f001 fc3a 	bl	8009624 <_read_r>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	bfab      	itete	ge
 8007db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007db6:	89a3      	ldrhlt	r3, [r4, #12]
 8007db8:	181b      	addge	r3, r3, r0
 8007dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dbe:	bfac      	ite	ge
 8007dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dc2:	81a3      	strhlt	r3, [r4, #12]
 8007dc4:	bd10      	pop	{r4, pc}

08007dc6 <__seofread>:
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	4770      	bx	lr

08007dca <__swrite>:
 8007dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dce:	461f      	mov	r7, r3
 8007dd0:	898b      	ldrh	r3, [r1, #12]
 8007dd2:	05db      	lsls	r3, r3, #23
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	4616      	mov	r6, r2
 8007dda:	d505      	bpl.n	8007de8 <__swrite+0x1e>
 8007ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de0:	2302      	movs	r3, #2
 8007de2:	2200      	movs	r2, #0
 8007de4:	f001 fc0c 	bl	8009600 <_lseek_r>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	4632      	mov	r2, r6
 8007df6:	463b      	mov	r3, r7
 8007df8:	4628      	mov	r0, r5
 8007dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfe:	f001 bc23 	b.w	8009648 <_write_r>

08007e02 <__sseek>:
 8007e02:	b510      	push	{r4, lr}
 8007e04:	460c      	mov	r4, r1
 8007e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0a:	f001 fbf9 	bl	8009600 <_lseek_r>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	bf15      	itete	ne
 8007e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e1e:	81a3      	strheq	r3, [r4, #12]
 8007e20:	bf18      	it	ne
 8007e22:	81a3      	strhne	r3, [r4, #12]
 8007e24:	bd10      	pop	{r4, pc}

08007e26 <__sclose>:
 8007e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2a:	f001 bbc7 	b.w	80095bc <_close_r>

08007e2e <memset>:
 8007e2e:	4402      	add	r2, r0
 8007e30:	4603      	mov	r3, r0
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d100      	bne.n	8007e38 <memset+0xa>
 8007e36:	4770      	bx	lr
 8007e38:	f803 1b01 	strb.w	r1, [r3], #1
 8007e3c:	e7f9      	b.n	8007e32 <memset+0x4>

08007e3e <strncat>:
 8007e3e:	b530      	push	{r4, r5, lr}
 8007e40:	4604      	mov	r4, r0
 8007e42:	7825      	ldrb	r5, [r4, #0]
 8007e44:	4623      	mov	r3, r4
 8007e46:	3401      	adds	r4, #1
 8007e48:	2d00      	cmp	r5, #0
 8007e4a:	d1fa      	bne.n	8007e42 <strncat+0x4>
 8007e4c:	3a01      	subs	r2, #1
 8007e4e:	d304      	bcc.n	8007e5a <strncat+0x1c>
 8007e50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e54:	f803 4b01 	strb.w	r4, [r3], #1
 8007e58:	b904      	cbnz	r4, 8007e5c <strncat+0x1e>
 8007e5a:	bd30      	pop	{r4, r5, pc}
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	d1f5      	bne.n	8007e4c <strncat+0xe>
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e7f3      	b.n	8007e4c <strncat+0xe>

08007e64 <localtime>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <localtime+0x30>)
 8007e68:	681d      	ldr	r5, [r3, #0]
 8007e6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	b953      	cbnz	r3, 8007e86 <localtime+0x22>
 8007e70:	2024      	movs	r0, #36	; 0x24
 8007e72:	f001 fd0b 	bl	800988c <malloc>
 8007e76:	4602      	mov	r2, r0
 8007e78:	6368      	str	r0, [r5, #52]	; 0x34
 8007e7a:	b920      	cbnz	r0, 8007e86 <localtime+0x22>
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <localtime+0x34>)
 8007e7e:	4807      	ldr	r0, [pc, #28]	; (8007e9c <localtime+0x38>)
 8007e80:	2132      	movs	r1, #50	; 0x32
 8007e82:	f001 fc3d 	bl	8009700 <__assert_func>
 8007e86:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8007e88:	4620      	mov	r0, r4
 8007e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e8e:	f000 b807 	b.w	8007ea0 <localtime_r>
 8007e92:	bf00      	nop
 8007e94:	20000070 	.word	0x20000070
 8007e98:	0800bc28 	.word	0x0800bc28
 8007e9c:	0800bc3f 	.word	0x0800bc3f

08007ea0 <localtime_r>:
 8007ea0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	9101      	str	r1, [sp, #4]
 8007ea8:	f002 fa2a 	bl	800a300 <__gettzinfo>
 8007eac:	9901      	ldr	r1, [sp, #4]
 8007eae:	4605      	mov	r5, r0
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	f002 fa29 	bl	800a308 <gmtime_r>
 8007eb6:	6943      	ldr	r3, [r0, #20]
 8007eb8:	0799      	lsls	r1, r3, #30
 8007eba:	4604      	mov	r4, r0
 8007ebc:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8007ec0:	d105      	bne.n	8007ece <localtime_r+0x2e>
 8007ec2:	2264      	movs	r2, #100	; 0x64
 8007ec4:	fb97 f3f2 	sdiv	r3, r7, r2
 8007ec8:	fb02 7313 	mls	r3, r2, r3, r7
 8007ecc:	bb7b      	cbnz	r3, 8007f2e <localtime_r+0x8e>
 8007ece:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007ed2:	fb97 f3f2 	sdiv	r3, r7, r2
 8007ed6:	fb02 7313 	mls	r3, r2, r3, r7
 8007eda:	fab3 f383 	clz	r3, r3
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	4e68      	ldr	r6, [pc, #416]	; (8008084 <localtime_r+0x1e4>)
 8007ee2:	2230      	movs	r2, #48	; 0x30
 8007ee4:	fb02 6603 	mla	r6, r2, r3, r6
 8007ee8:	f001 f936 	bl	8009158 <__tz_lock>
 8007eec:	f001 f940 	bl	8009170 <_tzset_unlocked>
 8007ef0:	4b65      	ldr	r3, [pc, #404]	; (8008088 <localtime_r+0x1e8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	b353      	cbz	r3, 8007f4c <localtime_r+0xac>
 8007ef6:	686b      	ldr	r3, [r5, #4]
 8007ef8:	42bb      	cmp	r3, r7
 8007efa:	d11a      	bne.n	8007f32 <localtime_r+0x92>
 8007efc:	682f      	ldr	r7, [r5, #0]
 8007efe:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f02:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8007f06:	b9e7      	cbnz	r7, 8007f42 <localtime_r+0xa2>
 8007f08:	4282      	cmp	r2, r0
 8007f0a:	eb73 0101 	sbcs.w	r1, r3, r1
 8007f0e:	da25      	bge.n	8007f5c <localtime_r+0xbc>
 8007f10:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8007f14:	4282      	cmp	r2, r0
 8007f16:	eb73 0701 	sbcs.w	r7, r3, r1
 8007f1a:	bfb4      	ite	lt
 8007f1c:	2701      	movlt	r7, #1
 8007f1e:	2700      	movge	r7, #0
 8007f20:	4282      	cmp	r2, r0
 8007f22:	eb73 0101 	sbcs.w	r1, r3, r1
 8007f26:	6227      	str	r7, [r4, #32]
 8007f28:	db1a      	blt.n	8007f60 <localtime_r+0xc0>
 8007f2a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007f2c:	e019      	b.n	8007f62 <localtime_r+0xc2>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e7d6      	b.n	8007ee0 <localtime_r+0x40>
 8007f32:	4638      	mov	r0, r7
 8007f34:	f001 f86a 	bl	800900c <__tzcalc_limits>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d1df      	bne.n	8007efc <localtime_r+0x5c>
 8007f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f40:	e004      	b.n	8007f4c <localtime_r+0xac>
 8007f42:	4282      	cmp	r2, r0
 8007f44:	eb73 0101 	sbcs.w	r1, r3, r1
 8007f48:	da02      	bge.n	8007f50 <localtime_r+0xb0>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6223      	str	r3, [r4, #32]
 8007f4e:	e7ec      	b.n	8007f2a <localtime_r+0x8a>
 8007f50:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8007f54:	4282      	cmp	r2, r0
 8007f56:	eb73 0101 	sbcs.w	r1, r3, r1
 8007f5a:	daf6      	bge.n	8007f4a <localtime_r+0xaa>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	6223      	str	r3, [r4, #32]
 8007f60:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007f62:	6861      	ldr	r1, [r4, #4]
 8007f64:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8007f68:	fb93 f0f2 	sdiv	r0, r3, r2
 8007f6c:	fb02 3310 	mls	r3, r2, r0, r3
 8007f70:	223c      	movs	r2, #60	; 0x3c
 8007f72:	fb93 f5f2 	sdiv	r5, r3, r2
 8007f76:	fb02 3215 	mls	r2, r2, r5, r3
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	1a9b      	subs	r3, r3, r2
 8007f7e:	68a2      	ldr	r2, [r4, #8]
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	1b49      	subs	r1, r1, r5
 8007f84:	1a12      	subs	r2, r2, r0
 8007f86:	2b3b      	cmp	r3, #59	; 0x3b
 8007f88:	6061      	str	r1, [r4, #4]
 8007f8a:	60a2      	str	r2, [r4, #8]
 8007f8c:	dd35      	ble.n	8007ffa <localtime_r+0x15a>
 8007f8e:	3101      	adds	r1, #1
 8007f90:	6061      	str	r1, [r4, #4]
 8007f92:	3b3c      	subs	r3, #60	; 0x3c
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	6863      	ldr	r3, [r4, #4]
 8007f98:	2b3b      	cmp	r3, #59	; 0x3b
 8007f9a:	dd34      	ble.n	8008006 <localtime_r+0x166>
 8007f9c:	3201      	adds	r2, #1
 8007f9e:	60a2      	str	r2, [r4, #8]
 8007fa0:	3b3c      	subs	r3, #60	; 0x3c
 8007fa2:	6063      	str	r3, [r4, #4]
 8007fa4:	68a3      	ldr	r3, [r4, #8]
 8007fa6:	2b17      	cmp	r3, #23
 8007fa8:	dd33      	ble.n	8008012 <localtime_r+0x172>
 8007faa:	69e2      	ldr	r2, [r4, #28]
 8007fac:	3201      	adds	r2, #1
 8007fae:	61e2      	str	r2, [r4, #28]
 8007fb0:	69a2      	ldr	r2, [r4, #24]
 8007fb2:	3201      	adds	r2, #1
 8007fb4:	2a07      	cmp	r2, #7
 8007fb6:	bfa8      	it	ge
 8007fb8:	2200      	movge	r2, #0
 8007fba:	61a2      	str	r2, [r4, #24]
 8007fbc:	68e2      	ldr	r2, [r4, #12]
 8007fbe:	3b18      	subs	r3, #24
 8007fc0:	3201      	adds	r2, #1
 8007fc2:	60a3      	str	r3, [r4, #8]
 8007fc4:	6923      	ldr	r3, [r4, #16]
 8007fc6:	60e2      	str	r2, [r4, #12]
 8007fc8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8007fcc:	428a      	cmp	r2, r1
 8007fce:	dd0e      	ble.n	8007fee <localtime_r+0x14e>
 8007fd0:	2b0b      	cmp	r3, #11
 8007fd2:	eba2 0201 	sub.w	r2, r2, r1
 8007fd6:	60e2      	str	r2, [r4, #12]
 8007fd8:	f103 0201 	add.w	r2, r3, #1
 8007fdc:	bf09      	itett	eq
 8007fde:	6963      	ldreq	r3, [r4, #20]
 8007fe0:	6122      	strne	r2, [r4, #16]
 8007fe2:	2200      	moveq	r2, #0
 8007fe4:	3301      	addeq	r3, #1
 8007fe6:	bf02      	ittt	eq
 8007fe8:	6122      	streq	r2, [r4, #16]
 8007fea:	6163      	streq	r3, [r4, #20]
 8007fec:	61e2      	streq	r2, [r4, #28]
 8007fee:	f001 f8b9 	bl	8009164 <__tz_unlock>
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	b002      	add	sp, #8
 8007ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dacb      	bge.n	8007f96 <localtime_r+0xf6>
 8007ffe:	3901      	subs	r1, #1
 8008000:	6061      	str	r1, [r4, #4]
 8008002:	333c      	adds	r3, #60	; 0x3c
 8008004:	e7c6      	b.n	8007f94 <localtime_r+0xf4>
 8008006:	2b00      	cmp	r3, #0
 8008008:	dacc      	bge.n	8007fa4 <localtime_r+0x104>
 800800a:	3a01      	subs	r2, #1
 800800c:	60a2      	str	r2, [r4, #8]
 800800e:	333c      	adds	r3, #60	; 0x3c
 8008010:	e7c7      	b.n	8007fa2 <localtime_r+0x102>
 8008012:	2b00      	cmp	r3, #0
 8008014:	daeb      	bge.n	8007fee <localtime_r+0x14e>
 8008016:	69e2      	ldr	r2, [r4, #28]
 8008018:	3a01      	subs	r2, #1
 800801a:	61e2      	str	r2, [r4, #28]
 800801c:	69a2      	ldr	r2, [r4, #24]
 800801e:	3a01      	subs	r2, #1
 8008020:	bf48      	it	mi
 8008022:	2206      	movmi	r2, #6
 8008024:	61a2      	str	r2, [r4, #24]
 8008026:	68e2      	ldr	r2, [r4, #12]
 8008028:	3318      	adds	r3, #24
 800802a:	3a01      	subs	r2, #1
 800802c:	60e2      	str	r2, [r4, #12]
 800802e:	60a3      	str	r3, [r4, #8]
 8008030:	2a00      	cmp	r2, #0
 8008032:	d1dc      	bne.n	8007fee <localtime_r+0x14e>
 8008034:	6923      	ldr	r3, [r4, #16]
 8008036:	3b01      	subs	r3, #1
 8008038:	d405      	bmi.n	8008046 <localtime_r+0x1a6>
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008042:	60e3      	str	r3, [r4, #12]
 8008044:	e7d3      	b.n	8007fee <localtime_r+0x14e>
 8008046:	230b      	movs	r3, #11
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	6963      	ldr	r3, [r4, #20]
 800804c:	1e5a      	subs	r2, r3, #1
 800804e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008052:	6162      	str	r2, [r4, #20]
 8008054:	079a      	lsls	r2, r3, #30
 8008056:	d105      	bne.n	8008064 <localtime_r+0x1c4>
 8008058:	2164      	movs	r1, #100	; 0x64
 800805a:	fb93 f2f1 	sdiv	r2, r3, r1
 800805e:	fb01 3212 	mls	r2, r1, r2, r3
 8008062:	b962      	cbnz	r2, 800807e <localtime_r+0x1de>
 8008064:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008068:	fb93 f1f2 	sdiv	r1, r3, r2
 800806c:	fb02 3311 	mls	r3, r2, r1, r3
 8008070:	fab3 f383 	clz	r3, r3
 8008074:	095b      	lsrs	r3, r3, #5
 8008076:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800807a:	61e3      	str	r3, [r4, #28]
 800807c:	e7de      	b.n	800803c <localtime_r+0x19c>
 800807e:	2301      	movs	r3, #1
 8008080:	e7f9      	b.n	8008076 <localtime_r+0x1d6>
 8008082:	bf00      	nop
 8008084:	0800bcf8 	.word	0x0800bcf8
 8008088:	200003d0 	.word	0x200003d0

0800808c <validate_structure>:
 800808c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800808e:	6801      	ldr	r1, [r0, #0]
 8008090:	293b      	cmp	r1, #59	; 0x3b
 8008092:	4604      	mov	r4, r0
 8008094:	d911      	bls.n	80080ba <validate_structure+0x2e>
 8008096:	223c      	movs	r2, #60	; 0x3c
 8008098:	4668      	mov	r0, sp
 800809a:	f001 fb4f 	bl	800973c <div>
 800809e:	9a01      	ldr	r2, [sp, #4]
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	9900      	ldr	r1, [sp, #0]
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	440b      	add	r3, r1
 80080a8:	6063      	str	r3, [r4, #4]
 80080aa:	bfbb      	ittet	lt
 80080ac:	323c      	addlt	r2, #60	; 0x3c
 80080ae:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80080b2:	6022      	strge	r2, [r4, #0]
 80080b4:	6022      	strlt	r2, [r4, #0]
 80080b6:	bfb8      	it	lt
 80080b8:	6063      	strlt	r3, [r4, #4]
 80080ba:	6861      	ldr	r1, [r4, #4]
 80080bc:	293b      	cmp	r1, #59	; 0x3b
 80080be:	d911      	bls.n	80080e4 <validate_structure+0x58>
 80080c0:	223c      	movs	r2, #60	; 0x3c
 80080c2:	4668      	mov	r0, sp
 80080c4:	f001 fb3a 	bl	800973c <div>
 80080c8:	9a01      	ldr	r2, [sp, #4]
 80080ca:	68a3      	ldr	r3, [r4, #8]
 80080cc:	9900      	ldr	r1, [sp, #0]
 80080ce:	2a00      	cmp	r2, #0
 80080d0:	440b      	add	r3, r1
 80080d2:	60a3      	str	r3, [r4, #8]
 80080d4:	bfbb      	ittet	lt
 80080d6:	323c      	addlt	r2, #60	; 0x3c
 80080d8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80080dc:	6062      	strge	r2, [r4, #4]
 80080de:	6062      	strlt	r2, [r4, #4]
 80080e0:	bfb8      	it	lt
 80080e2:	60a3      	strlt	r3, [r4, #8]
 80080e4:	68a1      	ldr	r1, [r4, #8]
 80080e6:	2917      	cmp	r1, #23
 80080e8:	d911      	bls.n	800810e <validate_structure+0x82>
 80080ea:	2218      	movs	r2, #24
 80080ec:	4668      	mov	r0, sp
 80080ee:	f001 fb25 	bl	800973c <div>
 80080f2:	9a01      	ldr	r2, [sp, #4]
 80080f4:	68e3      	ldr	r3, [r4, #12]
 80080f6:	9900      	ldr	r1, [sp, #0]
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	440b      	add	r3, r1
 80080fc:	60e3      	str	r3, [r4, #12]
 80080fe:	bfbb      	ittet	lt
 8008100:	3218      	addlt	r2, #24
 8008102:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008106:	60a2      	strge	r2, [r4, #8]
 8008108:	60a2      	strlt	r2, [r4, #8]
 800810a:	bfb8      	it	lt
 800810c:	60e3      	strlt	r3, [r4, #12]
 800810e:	6921      	ldr	r1, [r4, #16]
 8008110:	290b      	cmp	r1, #11
 8008112:	d911      	bls.n	8008138 <validate_structure+0xac>
 8008114:	220c      	movs	r2, #12
 8008116:	4668      	mov	r0, sp
 8008118:	f001 fb10 	bl	800973c <div>
 800811c:	9a01      	ldr	r2, [sp, #4]
 800811e:	6963      	ldr	r3, [r4, #20]
 8008120:	9900      	ldr	r1, [sp, #0]
 8008122:	2a00      	cmp	r2, #0
 8008124:	440b      	add	r3, r1
 8008126:	6163      	str	r3, [r4, #20]
 8008128:	bfbb      	ittet	lt
 800812a:	320c      	addlt	r2, #12
 800812c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008130:	6122      	strge	r2, [r4, #16]
 8008132:	6122      	strlt	r2, [r4, #16]
 8008134:	bfb8      	it	lt
 8008136:	6163      	strlt	r3, [r4, #20]
 8008138:	6963      	ldr	r3, [r4, #20]
 800813a:	079a      	lsls	r2, r3, #30
 800813c:	d11e      	bne.n	800817c <validate_structure+0xf0>
 800813e:	2164      	movs	r1, #100	; 0x64
 8008140:	fb93 f2f1 	sdiv	r2, r3, r1
 8008144:	fb01 3212 	mls	r2, r1, r2, r3
 8008148:	b9d2      	cbnz	r2, 8008180 <validate_structure+0xf4>
 800814a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800814e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008152:	fb93 f1f2 	sdiv	r1, r3, r2
 8008156:	fb02 3311 	mls	r3, r2, r1, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	bf14      	ite	ne
 800815e:	231c      	movne	r3, #28
 8008160:	231d      	moveq	r3, #29
 8008162:	68e2      	ldr	r2, [r4, #12]
 8008164:	2a00      	cmp	r2, #0
 8008166:	dc0d      	bgt.n	8008184 <validate_structure+0xf8>
 8008168:	4e32      	ldr	r6, [pc, #200]	; (8008234 <validate_structure+0x1a8>)
 800816a:	250b      	movs	r5, #11
 800816c:	2164      	movs	r1, #100	; 0x64
 800816e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008172:	68e7      	ldr	r7, [r4, #12]
 8008174:	2f00      	cmp	r7, #0
 8008176:	dd31      	ble.n	80081dc <validate_structure+0x150>
 8008178:	b003      	add	sp, #12
 800817a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800817c:	231c      	movs	r3, #28
 800817e:	e7f0      	b.n	8008162 <validate_structure+0xd6>
 8008180:	231d      	movs	r3, #29
 8008182:	e7ee      	b.n	8008162 <validate_structure+0xd6>
 8008184:	4e2b      	ldr	r6, [pc, #172]	; (8008234 <validate_structure+0x1a8>)
 8008186:	2700      	movs	r7, #0
 8008188:	2064      	movs	r0, #100	; 0x64
 800818a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800818e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008192:	2a01      	cmp	r2, #1
 8008194:	bf14      	ite	ne
 8008196:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800819a:	469c      	moveq	ip, r3
 800819c:	4561      	cmp	r1, ip
 800819e:	ddeb      	ble.n	8008178 <validate_structure+0xec>
 80081a0:	3201      	adds	r2, #1
 80081a2:	eba1 010c 	sub.w	r1, r1, ip
 80081a6:	2a0c      	cmp	r2, #12
 80081a8:	60e1      	str	r1, [r4, #12]
 80081aa:	6122      	str	r2, [r4, #16]
 80081ac:	d1ef      	bne.n	800818e <validate_structure+0x102>
 80081ae:	6963      	ldr	r3, [r4, #20]
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	0791      	lsls	r1, r2, #30
 80081b4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80081b8:	d138      	bne.n	800822c <validate_structure+0x1a0>
 80081ba:	fb92 f1f0 	sdiv	r1, r2, r0
 80081be:	fb00 2211 	mls	r2, r0, r1, r2
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	d134      	bne.n	8008230 <validate_structure+0x1a4>
 80081c6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80081ca:	fb93 f2f5 	sdiv	r2, r3, r5
 80081ce:	fb05 3312 	mls	r3, r5, r2, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bf14      	ite	ne
 80081d6:	231c      	movne	r3, #28
 80081d8:	231d      	moveq	r3, #29
 80081da:	e7d8      	b.n	800818e <validate_structure+0x102>
 80081dc:	6922      	ldr	r2, [r4, #16]
 80081de:	3a01      	subs	r2, #1
 80081e0:	6122      	str	r2, [r4, #16]
 80081e2:	3201      	adds	r2, #1
 80081e4:	d115      	bne.n	8008212 <validate_structure+0x186>
 80081e6:	6963      	ldr	r3, [r4, #20]
 80081e8:	1e5a      	subs	r2, r3, #1
 80081ea:	f012 0f03 	tst.w	r2, #3
 80081ee:	e9c4 5204 	strd	r5, r2, [r4, #16]
 80081f2:	d117      	bne.n	8008224 <validate_structure+0x198>
 80081f4:	fb92 fcf1 	sdiv	ip, r2, r1
 80081f8:	fb01 221c 	mls	r2, r1, ip, r2
 80081fc:	b9a2      	cbnz	r2, 8008228 <validate_structure+0x19c>
 80081fe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008202:	fb93 f2f0 	sdiv	r2, r3, r0
 8008206:	fb00 3312 	mls	r3, r0, r2, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	bf14      	ite	ne
 800820e:	231c      	movne	r3, #28
 8008210:	231d      	moveq	r3, #29
 8008212:	6922      	ldr	r2, [r4, #16]
 8008214:	2a01      	cmp	r2, #1
 8008216:	bf14      	ite	ne
 8008218:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 800821c:	461a      	moveq	r2, r3
 800821e:	443a      	add	r2, r7
 8008220:	60e2      	str	r2, [r4, #12]
 8008222:	e7a6      	b.n	8008172 <validate_structure+0xe6>
 8008224:	231c      	movs	r3, #28
 8008226:	e7f4      	b.n	8008212 <validate_structure+0x186>
 8008228:	231d      	movs	r3, #29
 800822a:	e7f2      	b.n	8008212 <validate_structure+0x186>
 800822c:	231c      	movs	r3, #28
 800822e:	e7ae      	b.n	800818e <validate_structure+0x102>
 8008230:	231d      	movs	r3, #29
 8008232:	e7ac      	b.n	800818e <validate_structure+0x102>
 8008234:	0800bc98 	.word	0x0800bc98

08008238 <mktime>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	b085      	sub	sp, #20
 800823e:	4607      	mov	r7, r0
 8008240:	f002 f85e 	bl	800a300 <__gettzinfo>
 8008244:	4681      	mov	r9, r0
 8008246:	4638      	mov	r0, r7
 8008248:	f7ff ff20 	bl	800808c <validate_structure>
 800824c:	e9d7 4300 	ldrd	r4, r3, [r7]
 8008250:	223c      	movs	r2, #60	; 0x3c
 8008252:	fb02 4403 	mla	r4, r2, r3, r4
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	697e      	ldr	r6, [r7, #20]
 800825a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800825e:	fb02 4403 	mla	r4, r2, r3, r4
 8008262:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8008266:	4abb      	ldr	r2, [pc, #748]	; (8008554 <mktime+0x31c>)
 8008268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800826c:	3d01      	subs	r5, #1
 800826e:	2b01      	cmp	r3, #1
 8008270:	4415      	add	r5, r2
 8008272:	dd11      	ble.n	8008298 <mktime+0x60>
 8008274:	07b1      	lsls	r1, r6, #30
 8008276:	d10f      	bne.n	8008298 <mktime+0x60>
 8008278:	2264      	movs	r2, #100	; 0x64
 800827a:	fb96 f3f2 	sdiv	r3, r6, r2
 800827e:	fb02 6313 	mls	r3, r2, r3, r6
 8008282:	b943      	cbnz	r3, 8008296 <mktime+0x5e>
 8008284:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008288:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800828c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008290:	fb02 3311 	mls	r3, r2, r1, r3
 8008294:	b903      	cbnz	r3, 8008298 <mktime+0x60>
 8008296:	3501      	adds	r5, #1
 8008298:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800829c:	3310      	adds	r3, #16
 800829e:	f644 6220 	movw	r2, #20000	; 0x4e20
 80082a2:	4293      	cmp	r3, r2
 80082a4:	61fd      	str	r5, [r7, #28]
 80082a6:	f200 815e 	bhi.w	8008566 <mktime+0x32e>
 80082aa:	2e46      	cmp	r6, #70	; 0x46
 80082ac:	dd72      	ble.n	8008394 <mktime+0x15c>
 80082ae:	2346      	movs	r3, #70	; 0x46
 80082b0:	f240 1c6d 	movw	ip, #365	; 0x16d
 80082b4:	2164      	movs	r1, #100	; 0x64
 80082b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80082ba:	079a      	lsls	r2, r3, #30
 80082bc:	d164      	bne.n	8008388 <mktime+0x150>
 80082be:	fb93 f2f1 	sdiv	r2, r3, r1
 80082c2:	fb01 3212 	mls	r2, r1, r2, r3
 80082c6:	2a00      	cmp	r2, #0
 80082c8:	d161      	bne.n	800838e <mktime+0x156>
 80082ca:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80082ce:	fb92 fef0 	sdiv	lr, r2, r0
 80082d2:	fb00 221e 	mls	r2, r0, lr, r2
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	bf14      	ite	ne
 80082da:	4662      	movne	r2, ip
 80082dc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80082e0:	3301      	adds	r3, #1
 80082e2:	429e      	cmp	r6, r3
 80082e4:	4415      	add	r5, r2
 80082e6:	d1e8      	bne.n	80082ba <mktime+0x82>
 80082e8:	4b9b      	ldr	r3, [pc, #620]	; (8008558 <mktime+0x320>)
 80082ea:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80082ee:	fbc5 4803 	smlal	r4, r8, r5, r3
 80082f2:	f000 ff31 	bl	8009158 <__tz_lock>
 80082f6:	f000 ff3b 	bl	8009170 <_tzset_unlocked>
 80082fa:	4b98      	ldr	r3, [pc, #608]	; (800855c <mktime+0x324>)
 80082fc:	f8d3 b000 	ldr.w	fp, [r3]
 8008300:	f1bb 0f00 	cmp.w	fp, #0
 8008304:	d03a      	beq.n	800837c <mktime+0x144>
 8008306:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008310:	f1bb 0f01 	cmp.w	fp, #1
 8008314:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008318:	46da      	mov	sl, fp
 800831a:	bfa8      	it	ge
 800831c:	f04f 0a01 	movge.w	sl, #1
 8008320:	4283      	cmp	r3, r0
 8008322:	d179      	bne.n	8008418 <mktime+0x1e0>
 8008324:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8008328:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 800832c:	f8d9 c04c 	ldr.w	ip, [r9, #76]	; 0x4c
 8008330:	1a13      	subs	r3, r2, r0
 8008332:	9302      	str	r3, [sp, #8]
 8008334:	eb61 73e0 	sbc.w	r3, r1, r0, asr #31
 8008338:	9303      	str	r3, [sp, #12]
 800833a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	9a01      	ldr	r2, [sp, #4]
 8008342:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8008346:	ebb2 0e03 	subs.w	lr, r2, r3
 800834a:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800834e:	4574      	cmp	r4, lr
 8008350:	eb78 0201 	sbcs.w	r2, r8, r1
 8008354:	da66      	bge.n	8008424 <mktime+0x1ec>
 8008356:	f8d9 2000 	ldr.w	r2, [r9]
 800835a:	2a00      	cmp	r2, #0
 800835c:	d06f      	beq.n	800843e <mktime+0x206>
 800835e:	9a02      	ldr	r2, [sp, #8]
 8008360:	4294      	cmp	r4, r2
 8008362:	9a03      	ldr	r2, [sp, #12]
 8008364:	eb78 0202 	sbcs.w	r2, r8, r2
 8008368:	db03      	blt.n	8008372 <mktime+0x13a>
 800836a:	4574      	cmp	r4, lr
 800836c:	eb78 0101 	sbcs.w	r1, r8, r1
 8008370:	db6b      	blt.n	800844a <mktime+0x212>
 8008372:	f1bb 0f00 	cmp.w	fp, #0
 8008376:	f04f 0b00 	mov.w	fp, #0
 800837a:	da6b      	bge.n	8008454 <mktime+0x21c>
 800837c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8008380:	191c      	adds	r4, r3, r4
 8008382:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008386:	e0a9      	b.n	80084dc <mktime+0x2a4>
 8008388:	f240 126d 	movw	r2, #365	; 0x16d
 800838c:	e7a8      	b.n	80082e0 <mktime+0xa8>
 800838e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008392:	e7a5      	b.n	80082e0 <mktime+0xa8>
 8008394:	d0a8      	beq.n	80082e8 <mktime+0xb0>
 8008396:	2345      	movs	r3, #69	; 0x45
 8008398:	f240 1c6d 	movw	ip, #365	; 0x16d
 800839c:	2164      	movs	r1, #100	; 0x64
 800839e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80083a2:	e012      	b.n	80083ca <mktime+0x192>
 80083a4:	bb62      	cbnz	r2, 8008400 <mktime+0x1c8>
 80083a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80083aa:	fb01 3212 	mls	r2, r1, r2, r3
 80083ae:	bb52      	cbnz	r2, 8008406 <mktime+0x1ce>
 80083b0:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80083b4:	fb92 fef0 	sdiv	lr, r2, r0
 80083b8:	fb00 221e 	mls	r2, r0, lr, r2
 80083bc:	2a00      	cmp	r2, #0
 80083be:	bf14      	ite	ne
 80083c0:	4662      	movne	r2, ip
 80083c2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80083c6:	1aad      	subs	r5, r5, r2
 80083c8:	3b01      	subs	r3, #1
 80083ca:	429e      	cmp	r6, r3
 80083cc:	f003 0203 	and.w	r2, r3, #3
 80083d0:	dbe8      	blt.n	80083a4 <mktime+0x16c>
 80083d2:	b9da      	cbnz	r2, 800840c <mktime+0x1d4>
 80083d4:	2264      	movs	r2, #100	; 0x64
 80083d6:	fb96 f3f2 	sdiv	r3, r6, r2
 80083da:	fb02 6313 	mls	r3, r2, r3, r6
 80083de:	b9c3      	cbnz	r3, 8008412 <mktime+0x1da>
 80083e0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80083e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80083e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80083ec:	fb02 3311 	mls	r3, r2, r1, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f240 136d 	movw	r3, #365	; 0x16d
 80083f6:	bf08      	it	eq
 80083f8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80083fc:	1aed      	subs	r5, r5, r3
 80083fe:	e773      	b.n	80082e8 <mktime+0xb0>
 8008400:	f240 126d 	movw	r2, #365	; 0x16d
 8008404:	e7df      	b.n	80083c6 <mktime+0x18e>
 8008406:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800840a:	e7dc      	b.n	80083c6 <mktime+0x18e>
 800840c:	f240 136d 	movw	r3, #365	; 0x16d
 8008410:	e7f4      	b.n	80083fc <mktime+0x1c4>
 8008412:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8008416:	e7f1      	b.n	80083fc <mktime+0x1c4>
 8008418:	f000 fdf8 	bl	800900c <__tzcalc_limits>
 800841c:	2800      	cmp	r0, #0
 800841e:	d181      	bne.n	8008324 <mktime+0xec>
 8008420:	46d3      	mov	fp, sl
 8008422:	e050      	b.n	80084c6 <mktime+0x28e>
 8008424:	9a01      	ldr	r2, [sp, #4]
 8008426:	1a12      	subs	r2, r2, r0
 8008428:	9201      	str	r2, [sp, #4]
 800842a:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800842e:	eb6c 0c02 	sbc.w	ip, ip, r2
 8008432:	9a01      	ldr	r2, [sp, #4]
 8008434:	4294      	cmp	r4, r2
 8008436:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800843a:	dbf1      	blt.n	8008420 <mktime+0x1e8>
 800843c:	e78b      	b.n	8008356 <mktime+0x11e>
 800843e:	9a02      	ldr	r2, [sp, #8]
 8008440:	4294      	cmp	r4, r2
 8008442:	9a03      	ldr	r2, [sp, #12]
 8008444:	eb78 0202 	sbcs.w	r2, r8, r2
 8008448:	db8f      	blt.n	800836a <mktime+0x132>
 800844a:	f1bb 0f00 	cmp.w	fp, #0
 800844e:	db3e      	blt.n	80084ce <mktime+0x296>
 8008450:	f04f 0b01 	mov.w	fp, #1
 8008454:	ea8a 0a0b 	eor.w	sl, sl, fp
 8008458:	f1ba 0f01 	cmp.w	sl, #1
 800845c:	d133      	bne.n	80084c6 <mktime+0x28e>
 800845e:	f1bb 0f00 	cmp.w	fp, #0
 8008462:	d04e      	beq.n	8008502 <mktime+0x2ca>
 8008464:	1a1b      	subs	r3, r3, r0
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800846c:	441a      	add	r2, r3
 800846e:	191c      	adds	r4, r3, r4
 8008470:	603a      	str	r2, [r7, #0]
 8008472:	4638      	mov	r0, r7
 8008474:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008478:	f7ff fe08 	bl	800808c <validate_structure>
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	ebb2 020a 	subs.w	r2, r2, sl
 8008482:	d020      	beq.n	80084c6 <mktime+0x28e>
 8008484:	2a01      	cmp	r2, #1
 8008486:	dc3e      	bgt.n	8008506 <mktime+0x2ce>
 8008488:	1c91      	adds	r1, r2, #2
 800848a:	bfd8      	it	le
 800848c:	2201      	movle	r2, #1
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4415      	add	r5, r2
 8008492:	18d2      	adds	r2, r2, r3
 8008494:	d540      	bpl.n	8008518 <mktime+0x2e0>
 8008496:	1e73      	subs	r3, r6, #1
 8008498:	079a      	lsls	r2, r3, #30
 800849a:	d137      	bne.n	800850c <mktime+0x2d4>
 800849c:	2264      	movs	r2, #100	; 0x64
 800849e:	fb93 f1f2 	sdiv	r1, r3, r2
 80084a2:	fb02 3311 	mls	r3, r2, r1, r3
 80084a6:	bba3      	cbnz	r3, 8008512 <mktime+0x2da>
 80084a8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80084ac:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80084b0:	fb96 f2f3 	sdiv	r2, r6, r3
 80084b4:	fb03 6612 	mls	r6, r3, r2, r6
 80084b8:	2e00      	cmp	r6, #0
 80084ba:	f240 136d 	movw	r3, #365	; 0x16d
 80084be:	bf18      	it	ne
 80084c0:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80084c4:	61fb      	str	r3, [r7, #28]
 80084c6:	f1bb 0f01 	cmp.w	fp, #1
 80084ca:	f47f af57 	bne.w	800837c <mktime+0x144>
 80084ce:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 80084d2:	191c      	adds	r4, r3, r4
 80084d4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80084d8:	f04f 0b01 	mov.w	fp, #1
 80084dc:	f000 fe42 	bl	8009164 <__tz_unlock>
 80084e0:	3504      	adds	r5, #4
 80084e2:	2307      	movs	r3, #7
 80084e4:	fb95 f3f3 	sdiv	r3, r5, r3
 80084e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80084ec:	1aed      	subs	r5, r5, r3
 80084ee:	bf48      	it	mi
 80084f0:	3507      	addmi	r5, #7
 80084f2:	f8c7 b020 	str.w	fp, [r7, #32]
 80084f6:	61bd      	str	r5, [r7, #24]
 80084f8:	4620      	mov	r0, r4
 80084fa:	4641      	mov	r1, r8
 80084fc:	b005      	add	sp, #20
 80084fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008502:	1ac3      	subs	r3, r0, r3
 8008504:	e7af      	b.n	8008466 <mktime+0x22e>
 8008506:	f04f 32ff 	mov.w	r2, #4294967295
 800850a:	e7c0      	b.n	800848e <mktime+0x256>
 800850c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8008510:	e7d8      	b.n	80084c4 <mktime+0x28c>
 8008512:	f240 136d 	movw	r3, #365	; 0x16d
 8008516:	e7d5      	b.n	80084c4 <mktime+0x28c>
 8008518:	07b3      	lsls	r3, r6, #30
 800851a:	d118      	bne.n	800854e <mktime+0x316>
 800851c:	2164      	movs	r1, #100	; 0x64
 800851e:	fb96 f3f1 	sdiv	r3, r6, r1
 8008522:	fb01 6313 	mls	r3, r1, r3, r6
 8008526:	b9db      	cbnz	r3, 8008560 <mktime+0x328>
 8008528:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800852c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8008530:	fb96 f1f3 	sdiv	r1, r6, r3
 8008534:	fb03 6611 	mls	r6, r3, r1, r6
 8008538:	2e00      	cmp	r6, #0
 800853a:	f240 136d 	movw	r3, #365	; 0x16d
 800853e:	bf08      	it	eq
 8008540:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8008544:	429a      	cmp	r2, r3
 8008546:	bfa8      	it	ge
 8008548:	1ad2      	subge	r2, r2, r3
 800854a:	61fa      	str	r2, [r7, #28]
 800854c:	e7bb      	b.n	80084c6 <mktime+0x28e>
 800854e:	f240 136d 	movw	r3, #365	; 0x16d
 8008552:	e7f7      	b.n	8008544 <mktime+0x30c>
 8008554:	0800bcc8 	.word	0x0800bcc8
 8008558:	00015180 	.word	0x00015180
 800855c:	200003d0 	.word	0x200003d0
 8008560:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8008564:	e7ee      	b.n	8008544 <mktime+0x30c>
 8008566:	f04f 34ff 	mov.w	r4, #4294967295
 800856a:	46a0      	mov	r8, r4
 800856c:	e7c4      	b.n	80084f8 <mktime+0x2c0>
 800856e:	bf00      	nop

08008570 <iso_year_adjust>:
 8008570:	6942      	ldr	r2, [r0, #20]
 8008572:	2a00      	cmp	r2, #0
 8008574:	f240 736c 	movw	r3, #1900	; 0x76c
 8008578:	bfa8      	it	ge
 800857a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800857e:	4413      	add	r3, r2
 8008580:	0792      	lsls	r2, r2, #30
 8008582:	d105      	bne.n	8008590 <iso_year_adjust+0x20>
 8008584:	2164      	movs	r1, #100	; 0x64
 8008586:	fb93 f2f1 	sdiv	r2, r3, r1
 800858a:	fb01 3212 	mls	r2, r1, r2, r3
 800858e:	b9ca      	cbnz	r2, 80085c4 <iso_year_adjust+0x54>
 8008590:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008594:	fb93 f1f2 	sdiv	r1, r3, r2
 8008598:	fb02 3311 	mls	r3, r2, r1, r3
 800859c:	fab3 f383 	clz	r3, r3
 80085a0:	095b      	lsrs	r3, r3, #5
 80085a2:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80085a6:	0040      	lsls	r0, r0, #1
 80085a8:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80085ac:	4418      	add	r0, r3
 80085ae:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80085b2:	4298      	cmp	r0, r3
 80085b4:	d027      	beq.n	8008606 <iso_year_adjust+0x96>
 80085b6:	dc11      	bgt.n	80085dc <iso_year_adjust+0x6c>
 80085b8:	2801      	cmp	r0, #1
 80085ba:	dc0a      	bgt.n	80085d2 <iso_year_adjust+0x62>
 80085bc:	43c0      	mvns	r0, r0
 80085be:	0fc0      	lsrs	r0, r0, #31
 80085c0:	4240      	negs	r0, r0
 80085c2:	4770      	bx	lr
 80085c4:	2301      	movs	r3, #1
 80085c6:	e7ec      	b.n	80085a2 <iso_year_adjust+0x32>
 80085c8:	4b10      	ldr	r3, [pc, #64]	; (800860c <iso_year_adjust+0x9c>)
 80085ca:	40c3      	lsrs	r3, r0
 80085cc:	f343 0000 	sbfx	r0, r3, #0, #1
 80085d0:	4770      	bx	lr
 80085d2:	380a      	subs	r0, #10
 80085d4:	2817      	cmp	r0, #23
 80085d6:	d9f7      	bls.n	80085c8 <iso_year_adjust+0x58>
 80085d8:	2000      	movs	r0, #0
 80085da:	4770      	bx	lr
 80085dc:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80085e0:	4298      	cmp	r0, r3
 80085e2:	dc06      	bgt.n	80085f2 <iso_year_adjust+0x82>
 80085e4:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80085e8:	4298      	cmp	r0, r3
 80085ea:	bfd4      	ite	le
 80085ec:	2000      	movle	r0, #0
 80085ee:	2001      	movgt	r0, #1
 80085f0:	4770      	bx	lr
 80085f2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80085f6:	3802      	subs	r0, #2
 80085f8:	2815      	cmp	r0, #21
 80085fa:	d8ed      	bhi.n	80085d8 <iso_year_adjust+0x68>
 80085fc:	4b04      	ldr	r3, [pc, #16]	; (8008610 <iso_year_adjust+0xa0>)
 80085fe:	40c3      	lsrs	r3, r0
 8008600:	f003 0001 	and.w	r0, r3, #1
 8008604:	4770      	bx	lr
 8008606:	2001      	movs	r0, #1
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	00cc00cf 	.word	0x00cc00cf
 8008610:	002a001f 	.word	0x002a001f

08008614 <__strftime.isra.0>:
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	b08f      	sub	sp, #60	; 0x3c
 800861a:	461e      	mov	r6, r3
 800861c:	2300      	movs	r3, #0
 800861e:	4607      	mov	r7, r0
 8008620:	460d      	mov	r5, r1
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	461c      	mov	r4, r3
 8008626:	7813      	ldrb	r3, [r2, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 84bf 	beq.w	8008fac <__strftime.isra.0+0x998>
 800862e:	2b25      	cmp	r3, #37	; 0x25
 8008630:	d11f      	bne.n	8008672 <__strftime.isra.0+0x5e>
 8008632:	f892 b001 	ldrb.w	fp, [r2, #1]
 8008636:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800863a:	d024      	beq.n	8008686 <__strftime.isra.0+0x72>
 800863c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8008640:	d021      	beq.n	8008686 <__strftime.isra.0+0x72>
 8008642:	f102 0801 	add.w	r8, r2, #1
 8008646:	f04f 0b00 	mov.w	fp, #0
 800864a:	f898 2000 	ldrb.w	r2, [r8]
 800864e:	3a31      	subs	r2, #49	; 0x31
 8008650:	2a08      	cmp	r2, #8
 8008652:	d81b      	bhi.n	800868c <__strftime.isra.0+0x78>
 8008654:	4640      	mov	r0, r8
 8008656:	220a      	movs	r2, #10
 8008658:	a906      	add	r1, sp, #24
 800865a:	f001 fa47 	bl	8009aec <strtoul>
 800865e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008662:	4681      	mov	r9, r0
 8008664:	f898 2000 	ldrb.w	r2, [r8]
 8008668:	2a45      	cmp	r2, #69	; 0x45
 800866a:	d112      	bne.n	8008692 <__strftime.isra.0+0x7e>
 800866c:	f108 0801 	add.w	r8, r8, #1
 8008670:	e011      	b.n	8008696 <__strftime.isra.0+0x82>
 8008672:	1e69      	subs	r1, r5, #1
 8008674:	42a1      	cmp	r1, r4
 8008676:	d802      	bhi.n	800867e <__strftime.isra.0+0x6a>
 8008678:	2400      	movs	r4, #0
 800867a:	f000 bc9a 	b.w	8008fb2 <__strftime.isra.0+0x99e>
 800867e:	553b      	strb	r3, [r7, r4]
 8008680:	3201      	adds	r2, #1
 8008682:	3401      	adds	r4, #1
 8008684:	e7cf      	b.n	8008626 <__strftime.isra.0+0x12>
 8008686:	f102 0802 	add.w	r8, r2, #2
 800868a:	e7de      	b.n	800864a <__strftime.isra.0+0x36>
 800868c:	f04f 0900 	mov.w	r9, #0
 8008690:	e7e8      	b.n	8008664 <__strftime.isra.0+0x50>
 8008692:	2a4f      	cmp	r2, #79	; 0x4f
 8008694:	d0ea      	beq.n	800866c <__strftime.isra.0+0x58>
 8008696:	f898 0000 	ldrb.w	r0, [r8]
 800869a:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800869e:	2a55      	cmp	r2, #85	; 0x55
 80086a0:	d8ea      	bhi.n	8008678 <__strftime.isra.0+0x64>
 80086a2:	a101      	add	r1, pc, #4	; (adr r1, 80086a8 <__strftime.isra.0+0x94>)
 80086a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086a8:	08008fa1 	.word	0x08008fa1
 80086ac:	08008679 	.word	0x08008679
 80086b0:	08008679 	.word	0x08008679
 80086b4:	08008679 	.word	0x08008679
 80086b8:	08008679 	.word	0x08008679
 80086bc:	08008679 	.word	0x08008679
 80086c0:	08008679 	.word	0x08008679
 80086c4:	08008679 	.word	0x08008679
 80086c8:	08008679 	.word	0x08008679
 80086cc:	08008679 	.word	0x08008679
 80086d0:	08008679 	.word	0x08008679
 80086d4:	08008679 	.word	0x08008679
 80086d8:	08008679 	.word	0x08008679
 80086dc:	08008679 	.word	0x08008679
 80086e0:	08008679 	.word	0x08008679
 80086e4:	08008679 	.word	0x08008679
 80086e8:	08008679 	.word	0x08008679
 80086ec:	08008679 	.word	0x08008679
 80086f0:	08008679 	.word	0x08008679
 80086f4:	08008679 	.word	0x08008679
 80086f8:	08008679 	.word	0x08008679
 80086fc:	08008679 	.word	0x08008679
 8008700:	08008679 	.word	0x08008679
 8008704:	08008679 	.word	0x08008679
 8008708:	08008679 	.word	0x08008679
 800870c:	08008679 	.word	0x08008679
 8008710:	08008679 	.word	0x08008679
 8008714:	08008679 	.word	0x08008679
 8008718:	0800883d 	.word	0x0800883d
 800871c:	08008895 	.word	0x08008895
 8008720:	08008903 	.word	0x08008903
 8008724:	080089a1 	.word	0x080089a1
 8008728:	08008679 	.word	0x08008679
 800872c:	080089ed 	.word	0x080089ed
 8008730:	08008ad9 	.word	0x08008ad9
 8008734:	08008bcd 	.word	0x08008bcd
 8008738:	08008bdb 	.word	0x08008bdb
 800873c:	08008679 	.word	0x08008679
 8008740:	08008679 	.word	0x08008679
 8008744:	08008679 	.word	0x08008679
 8008748:	08008c0b 	.word	0x08008c0b
 800874c:	08008679 	.word	0x08008679
 8008750:	08008679 	.word	0x08008679
 8008754:	08008c1f 	.word	0x08008c1f
 8008758:	08008679 	.word	0x08008679
 800875c:	08008c71 	.word	0x08008c71
 8008760:	08008d7f 	.word	0x08008d7f
 8008764:	08008d8f 	.word	0x08008d8f
 8008768:	08008db7 	.word	0x08008db7
 800876c:	08008df5 	.word	0x08008df5
 8008770:	08008e67 	.word	0x08008e67
 8008774:	080088fb 	.word	0x080088fb
 8008778:	08008e93 	.word	0x08008e93
 800877c:	08008f4f 	.word	0x08008f4f
 8008780:	08008679 	.word	0x08008679
 8008784:	08008679 	.word	0x08008679
 8008788:	08008679 	.word	0x08008679
 800878c:	08008679 	.word	0x08008679
 8008790:	08008679 	.word	0x08008679
 8008794:	08008679 	.word	0x08008679
 8008798:	08008801 	.word	0x08008801
 800879c:	0800886b 	.word	0x0800886b
 80087a0:	080088c1 	.word	0x080088c1
 80087a4:	0800897d 	.word	0x0800897d
 80087a8:	0800897d 	.word	0x0800897d
 80087ac:	08008679 	.word	0x08008679
 80087b0:	08008a3f 	.word	0x08008a3f
 80087b4:	0800886b 	.word	0x0800886b
 80087b8:	08008679 	.word	0x08008679
 80087bc:	08008bfd 	.word	0x08008bfd
 80087c0:	08008bcd 	.word	0x08008bcd
 80087c4:	08008bdb 	.word	0x08008bdb
 80087c8:	08008c05 	.word	0x08008c05
 80087cc:	08008c0f 	.word	0x08008c0f
 80087d0:	08008679 	.word	0x08008679
 80087d4:	08008c1f 	.word	0x08008c1f
 80087d8:	08008679 	.word	0x08008679
 80087dc:	080088eb 	.word	0x080088eb
 80087e0:	08008c83 	.word	0x08008c83
 80087e4:	08008d83 	.word	0x08008d83
 80087e8:	08008d9d 	.word	0x08008d9d
 80087ec:	08008679 	.word	0x08008679
 80087f0:	08008e59 	.word	0x08008e59
 80087f4:	080088f3 	.word	0x080088f3
 80087f8:	08008e77 	.word	0x08008e77
 80087fc:	08008ed9 	.word	0x08008ed9
 8008800:	69b3      	ldr	r3, [r6, #24]
 8008802:	4aa9      	ldr	r2, [pc, #676]	; (8008aa8 <__strftime.isra.0+0x494>)
 8008804:	3318      	adds	r3, #24
 8008806:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800880a:	4648      	mov	r0, r9
 800880c:	f7f7 fcea 	bl	80001e4 <strlen>
 8008810:	f109 39ff 	add.w	r9, r9, #4294967295
 8008814:	4420      	add	r0, r4
 8008816:	1e6b      	subs	r3, r5, #1
 8008818:	42a0      	cmp	r0, r4
 800881a:	d107      	bne.n	800882c <__strftime.isra.0+0x218>
 800881c:	f898 3000 	ldrb.w	r3, [r8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 83c3 	beq.w	8008fac <__strftime.isra.0+0x998>
 8008826:	f108 0201 	add.w	r2, r8, #1
 800882a:	e6fc      	b.n	8008626 <__strftime.isra.0+0x12>
 800882c:	42a3      	cmp	r3, r4
 800882e:	f67f af23 	bls.w	8008678 <__strftime.isra.0+0x64>
 8008832:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8008836:	553a      	strb	r2, [r7, r4]
 8008838:	3401      	adds	r4, #1
 800883a:	e7ed      	b.n	8008818 <__strftime.isra.0+0x204>
 800883c:	69b2      	ldr	r2, [r6, #24]
 800883e:	4b9a      	ldr	r3, [pc, #616]	; (8008aa8 <__strftime.isra.0+0x494>)
 8008840:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008844:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8008848:	4648      	mov	r0, r9
 800884a:	f7f7 fccb 	bl	80001e4 <strlen>
 800884e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008852:	4420      	add	r0, r4
 8008854:	1e6b      	subs	r3, r5, #1
 8008856:	4284      	cmp	r4, r0
 8008858:	d0e0      	beq.n	800881c <__strftime.isra.0+0x208>
 800885a:	42a3      	cmp	r3, r4
 800885c:	f67f af0c 	bls.w	8008678 <__strftime.isra.0+0x64>
 8008860:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8008864:	553a      	strb	r2, [r7, r4]
 8008866:	3401      	adds	r4, #1
 8008868:	e7f5      	b.n	8008856 <__strftime.isra.0+0x242>
 800886a:	4b8f      	ldr	r3, [pc, #572]	; (8008aa8 <__strftime.isra.0+0x494>)
 800886c:	6932      	ldr	r2, [r6, #16]
 800886e:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8008872:	4648      	mov	r0, r9
 8008874:	f7f7 fcb6 	bl	80001e4 <strlen>
 8008878:	f109 39ff 	add.w	r9, r9, #4294967295
 800887c:	4420      	add	r0, r4
 800887e:	1e6b      	subs	r3, r5, #1
 8008880:	42a0      	cmp	r0, r4
 8008882:	d0cb      	beq.n	800881c <__strftime.isra.0+0x208>
 8008884:	42a3      	cmp	r3, r4
 8008886:	f67f aef7 	bls.w	8008678 <__strftime.isra.0+0x64>
 800888a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800888e:	553a      	strb	r2, [r7, r4]
 8008890:	3401      	adds	r4, #1
 8008892:	e7f5      	b.n	8008880 <__strftime.isra.0+0x26c>
 8008894:	6933      	ldr	r3, [r6, #16]
 8008896:	4a84      	ldr	r2, [pc, #528]	; (8008aa8 <__strftime.isra.0+0x494>)
 8008898:	330c      	adds	r3, #12
 800889a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800889e:	4648      	mov	r0, r9
 80088a0:	f7f7 fca0 	bl	80001e4 <strlen>
 80088a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80088a8:	4420      	add	r0, r4
 80088aa:	1e6b      	subs	r3, r5, #1
 80088ac:	42a0      	cmp	r0, r4
 80088ae:	d0b5      	beq.n	800881c <__strftime.isra.0+0x208>
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	f67f aee1 	bls.w	8008678 <__strftime.isra.0+0x64>
 80088b6:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80088ba:	553a      	strb	r2, [r7, r4]
 80088bc:	3401      	adds	r4, #1
 80088be:	e7f5      	b.n	80088ac <__strftime.isra.0+0x298>
 80088c0:	4b79      	ldr	r3, [pc, #484]	; (8008aa8 <__strftime.isra.0+0x494>)
 80088c2:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80088c6:	4648      	mov	r0, r9
 80088c8:	f7f7 fc8c 	bl	80001e4 <strlen>
 80088cc:	f899 3000 	ldrb.w	r3, [r9]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0a3      	beq.n	800881c <__strftime.isra.0+0x208>
 80088d4:	4633      	mov	r3, r6
 80088d6:	464a      	mov	r2, r9
 80088d8:	1b29      	subs	r1, r5, r4
 80088da:	1938      	adds	r0, r7, r4
 80088dc:	f7ff fe9a 	bl	8008614 <__strftime.isra.0>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	f77f aec9 	ble.w	8008678 <__strftime.isra.0+0x64>
 80088e6:	4404      	add	r4, r0
 80088e8:	e798      	b.n	800881c <__strftime.isra.0+0x208>
 80088ea:	4b6f      	ldr	r3, [pc, #444]	; (8008aa8 <__strftime.isra.0+0x494>)
 80088ec:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80088f0:	e7e9      	b.n	80088c6 <__strftime.isra.0+0x2b2>
 80088f2:	4b6d      	ldr	r3, [pc, #436]	; (8008aa8 <__strftime.isra.0+0x494>)
 80088f4:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80088f8:	e7e5      	b.n	80088c6 <__strftime.isra.0+0x2b2>
 80088fa:	4b6b      	ldr	r3, [pc, #428]	; (8008aa8 <__strftime.isra.0+0x494>)
 80088fc:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8008900:	e7e1      	b.n	80088c6 <__strftime.isra.0+0x2b2>
 8008902:	496a      	ldr	r1, [pc, #424]	; (8008aac <__strftime.isra.0+0x498>)
 8008904:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8008908:	458a      	cmp	sl, r1
 800890a:	bfac      	ite	ge
 800890c:	2100      	movge	r1, #0
 800890e:	2101      	movlt	r1, #1
 8008910:	f1ba 0f00 	cmp.w	sl, #0
 8008914:	db11      	blt.n	800893a <__strftime.isra.0+0x326>
 8008916:	2064      	movs	r0, #100	; 0x64
 8008918:	fb9a f0f0 	sdiv	r0, sl, r0
 800891c:	3013      	adds	r0, #19
 800891e:	f1bb 0f00 	cmp.w	fp, #0
 8008922:	d014      	beq.n	800894e <__strftime.isra.0+0x33a>
 8008924:	2863      	cmp	r0, #99	; 0x63
 8008926:	dd27      	ble.n	8008978 <__strftime.isra.0+0x364>
 8008928:	4b61      	ldr	r3, [pc, #388]	; (8008ab0 <__strftime.isra.0+0x49c>)
 800892a:	4a62      	ldr	r2, [pc, #392]	; (8008ab4 <__strftime.isra.0+0x4a0>)
 800892c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8008930:	bf18      	it	ne
 8008932:	461a      	movne	r2, r3
 8008934:	f8df c198 	ldr.w	ip, [pc, #408]	; 8008ad0 <__strftime.isra.0+0x4bc>
 8008938:	e00c      	b.n	8008954 <__strftime.isra.0+0x340>
 800893a:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800893e:	9103      	str	r1, [sp, #12]
 8008940:	f000 fed9 	bl	80096f6 <abs>
 8008944:	2264      	movs	r2, #100	; 0x64
 8008946:	9903      	ldr	r1, [sp, #12]
 8008948:	fb90 f0f2 	sdiv	r0, r0, r2
 800894c:	e7e7      	b.n	800891e <__strftime.isra.0+0x30a>
 800894e:	4a58      	ldr	r2, [pc, #352]	; (8008ab0 <__strftime.isra.0+0x49c>)
 8008950:	f8df c180 	ldr.w	ip, [pc, #384]	; 8008ad4 <__strftime.isra.0+0x4c0>
 8008954:	4b58      	ldr	r3, [pc, #352]	; (8008ab8 <__strftime.isra.0+0x4a4>)
 8008956:	9001      	str	r0, [sp, #4]
 8008958:	f1b9 0f02 	cmp.w	r9, #2
 800895c:	bf2c      	ite	cs
 800895e:	ebc1 0109 	rsbcs	r1, r1, r9
 8008962:	f1c1 0102 	rsbcc	r1, r1, #2
 8008966:	9100      	str	r1, [sp, #0]
 8008968:	4950      	ldr	r1, [pc, #320]	; (8008aac <__strftime.isra.0+0x498>)
 800896a:	458a      	cmp	sl, r1
 800896c:	bfa8      	it	ge
 800896e:	4613      	movge	r3, r2
 8008970:	4662      	mov	r2, ip
 8008972:	1b29      	subs	r1, r5, r4
 8008974:	1938      	adds	r0, r7, r4
 8008976:	e028      	b.n	80089ca <__strftime.isra.0+0x3b6>
 8008978:	4a4d      	ldr	r2, [pc, #308]	; (8008ab0 <__strftime.isra.0+0x49c>)
 800897a:	e7db      	b.n	8008934 <__strftime.isra.0+0x320>
 800897c:	494f      	ldr	r1, [pc, #316]	; (8008abc <__strftime.isra.0+0x4a8>)
 800897e:	4a50      	ldr	r2, [pc, #320]	; (8008ac0 <__strftime.isra.0+0x4ac>)
 8008980:	68f3      	ldr	r3, [r6, #12]
 8008982:	2864      	cmp	r0, #100	; 0x64
 8008984:	bf08      	it	eq
 8008986:	460a      	moveq	r2, r1
 8008988:	1b29      	subs	r1, r5, r4
 800898a:	1938      	adds	r0, r7, r4
 800898c:	f7ff f9d6 	bl	8007d3c <sniprintf>
 8008990:	2800      	cmp	r0, #0
 8008992:	f6ff ae71 	blt.w	8008678 <__strftime.isra.0+0x64>
 8008996:	4404      	add	r4, r0
 8008998:	42a5      	cmp	r5, r4
 800899a:	f63f af3f 	bhi.w	800881c <__strftime.isra.0+0x208>
 800899e:	e66b      	b.n	8008678 <__strftime.isra.0+0x64>
 80089a0:	6970      	ldr	r0, [r6, #20]
 80089a2:	6933      	ldr	r3, [r6, #16]
 80089a4:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80089a8:	2800      	cmp	r0, #0
 80089aa:	eb07 0904 	add.w	r9, r7, r4
 80089ae:	eba5 0104 	sub.w	r1, r5, r4
 80089b2:	f103 0301 	add.w	r3, r3, #1
 80089b6:	db0b      	blt.n	80089d0 <__strftime.isra.0+0x3bc>
 80089b8:	2264      	movs	r2, #100	; 0x64
 80089ba:	fb90 fcf2 	sdiv	ip, r0, r2
 80089be:	fb02 001c 	mls	r0, r2, ip, r0
 80089c2:	4a40      	ldr	r2, [pc, #256]	; (8008ac4 <__strftime.isra.0+0x4b0>)
 80089c4:	e9cd a000 	strd	sl, r0, [sp]
 80089c8:	4648      	mov	r0, r9
 80089ca:	f7ff f9b7 	bl	8007d3c <sniprintf>
 80089ce:	e7df      	b.n	8008990 <__strftime.isra.0+0x37c>
 80089d0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80089d4:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80089d8:	f000 fe8d 	bl	80096f6 <abs>
 80089dc:	2264      	movs	r2, #100	; 0x64
 80089de:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 80089e2:	fb90 fcf2 	sdiv	ip, r0, r2
 80089e6:	fb0c 0012 	mls	r0, ip, r2, r0
 80089ea:	e7ea      	b.n	80089c2 <__strftime.isra.0+0x3ae>
 80089ec:	2225      	movs	r2, #37	; 0x25
 80089ee:	f88d 2018 	strb.w	r2, [sp, #24]
 80089f2:	f1bb 0f00 	cmp.w	fp, #0
 80089f6:	d011      	beq.n	8008a1c <__strftime.isra.0+0x408>
 80089f8:	f1b9 0f06 	cmp.w	r9, #6
 80089fc:	bf38      	it	cc
 80089fe:	f04f 0906 	movcc.w	r9, #6
 8008a02:	f1b9 0306 	subs.w	r3, r9, #6
 8008a06:	f88d b019 	strb.w	fp, [sp, #25]
 8008a0a:	d10c      	bne.n	8008a26 <__strftime.isra.0+0x412>
 8008a0c:	f10d 001a 	add.w	r0, sp, #26
 8008a10:	492d      	ldr	r1, [pc, #180]	; (8008ac8 <__strftime.isra.0+0x4b4>)
 8008a12:	f000 fe5a 	bl	80096ca <strcpy>
 8008a16:	4633      	mov	r3, r6
 8008a18:	aa06      	add	r2, sp, #24
 8008a1a:	e75d      	b.n	80088d8 <__strftime.isra.0+0x2c4>
 8008a1c:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8008a20:	f04f 090a 	mov.w	r9, #10
 8008a24:	e7ed      	b.n	8008a02 <__strftime.isra.0+0x3ee>
 8008a26:	4a29      	ldr	r2, [pc, #164]	; (8008acc <__strftime.isra.0+0x4b8>)
 8008a28:	211e      	movs	r1, #30
 8008a2a:	f10d 001a 	add.w	r0, sp, #26
 8008a2e:	f7ff f985 	bl	8007d3c <sniprintf>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	ddea      	ble.n	8008a0c <__strftime.isra.0+0x3f8>
 8008a36:	f10d 031a 	add.w	r3, sp, #26
 8008a3a:	4418      	add	r0, r3
 8008a3c:	e7e8      	b.n	8008a10 <__strftime.isra.0+0x3fc>
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7ff fd96 	bl	8008570 <iso_year_adjust>
 8008a44:	4681      	mov	r9, r0
 8008a46:	6970      	ldr	r0, [r6, #20]
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	db11      	blt.n	8008a70 <__strftime.isra.0+0x45c>
 8008a4c:	2364      	movs	r3, #100	; 0x64
 8008a4e:	fb90 f2f3 	sdiv	r2, r0, r3
 8008a52:	fb03 0012 	mls	r0, r3, r2, r0
 8008a56:	2364      	movs	r3, #100	; 0x64
 8008a58:	4481      	add	r9, r0
 8008a5a:	fb99 f2f3 	sdiv	r2, r9, r3
 8008a5e:	fb03 9912 	mls	r9, r3, r2, r9
 8008a62:	4499      	add	r9, r3
 8008a64:	fbb9 f2f3 	udiv	r2, r9, r3
 8008a68:	fb03 9312 	mls	r3, r3, r2, r9
 8008a6c:	4a13      	ldr	r2, [pc, #76]	; (8008abc <__strftime.isra.0+0x4a8>)
 8008a6e:	e78b      	b.n	8008988 <__strftime.isra.0+0x374>
 8008a70:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008a74:	f000 fe3f 	bl	80096f6 <abs>
 8008a78:	2364      	movs	r3, #100	; 0x64
 8008a7a:	f1b9 0f00 	cmp.w	r9, #0
 8008a7e:	fb90 f2f3 	sdiv	r2, r0, r3
 8008a82:	fb02 0013 	mls	r0, r2, r3, r0
 8008a86:	da07      	bge.n	8008a98 <__strftime.isra.0+0x484>
 8008a88:	6972      	ldr	r2, [r6, #20]
 8008a8a:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	bfb8      	it	lt
 8008a92:	f04f 0901 	movlt.w	r9, #1
 8008a96:	e7de      	b.n	8008a56 <__strftime.isra.0+0x442>
 8008a98:	d0dd      	beq.n	8008a56 <__strftime.isra.0+0x442>
 8008a9a:	6972      	ldr	r2, [r6, #20]
 8008a9c:	4b03      	ldr	r3, [pc, #12]	; (8008aac <__strftime.isra.0+0x498>)
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	bfb8      	it	lt
 8008aa2:	f04f 39ff 	movlt.w	r9, #4294967295
 8008aa6:	e7d6      	b.n	8008a56 <__strftime.isra.0+0x442>
 8008aa8:	0800bf2c 	.word	0x0800bf2c
 8008aac:	fffff894 	.word	0xfffff894
 8008ab0:	0800c063 	.word	0x0800c063
 8008ab4:	0800bd5f 	.word	0x0800bd5f
 8008ab8:	0800c1ab 	.word	0x0800c1ab
 8008abc:	0800bd77 	.word	0x0800bd77
 8008ac0:	0800bd69 	.word	0x0800bd69
 8008ac4:	0800bd6d 	.word	0x0800bd6d
 8008ac8:	0800bd80 	.word	0x0800bd80
 8008acc:	0800bd7c 	.word	0x0800bd7c
 8008ad0:	0800bd61 	.word	0x0800bd61
 8008ad4:	0800bd58 	.word	0x0800bd58
 8008ad8:	6971      	ldr	r1, [r6, #20]
 8008ada:	4abb      	ldr	r2, [pc, #748]	; (8008dc8 <__strftime.isra.0+0x7b4>)
 8008adc:	4291      	cmp	r1, r2
 8008ade:	bfac      	ite	ge
 8008ae0:	2300      	movge	r3, #0
 8008ae2:	2301      	movlt	r3, #1
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8008aea:	f7ff fd41 	bl	8008570 <iso_year_adjust>
 8008aee:	9904      	ldr	r1, [sp, #16]
 8008af0:	2900      	cmp	r1, #0
 8008af2:	4682      	mov	sl, r0
 8008af4:	db39      	blt.n	8008b6a <__strftime.isra.0+0x556>
 8008af6:	2264      	movs	r2, #100	; 0x64
 8008af8:	fb91 f2f2 	sdiv	r2, r1, r2
 8008afc:	3213      	adds	r2, #19
 8008afe:	6970      	ldr	r0, [r6, #20]
 8008b00:	2800      	cmp	r0, #0
 8008b02:	db3d      	blt.n	8008b80 <__strftime.isra.0+0x56c>
 8008b04:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8008b08:	fb90 fefc 	sdiv	lr, r0, ip
 8008b0c:	fb0c 001e 	mls	r0, ip, lr, r0
 8008b10:	f1ba 0f00 	cmp.w	sl, #0
 8008b14:	da43      	bge.n	8008b9e <__strftime.isra.0+0x58a>
 8008b16:	6971      	ldr	r1, [r6, #20]
 8008b18:	4bac      	ldr	r3, [pc, #688]	; (8008dcc <__strftime.isra.0+0x7b8>)
 8008b1a:	4299      	cmp	r1, r3
 8008b1c:	db4a      	blt.n	8008bb4 <__strftime.isra.0+0x5a0>
 8008b1e:	4482      	add	sl, r0
 8008b20:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008b24:	d14b      	bne.n	8008bbe <__strftime.isra.0+0x5aa>
 8008b26:	3a01      	subs	r2, #1
 8008b28:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	2164      	movs	r1, #100	; 0x64
 8008b30:	fb01 aa02 	mla	sl, r1, r2, sl
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f040 8240 	bne.w	8008fba <__strftime.isra.0+0x9a6>
 8008b3a:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8008b3e:	d104      	bne.n	8008b4a <__strftime.isra.0+0x536>
 8008b40:	f242 720f 	movw	r2, #9999	; 0x270f
 8008b44:	4592      	cmp	sl, r2
 8008b46:	f200 823c 	bhi.w	8008fc2 <__strftime.isra.0+0x9ae>
 8008b4a:	aa06      	add	r2, sp, #24
 8008b4c:	2125      	movs	r1, #37	; 0x25
 8008b4e:	7011      	strb	r1, [r2, #0]
 8008b50:	f1bb 0f00 	cmp.w	fp, #0
 8008b54:	f040 81bc 	bne.w	8008ed0 <__strftime.isra.0+0x8bc>
 8008b58:	1c50      	adds	r0, r2, #1
 8008b5a:	499d      	ldr	r1, [pc, #628]	; (8008dd0 <__strftime.isra.0+0x7bc>)
 8008b5c:	f000 fdb5 	bl	80096ca <strcpy>
 8008b60:	f8cd a000 	str.w	sl, [sp]
 8008b64:	464b      	mov	r3, r9
 8008b66:	aa06      	add	r2, sp, #24
 8008b68:	e086      	b.n	8008c78 <__strftime.isra.0+0x664>
 8008b6a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8008b6e:	9104      	str	r1, [sp, #16]
 8008b70:	f000 fdc1 	bl	80096f6 <abs>
 8008b74:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8008b78:	9904      	ldr	r1, [sp, #16]
 8008b7a:	fb90 f2fc 	sdiv	r2, r0, ip
 8008b7e:	e7be      	b.n	8008afe <__strftime.isra.0+0x4ea>
 8008b80:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008b84:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8008b88:	f000 fdb5 	bl	80096f6 <abs>
 8008b8c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8008b90:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008b94:	fb90 fefc 	sdiv	lr, r0, ip
 8008b98:	fb0e 001c 	mls	r0, lr, ip, r0
 8008b9c:	e7b8      	b.n	8008b10 <__strftime.isra.0+0x4fc>
 8008b9e:	d0be      	beq.n	8008b1e <__strftime.isra.0+0x50a>
 8008ba0:	4b89      	ldr	r3, [pc, #548]	; (8008dc8 <__strftime.isra.0+0x7b4>)
 8008ba2:	4299      	cmp	r1, r3
 8008ba4:	bfb4      	ite	lt
 8008ba6:	2301      	movlt	r3, #1
 8008ba8:	2300      	movge	r3, #0
 8008baa:	9303      	str	r3, [sp, #12]
 8008bac:	bfb8      	it	lt
 8008bae:	f04f 3aff 	movlt.w	sl, #4294967295
 8008bb2:	e7b4      	b.n	8008b1e <__strftime.isra.0+0x50a>
 8008bb4:	f04f 0a01 	mov.w	sl, #1
 8008bb8:	f8cd a00c 	str.w	sl, [sp, #12]
 8008bbc:	e7af      	b.n	8008b1e <__strftime.isra.0+0x50a>
 8008bbe:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8008bc2:	bf04      	itt	eq
 8008bc4:	3201      	addeq	r2, #1
 8008bc6:	f04f 0a00 	moveq.w	sl, #0
 8008bca:	e7af      	b.n	8008b2c <__strftime.isra.0+0x518>
 8008bcc:	4981      	ldr	r1, [pc, #516]	; (8008dd4 <__strftime.isra.0+0x7c0>)
 8008bce:	4a82      	ldr	r2, [pc, #520]	; (8008dd8 <__strftime.isra.0+0x7c4>)
 8008bd0:	68b3      	ldr	r3, [r6, #8]
 8008bd2:	286b      	cmp	r0, #107	; 0x6b
 8008bd4:	bf08      	it	eq
 8008bd6:	460a      	moveq	r2, r1
 8008bd8:	e6d6      	b.n	8008988 <__strftime.isra.0+0x374>
 8008bda:	68b3      	ldr	r3, [r6, #8]
 8008bdc:	b163      	cbz	r3, 8008bf8 <__strftime.isra.0+0x5e4>
 8008bde:	2b0c      	cmp	r3, #12
 8008be0:	d004      	beq.n	8008bec <__strftime.isra.0+0x5d8>
 8008be2:	210c      	movs	r1, #12
 8008be4:	fb93 f2f1 	sdiv	r2, r3, r1
 8008be8:	fb01 3312 	mls	r3, r1, r2, r3
 8008bec:	497a      	ldr	r1, [pc, #488]	; (8008dd8 <__strftime.isra.0+0x7c4>)
 8008bee:	4a79      	ldr	r2, [pc, #484]	; (8008dd4 <__strftime.isra.0+0x7c0>)
 8008bf0:	2849      	cmp	r0, #73	; 0x49
 8008bf2:	bf08      	it	eq
 8008bf4:	460a      	moveq	r2, r1
 8008bf6:	e6c7      	b.n	8008988 <__strftime.isra.0+0x374>
 8008bf8:	230c      	movs	r3, #12
 8008bfa:	e7f7      	b.n	8008bec <__strftime.isra.0+0x5d8>
 8008bfc:	69f3      	ldr	r3, [r6, #28]
 8008bfe:	4a77      	ldr	r2, [pc, #476]	; (8008ddc <__strftime.isra.0+0x7c8>)
 8008c00:	3301      	adds	r3, #1
 8008c02:	e6c1      	b.n	8008988 <__strftime.isra.0+0x374>
 8008c04:	6933      	ldr	r3, [r6, #16]
 8008c06:	3301      	adds	r3, #1
 8008c08:	e730      	b.n	8008a6c <__strftime.isra.0+0x458>
 8008c0a:	6873      	ldr	r3, [r6, #4]
 8008c0c:	e72e      	b.n	8008a6c <__strftime.isra.0+0x458>
 8008c0e:	1e6b      	subs	r3, r5, #1
 8008c10:	429c      	cmp	r4, r3
 8008c12:	f4bf ad31 	bcs.w	8008678 <__strftime.isra.0+0x64>
 8008c16:	230a      	movs	r3, #10
 8008c18:	553b      	strb	r3, [r7, r4]
 8008c1a:	3401      	adds	r4, #1
 8008c1c:	e5fe      	b.n	800881c <__strftime.isra.0+0x208>
 8008c1e:	68b3      	ldr	r3, [r6, #8]
 8008c20:	2b0b      	cmp	r3, #11
 8008c22:	4b6f      	ldr	r3, [pc, #444]	; (8008de0 <__strftime.isra.0+0x7cc>)
 8008c24:	bfd4      	ite	le
 8008c26:	2200      	movle	r2, #0
 8008c28:	2201      	movgt	r2, #1
 8008c2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008c2e:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8008c32:	4648      	mov	r0, r9
 8008c34:	f7f7 fad6 	bl	80001e4 <strlen>
 8008c38:	f109 32ff 	add.w	r2, r9, #4294967295
 8008c3c:	4420      	add	r0, r4
 8008c3e:	f105 3cff 	add.w	ip, r5, #4294967295
 8008c42:	42a0      	cmp	r0, r4
 8008c44:	f43f adea 	beq.w	800881c <__strftime.isra.0+0x208>
 8008c48:	45a4      	cmp	ip, r4
 8008c4a:	f67f ad15 	bls.w	8008678 <__strftime.isra.0+0x64>
 8008c4e:	f898 1000 	ldrb.w	r1, [r8]
 8008c52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008c56:	2950      	cmp	r1, #80	; 0x50
 8008c58:	d107      	bne.n	8008c6a <__strftime.isra.0+0x656>
 8008c5a:	4962      	ldr	r1, [pc, #392]	; (8008de4 <__strftime.isra.0+0x7d0>)
 8008c5c:	5cc9      	ldrb	r1, [r1, r3]
 8008c5e:	f001 0103 	and.w	r1, r1, #3
 8008c62:	2901      	cmp	r1, #1
 8008c64:	bf08      	it	eq
 8008c66:	3320      	addeq	r3, #32
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	553b      	strb	r3, [r7, r4]
 8008c6c:	3401      	adds	r4, #1
 8008c6e:	e7e8      	b.n	8008c42 <__strftime.isra.0+0x62e>
 8008c70:	6873      	ldr	r3, [r6, #4]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	4a5c      	ldr	r2, [pc, #368]	; (8008de8 <__strftime.isra.0+0x7d4>)
 8008c76:	68b3      	ldr	r3, [r6, #8]
 8008c78:	1b29      	subs	r1, r5, r4
 8008c7a:	1938      	adds	r0, r7, r4
 8008c7c:	f7ff f85e 	bl	8007d3c <sniprintf>
 8008c80:	e686      	b.n	8008990 <__strftime.isra.0+0x37c>
 8008c82:	6a33      	ldr	r3, [r6, #32]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	db77      	blt.n	8008d78 <__strftime.isra.0+0x764>
 8008c88:	f000 fa66 	bl	8009158 <__tz_lock>
 8008c8c:	9b02      	ldr	r3, [sp, #8]
 8008c8e:	b90b      	cbnz	r3, 8008c94 <__strftime.isra.0+0x680>
 8008c90:	f000 fa6e 	bl	8009170 <_tzset_unlocked>
 8008c94:	f001 fb34 	bl	800a300 <__gettzinfo>
 8008c98:	6a33      	ldr	r3, [r6, #32]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bfd4      	ite	le
 8008c9e:	2200      	movle	r2, #0
 8008ca0:	2201      	movgt	r2, #1
 8008ca2:	2328      	movs	r3, #40	; 0x28
 8008ca4:	fb02 3303 	mla	r3, r2, r3, r3
 8008ca8:	58c3      	ldr	r3, [r0, r3]
 8008caa:	f1c3 0900 	rsb	r9, r3, #0
 8008cae:	f000 fa59 	bl	8009164 <__tz_unlock>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	6972      	ldr	r2, [r6, #20]
 8008cb8:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8008cbc:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8008cc0:	f16c 0c00 	sbc.w	ip, ip, #0
 8008cc4:	f1bc 0f00 	cmp.w	ip, #0
 8008cc8:	eba5 0104 	sub.w	r1, r5, r4
 8008ccc:	eb07 0004 	add.w	r0, r7, r4
 8008cd0:	da02      	bge.n	8008cd8 <__strftime.isra.0+0x6c4>
 8008cd2:	3303      	adds	r3, #3
 8008cd4:	f14c 0c00 	adc.w	ip, ip, #0
 8008cd8:	089b      	lsrs	r3, r3, #2
 8008cda:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8008cde:	f102 3aff 	add.w	sl, r2, #4294967295
 8008ce2:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8008ce6:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8008cea:	fb9a fefe 	sdiv	lr, sl, lr
 8008cee:	ebb3 030e 	subs.w	r3, r3, lr
 8008cf2:	eb6c 7eee 	sbc.w	lr, ip, lr, asr #31
 8008cf6:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8008cfa:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8008cfe:	fb9a fcfc 	sdiv	ip, sl, ip
 8008d02:	eb13 030c 	adds.w	r3, r3, ip
 8008d06:	eb4e 7cec 	adc.w	ip, lr, ip, asr #31
 8008d0a:	3a46      	subs	r2, #70	; 0x46
 8008d0c:	f240 1e6d 	movw	lr, #365	; 0x16d
 8008d10:	fb0e f202 	mul.w	r2, lr, r2
 8008d14:	189b      	adds	r3, r3, r2
 8008d16:	eb4c 72e2 	adc.w	r2, ip, r2, asr #31
 8008d1a:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 8008d1e:	f04f 0a18 	mov.w	sl, #24
 8008d22:	eb13 030c 	adds.w	r3, r3, ip
 8008d26:	eb42 72ec 	adc.w	r2, r2, ip, asr #31
 8008d2a:	fba3 c30a 	umull	ip, r3, r3, sl
 8008d2e:	fb0a 3e02 	mla	lr, sl, r2, r3
 8008d32:	68b3      	ldr	r3, [r6, #8]
 8008d34:	eb1c 0203 	adds.w	r2, ip, r3
 8008d38:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8008d3c:	eb4e 7ee3 	adc.w	lr, lr, r3, asr #31
 8008d40:	fba2 320c 	umull	r3, r2, r2, ip
 8008d44:	fb0c 220e 	mla	r2, ip, lr, r2
 8008d48:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8008d4c:	eb13 030e 	adds.w	r3, r3, lr
 8008d50:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8008d54:	fba3 3e0c 	umull	r3, lr, r3, ip
 8008d58:	fb0c ee02 	mla	lr, ip, r2, lr
 8008d5c:	6832      	ldr	r2, [r6, #0]
 8008d5e:	189b      	adds	r3, r3, r2
 8008d60:	eb4e 7ee2 	adc.w	lr, lr, r2, asr #31
 8008d64:	ebb3 0309 	subs.w	r3, r3, r9
 8008d68:	eb6e 72e9 	sbc.w	r2, lr, r9, asr #31
 8008d6c:	e9cd 3200 	strd	r3, r2, [sp]
 8008d70:	4a1e      	ldr	r2, [pc, #120]	; (8008dec <__strftime.isra.0+0x7d8>)
 8008d72:	f7fe ffe3 	bl	8007d3c <sniprintf>
 8008d76:	e60b      	b.n	8008990 <__strftime.isra.0+0x37c>
 8008d78:	f04f 0900 	mov.w	r9, #0
 8008d7c:	e79b      	b.n	8008cb6 <__strftime.isra.0+0x6a2>
 8008d7e:	6833      	ldr	r3, [r6, #0]
 8008d80:	e674      	b.n	8008a6c <__strftime.isra.0+0x458>
 8008d82:	1e6b      	subs	r3, r5, #1
 8008d84:	429c      	cmp	r4, r3
 8008d86:	f4bf ac77 	bcs.w	8008678 <__strftime.isra.0+0x64>
 8008d8a:	2309      	movs	r3, #9
 8008d8c:	e744      	b.n	8008c18 <__strftime.isra.0+0x604>
 8008d8e:	6833      	ldr	r3, [r6, #0]
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	6873      	ldr	r3, [r6, #4]
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	4a16      	ldr	r2, [pc, #88]	; (8008df0 <__strftime.isra.0+0x7dc>)
 8008d98:	68b3      	ldr	r3, [r6, #8]
 8008d9a:	e5ea      	b.n	8008972 <__strftime.isra.0+0x35e>
 8008d9c:	1e6b      	subs	r3, r5, #1
 8008d9e:	429c      	cmp	r4, r3
 8008da0:	f4bf ac6a 	bcs.w	8008678 <__strftime.isra.0+0x64>
 8008da4:	69b3      	ldr	r3, [r6, #24]
 8008da6:	1c62      	adds	r2, r4, #1
 8008da8:	b91b      	cbnz	r3, 8008db2 <__strftime.isra.0+0x79e>
 8008daa:	2337      	movs	r3, #55	; 0x37
 8008dac:	553b      	strb	r3, [r7, r4]
 8008dae:	4614      	mov	r4, r2
 8008db0:	e534      	b.n	800881c <__strftime.isra.0+0x208>
 8008db2:	3330      	adds	r3, #48	; 0x30
 8008db4:	e7fa      	b.n	8008dac <__strftime.isra.0+0x798>
 8008db6:	69f3      	ldr	r3, [r6, #28]
 8008db8:	69b2      	ldr	r2, [r6, #24]
 8008dba:	3307      	adds	r3, #7
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	2207      	movs	r2, #7
 8008dc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dc4:	e652      	b.n	8008a6c <__strftime.isra.0+0x458>
 8008dc6:	bf00      	nop
 8008dc8:	fffff894 	.word	0xfffff894
 8008dcc:	fffff895 	.word	0xfffff895
 8008dd0:	0800bd88 	.word	0x0800bd88
 8008dd4:	0800bd69 	.word	0x0800bd69
 8008dd8:	0800bd77 	.word	0x0800bd77
 8008ddc:	0800bd8c 	.word	0x0800bd8c
 8008de0:	0800bf2c 	.word	0x0800bf2c
 8008de4:	0800c065 	.word	0x0800c065
 8008de8:	0800bd9b 	.word	0x0800bd9b
 8008dec:	0800bd91 	.word	0x0800bd91
 8008df0:	0800bd96 	.word	0x0800bd96
 8008df4:	4630      	mov	r0, r6
 8008df6:	f7ff fbbb 	bl	8008570 <iso_year_adjust>
 8008dfa:	69b2      	ldr	r2, [r6, #24]
 8008dfc:	b132      	cbz	r2, 8008e0c <__strftime.isra.0+0x7f8>
 8008dfe:	3a01      	subs	r2, #1
 8008e00:	2800      	cmp	r0, #0
 8008e02:	69f3      	ldr	r3, [r6, #28]
 8008e04:	dc26      	bgt.n	8008e54 <__strftime.isra.0+0x840>
 8008e06:	d103      	bne.n	8008e10 <__strftime.isra.0+0x7fc>
 8008e08:	330a      	adds	r3, #10
 8008e0a:	e7d7      	b.n	8008dbc <__strftime.isra.0+0x7a8>
 8008e0c:	2206      	movs	r2, #6
 8008e0e:	e7f7      	b.n	8008e00 <__strftime.isra.0+0x7ec>
 8008e10:	1ad2      	subs	r2, r2, r3
 8008e12:	6973      	ldr	r3, [r6, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f240 716b 	movw	r1, #1899	; 0x76b
 8008e1a:	bfa8      	it	ge
 8008e1c:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 8008e20:	440b      	add	r3, r1
 8008e22:	0799      	lsls	r1, r3, #30
 8008e24:	d105      	bne.n	8008e32 <__strftime.isra.0+0x81e>
 8008e26:	2064      	movs	r0, #100	; 0x64
 8008e28:	fb93 f1f0 	sdiv	r1, r3, r0
 8008e2c:	fb00 3111 	mls	r1, r0, r1, r3
 8008e30:	b971      	cbnz	r1, 8008e50 <__strftime.isra.0+0x83c>
 8008e32:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008e36:	fb93 f0f1 	sdiv	r0, r3, r1
 8008e3a:	fb01 3310 	mls	r3, r1, r0, r3
 8008e3e:	fab3 f383 	clz	r3, r3
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	1ad2      	subs	r2, r2, r3
 8008e46:	2a05      	cmp	r2, #5
 8008e48:	bfb4      	ite	lt
 8008e4a:	2335      	movlt	r3, #53	; 0x35
 8008e4c:	2334      	movge	r3, #52	; 0x34
 8008e4e:	e60d      	b.n	8008a6c <__strftime.isra.0+0x458>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e7f7      	b.n	8008e44 <__strftime.isra.0+0x830>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e609      	b.n	8008a6c <__strftime.isra.0+0x458>
 8008e58:	1e6b      	subs	r3, r5, #1
 8008e5a:	429c      	cmp	r4, r3
 8008e5c:	f4bf ac0c 	bcs.w	8008678 <__strftime.isra.0+0x64>
 8008e60:	69b3      	ldr	r3, [r6, #24]
 8008e62:	3330      	adds	r3, #48	; 0x30
 8008e64:	e6d8      	b.n	8008c18 <__strftime.isra.0+0x604>
 8008e66:	69b2      	ldr	r2, [r6, #24]
 8008e68:	b11a      	cbz	r2, 8008e72 <__strftime.isra.0+0x85e>
 8008e6a:	3a01      	subs	r2, #1
 8008e6c:	69f3      	ldr	r3, [r6, #28]
 8008e6e:	3307      	adds	r3, #7
 8008e70:	e7a4      	b.n	8008dbc <__strftime.isra.0+0x7a8>
 8008e72:	2206      	movs	r2, #6
 8008e74:	e7fa      	b.n	8008e6c <__strftime.isra.0+0x858>
 8008e76:	6970      	ldr	r0, [r6, #20]
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	db05      	blt.n	8008e88 <__strftime.isra.0+0x874>
 8008e7c:	2364      	movs	r3, #100	; 0x64
 8008e7e:	fb90 f2f3 	sdiv	r2, r0, r3
 8008e82:	fb02 0313 	mls	r3, r2, r3, r0
 8008e86:	e5f1      	b.n	8008a6c <__strftime.isra.0+0x458>
 8008e88:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008e8c:	f000 fc33 	bl	80096f6 <abs>
 8008e90:	e7f4      	b.n	8008e7c <__strftime.isra.0+0x868>
 8008e92:	6972      	ldr	r2, [r6, #20]
 8008e94:	494c      	ldr	r1, [pc, #304]	; (8008fc8 <__strftime.isra.0+0x9b4>)
 8008e96:	428a      	cmp	r2, r1
 8008e98:	da0c      	bge.n	8008eb4 <__strftime.isra.0+0x8a0>
 8008e9a:	202d      	movs	r0, #45	; 0x2d
 8008e9c:	f88d 0018 	strb.w	r0, [sp, #24]
 8008ea0:	eba1 0a02 	sub.w	sl, r1, r2
 8008ea4:	f1b9 0f00 	cmp.w	r9, #0
 8008ea8:	d001      	beq.n	8008eae <__strftime.isra.0+0x89a>
 8008eaa:	f109 39ff 	add.w	r9, r9, #4294967295
 8008eae:	f10d 0219 	add.w	r2, sp, #25
 8008eb2:	e64b      	b.n	8008b4c <__strftime.isra.0+0x538>
 8008eb4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8008eb8:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8008ebc:	f47f ae45 	bne.w	8008b4a <__strftime.isra.0+0x536>
 8008ec0:	f242 720f 	movw	r2, #9999	; 0x270f
 8008ec4:	4592      	cmp	sl, r2
 8008ec6:	f67f ae40 	bls.w	8008b4a <__strftime.isra.0+0x536>
 8008eca:	f88d b018 	strb.w	fp, [sp, #24]
 8008ece:	e7e9      	b.n	8008ea4 <__strftime.isra.0+0x890>
 8008ed0:	2330      	movs	r3, #48	; 0x30
 8008ed2:	1c90      	adds	r0, r2, #2
 8008ed4:	7053      	strb	r3, [r2, #1]
 8008ed6:	e640      	b.n	8008b5a <__strftime.isra.0+0x546>
 8008ed8:	6a33      	ldr	r3, [r6, #32]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f6ff ac9e 	blt.w	800881c <__strftime.isra.0+0x208>
 8008ee0:	f000 f93a 	bl	8009158 <__tz_lock>
 8008ee4:	9b02      	ldr	r3, [sp, #8]
 8008ee6:	b90b      	cbnz	r3, 8008eec <__strftime.isra.0+0x8d8>
 8008ee8:	f000 f942 	bl	8009170 <_tzset_unlocked>
 8008eec:	f001 fa08 	bl	800a300 <__gettzinfo>
 8008ef0:	6a33      	ldr	r3, [r6, #32]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bfd4      	ite	le
 8008ef6:	2200      	movle	r2, #0
 8008ef8:	2201      	movgt	r2, #1
 8008efa:	2328      	movs	r3, #40	; 0x28
 8008efc:	fb02 3303 	mla	r3, r2, r3, r3
 8008f00:	eb07 0a04 	add.w	sl, r7, r4
 8008f04:	58c3      	ldr	r3, [r0, r3]
 8008f06:	f1c3 0900 	rsb	r9, r3, #0
 8008f0a:	f000 f92b 	bl	8009164 <__tz_unlock>
 8008f0e:	233c      	movs	r3, #60	; 0x3c
 8008f10:	fb99 f0f3 	sdiv	r0, r9, r3
 8008f14:	f000 fcb5 	bl	8009882 <labs>
 8008f18:	233c      	movs	r3, #60	; 0x3c
 8008f1a:	eba5 0b04 	sub.w	fp, r5, r4
 8008f1e:	fb90 f2f3 	sdiv	r2, r0, r3
 8008f22:	fb02 0013 	mls	r0, r2, r3, r0
 8008f26:	9000      	str	r0, [sp, #0]
 8008f28:	4a28      	ldr	r2, [pc, #160]	; (8008fcc <__strftime.isra.0+0x9b8>)
 8008f2a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008f2e:	4659      	mov	r1, fp
 8008f30:	4650      	mov	r0, sl
 8008f32:	fb99 f3f3 	sdiv	r3, r9, r3
 8008f36:	f7fe ff01 	bl	8007d3c <sniprintf>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	f6ff ab9c 	blt.w	8008678 <__strftime.isra.0+0x64>
 8008f40:	4404      	add	r4, r0
 8008f42:	42a5      	cmp	r5, r4
 8008f44:	f67f ab98 	bls.w	8008678 <__strftime.isra.0+0x64>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	9302      	str	r3, [sp, #8]
 8008f4c:	e466      	b.n	800881c <__strftime.isra.0+0x208>
 8008f4e:	6a33      	ldr	r3, [r6, #32]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f6ff ac63 	blt.w	800881c <__strftime.isra.0+0x208>
 8008f56:	f000 f8ff 	bl	8009158 <__tz_lock>
 8008f5a:	9b02      	ldr	r3, [sp, #8]
 8008f5c:	b90b      	cbnz	r3, 8008f62 <__strftime.isra.0+0x94e>
 8008f5e:	f000 f907 	bl	8009170 <_tzset_unlocked>
 8008f62:	6a33      	ldr	r3, [r6, #32]
 8008f64:	4a1a      	ldr	r2, [pc, #104]	; (8008fd0 <__strftime.isra.0+0x9bc>)
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfd4      	ite	le
 8008f6a:	2300      	movle	r3, #0
 8008f6c:	2301      	movgt	r3, #1
 8008f6e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8008f72:	4648      	mov	r0, r9
 8008f74:	f7f7 f936 	bl	80001e4 <strlen>
 8008f78:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f7c:	4420      	add	r0, r4
 8008f7e:	1e6b      	subs	r3, r5, #1
 8008f80:	42a0      	cmp	r0, r4
 8008f82:	d102      	bne.n	8008f8a <__strftime.isra.0+0x976>
 8008f84:	f000 f8ee 	bl	8009164 <__tz_unlock>
 8008f88:	e7de      	b.n	8008f48 <__strftime.isra.0+0x934>
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	d904      	bls.n	8008f98 <__strftime.isra.0+0x984>
 8008f8e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8008f92:	553a      	strb	r2, [r7, r4]
 8008f94:	3401      	adds	r4, #1
 8008f96:	e7f3      	b.n	8008f80 <__strftime.isra.0+0x96c>
 8008f98:	f000 f8e4 	bl	8009164 <__tz_unlock>
 8008f9c:	f7ff bb6c 	b.w	8008678 <__strftime.isra.0+0x64>
 8008fa0:	1e6b      	subs	r3, r5, #1
 8008fa2:	429c      	cmp	r4, r3
 8008fa4:	f4bf ab68 	bcs.w	8008678 <__strftime.isra.0+0x64>
 8008fa8:	2325      	movs	r3, #37	; 0x25
 8008faa:	e635      	b.n	8008c18 <__strftime.isra.0+0x604>
 8008fac:	b10d      	cbz	r5, 8008fb2 <__strftime.isra.0+0x99e>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	553b      	strb	r3, [r7, r4]
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	b00f      	add	sp, #60	; 0x3c
 8008fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fba:	222d      	movs	r2, #45	; 0x2d
 8008fbc:	f88d 2018 	strb.w	r2, [sp, #24]
 8008fc0:	e770      	b.n	8008ea4 <__strftime.isra.0+0x890>
 8008fc2:	465a      	mov	r2, fp
 8008fc4:	e7fa      	b.n	8008fbc <__strftime.isra.0+0x9a8>
 8008fc6:	bf00      	nop
 8008fc8:	fffff894 	.word	0xfffff894
 8008fcc:	0800bda5 	.word	0x0800bda5
 8008fd0:	2000001c 	.word	0x2000001c

08008fd4 <strftime>:
 8008fd4:	f7ff bb1e 	b.w	8008614 <__strftime.isra.0>

08008fd8 <time>:
 8008fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fda:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <time+0x30>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4669      	mov	r1, sp
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	6818      	ldr	r0, [r3, #0]
 8008fe4:	f000 fafa 	bl	80095dc <_gettimeofday_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	bfbe      	ittt	lt
 8008fec:	f04f 32ff 	movlt.w	r2, #4294967295
 8008ff0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ff4:	e9cd 2300 	strdlt	r2, r3, [sp]
 8008ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ffc:	b10c      	cbz	r4, 8009002 <time+0x2a>
 8008ffe:	e9c4 0100 	strd	r0, r1, [r4]
 8009002:	b004      	add	sp, #16
 8009004:	bd10      	pop	{r4, pc}
 8009006:	bf00      	nop
 8009008:	20000070 	.word	0x20000070

0800900c <__tzcalc_limits>:
 800900c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	4605      	mov	r5, r0
 8009012:	f001 f975 	bl	800a300 <__gettzinfo>
 8009016:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800901a:	429d      	cmp	r5, r3
 800901c:	f340 8095 	ble.w	800914a <__tzcalc_limits+0x13e>
 8009020:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8009024:	18ac      	adds	r4, r5, r2
 8009026:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800902a:	f240 126d 	movw	r2, #365	; 0x16d
 800902e:	10a4      	asrs	r4, r4, #2
 8009030:	fb02 4403 	mla	r4, r2, r3, r4
 8009034:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009038:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800903c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009040:	441c      	add	r4, r3
 8009042:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009046:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800904a:	fb95 fcf3 	sdiv	ip, r5, r3
 800904e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8009052:	186a      	adds	r2, r5, r1
 8009054:	fabc f68c 	clz	r6, ip
 8009058:	fbb2 f2f3 	udiv	r2, r2, r3
 800905c:	f005 0303 	and.w	r3, r5, #3
 8009060:	4414      	add	r4, r2
 8009062:	2264      	movs	r2, #100	; 0x64
 8009064:	6045      	str	r5, [r0, #4]
 8009066:	fb95 f7f2 	sdiv	r7, r5, r2
 800906a:	0976      	lsrs	r6, r6, #5
 800906c:	fb02 5717 	mls	r7, r2, r7, r5
 8009070:	4601      	mov	r1, r0
 8009072:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	f04f 0a07 	mov.w	sl, #7
 800907c:	7a0d      	ldrb	r5, [r1, #8]
 800907e:	694b      	ldr	r3, [r1, #20]
 8009080:	2d4a      	cmp	r5, #74	; 0x4a
 8009082:	d12b      	bne.n	80090dc <__tzcalc_limits+0xd0>
 8009084:	9a00      	ldr	r2, [sp, #0]
 8009086:	18e5      	adds	r5, r4, r3
 8009088:	b902      	cbnz	r2, 800908c <__tzcalc_limits+0x80>
 800908a:	b917      	cbnz	r7, 8009092 <__tzcalc_limits+0x86>
 800908c:	f1bc 0f00 	cmp.w	ip, #0
 8009090:	d122      	bne.n	80090d8 <__tzcalc_limits+0xcc>
 8009092:	2b3b      	cmp	r3, #59	; 0x3b
 8009094:	bfd4      	ite	le
 8009096:	2300      	movle	r3, #0
 8009098:	2301      	movgt	r3, #1
 800909a:	442b      	add	r3, r5
 800909c:	3b01      	subs	r3, #1
 800909e:	698d      	ldr	r5, [r1, #24]
 80090a0:	4a2b      	ldr	r2, [pc, #172]	; (8009150 <__tzcalc_limits+0x144>)
 80090a2:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80090a6:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80090aa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80090ac:	18ed      	adds	r5, r5, r3
 80090ae:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80090b2:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80090b6:	3128      	adds	r1, #40	; 0x28
 80090b8:	458b      	cmp	fp, r1
 80090ba:	d1df      	bne.n	800907c <__tzcalc_limits+0x70>
 80090bc:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80090c0:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 80090c4:	428c      	cmp	r4, r1
 80090c6:	4193      	sbcs	r3, r2
 80090c8:	bfb4      	ite	lt
 80090ca:	2301      	movlt	r3, #1
 80090cc:	2300      	movge	r3, #0
 80090ce:	6003      	str	r3, [r0, #0]
 80090d0:	2001      	movs	r0, #1
 80090d2:	b003      	add	sp, #12
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	2300      	movs	r3, #0
 80090da:	e7de      	b.n	800909a <__tzcalc_limits+0x8e>
 80090dc:	2d44      	cmp	r5, #68	; 0x44
 80090de:	d101      	bne.n	80090e4 <__tzcalc_limits+0xd8>
 80090e0:	4423      	add	r3, r4
 80090e2:	e7dc      	b.n	800909e <__tzcalc_limits+0x92>
 80090e4:	9a00      	ldr	r2, [sp, #0]
 80090e6:	bb52      	cbnz	r2, 800913e <__tzcalc_limits+0x132>
 80090e8:	2f00      	cmp	r7, #0
 80090ea:	bf0c      	ite	eq
 80090ec:	4635      	moveq	r5, r6
 80090ee:	2501      	movne	r5, #1
 80090f0:	68ca      	ldr	r2, [r1, #12]
 80090f2:	9201      	str	r2, [sp, #4]
 80090f4:	4a17      	ldr	r2, [pc, #92]	; (8009154 <__tzcalc_limits+0x148>)
 80090f6:	f04f 0930 	mov.w	r9, #48	; 0x30
 80090fa:	fb09 2505 	mla	r5, r9, r5, r2
 80090fe:	46a6      	mov	lr, r4
 8009100:	f04f 0800 	mov.w	r8, #0
 8009104:	3d04      	subs	r5, #4
 8009106:	9a01      	ldr	r2, [sp, #4]
 8009108:	f108 0801 	add.w	r8, r8, #1
 800910c:	4542      	cmp	r2, r8
 800910e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8009112:	dc16      	bgt.n	8009142 <__tzcalc_limits+0x136>
 8009114:	f10e 0504 	add.w	r5, lr, #4
 8009118:	fb95 f8fa 	sdiv	r8, r5, sl
 800911c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8009120:	eba5 0508 	sub.w	r5, r5, r8
 8009124:	1b5d      	subs	r5, r3, r5
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	f103 33ff 	add.w	r3, r3, #4294967295
 800912c:	bf48      	it	mi
 800912e:	3507      	addmi	r5, #7
 8009130:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009134:	442b      	add	r3, r5
 8009136:	454b      	cmp	r3, r9
 8009138:	da05      	bge.n	8009146 <__tzcalc_limits+0x13a>
 800913a:	4473      	add	r3, lr
 800913c:	e7af      	b.n	800909e <__tzcalc_limits+0x92>
 800913e:	4635      	mov	r5, r6
 8009140:	e7d6      	b.n	80090f0 <__tzcalc_limits+0xe4>
 8009142:	44ce      	add	lr, r9
 8009144:	e7df      	b.n	8009106 <__tzcalc_limits+0xfa>
 8009146:	3b07      	subs	r3, #7
 8009148:	e7f5      	b.n	8009136 <__tzcalc_limits+0x12a>
 800914a:	2000      	movs	r0, #0
 800914c:	e7c1      	b.n	80090d2 <__tzcalc_limits+0xc6>
 800914e:	bf00      	nop
 8009150:	00015180 	.word	0x00015180
 8009154:	0800bcf8 	.word	0x0800bcf8

08009158 <__tz_lock>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__tz_lock+0x8>)
 800915a:	f000 bab2 	b.w	80096c2 <__retarget_lock_acquire>
 800915e:	bf00      	nop
 8009160:	200003df 	.word	0x200003df

08009164 <__tz_unlock>:
 8009164:	4801      	ldr	r0, [pc, #4]	; (800916c <__tz_unlock+0x8>)
 8009166:	f000 baae 	b.w	80096c6 <__retarget_lock_release>
 800916a:	bf00      	nop
 800916c:	200003df 	.word	0x200003df

08009170 <_tzset_unlocked>:
 8009170:	4b01      	ldr	r3, [pc, #4]	; (8009178 <_tzset_unlocked+0x8>)
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	f000 b802 	b.w	800917c <_tzset_unlocked_r>
 8009178:	20000070 	.word	0x20000070

0800917c <_tzset_unlocked_r>:
 800917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009180:	b08d      	sub	sp, #52	; 0x34
 8009182:	4607      	mov	r7, r0
 8009184:	f001 f8bc 	bl	800a300 <__gettzinfo>
 8009188:	49bb      	ldr	r1, [pc, #748]	; (8009478 <_tzset_unlocked_r+0x2fc>)
 800918a:	4dbc      	ldr	r5, [pc, #752]	; (800947c <_tzset_unlocked_r+0x300>)
 800918c:	4604      	mov	r4, r0
 800918e:	4638      	mov	r0, r7
 8009190:	f000 fb70 	bl	8009874 <_getenv_r>
 8009194:	4606      	mov	r6, r0
 8009196:	bb10      	cbnz	r0, 80091de <_tzset_unlocked_r+0x62>
 8009198:	4bb9      	ldr	r3, [pc, #740]	; (8009480 <_tzset_unlocked_r+0x304>)
 800919a:	4aba      	ldr	r2, [pc, #744]	; (8009484 <_tzset_unlocked_r+0x308>)
 800919c:	6018      	str	r0, [r3, #0]
 800919e:	4bba      	ldr	r3, [pc, #744]	; (8009488 <_tzset_unlocked_r+0x30c>)
 80091a0:	62a0      	str	r0, [r4, #40]	; 0x28
 80091a2:	6018      	str	r0, [r3, #0]
 80091a4:	4bb9      	ldr	r3, [pc, #740]	; (800948c <_tzset_unlocked_r+0x310>)
 80091a6:	6520      	str	r0, [r4, #80]	; 0x50
 80091a8:	e9c3 2200 	strd	r2, r2, [r3]
 80091ac:	214a      	movs	r1, #74	; 0x4a
 80091ae:	2200      	movs	r2, #0
 80091b0:	2300      	movs	r3, #0
 80091b2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80091b6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80091ba:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 80091be:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80091c2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80091c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80091ca:	6828      	ldr	r0, [r5, #0]
 80091cc:	7221      	strb	r1, [r4, #8]
 80091ce:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80091d2:	f000 fb63 	bl	800989c <free>
 80091d6:	602e      	str	r6, [r5, #0]
 80091d8:	b00d      	add	sp, #52	; 0x34
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091de:	6829      	ldr	r1, [r5, #0]
 80091e0:	2900      	cmp	r1, #0
 80091e2:	f040 808e 	bne.w	8009302 <_tzset_unlocked_r+0x186>
 80091e6:	6828      	ldr	r0, [r5, #0]
 80091e8:	f000 fb58 	bl	800989c <free>
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7f6 fff9 	bl	80001e4 <strlen>
 80091f2:	1c41      	adds	r1, r0, #1
 80091f4:	4638      	mov	r0, r7
 80091f6:	f000 fb79 	bl	80098ec <_malloc_r>
 80091fa:	6028      	str	r0, [r5, #0]
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f040 8086 	bne.w	800930e <_tzset_unlocked_r+0x192>
 8009202:	4aa1      	ldr	r2, [pc, #644]	; (8009488 <_tzset_unlocked_r+0x30c>)
 8009204:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800948c <_tzset_unlocked_r+0x310>
 8009208:	f8df a274 	ldr.w	sl, [pc, #628]	; 8009480 <_tzset_unlocked_r+0x304>
 800920c:	2300      	movs	r3, #0
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	4a9f      	ldr	r2, [pc, #636]	; (8009490 <_tzset_unlocked_r+0x314>)
 8009212:	f8ca 3000 	str.w	r3, [sl]
 8009216:	2000      	movs	r0, #0
 8009218:	2100      	movs	r1, #0
 800921a:	e9c8 2200 	strd	r2, r2, [r8]
 800921e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8009222:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8009226:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800922a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800922e:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8009232:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009236:	224a      	movs	r2, #74	; 0x4a
 8009238:	7222      	strb	r2, [r4, #8]
 800923a:	62a3      	str	r3, [r4, #40]	; 0x28
 800923c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8009240:	6523      	str	r3, [r4, #80]	; 0x50
 8009242:	7833      	ldrb	r3, [r6, #0]
 8009244:	2b3a      	cmp	r3, #58	; 0x3a
 8009246:	bf08      	it	eq
 8009248:	3601      	addeq	r6, #1
 800924a:	7833      	ldrb	r3, [r6, #0]
 800924c:	2b3c      	cmp	r3, #60	; 0x3c
 800924e:	d162      	bne.n	8009316 <_tzset_unlocked_r+0x19a>
 8009250:	1c75      	adds	r5, r6, #1
 8009252:	4a90      	ldr	r2, [pc, #576]	; (8009494 <_tzset_unlocked_r+0x318>)
 8009254:	4990      	ldr	r1, [pc, #576]	; (8009498 <_tzset_unlocked_r+0x31c>)
 8009256:	ab0a      	add	r3, sp, #40	; 0x28
 8009258:	4628      	mov	r0, r5
 800925a:	f000 fff9 	bl	800a250 <siscanf>
 800925e:	2800      	cmp	r0, #0
 8009260:	ddba      	ble.n	80091d8 <_tzset_unlocked_r+0x5c>
 8009262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009264:	1eda      	subs	r2, r3, #3
 8009266:	2a07      	cmp	r2, #7
 8009268:	d8b6      	bhi.n	80091d8 <_tzset_unlocked_r+0x5c>
 800926a:	5ceb      	ldrb	r3, [r5, r3]
 800926c:	2b3e      	cmp	r3, #62	; 0x3e
 800926e:	d1b3      	bne.n	80091d8 <_tzset_unlocked_r+0x5c>
 8009270:	3602      	adds	r6, #2
 8009272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009274:	18f5      	adds	r5, r6, r3
 8009276:	5cf3      	ldrb	r3, [r6, r3]
 8009278:	2b2d      	cmp	r3, #45	; 0x2d
 800927a:	d15a      	bne.n	8009332 <_tzset_unlocked_r+0x1b6>
 800927c:	3501      	adds	r5, #1
 800927e:	f04f 39ff 	mov.w	r9, #4294967295
 8009282:	2300      	movs	r3, #0
 8009284:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009288:	f8ad 3020 	strh.w	r3, [sp, #32]
 800928c:	af08      	add	r7, sp, #32
 800928e:	ab0a      	add	r3, sp, #40	; 0x28
 8009290:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8009294:	9303      	str	r3, [sp, #12]
 8009296:	f10d 031e 	add.w	r3, sp, #30
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	497f      	ldr	r1, [pc, #508]	; (800949c <_tzset_unlocked_r+0x320>)
 800929e:	ab0a      	add	r3, sp, #40	; 0x28
 80092a0:	aa07      	add	r2, sp, #28
 80092a2:	4628      	mov	r0, r5
 80092a4:	f000 ffd4 	bl	800a250 <siscanf>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	dd95      	ble.n	80091d8 <_tzset_unlocked_r+0x5c>
 80092ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80092b0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80092b4:	223c      	movs	r2, #60	; 0x3c
 80092b6:	fb02 6603 	mla	r6, r2, r3, r6
 80092ba:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80092be:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80092c2:	fb02 6603 	mla	r6, r2, r3, r6
 80092c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c8:	fb09 f606 	mul.w	r6, r9, r6
 80092cc:	eb05 0903 	add.w	r9, r5, r3
 80092d0:	5ceb      	ldrb	r3, [r5, r3]
 80092d2:	2b3c      	cmp	r3, #60	; 0x3c
 80092d4:	f040 80ec 	bne.w	80094b0 <_tzset_unlocked_r+0x334>
 80092d8:	f109 0501 	add.w	r5, r9, #1
 80092dc:	4a70      	ldr	r2, [pc, #448]	; (80094a0 <_tzset_unlocked_r+0x324>)
 80092de:	496e      	ldr	r1, [pc, #440]	; (8009498 <_tzset_unlocked_r+0x31c>)
 80092e0:	ab0a      	add	r3, sp, #40	; 0x28
 80092e2:	4628      	mov	r0, r5
 80092e4:	f000 ffb4 	bl	800a250 <siscanf>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	dc28      	bgt.n	800933e <_tzset_unlocked_r+0x1c2>
 80092ec:	f899 3001 	ldrb.w	r3, [r9, #1]
 80092f0:	2b3e      	cmp	r3, #62	; 0x3e
 80092f2:	d124      	bne.n	800933e <_tzset_unlocked_r+0x1c2>
 80092f4:	4b67      	ldr	r3, [pc, #412]	; (8009494 <_tzset_unlocked_r+0x318>)
 80092f6:	62a6      	str	r6, [r4, #40]	; 0x28
 80092f8:	e9c8 3300 	strd	r3, r3, [r8]
 80092fc:	f8ca 6000 	str.w	r6, [sl]
 8009300:	e76a      	b.n	80091d8 <_tzset_unlocked_r+0x5c>
 8009302:	f7f6 ff65 	bl	80001d0 <strcmp>
 8009306:	2800      	cmp	r0, #0
 8009308:	f47f af6d 	bne.w	80091e6 <_tzset_unlocked_r+0x6a>
 800930c:	e764      	b.n	80091d8 <_tzset_unlocked_r+0x5c>
 800930e:	4631      	mov	r1, r6
 8009310:	f000 f9db 	bl	80096ca <strcpy>
 8009314:	e775      	b.n	8009202 <_tzset_unlocked_r+0x86>
 8009316:	4a5f      	ldr	r2, [pc, #380]	; (8009494 <_tzset_unlocked_r+0x318>)
 8009318:	4962      	ldr	r1, [pc, #392]	; (80094a4 <_tzset_unlocked_r+0x328>)
 800931a:	ab0a      	add	r3, sp, #40	; 0x28
 800931c:	4630      	mov	r0, r6
 800931e:	f000 ff97 	bl	800a250 <siscanf>
 8009322:	2800      	cmp	r0, #0
 8009324:	f77f af58 	ble.w	80091d8 <_tzset_unlocked_r+0x5c>
 8009328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800932a:	3b03      	subs	r3, #3
 800932c:	2b07      	cmp	r3, #7
 800932e:	d9a0      	bls.n	8009272 <_tzset_unlocked_r+0xf6>
 8009330:	e752      	b.n	80091d8 <_tzset_unlocked_r+0x5c>
 8009332:	2b2b      	cmp	r3, #43	; 0x2b
 8009334:	bf08      	it	eq
 8009336:	3501      	addeq	r5, #1
 8009338:	f04f 0901 	mov.w	r9, #1
 800933c:	e7a1      	b.n	8009282 <_tzset_unlocked_r+0x106>
 800933e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009340:	1eda      	subs	r2, r3, #3
 8009342:	2a07      	cmp	r2, #7
 8009344:	f63f af48 	bhi.w	80091d8 <_tzset_unlocked_r+0x5c>
 8009348:	5ceb      	ldrb	r3, [r5, r3]
 800934a:	2b3e      	cmp	r3, #62	; 0x3e
 800934c:	f47f af44 	bne.w	80091d8 <_tzset_unlocked_r+0x5c>
 8009350:	f109 0902 	add.w	r9, r9, #2
 8009354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009356:	eb09 0503 	add.w	r5, r9, r3
 800935a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800935e:	2b2d      	cmp	r3, #45	; 0x2d
 8009360:	f040 80b5 	bne.w	80094ce <_tzset_unlocked_r+0x352>
 8009364:	3501      	adds	r5, #1
 8009366:	f04f 39ff 	mov.w	r9, #4294967295
 800936a:	2300      	movs	r3, #0
 800936c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009370:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009374:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009378:	930a      	str	r3, [sp, #40]	; 0x28
 800937a:	ab0a      	add	r3, sp, #40	; 0x28
 800937c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	f10d 031e 	add.w	r3, sp, #30
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	4944      	ldr	r1, [pc, #272]	; (800949c <_tzset_unlocked_r+0x320>)
 800938a:	ab0a      	add	r3, sp, #40	; 0x28
 800938c:	aa07      	add	r2, sp, #28
 800938e:	4628      	mov	r0, r5
 8009390:	f000 ff5e 	bl	800a250 <siscanf>
 8009394:	2800      	cmp	r0, #0
 8009396:	f300 80a0 	bgt.w	80094da <_tzset_unlocked_r+0x35e>
 800939a:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 800939e:	9304      	str	r3, [sp, #16]
 80093a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a2:	4627      	mov	r7, r4
 80093a4:	441d      	add	r5, r3
 80093a6:	f04f 0b00 	mov.w	fp, #0
 80093aa:	782b      	ldrb	r3, [r5, #0]
 80093ac:	2b2c      	cmp	r3, #44	; 0x2c
 80093ae:	bf08      	it	eq
 80093b0:	3501      	addeq	r5, #1
 80093b2:	f895 9000 	ldrb.w	r9, [r5]
 80093b6:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 80093ba:	f040 80a1 	bne.w	8009500 <_tzset_unlocked_r+0x384>
 80093be:	ab0a      	add	r3, sp, #40	; 0x28
 80093c0:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 80093c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80093c8:	aa09      	add	r2, sp, #36	; 0x24
 80093ca:	9200      	str	r2, [sp, #0]
 80093cc:	4936      	ldr	r1, [pc, #216]	; (80094a8 <_tzset_unlocked_r+0x32c>)
 80093ce:	9303      	str	r3, [sp, #12]
 80093d0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80093d4:	4628      	mov	r0, r5
 80093d6:	f000 ff3b 	bl	800a250 <siscanf>
 80093da:	2803      	cmp	r0, #3
 80093dc:	f47f aefc 	bne.w	80091d8 <_tzset_unlocked_r+0x5c>
 80093e0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80093e4:	1e4b      	subs	r3, r1, #1
 80093e6:	2b0b      	cmp	r3, #11
 80093e8:	f63f aef6 	bhi.w	80091d8 <_tzset_unlocked_r+0x5c>
 80093ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80093f0:	1e53      	subs	r3, r2, #1
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	f63f aef0 	bhi.w	80091d8 <_tzset_unlocked_r+0x5c>
 80093f8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80093fc:	2b06      	cmp	r3, #6
 80093fe:	f63f aeeb 	bhi.w	80091d8 <_tzset_unlocked_r+0x5c>
 8009402:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009406:	f887 9008 	strb.w	r9, [r7, #8]
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940e:	eb05 0903 	add.w	r9, r5, r3
 8009412:	2500      	movs	r5, #0
 8009414:	2302      	movs	r3, #2
 8009416:	f8ad 301c 	strh.w	r3, [sp, #28]
 800941a:	f8ad 501e 	strh.w	r5, [sp, #30]
 800941e:	f8ad 5020 	strh.w	r5, [sp, #32]
 8009422:	950a      	str	r5, [sp, #40]	; 0x28
 8009424:	f899 3000 	ldrb.w	r3, [r9]
 8009428:	2b2f      	cmp	r3, #47	; 0x2f
 800942a:	f040 8095 	bne.w	8009558 <_tzset_unlocked_r+0x3dc>
 800942e:	ab0a      	add	r3, sp, #40	; 0x28
 8009430:	aa08      	add	r2, sp, #32
 8009432:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009436:	f10d 021e 	add.w	r2, sp, #30
 800943a:	9200      	str	r2, [sp, #0]
 800943c:	491b      	ldr	r1, [pc, #108]	; (80094ac <_tzset_unlocked_r+0x330>)
 800943e:	9303      	str	r3, [sp, #12]
 8009440:	aa07      	add	r2, sp, #28
 8009442:	4648      	mov	r0, r9
 8009444:	f000 ff04 	bl	800a250 <siscanf>
 8009448:	42a8      	cmp	r0, r5
 800944a:	f300 8085 	bgt.w	8009558 <_tzset_unlocked_r+0x3dc>
 800944e:	214a      	movs	r1, #74	; 0x4a
 8009450:	2200      	movs	r2, #0
 8009452:	2300      	movs	r3, #0
 8009454:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8009458:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800945c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009464:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 8009468:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800946c:	7221      	strb	r1, [r4, #8]
 800946e:	62a5      	str	r5, [r4, #40]	; 0x28
 8009470:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8009474:	6525      	str	r5, [r4, #80]	; 0x50
 8009476:	e6af      	b.n	80091d8 <_tzset_unlocked_r+0x5c>
 8009478:	0800bdb1 	.word	0x0800bdb1
 800947c:	200003cc 	.word	0x200003cc
 8009480:	200003d4 	.word	0x200003d4
 8009484:	0800bdb4 	.word	0x0800bdb4
 8009488:	200003d0 	.word	0x200003d0
 800948c:	2000001c 	.word	0x2000001c
 8009490:	0800c063 	.word	0x0800c063
 8009494:	200003c0 	.word	0x200003c0
 8009498:	0800bdb8 	.word	0x0800bdb8
 800949c:	0800bded 	.word	0x0800bded
 80094a0:	200003b4 	.word	0x200003b4
 80094a4:	0800bdcb 	.word	0x0800bdcb
 80094a8:	0800bdd9 	.word	0x0800bdd9
 80094ac:	0800bdec 	.word	0x0800bdec
 80094b0:	4a3e      	ldr	r2, [pc, #248]	; (80095ac <_tzset_unlocked_r+0x430>)
 80094b2:	493f      	ldr	r1, [pc, #252]	; (80095b0 <_tzset_unlocked_r+0x434>)
 80094b4:	ab0a      	add	r3, sp, #40	; 0x28
 80094b6:	4648      	mov	r0, r9
 80094b8:	f000 feca 	bl	800a250 <siscanf>
 80094bc:	2800      	cmp	r0, #0
 80094be:	f77f af19 	ble.w	80092f4 <_tzset_unlocked_r+0x178>
 80094c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c4:	3b03      	subs	r3, #3
 80094c6:	2b07      	cmp	r3, #7
 80094c8:	f67f af44 	bls.w	8009354 <_tzset_unlocked_r+0x1d8>
 80094cc:	e684      	b.n	80091d8 <_tzset_unlocked_r+0x5c>
 80094ce:	2b2b      	cmp	r3, #43	; 0x2b
 80094d0:	bf08      	it	eq
 80094d2:	3501      	addeq	r5, #1
 80094d4:	f04f 0901 	mov.w	r9, #1
 80094d8:	e747      	b.n	800936a <_tzset_unlocked_r+0x1ee>
 80094da:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80094de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80094e2:	213c      	movs	r1, #60	; 0x3c
 80094e4:	fb01 3302 	mla	r3, r1, r2, r3
 80094e8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80094ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80094f0:	fb01 3302 	mla	r3, r1, r2, r3
 80094f4:	fb09 f303 	mul.w	r3, r9, r3
 80094f8:	e751      	b.n	800939e <_tzset_unlocked_r+0x222>
 80094fa:	f04f 0b01 	mov.w	fp, #1
 80094fe:	e754      	b.n	80093aa <_tzset_unlocked_r+0x22e>
 8009500:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 8009504:	bf06      	itte	eq
 8009506:	3501      	addeq	r5, #1
 8009508:	464b      	moveq	r3, r9
 800950a:	2344      	movne	r3, #68	; 0x44
 800950c:	220a      	movs	r2, #10
 800950e:	a90b      	add	r1, sp, #44	; 0x2c
 8009510:	4628      	mov	r0, r5
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	f000 faea 	bl	8009aec <strtoul>
 8009518:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800951c:	9b05      	ldr	r3, [sp, #20]
 800951e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8009522:	45a9      	cmp	r9, r5
 8009524:	d114      	bne.n	8009550 <_tzset_unlocked_r+0x3d4>
 8009526:	234d      	movs	r3, #77	; 0x4d
 8009528:	f1bb 0f00 	cmp.w	fp, #0
 800952c:	d107      	bne.n	800953e <_tzset_unlocked_r+0x3c2>
 800952e:	7223      	strb	r3, [r4, #8]
 8009530:	2103      	movs	r1, #3
 8009532:	2302      	movs	r3, #2
 8009534:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8009538:	f8c4 b014 	str.w	fp, [r4, #20]
 800953c:	e769      	b.n	8009412 <_tzset_unlocked_r+0x296>
 800953e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8009542:	220b      	movs	r2, #11
 8009544:	2301      	movs	r3, #1
 8009546:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 800954a:	2300      	movs	r3, #0
 800954c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800954e:	e760      	b.n	8009412 <_tzset_unlocked_r+0x296>
 8009550:	b280      	uxth	r0, r0
 8009552:	723b      	strb	r3, [r7, #8]
 8009554:	6178      	str	r0, [r7, #20]
 8009556:	e75c      	b.n	8009412 <_tzset_unlocked_r+0x296>
 8009558:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800955c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009560:	213c      	movs	r1, #60	; 0x3c
 8009562:	fb01 3302 	mla	r3, r1, r2, r3
 8009566:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800956a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800956e:	fb01 3302 	mla	r3, r1, r2, r3
 8009572:	61bb      	str	r3, [r7, #24]
 8009574:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009576:	3728      	adds	r7, #40	; 0x28
 8009578:	444d      	add	r5, r9
 800957a:	f1bb 0f00 	cmp.w	fp, #0
 800957e:	d0bc      	beq.n	80094fa <_tzset_unlocked_r+0x37e>
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	6523      	str	r3, [r4, #80]	; 0x50
 8009584:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <_tzset_unlocked_r+0x438>)
 8009586:	f8c8 3000 	str.w	r3, [r8]
 800958a:	6860      	ldr	r0, [r4, #4]
 800958c:	4b07      	ldr	r3, [pc, #28]	; (80095ac <_tzset_unlocked_r+0x430>)
 800958e:	62a6      	str	r6, [r4, #40]	; 0x28
 8009590:	f8c8 3004 	str.w	r3, [r8, #4]
 8009594:	f7ff fd3a 	bl	800900c <__tzcalc_limits>
 8009598:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800959a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800959c:	f8ca 2000 	str.w	r2, [sl]
 80095a0:	1a9b      	subs	r3, r3, r2
 80095a2:	4a05      	ldr	r2, [pc, #20]	; (80095b8 <_tzset_unlocked_r+0x43c>)
 80095a4:	bf18      	it	ne
 80095a6:	2301      	movne	r3, #1
 80095a8:	6013      	str	r3, [r2, #0]
 80095aa:	e615      	b.n	80091d8 <_tzset_unlocked_r+0x5c>
 80095ac:	200003b4 	.word	0x200003b4
 80095b0:	0800bdcb 	.word	0x0800bdcb
 80095b4:	200003c0 	.word	0x200003c0
 80095b8:	200003d0 	.word	0x200003d0

080095bc <_close_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d06      	ldr	r5, [pc, #24]	; (80095d8 <_close_r+0x1c>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7f9 fed8 	bl	800337c <_close>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_close_r+0x1a>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_close_r+0x1a>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	200003d8 	.word	0x200003d8

080095dc <_gettimeofday_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4d07      	ldr	r5, [pc, #28]	; (80095fc <_gettimeofday_r+0x20>)
 80095e0:	2300      	movs	r3, #0
 80095e2:	4604      	mov	r4, r0
 80095e4:	4608      	mov	r0, r1
 80095e6:	4611      	mov	r1, r2
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	f7f9 fcaf 	bl	8002f4c <_gettimeofday>
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	d102      	bne.n	80095f8 <_gettimeofday_r+0x1c>
 80095f2:	682b      	ldr	r3, [r5, #0]
 80095f4:	b103      	cbz	r3, 80095f8 <_gettimeofday_r+0x1c>
 80095f6:	6023      	str	r3, [r4, #0]
 80095f8:	bd38      	pop	{r3, r4, r5, pc}
 80095fa:	bf00      	nop
 80095fc:	200003d8 	.word	0x200003d8

08009600 <_lseek_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d07      	ldr	r5, [pc, #28]	; (8009620 <_lseek_r+0x20>)
 8009604:	4604      	mov	r4, r0
 8009606:	4608      	mov	r0, r1
 8009608:	4611      	mov	r1, r2
 800960a:	2200      	movs	r2, #0
 800960c:	602a      	str	r2, [r5, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	f7f9 fedb 	bl	80033ca <_lseek>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_lseek_r+0x1e>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b103      	cbz	r3, 800961e <_lseek_r+0x1e>
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	200003d8 	.word	0x200003d8

08009624 <_read_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4d07      	ldr	r5, [pc, #28]	; (8009644 <_read_r+0x20>)
 8009628:	4604      	mov	r4, r0
 800962a:	4608      	mov	r0, r1
 800962c:	4611      	mov	r1, r2
 800962e:	2200      	movs	r2, #0
 8009630:	602a      	str	r2, [r5, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	f7f9 fe69 	bl	800330a <_read>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d102      	bne.n	8009642 <_read_r+0x1e>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	b103      	cbz	r3, 8009642 <_read_r+0x1e>
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	200003d8 	.word	0x200003d8

08009648 <_write_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d07      	ldr	r5, [pc, #28]	; (8009668 <_write_r+0x20>)
 800964c:	4604      	mov	r4, r0
 800964e:	4608      	mov	r0, r1
 8009650:	4611      	mov	r1, r2
 8009652:	2200      	movs	r2, #0
 8009654:	602a      	str	r2, [r5, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	f7f9 fe74 	bl	8003344 <_write>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_write_r+0x1e>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_write_r+0x1e>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	200003d8 	.word	0x200003d8

0800966c <__errno>:
 800966c:	4b01      	ldr	r3, [pc, #4]	; (8009674 <__errno+0x8>)
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	20000070 	.word	0x20000070

08009678 <__libc_init_array>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	4d0d      	ldr	r5, [pc, #52]	; (80096b0 <__libc_init_array+0x38>)
 800967c:	4c0d      	ldr	r4, [pc, #52]	; (80096b4 <__libc_init_array+0x3c>)
 800967e:	1b64      	subs	r4, r4, r5
 8009680:	10a4      	asrs	r4, r4, #2
 8009682:	2600      	movs	r6, #0
 8009684:	42a6      	cmp	r6, r4
 8009686:	d109      	bne.n	800969c <__libc_init_array+0x24>
 8009688:	4d0b      	ldr	r5, [pc, #44]	; (80096b8 <__libc_init_array+0x40>)
 800968a:	4c0c      	ldr	r4, [pc, #48]	; (80096bc <__libc_init_array+0x44>)
 800968c:	f001 fffa 	bl	800b684 <_init>
 8009690:	1b64      	subs	r4, r4, r5
 8009692:	10a4      	asrs	r4, r4, #2
 8009694:	2600      	movs	r6, #0
 8009696:	42a6      	cmp	r6, r4
 8009698:	d105      	bne.n	80096a6 <__libc_init_array+0x2e>
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a0:	4798      	blx	r3
 80096a2:	3601      	adds	r6, #1
 80096a4:	e7ee      	b.n	8009684 <__libc_init_array+0xc>
 80096a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096aa:	4798      	blx	r3
 80096ac:	3601      	adds	r6, #1
 80096ae:	e7f2      	b.n	8009696 <__libc_init_array+0x1e>
 80096b0:	0800c1bc 	.word	0x0800c1bc
 80096b4:	0800c1bc 	.word	0x0800c1bc
 80096b8:	0800c1bc 	.word	0x0800c1bc
 80096bc:	0800c1c0 	.word	0x0800c1c0

080096c0 <__retarget_lock_init_recursive>:
 80096c0:	4770      	bx	lr

080096c2 <__retarget_lock_acquire>:
 80096c2:	4770      	bx	lr

080096c4 <__retarget_lock_acquire_recursive>:
 80096c4:	4770      	bx	lr

080096c6 <__retarget_lock_release>:
 80096c6:	4770      	bx	lr

080096c8 <__retarget_lock_release_recursive>:
 80096c8:	4770      	bx	lr

080096ca <strcpy>:
 80096ca:	4603      	mov	r3, r0
 80096cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096d0:	f803 2b01 	strb.w	r2, [r3], #1
 80096d4:	2a00      	cmp	r2, #0
 80096d6:	d1f9      	bne.n	80096cc <strcpy+0x2>
 80096d8:	4770      	bx	lr

080096da <memcpy>:
 80096da:	440a      	add	r2, r1
 80096dc:	4291      	cmp	r1, r2
 80096de:	f100 33ff 	add.w	r3, r0, #4294967295
 80096e2:	d100      	bne.n	80096e6 <memcpy+0xc>
 80096e4:	4770      	bx	lr
 80096e6:	b510      	push	{r4, lr}
 80096e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096f0:	4291      	cmp	r1, r2
 80096f2:	d1f9      	bne.n	80096e8 <memcpy+0xe>
 80096f4:	bd10      	pop	{r4, pc}

080096f6 <abs>:
 80096f6:	2800      	cmp	r0, #0
 80096f8:	bfb8      	it	lt
 80096fa:	4240      	neglt	r0, r0
 80096fc:	4770      	bx	lr
	...

08009700 <__assert_func>:
 8009700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009702:	4614      	mov	r4, r2
 8009704:	461a      	mov	r2, r3
 8009706:	4b09      	ldr	r3, [pc, #36]	; (800972c <__assert_func+0x2c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4605      	mov	r5, r0
 800970c:	68d8      	ldr	r0, [r3, #12]
 800970e:	b14c      	cbz	r4, 8009724 <__assert_func+0x24>
 8009710:	4b07      	ldr	r3, [pc, #28]	; (8009730 <__assert_func+0x30>)
 8009712:	9100      	str	r1, [sp, #0]
 8009714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009718:	4906      	ldr	r1, [pc, #24]	; (8009734 <__assert_func+0x34>)
 800971a:	462b      	mov	r3, r5
 800971c:	f000 fd86 	bl	800a22c <fiprintf>
 8009720:	f000 fea8 	bl	800a474 <abort>
 8009724:	4b04      	ldr	r3, [pc, #16]	; (8009738 <__assert_func+0x38>)
 8009726:	461c      	mov	r4, r3
 8009728:	e7f3      	b.n	8009712 <__assert_func+0x12>
 800972a:	bf00      	nop
 800972c:	20000070 	.word	0x20000070
 8009730:	0800c028 	.word	0x0800c028
 8009734:	0800c035 	.word	0x0800c035
 8009738:	0800c063 	.word	0x0800c063

0800973c <div>:
 800973c:	2900      	cmp	r1, #0
 800973e:	b510      	push	{r4, lr}
 8009740:	fb91 f4f2 	sdiv	r4, r1, r2
 8009744:	fb02 1314 	mls	r3, r2, r4, r1
 8009748:	db06      	blt.n	8009758 <div+0x1c>
 800974a:	2b00      	cmp	r3, #0
 800974c:	da01      	bge.n	8009752 <div+0x16>
 800974e:	3401      	adds	r4, #1
 8009750:	1a9b      	subs	r3, r3, r2
 8009752:	e9c0 4300 	strd	r4, r3, [r0]
 8009756:	bd10      	pop	{r4, pc}
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfc4      	itt	gt
 800975c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8009760:	189b      	addgt	r3, r3, r2
 8009762:	e7f6      	b.n	8009752 <div+0x16>

08009764 <_free_r>:
 8009764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009766:	2900      	cmp	r1, #0
 8009768:	d044      	beq.n	80097f4 <_free_r+0x90>
 800976a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800976e:	9001      	str	r0, [sp, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f1a1 0404 	sub.w	r4, r1, #4
 8009776:	bfb8      	it	lt
 8009778:	18e4      	addlt	r4, r4, r3
 800977a:	f000 f937 	bl	80099ec <__malloc_lock>
 800977e:	4a1e      	ldr	r2, [pc, #120]	; (80097f8 <_free_r+0x94>)
 8009780:	9801      	ldr	r0, [sp, #4]
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	b933      	cbnz	r3, 8009794 <_free_r+0x30>
 8009786:	6063      	str	r3, [r4, #4]
 8009788:	6014      	str	r4, [r2, #0]
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009790:	f000 b932 	b.w	80099f8 <__malloc_unlock>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d908      	bls.n	80097aa <_free_r+0x46>
 8009798:	6825      	ldr	r5, [r4, #0]
 800979a:	1961      	adds	r1, r4, r5
 800979c:	428b      	cmp	r3, r1
 800979e:	bf01      	itttt	eq
 80097a0:	6819      	ldreq	r1, [r3, #0]
 80097a2:	685b      	ldreq	r3, [r3, #4]
 80097a4:	1949      	addeq	r1, r1, r5
 80097a6:	6021      	streq	r1, [r4, #0]
 80097a8:	e7ed      	b.n	8009786 <_free_r+0x22>
 80097aa:	461a      	mov	r2, r3
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	b10b      	cbz	r3, 80097b4 <_free_r+0x50>
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	d9fa      	bls.n	80097aa <_free_r+0x46>
 80097b4:	6811      	ldr	r1, [r2, #0]
 80097b6:	1855      	adds	r5, r2, r1
 80097b8:	42a5      	cmp	r5, r4
 80097ba:	d10b      	bne.n	80097d4 <_free_r+0x70>
 80097bc:	6824      	ldr	r4, [r4, #0]
 80097be:	4421      	add	r1, r4
 80097c0:	1854      	adds	r4, r2, r1
 80097c2:	42a3      	cmp	r3, r4
 80097c4:	6011      	str	r1, [r2, #0]
 80097c6:	d1e0      	bne.n	800978a <_free_r+0x26>
 80097c8:	681c      	ldr	r4, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	6053      	str	r3, [r2, #4]
 80097ce:	440c      	add	r4, r1
 80097d0:	6014      	str	r4, [r2, #0]
 80097d2:	e7da      	b.n	800978a <_free_r+0x26>
 80097d4:	d902      	bls.n	80097dc <_free_r+0x78>
 80097d6:	230c      	movs	r3, #12
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	e7d6      	b.n	800978a <_free_r+0x26>
 80097dc:	6825      	ldr	r5, [r4, #0]
 80097de:	1961      	adds	r1, r4, r5
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf04      	itt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	bf04      	itt	eq
 80097ec:	1949      	addeq	r1, r1, r5
 80097ee:	6021      	streq	r1, [r4, #0]
 80097f0:	6054      	str	r4, [r2, #4]
 80097f2:	e7ca      	b.n	800978a <_free_r+0x26>
 80097f4:	b003      	add	sp, #12
 80097f6:	bd30      	pop	{r4, r5, pc}
 80097f8:	200003e0 	.word	0x200003e0

080097fc <_findenv_r>:
 80097fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8009870 <_findenv_r+0x74>
 8009804:	4607      	mov	r7, r0
 8009806:	4689      	mov	r9, r1
 8009808:	4616      	mov	r6, r2
 800980a:	f000 fe3b 	bl	800a484 <__env_lock>
 800980e:	f8da 4000 	ldr.w	r4, [sl]
 8009812:	b134      	cbz	r4, 8009822 <_findenv_r+0x26>
 8009814:	464b      	mov	r3, r9
 8009816:	4698      	mov	r8, r3
 8009818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800981c:	b13a      	cbz	r2, 800982e <_findenv_r+0x32>
 800981e:	2a3d      	cmp	r2, #61	; 0x3d
 8009820:	d1f9      	bne.n	8009816 <_findenv_r+0x1a>
 8009822:	4638      	mov	r0, r7
 8009824:	f000 fe34 	bl	800a490 <__env_unlock>
 8009828:	2000      	movs	r0, #0
 800982a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	eba8 0809 	sub.w	r8, r8, r9
 8009832:	46a3      	mov	fp, r4
 8009834:	f854 0b04 	ldr.w	r0, [r4], #4
 8009838:	2800      	cmp	r0, #0
 800983a:	d0f2      	beq.n	8009822 <_findenv_r+0x26>
 800983c:	4642      	mov	r2, r8
 800983e:	4649      	mov	r1, r9
 8009840:	f000 fd4c 	bl	800a2dc <strncmp>
 8009844:	2800      	cmp	r0, #0
 8009846:	d1f4      	bne.n	8009832 <_findenv_r+0x36>
 8009848:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800984c:	eb03 0508 	add.w	r5, r3, r8
 8009850:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009854:	2b3d      	cmp	r3, #61	; 0x3d
 8009856:	d1ec      	bne.n	8009832 <_findenv_r+0x36>
 8009858:	f8da 3000 	ldr.w	r3, [sl]
 800985c:	ebab 0303 	sub.w	r3, fp, r3
 8009860:	109b      	asrs	r3, r3, #2
 8009862:	4638      	mov	r0, r7
 8009864:	6033      	str	r3, [r6, #0]
 8009866:	f000 fe13 	bl	800a490 <__env_unlock>
 800986a:	1c68      	adds	r0, r5, #1
 800986c:	e7dd      	b.n	800982a <_findenv_r+0x2e>
 800986e:	bf00      	nop
 8009870:	20000000 	.word	0x20000000

08009874 <_getenv_r>:
 8009874:	b507      	push	{r0, r1, r2, lr}
 8009876:	aa01      	add	r2, sp, #4
 8009878:	f7ff ffc0 	bl	80097fc <_findenv_r>
 800987c:	b003      	add	sp, #12
 800987e:	f85d fb04 	ldr.w	pc, [sp], #4

08009882 <labs>:
 8009882:	2800      	cmp	r0, #0
 8009884:	bfb8      	it	lt
 8009886:	4240      	neglt	r0, r0
 8009888:	4770      	bx	lr
	...

0800988c <malloc>:
 800988c:	4b02      	ldr	r3, [pc, #8]	; (8009898 <malloc+0xc>)
 800988e:	4601      	mov	r1, r0
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	f000 b82b 	b.w	80098ec <_malloc_r>
 8009896:	bf00      	nop
 8009898:	20000070 	.word	0x20000070

0800989c <free>:
 800989c:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <free+0xc>)
 800989e:	4601      	mov	r1, r0
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	f7ff bf5f 	b.w	8009764 <_free_r>
 80098a6:	bf00      	nop
 80098a8:	20000070 	.word	0x20000070

080098ac <sbrk_aligned>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	4e0e      	ldr	r6, [pc, #56]	; (80098e8 <sbrk_aligned+0x3c>)
 80098b0:	460c      	mov	r4, r1
 80098b2:	6831      	ldr	r1, [r6, #0]
 80098b4:	4605      	mov	r5, r0
 80098b6:	b911      	cbnz	r1, 80098be <sbrk_aligned+0x12>
 80098b8:	f000 fdcc 	bl	800a454 <_sbrk_r>
 80098bc:	6030      	str	r0, [r6, #0]
 80098be:	4621      	mov	r1, r4
 80098c0:	4628      	mov	r0, r5
 80098c2:	f000 fdc7 	bl	800a454 <_sbrk_r>
 80098c6:	1c43      	adds	r3, r0, #1
 80098c8:	d00a      	beq.n	80098e0 <sbrk_aligned+0x34>
 80098ca:	1cc4      	adds	r4, r0, #3
 80098cc:	f024 0403 	bic.w	r4, r4, #3
 80098d0:	42a0      	cmp	r0, r4
 80098d2:	d007      	beq.n	80098e4 <sbrk_aligned+0x38>
 80098d4:	1a21      	subs	r1, r4, r0
 80098d6:	4628      	mov	r0, r5
 80098d8:	f000 fdbc 	bl	800a454 <_sbrk_r>
 80098dc:	3001      	adds	r0, #1
 80098de:	d101      	bne.n	80098e4 <sbrk_aligned+0x38>
 80098e0:	f04f 34ff 	mov.w	r4, #4294967295
 80098e4:	4620      	mov	r0, r4
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	200003e4 	.word	0x200003e4

080098ec <_malloc_r>:
 80098ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f0:	1ccd      	adds	r5, r1, #3
 80098f2:	f025 0503 	bic.w	r5, r5, #3
 80098f6:	3508      	adds	r5, #8
 80098f8:	2d0c      	cmp	r5, #12
 80098fa:	bf38      	it	cc
 80098fc:	250c      	movcc	r5, #12
 80098fe:	2d00      	cmp	r5, #0
 8009900:	4607      	mov	r7, r0
 8009902:	db01      	blt.n	8009908 <_malloc_r+0x1c>
 8009904:	42a9      	cmp	r1, r5
 8009906:	d905      	bls.n	8009914 <_malloc_r+0x28>
 8009908:	230c      	movs	r3, #12
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	2600      	movs	r6, #0
 800990e:	4630      	mov	r0, r6
 8009910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80099e8 <_malloc_r+0xfc>
 8009918:	f000 f868 	bl	80099ec <__malloc_lock>
 800991c:	f8d8 3000 	ldr.w	r3, [r8]
 8009920:	461c      	mov	r4, r3
 8009922:	bb5c      	cbnz	r4, 800997c <_malloc_r+0x90>
 8009924:	4629      	mov	r1, r5
 8009926:	4638      	mov	r0, r7
 8009928:	f7ff ffc0 	bl	80098ac <sbrk_aligned>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	4604      	mov	r4, r0
 8009930:	d155      	bne.n	80099de <_malloc_r+0xf2>
 8009932:	f8d8 4000 	ldr.w	r4, [r8]
 8009936:	4626      	mov	r6, r4
 8009938:	2e00      	cmp	r6, #0
 800993a:	d145      	bne.n	80099c8 <_malloc_r+0xdc>
 800993c:	2c00      	cmp	r4, #0
 800993e:	d048      	beq.n	80099d2 <_malloc_r+0xe6>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	4631      	mov	r1, r6
 8009944:	4638      	mov	r0, r7
 8009946:	eb04 0903 	add.w	r9, r4, r3
 800994a:	f000 fd83 	bl	800a454 <_sbrk_r>
 800994e:	4581      	cmp	r9, r0
 8009950:	d13f      	bne.n	80099d2 <_malloc_r+0xe6>
 8009952:	6821      	ldr	r1, [r4, #0]
 8009954:	1a6d      	subs	r5, r5, r1
 8009956:	4629      	mov	r1, r5
 8009958:	4638      	mov	r0, r7
 800995a:	f7ff ffa7 	bl	80098ac <sbrk_aligned>
 800995e:	3001      	adds	r0, #1
 8009960:	d037      	beq.n	80099d2 <_malloc_r+0xe6>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	442b      	add	r3, r5
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	f8d8 3000 	ldr.w	r3, [r8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d038      	beq.n	80099e2 <_malloc_r+0xf6>
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	42a2      	cmp	r2, r4
 8009974:	d12b      	bne.n	80099ce <_malloc_r+0xe2>
 8009976:	2200      	movs	r2, #0
 8009978:	605a      	str	r2, [r3, #4]
 800997a:	e00f      	b.n	800999c <_malloc_r+0xb0>
 800997c:	6822      	ldr	r2, [r4, #0]
 800997e:	1b52      	subs	r2, r2, r5
 8009980:	d41f      	bmi.n	80099c2 <_malloc_r+0xd6>
 8009982:	2a0b      	cmp	r2, #11
 8009984:	d917      	bls.n	80099b6 <_malloc_r+0xca>
 8009986:	1961      	adds	r1, r4, r5
 8009988:	42a3      	cmp	r3, r4
 800998a:	6025      	str	r5, [r4, #0]
 800998c:	bf18      	it	ne
 800998e:	6059      	strne	r1, [r3, #4]
 8009990:	6863      	ldr	r3, [r4, #4]
 8009992:	bf08      	it	eq
 8009994:	f8c8 1000 	streq.w	r1, [r8]
 8009998:	5162      	str	r2, [r4, r5]
 800999a:	604b      	str	r3, [r1, #4]
 800999c:	4638      	mov	r0, r7
 800999e:	f104 060b 	add.w	r6, r4, #11
 80099a2:	f000 f829 	bl	80099f8 <__malloc_unlock>
 80099a6:	f026 0607 	bic.w	r6, r6, #7
 80099aa:	1d23      	adds	r3, r4, #4
 80099ac:	1af2      	subs	r2, r6, r3
 80099ae:	d0ae      	beq.n	800990e <_malloc_r+0x22>
 80099b0:	1b9b      	subs	r3, r3, r6
 80099b2:	50a3      	str	r3, [r4, r2]
 80099b4:	e7ab      	b.n	800990e <_malloc_r+0x22>
 80099b6:	42a3      	cmp	r3, r4
 80099b8:	6862      	ldr	r2, [r4, #4]
 80099ba:	d1dd      	bne.n	8009978 <_malloc_r+0x8c>
 80099bc:	f8c8 2000 	str.w	r2, [r8]
 80099c0:	e7ec      	b.n	800999c <_malloc_r+0xb0>
 80099c2:	4623      	mov	r3, r4
 80099c4:	6864      	ldr	r4, [r4, #4]
 80099c6:	e7ac      	b.n	8009922 <_malloc_r+0x36>
 80099c8:	4634      	mov	r4, r6
 80099ca:	6876      	ldr	r6, [r6, #4]
 80099cc:	e7b4      	b.n	8009938 <_malloc_r+0x4c>
 80099ce:	4613      	mov	r3, r2
 80099d0:	e7cc      	b.n	800996c <_malloc_r+0x80>
 80099d2:	230c      	movs	r3, #12
 80099d4:	603b      	str	r3, [r7, #0]
 80099d6:	4638      	mov	r0, r7
 80099d8:	f000 f80e 	bl	80099f8 <__malloc_unlock>
 80099dc:	e797      	b.n	800990e <_malloc_r+0x22>
 80099de:	6025      	str	r5, [r4, #0]
 80099e0:	e7dc      	b.n	800999c <_malloc_r+0xb0>
 80099e2:	605b      	str	r3, [r3, #4]
 80099e4:	deff      	udf	#255	; 0xff
 80099e6:	bf00      	nop
 80099e8:	200003e0 	.word	0x200003e0

080099ec <__malloc_lock>:
 80099ec:	4801      	ldr	r0, [pc, #4]	; (80099f4 <__malloc_lock+0x8>)
 80099ee:	f7ff be69 	b.w	80096c4 <__retarget_lock_acquire_recursive>
 80099f2:	bf00      	nop
 80099f4:	200003dd 	.word	0x200003dd

080099f8 <__malloc_unlock>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__malloc_unlock+0x8>)
 80099fa:	f7ff be65 	b.w	80096c8 <__retarget_lock_release_recursive>
 80099fe:	bf00      	nop
 8009a00:	200003dd 	.word	0x200003dd

08009a04 <_strtoul_l.constprop.0>:
 8009a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a08:	4f36      	ldr	r7, [pc, #216]	; (8009ae4 <_strtoul_l.constprop.0+0xe0>)
 8009a0a:	4686      	mov	lr, r0
 8009a0c:	460d      	mov	r5, r1
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a14:	5d3e      	ldrb	r6, [r7, r4]
 8009a16:	f016 0608 	ands.w	r6, r6, #8
 8009a1a:	d1f8      	bne.n	8009a0e <_strtoul_l.constprop.0+0xa>
 8009a1c:	2c2d      	cmp	r4, #45	; 0x2d
 8009a1e:	d130      	bne.n	8009a82 <_strtoul_l.constprop.0+0x7e>
 8009a20:	782c      	ldrb	r4, [r5, #0]
 8009a22:	2601      	movs	r6, #1
 8009a24:	1c85      	adds	r5, r0, #2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d057      	beq.n	8009ada <_strtoul_l.constprop.0+0xd6>
 8009a2a:	2b10      	cmp	r3, #16
 8009a2c:	d109      	bne.n	8009a42 <_strtoul_l.constprop.0+0x3e>
 8009a2e:	2c30      	cmp	r4, #48	; 0x30
 8009a30:	d107      	bne.n	8009a42 <_strtoul_l.constprop.0+0x3e>
 8009a32:	7828      	ldrb	r0, [r5, #0]
 8009a34:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009a38:	2858      	cmp	r0, #88	; 0x58
 8009a3a:	d149      	bne.n	8009ad0 <_strtoul_l.constprop.0+0xcc>
 8009a3c:	786c      	ldrb	r4, [r5, #1]
 8009a3e:	2310      	movs	r3, #16
 8009a40:	3502      	adds	r5, #2
 8009a42:	f04f 38ff 	mov.w	r8, #4294967295
 8009a46:	2700      	movs	r7, #0
 8009a48:	fbb8 f8f3 	udiv	r8, r8, r3
 8009a4c:	fb03 f908 	mul.w	r9, r3, r8
 8009a50:	ea6f 0909 	mvn.w	r9, r9
 8009a54:	4638      	mov	r0, r7
 8009a56:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009a5a:	f1bc 0f09 	cmp.w	ip, #9
 8009a5e:	d815      	bhi.n	8009a8c <_strtoul_l.constprop.0+0x88>
 8009a60:	4664      	mov	r4, ip
 8009a62:	42a3      	cmp	r3, r4
 8009a64:	dd23      	ble.n	8009aae <_strtoul_l.constprop.0+0xaa>
 8009a66:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009a6a:	d007      	beq.n	8009a7c <_strtoul_l.constprop.0+0x78>
 8009a6c:	4580      	cmp	r8, r0
 8009a6e:	d31b      	bcc.n	8009aa8 <_strtoul_l.constprop.0+0xa4>
 8009a70:	d101      	bne.n	8009a76 <_strtoul_l.constprop.0+0x72>
 8009a72:	45a1      	cmp	r9, r4
 8009a74:	db18      	blt.n	8009aa8 <_strtoul_l.constprop.0+0xa4>
 8009a76:	fb00 4003 	mla	r0, r0, r3, r4
 8009a7a:	2701      	movs	r7, #1
 8009a7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a80:	e7e9      	b.n	8009a56 <_strtoul_l.constprop.0+0x52>
 8009a82:	2c2b      	cmp	r4, #43	; 0x2b
 8009a84:	bf04      	itt	eq
 8009a86:	782c      	ldrbeq	r4, [r5, #0]
 8009a88:	1c85      	addeq	r5, r0, #2
 8009a8a:	e7cc      	b.n	8009a26 <_strtoul_l.constprop.0+0x22>
 8009a8c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009a90:	f1bc 0f19 	cmp.w	ip, #25
 8009a94:	d801      	bhi.n	8009a9a <_strtoul_l.constprop.0+0x96>
 8009a96:	3c37      	subs	r4, #55	; 0x37
 8009a98:	e7e3      	b.n	8009a62 <_strtoul_l.constprop.0+0x5e>
 8009a9a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009a9e:	f1bc 0f19 	cmp.w	ip, #25
 8009aa2:	d804      	bhi.n	8009aae <_strtoul_l.constprop.0+0xaa>
 8009aa4:	3c57      	subs	r4, #87	; 0x57
 8009aa6:	e7dc      	b.n	8009a62 <_strtoul_l.constprop.0+0x5e>
 8009aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8009aac:	e7e6      	b.n	8009a7c <_strtoul_l.constprop.0+0x78>
 8009aae:	1c7b      	adds	r3, r7, #1
 8009ab0:	d106      	bne.n	8009ac0 <_strtoul_l.constprop.0+0xbc>
 8009ab2:	2322      	movs	r3, #34	; 0x22
 8009ab4:	f8ce 3000 	str.w	r3, [lr]
 8009ab8:	4638      	mov	r0, r7
 8009aba:	b932      	cbnz	r2, 8009aca <_strtoul_l.constprop.0+0xc6>
 8009abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ac0:	b106      	cbz	r6, 8009ac4 <_strtoul_l.constprop.0+0xc0>
 8009ac2:	4240      	negs	r0, r0
 8009ac4:	2a00      	cmp	r2, #0
 8009ac6:	d0f9      	beq.n	8009abc <_strtoul_l.constprop.0+0xb8>
 8009ac8:	b107      	cbz	r7, 8009acc <_strtoul_l.constprop.0+0xc8>
 8009aca:	1e69      	subs	r1, r5, #1
 8009acc:	6011      	str	r1, [r2, #0]
 8009ace:	e7f5      	b.n	8009abc <_strtoul_l.constprop.0+0xb8>
 8009ad0:	2430      	movs	r4, #48	; 0x30
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1b5      	bne.n	8009a42 <_strtoul_l.constprop.0+0x3e>
 8009ad6:	2308      	movs	r3, #8
 8009ad8:	e7b3      	b.n	8009a42 <_strtoul_l.constprop.0+0x3e>
 8009ada:	2c30      	cmp	r4, #48	; 0x30
 8009adc:	d0a9      	beq.n	8009a32 <_strtoul_l.constprop.0+0x2e>
 8009ade:	230a      	movs	r3, #10
 8009ae0:	e7af      	b.n	8009a42 <_strtoul_l.constprop.0+0x3e>
 8009ae2:	bf00      	nop
 8009ae4:	0800c065 	.word	0x0800c065

08009ae8 <_strtoul_r>:
 8009ae8:	f7ff bf8c 	b.w	8009a04 <_strtoul_l.constprop.0>

08009aec <strtoul>:
 8009aec:	4613      	mov	r3, r2
 8009aee:	460a      	mov	r2, r1
 8009af0:	4601      	mov	r1, r0
 8009af2:	4802      	ldr	r0, [pc, #8]	; (8009afc <strtoul+0x10>)
 8009af4:	6800      	ldr	r0, [r0, #0]
 8009af6:	f7ff bf85 	b.w	8009a04 <_strtoul_l.constprop.0>
 8009afa:	bf00      	nop
 8009afc:	20000070 	.word	0x20000070

08009b00 <__ssputs_r>:
 8009b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	688e      	ldr	r6, [r1, #8]
 8009b06:	461f      	mov	r7, r3
 8009b08:	42be      	cmp	r6, r7
 8009b0a:	680b      	ldr	r3, [r1, #0]
 8009b0c:	4682      	mov	sl, r0
 8009b0e:	460c      	mov	r4, r1
 8009b10:	4690      	mov	r8, r2
 8009b12:	d82c      	bhi.n	8009b6e <__ssputs_r+0x6e>
 8009b14:	898a      	ldrh	r2, [r1, #12]
 8009b16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b1a:	d026      	beq.n	8009b6a <__ssputs_r+0x6a>
 8009b1c:	6965      	ldr	r5, [r4, #20]
 8009b1e:	6909      	ldr	r1, [r1, #16]
 8009b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b24:	eba3 0901 	sub.w	r9, r3, r1
 8009b28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b2c:	1c7b      	adds	r3, r7, #1
 8009b2e:	444b      	add	r3, r9
 8009b30:	106d      	asrs	r5, r5, #1
 8009b32:	429d      	cmp	r5, r3
 8009b34:	bf38      	it	cc
 8009b36:	461d      	movcc	r5, r3
 8009b38:	0553      	lsls	r3, r2, #21
 8009b3a:	d527      	bpl.n	8009b8c <__ssputs_r+0x8c>
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	f7ff fed5 	bl	80098ec <_malloc_r>
 8009b42:	4606      	mov	r6, r0
 8009b44:	b360      	cbz	r0, 8009ba0 <__ssputs_r+0xa0>
 8009b46:	6921      	ldr	r1, [r4, #16]
 8009b48:	464a      	mov	r2, r9
 8009b4a:	f7ff fdc6 	bl	80096da <memcpy>
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b58:	81a3      	strh	r3, [r4, #12]
 8009b5a:	6126      	str	r6, [r4, #16]
 8009b5c:	6165      	str	r5, [r4, #20]
 8009b5e:	444e      	add	r6, r9
 8009b60:	eba5 0509 	sub.w	r5, r5, r9
 8009b64:	6026      	str	r6, [r4, #0]
 8009b66:	60a5      	str	r5, [r4, #8]
 8009b68:	463e      	mov	r6, r7
 8009b6a:	42be      	cmp	r6, r7
 8009b6c:	d900      	bls.n	8009b70 <__ssputs_r+0x70>
 8009b6e:	463e      	mov	r6, r7
 8009b70:	6820      	ldr	r0, [r4, #0]
 8009b72:	4632      	mov	r2, r6
 8009b74:	4641      	mov	r1, r8
 8009b76:	f000 fb97 	bl	800a2a8 <memmove>
 8009b7a:	68a3      	ldr	r3, [r4, #8]
 8009b7c:	1b9b      	subs	r3, r3, r6
 8009b7e:	60a3      	str	r3, [r4, #8]
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	4433      	add	r3, r6
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	2000      	movs	r0, #0
 8009b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8c:	462a      	mov	r2, r5
 8009b8e:	f000 fc85 	bl	800a49c <_realloc_r>
 8009b92:	4606      	mov	r6, r0
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d1e0      	bne.n	8009b5a <__ssputs_r+0x5a>
 8009b98:	6921      	ldr	r1, [r4, #16]
 8009b9a:	4650      	mov	r0, sl
 8009b9c:	f7ff fde2 	bl	8009764 <_free_r>
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	f8ca 3000 	str.w	r3, [sl]
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bac:	81a3      	strh	r3, [r4, #12]
 8009bae:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb2:	e7e9      	b.n	8009b88 <__ssputs_r+0x88>

08009bb4 <_svfiprintf_r>:
 8009bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	4698      	mov	r8, r3
 8009bba:	898b      	ldrh	r3, [r1, #12]
 8009bbc:	061b      	lsls	r3, r3, #24
 8009bbe:	b09d      	sub	sp, #116	; 0x74
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	4614      	mov	r4, r2
 8009bc6:	d50e      	bpl.n	8009be6 <_svfiprintf_r+0x32>
 8009bc8:	690b      	ldr	r3, [r1, #16]
 8009bca:	b963      	cbnz	r3, 8009be6 <_svfiprintf_r+0x32>
 8009bcc:	2140      	movs	r1, #64	; 0x40
 8009bce:	f7ff fe8d 	bl	80098ec <_malloc_r>
 8009bd2:	6028      	str	r0, [r5, #0]
 8009bd4:	6128      	str	r0, [r5, #16]
 8009bd6:	b920      	cbnz	r0, 8009be2 <_svfiprintf_r+0x2e>
 8009bd8:	230c      	movs	r3, #12
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009be0:	e0d0      	b.n	8009d84 <_svfiprintf_r+0x1d0>
 8009be2:	2340      	movs	r3, #64	; 0x40
 8009be4:	616b      	str	r3, [r5, #20]
 8009be6:	2300      	movs	r3, #0
 8009be8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bea:	2320      	movs	r3, #32
 8009bec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bf4:	2330      	movs	r3, #48	; 0x30
 8009bf6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d9c <_svfiprintf_r+0x1e8>
 8009bfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bfe:	f04f 0901 	mov.w	r9, #1
 8009c02:	4623      	mov	r3, r4
 8009c04:	469a      	mov	sl, r3
 8009c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c0a:	b10a      	cbz	r2, 8009c10 <_svfiprintf_r+0x5c>
 8009c0c:	2a25      	cmp	r2, #37	; 0x25
 8009c0e:	d1f9      	bne.n	8009c04 <_svfiprintf_r+0x50>
 8009c10:	ebba 0b04 	subs.w	fp, sl, r4
 8009c14:	d00b      	beq.n	8009c2e <_svfiprintf_r+0x7a>
 8009c16:	465b      	mov	r3, fp
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f7ff ff6f 	bl	8009b00 <__ssputs_r>
 8009c22:	3001      	adds	r0, #1
 8009c24:	f000 80a9 	beq.w	8009d7a <_svfiprintf_r+0x1c6>
 8009c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c2a:	445a      	add	r2, fp
 8009c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 80a1 	beq.w	8009d7a <_svfiprintf_r+0x1c6>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c42:	f10a 0a01 	add.w	sl, sl, #1
 8009c46:	9304      	str	r3, [sp, #16]
 8009c48:	9307      	str	r3, [sp, #28]
 8009c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009c50:	4654      	mov	r4, sl
 8009c52:	2205      	movs	r2, #5
 8009c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c58:	4850      	ldr	r0, [pc, #320]	; (8009d9c <_svfiprintf_r+0x1e8>)
 8009c5a:	f7f6 fad1 	bl	8000200 <memchr>
 8009c5e:	9a04      	ldr	r2, [sp, #16]
 8009c60:	b9d8      	cbnz	r0, 8009c9a <_svfiprintf_r+0xe6>
 8009c62:	06d0      	lsls	r0, r2, #27
 8009c64:	bf44      	itt	mi
 8009c66:	2320      	movmi	r3, #32
 8009c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c6c:	0711      	lsls	r1, r2, #28
 8009c6e:	bf44      	itt	mi
 8009c70:	232b      	movmi	r3, #43	; 0x2b
 8009c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c76:	f89a 3000 	ldrb.w	r3, [sl]
 8009c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c7c:	d015      	beq.n	8009caa <_svfiprintf_r+0xf6>
 8009c7e:	9a07      	ldr	r2, [sp, #28]
 8009c80:	4654      	mov	r4, sl
 8009c82:	2000      	movs	r0, #0
 8009c84:	f04f 0c0a 	mov.w	ip, #10
 8009c88:	4621      	mov	r1, r4
 8009c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c8e:	3b30      	subs	r3, #48	; 0x30
 8009c90:	2b09      	cmp	r3, #9
 8009c92:	d94d      	bls.n	8009d30 <_svfiprintf_r+0x17c>
 8009c94:	b1b0      	cbz	r0, 8009cc4 <_svfiprintf_r+0x110>
 8009c96:	9207      	str	r2, [sp, #28]
 8009c98:	e014      	b.n	8009cc4 <_svfiprintf_r+0x110>
 8009c9a:	eba0 0308 	sub.w	r3, r0, r8
 8009c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	46a2      	mov	sl, r4
 8009ca8:	e7d2      	b.n	8009c50 <_svfiprintf_r+0x9c>
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	1d19      	adds	r1, r3, #4
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	9103      	str	r1, [sp, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	bfbb      	ittet	lt
 8009cb6:	425b      	neglt	r3, r3
 8009cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8009cbc:	9307      	strge	r3, [sp, #28]
 8009cbe:	9307      	strlt	r3, [sp, #28]
 8009cc0:	bfb8      	it	lt
 8009cc2:	9204      	strlt	r2, [sp, #16]
 8009cc4:	7823      	ldrb	r3, [r4, #0]
 8009cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8009cc8:	d10c      	bne.n	8009ce4 <_svfiprintf_r+0x130>
 8009cca:	7863      	ldrb	r3, [r4, #1]
 8009ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8009cce:	d134      	bne.n	8009d3a <_svfiprintf_r+0x186>
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	1d1a      	adds	r2, r3, #4
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	9203      	str	r2, [sp, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	bfb8      	it	lt
 8009cdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ce0:	3402      	adds	r4, #2
 8009ce2:	9305      	str	r3, [sp, #20]
 8009ce4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009dac <_svfiprintf_r+0x1f8>
 8009ce8:	7821      	ldrb	r1, [r4, #0]
 8009cea:	2203      	movs	r2, #3
 8009cec:	4650      	mov	r0, sl
 8009cee:	f7f6 fa87 	bl	8000200 <memchr>
 8009cf2:	b138      	cbz	r0, 8009d04 <_svfiprintf_r+0x150>
 8009cf4:	9b04      	ldr	r3, [sp, #16]
 8009cf6:	eba0 000a 	sub.w	r0, r0, sl
 8009cfa:	2240      	movs	r2, #64	; 0x40
 8009cfc:	4082      	lsls	r2, r0
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	3401      	adds	r4, #1
 8009d02:	9304      	str	r3, [sp, #16]
 8009d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d08:	4825      	ldr	r0, [pc, #148]	; (8009da0 <_svfiprintf_r+0x1ec>)
 8009d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d0e:	2206      	movs	r2, #6
 8009d10:	f7f6 fa76 	bl	8000200 <memchr>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d038      	beq.n	8009d8a <_svfiprintf_r+0x1d6>
 8009d18:	4b22      	ldr	r3, [pc, #136]	; (8009da4 <_svfiprintf_r+0x1f0>)
 8009d1a:	bb1b      	cbnz	r3, 8009d64 <_svfiprintf_r+0x1b0>
 8009d1c:	9b03      	ldr	r3, [sp, #12]
 8009d1e:	3307      	adds	r3, #7
 8009d20:	f023 0307 	bic.w	r3, r3, #7
 8009d24:	3308      	adds	r3, #8
 8009d26:	9303      	str	r3, [sp, #12]
 8009d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2a:	4433      	add	r3, r6
 8009d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2e:	e768      	b.n	8009c02 <_svfiprintf_r+0x4e>
 8009d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d34:	460c      	mov	r4, r1
 8009d36:	2001      	movs	r0, #1
 8009d38:	e7a6      	b.n	8009c88 <_svfiprintf_r+0xd4>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	3401      	adds	r4, #1
 8009d3e:	9305      	str	r3, [sp, #20]
 8009d40:	4619      	mov	r1, r3
 8009d42:	f04f 0c0a 	mov.w	ip, #10
 8009d46:	4620      	mov	r0, r4
 8009d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d4c:	3a30      	subs	r2, #48	; 0x30
 8009d4e:	2a09      	cmp	r2, #9
 8009d50:	d903      	bls.n	8009d5a <_svfiprintf_r+0x1a6>
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0c6      	beq.n	8009ce4 <_svfiprintf_r+0x130>
 8009d56:	9105      	str	r1, [sp, #20]
 8009d58:	e7c4      	b.n	8009ce4 <_svfiprintf_r+0x130>
 8009d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d5e:	4604      	mov	r4, r0
 8009d60:	2301      	movs	r3, #1
 8009d62:	e7f0      	b.n	8009d46 <_svfiprintf_r+0x192>
 8009d64:	ab03      	add	r3, sp, #12
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	462a      	mov	r2, r5
 8009d6a:	4b0f      	ldr	r3, [pc, #60]	; (8009da8 <_svfiprintf_r+0x1f4>)
 8009d6c:	a904      	add	r1, sp, #16
 8009d6e:	4638      	mov	r0, r7
 8009d70:	f3af 8000 	nop.w
 8009d74:	1c42      	adds	r2, r0, #1
 8009d76:	4606      	mov	r6, r0
 8009d78:	d1d6      	bne.n	8009d28 <_svfiprintf_r+0x174>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	065b      	lsls	r3, r3, #25
 8009d7e:	f53f af2d 	bmi.w	8009bdc <_svfiprintf_r+0x28>
 8009d82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d84:	b01d      	add	sp, #116	; 0x74
 8009d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8a:	ab03      	add	r3, sp, #12
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	462a      	mov	r2, r5
 8009d90:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <_svfiprintf_r+0x1f4>)
 8009d92:	a904      	add	r1, sp, #16
 8009d94:	4638      	mov	r0, r7
 8009d96:	f000 f879 	bl	8009e8c <_printf_i>
 8009d9a:	e7eb      	b.n	8009d74 <_svfiprintf_r+0x1c0>
 8009d9c:	0800c165 	.word	0x0800c165
 8009da0:	0800c16f 	.word	0x0800c16f
 8009da4:	00000000 	.word	0x00000000
 8009da8:	08009b01 	.word	0x08009b01
 8009dac:	0800c16b 	.word	0x0800c16b

08009db0 <_printf_common>:
 8009db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db4:	4616      	mov	r6, r2
 8009db6:	4699      	mov	r9, r3
 8009db8:	688a      	ldr	r2, [r1, #8]
 8009dba:	690b      	ldr	r3, [r1, #16]
 8009dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	bfb8      	it	lt
 8009dc4:	4613      	movlt	r3, r2
 8009dc6:	6033      	str	r3, [r6, #0]
 8009dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dcc:	4607      	mov	r7, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	b10a      	cbz	r2, 8009dd6 <_printf_common+0x26>
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	6033      	str	r3, [r6, #0]
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	0699      	lsls	r1, r3, #26
 8009dda:	bf42      	ittt	mi
 8009ddc:	6833      	ldrmi	r3, [r6, #0]
 8009dde:	3302      	addmi	r3, #2
 8009de0:	6033      	strmi	r3, [r6, #0]
 8009de2:	6825      	ldr	r5, [r4, #0]
 8009de4:	f015 0506 	ands.w	r5, r5, #6
 8009de8:	d106      	bne.n	8009df8 <_printf_common+0x48>
 8009dea:	f104 0a19 	add.w	sl, r4, #25
 8009dee:	68e3      	ldr	r3, [r4, #12]
 8009df0:	6832      	ldr	r2, [r6, #0]
 8009df2:	1a9b      	subs	r3, r3, r2
 8009df4:	42ab      	cmp	r3, r5
 8009df6:	dc26      	bgt.n	8009e46 <_printf_common+0x96>
 8009df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dfc:	1e13      	subs	r3, r2, #0
 8009dfe:	6822      	ldr	r2, [r4, #0]
 8009e00:	bf18      	it	ne
 8009e02:	2301      	movne	r3, #1
 8009e04:	0692      	lsls	r2, r2, #26
 8009e06:	d42b      	bmi.n	8009e60 <_printf_common+0xb0>
 8009e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4638      	mov	r0, r7
 8009e10:	47c0      	blx	r8
 8009e12:	3001      	adds	r0, #1
 8009e14:	d01e      	beq.n	8009e54 <_printf_common+0xa4>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	6922      	ldr	r2, [r4, #16]
 8009e1a:	f003 0306 	and.w	r3, r3, #6
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	bf02      	ittt	eq
 8009e22:	68e5      	ldreq	r5, [r4, #12]
 8009e24:	6833      	ldreq	r3, [r6, #0]
 8009e26:	1aed      	subeq	r5, r5, r3
 8009e28:	68a3      	ldr	r3, [r4, #8]
 8009e2a:	bf0c      	ite	eq
 8009e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e30:	2500      	movne	r5, #0
 8009e32:	4293      	cmp	r3, r2
 8009e34:	bfc4      	itt	gt
 8009e36:	1a9b      	subgt	r3, r3, r2
 8009e38:	18ed      	addgt	r5, r5, r3
 8009e3a:	2600      	movs	r6, #0
 8009e3c:	341a      	adds	r4, #26
 8009e3e:	42b5      	cmp	r5, r6
 8009e40:	d11a      	bne.n	8009e78 <_printf_common+0xc8>
 8009e42:	2000      	movs	r0, #0
 8009e44:	e008      	b.n	8009e58 <_printf_common+0xa8>
 8009e46:	2301      	movs	r3, #1
 8009e48:	4652      	mov	r2, sl
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	47c0      	blx	r8
 8009e50:	3001      	adds	r0, #1
 8009e52:	d103      	bne.n	8009e5c <_printf_common+0xac>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	e7c6      	b.n	8009dee <_printf_common+0x3e>
 8009e60:	18e1      	adds	r1, r4, r3
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	2030      	movs	r0, #48	; 0x30
 8009e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e6a:	4422      	add	r2, r4
 8009e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e74:	3302      	adds	r3, #2
 8009e76:	e7c7      	b.n	8009e08 <_printf_common+0x58>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	4622      	mov	r2, r4
 8009e7c:	4649      	mov	r1, r9
 8009e7e:	4638      	mov	r0, r7
 8009e80:	47c0      	blx	r8
 8009e82:	3001      	adds	r0, #1
 8009e84:	d0e6      	beq.n	8009e54 <_printf_common+0xa4>
 8009e86:	3601      	adds	r6, #1
 8009e88:	e7d9      	b.n	8009e3e <_printf_common+0x8e>
	...

08009e8c <_printf_i>:
 8009e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e90:	7e0f      	ldrb	r7, [r1, #24]
 8009e92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e94:	2f78      	cmp	r7, #120	; 0x78
 8009e96:	4691      	mov	r9, r2
 8009e98:	4680      	mov	r8, r0
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	469a      	mov	sl, r3
 8009e9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ea2:	d807      	bhi.n	8009eb4 <_printf_i+0x28>
 8009ea4:	2f62      	cmp	r7, #98	; 0x62
 8009ea6:	d80a      	bhi.n	8009ebe <_printf_i+0x32>
 8009ea8:	2f00      	cmp	r7, #0
 8009eaa:	f000 80d4 	beq.w	800a056 <_printf_i+0x1ca>
 8009eae:	2f58      	cmp	r7, #88	; 0x58
 8009eb0:	f000 80c0 	beq.w	800a034 <_printf_i+0x1a8>
 8009eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ebc:	e03a      	b.n	8009f34 <_printf_i+0xa8>
 8009ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ec2:	2b15      	cmp	r3, #21
 8009ec4:	d8f6      	bhi.n	8009eb4 <_printf_i+0x28>
 8009ec6:	a101      	add	r1, pc, #4	; (adr r1, 8009ecc <_printf_i+0x40>)
 8009ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ecc:	08009f25 	.word	0x08009f25
 8009ed0:	08009f39 	.word	0x08009f39
 8009ed4:	08009eb5 	.word	0x08009eb5
 8009ed8:	08009eb5 	.word	0x08009eb5
 8009edc:	08009eb5 	.word	0x08009eb5
 8009ee0:	08009eb5 	.word	0x08009eb5
 8009ee4:	08009f39 	.word	0x08009f39
 8009ee8:	08009eb5 	.word	0x08009eb5
 8009eec:	08009eb5 	.word	0x08009eb5
 8009ef0:	08009eb5 	.word	0x08009eb5
 8009ef4:	08009eb5 	.word	0x08009eb5
 8009ef8:	0800a03d 	.word	0x0800a03d
 8009efc:	08009f65 	.word	0x08009f65
 8009f00:	08009ff7 	.word	0x08009ff7
 8009f04:	08009eb5 	.word	0x08009eb5
 8009f08:	08009eb5 	.word	0x08009eb5
 8009f0c:	0800a05f 	.word	0x0800a05f
 8009f10:	08009eb5 	.word	0x08009eb5
 8009f14:	08009f65 	.word	0x08009f65
 8009f18:	08009eb5 	.word	0x08009eb5
 8009f1c:	08009eb5 	.word	0x08009eb5
 8009f20:	08009fff 	.word	0x08009fff
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	1d1a      	adds	r2, r3, #4
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	602a      	str	r2, [r5, #0]
 8009f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f34:	2301      	movs	r3, #1
 8009f36:	e09f      	b.n	800a078 <_printf_i+0x1ec>
 8009f38:	6820      	ldr	r0, [r4, #0]
 8009f3a:	682b      	ldr	r3, [r5, #0]
 8009f3c:	0607      	lsls	r7, r0, #24
 8009f3e:	f103 0104 	add.w	r1, r3, #4
 8009f42:	6029      	str	r1, [r5, #0]
 8009f44:	d501      	bpl.n	8009f4a <_printf_i+0xbe>
 8009f46:	681e      	ldr	r6, [r3, #0]
 8009f48:	e003      	b.n	8009f52 <_printf_i+0xc6>
 8009f4a:	0646      	lsls	r6, r0, #25
 8009f4c:	d5fb      	bpl.n	8009f46 <_printf_i+0xba>
 8009f4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f52:	2e00      	cmp	r6, #0
 8009f54:	da03      	bge.n	8009f5e <_printf_i+0xd2>
 8009f56:	232d      	movs	r3, #45	; 0x2d
 8009f58:	4276      	negs	r6, r6
 8009f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f5e:	485a      	ldr	r0, [pc, #360]	; (800a0c8 <_printf_i+0x23c>)
 8009f60:	230a      	movs	r3, #10
 8009f62:	e012      	b.n	8009f8a <_printf_i+0xfe>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	6820      	ldr	r0, [r4, #0]
 8009f68:	1d19      	adds	r1, r3, #4
 8009f6a:	6029      	str	r1, [r5, #0]
 8009f6c:	0605      	lsls	r5, r0, #24
 8009f6e:	d501      	bpl.n	8009f74 <_printf_i+0xe8>
 8009f70:	681e      	ldr	r6, [r3, #0]
 8009f72:	e002      	b.n	8009f7a <_printf_i+0xee>
 8009f74:	0641      	lsls	r1, r0, #25
 8009f76:	d5fb      	bpl.n	8009f70 <_printf_i+0xe4>
 8009f78:	881e      	ldrh	r6, [r3, #0]
 8009f7a:	4853      	ldr	r0, [pc, #332]	; (800a0c8 <_printf_i+0x23c>)
 8009f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f7e:	bf0c      	ite	eq
 8009f80:	2308      	moveq	r3, #8
 8009f82:	230a      	movne	r3, #10
 8009f84:	2100      	movs	r1, #0
 8009f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f8a:	6865      	ldr	r5, [r4, #4]
 8009f8c:	60a5      	str	r5, [r4, #8]
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	bfa2      	ittt	ge
 8009f92:	6821      	ldrge	r1, [r4, #0]
 8009f94:	f021 0104 	bicge.w	r1, r1, #4
 8009f98:	6021      	strge	r1, [r4, #0]
 8009f9a:	b90e      	cbnz	r6, 8009fa0 <_printf_i+0x114>
 8009f9c:	2d00      	cmp	r5, #0
 8009f9e:	d04b      	beq.n	800a038 <_printf_i+0x1ac>
 8009fa0:	4615      	mov	r5, r2
 8009fa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fa6:	fb03 6711 	mls	r7, r3, r1, r6
 8009faa:	5dc7      	ldrb	r7, [r0, r7]
 8009fac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fb0:	4637      	mov	r7, r6
 8009fb2:	42bb      	cmp	r3, r7
 8009fb4:	460e      	mov	r6, r1
 8009fb6:	d9f4      	bls.n	8009fa2 <_printf_i+0x116>
 8009fb8:	2b08      	cmp	r3, #8
 8009fba:	d10b      	bne.n	8009fd4 <_printf_i+0x148>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	07de      	lsls	r6, r3, #31
 8009fc0:	d508      	bpl.n	8009fd4 <_printf_i+0x148>
 8009fc2:	6923      	ldr	r3, [r4, #16]
 8009fc4:	6861      	ldr	r1, [r4, #4]
 8009fc6:	4299      	cmp	r1, r3
 8009fc8:	bfde      	ittt	le
 8009fca:	2330      	movle	r3, #48	; 0x30
 8009fcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fd4:	1b52      	subs	r2, r2, r5
 8009fd6:	6122      	str	r2, [r4, #16]
 8009fd8:	f8cd a000 	str.w	sl, [sp]
 8009fdc:	464b      	mov	r3, r9
 8009fde:	aa03      	add	r2, sp, #12
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	f7ff fee4 	bl	8009db0 <_printf_common>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d14a      	bne.n	800a082 <_printf_i+0x1f6>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	b004      	add	sp, #16
 8009ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	f043 0320 	orr.w	r3, r3, #32
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	4833      	ldr	r0, [pc, #204]	; (800a0cc <_printf_i+0x240>)
 800a000:	2778      	movs	r7, #120	; 0x78
 800a002:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	6829      	ldr	r1, [r5, #0]
 800a00a:	061f      	lsls	r7, r3, #24
 800a00c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a010:	d402      	bmi.n	800a018 <_printf_i+0x18c>
 800a012:	065f      	lsls	r7, r3, #25
 800a014:	bf48      	it	mi
 800a016:	b2b6      	uxthmi	r6, r6
 800a018:	07df      	lsls	r7, r3, #31
 800a01a:	bf48      	it	mi
 800a01c:	f043 0320 	orrmi.w	r3, r3, #32
 800a020:	6029      	str	r1, [r5, #0]
 800a022:	bf48      	it	mi
 800a024:	6023      	strmi	r3, [r4, #0]
 800a026:	b91e      	cbnz	r6, 800a030 <_printf_i+0x1a4>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	f023 0320 	bic.w	r3, r3, #32
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	2310      	movs	r3, #16
 800a032:	e7a7      	b.n	8009f84 <_printf_i+0xf8>
 800a034:	4824      	ldr	r0, [pc, #144]	; (800a0c8 <_printf_i+0x23c>)
 800a036:	e7e4      	b.n	800a002 <_printf_i+0x176>
 800a038:	4615      	mov	r5, r2
 800a03a:	e7bd      	b.n	8009fb8 <_printf_i+0x12c>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	6826      	ldr	r6, [r4, #0]
 800a040:	6961      	ldr	r1, [r4, #20]
 800a042:	1d18      	adds	r0, r3, #4
 800a044:	6028      	str	r0, [r5, #0]
 800a046:	0635      	lsls	r5, r6, #24
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	d501      	bpl.n	800a050 <_printf_i+0x1c4>
 800a04c:	6019      	str	r1, [r3, #0]
 800a04e:	e002      	b.n	800a056 <_printf_i+0x1ca>
 800a050:	0670      	lsls	r0, r6, #25
 800a052:	d5fb      	bpl.n	800a04c <_printf_i+0x1c0>
 800a054:	8019      	strh	r1, [r3, #0]
 800a056:	2300      	movs	r3, #0
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	4615      	mov	r5, r2
 800a05c:	e7bc      	b.n	8009fd8 <_printf_i+0x14c>
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	1d1a      	adds	r2, r3, #4
 800a062:	602a      	str	r2, [r5, #0]
 800a064:	681d      	ldr	r5, [r3, #0]
 800a066:	6862      	ldr	r2, [r4, #4]
 800a068:	2100      	movs	r1, #0
 800a06a:	4628      	mov	r0, r5
 800a06c:	f7f6 f8c8 	bl	8000200 <memchr>
 800a070:	b108      	cbz	r0, 800a076 <_printf_i+0x1ea>
 800a072:	1b40      	subs	r0, r0, r5
 800a074:	6060      	str	r0, [r4, #4]
 800a076:	6863      	ldr	r3, [r4, #4]
 800a078:	6123      	str	r3, [r4, #16]
 800a07a:	2300      	movs	r3, #0
 800a07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a080:	e7aa      	b.n	8009fd8 <_printf_i+0x14c>
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	462a      	mov	r2, r5
 800a086:	4649      	mov	r1, r9
 800a088:	4640      	mov	r0, r8
 800a08a:	47d0      	blx	sl
 800a08c:	3001      	adds	r0, #1
 800a08e:	d0ad      	beq.n	8009fec <_printf_i+0x160>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	079b      	lsls	r3, r3, #30
 800a094:	d413      	bmi.n	800a0be <_printf_i+0x232>
 800a096:	68e0      	ldr	r0, [r4, #12]
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	4298      	cmp	r0, r3
 800a09c:	bfb8      	it	lt
 800a09e:	4618      	movlt	r0, r3
 800a0a0:	e7a6      	b.n	8009ff0 <_printf_i+0x164>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	47d0      	blx	sl
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d09d      	beq.n	8009fec <_printf_i+0x160>
 800a0b0:	3501      	adds	r5, #1
 800a0b2:	68e3      	ldr	r3, [r4, #12]
 800a0b4:	9903      	ldr	r1, [sp, #12]
 800a0b6:	1a5b      	subs	r3, r3, r1
 800a0b8:	42ab      	cmp	r3, r5
 800a0ba:	dcf2      	bgt.n	800a0a2 <_printf_i+0x216>
 800a0bc:	e7eb      	b.n	800a096 <_printf_i+0x20a>
 800a0be:	2500      	movs	r5, #0
 800a0c0:	f104 0619 	add.w	r6, r4, #25
 800a0c4:	e7f5      	b.n	800a0b2 <_printf_i+0x226>
 800a0c6:	bf00      	nop
 800a0c8:	0800c176 	.word	0x0800c176
 800a0cc:	0800c187 	.word	0x0800c187

0800a0d0 <__sflush_r>:
 800a0d0:	898a      	ldrh	r2, [r1, #12]
 800a0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	0710      	lsls	r0, r2, #28
 800a0da:	460c      	mov	r4, r1
 800a0dc:	d458      	bmi.n	800a190 <__sflush_r+0xc0>
 800a0de:	684b      	ldr	r3, [r1, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	dc05      	bgt.n	800a0f0 <__sflush_r+0x20>
 800a0e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	dc02      	bgt.n	800a0f0 <__sflush_r+0x20>
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0f2:	2e00      	cmp	r6, #0
 800a0f4:	d0f9      	beq.n	800a0ea <__sflush_r+0x1a>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0fc:	682f      	ldr	r7, [r5, #0]
 800a0fe:	6a21      	ldr	r1, [r4, #32]
 800a100:	602b      	str	r3, [r5, #0]
 800a102:	d032      	beq.n	800a16a <__sflush_r+0x9a>
 800a104:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	075a      	lsls	r2, r3, #29
 800a10a:	d505      	bpl.n	800a118 <__sflush_r+0x48>
 800a10c:	6863      	ldr	r3, [r4, #4]
 800a10e:	1ac0      	subs	r0, r0, r3
 800a110:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a112:	b10b      	cbz	r3, 800a118 <__sflush_r+0x48>
 800a114:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a116:	1ac0      	subs	r0, r0, r3
 800a118:	2300      	movs	r3, #0
 800a11a:	4602      	mov	r2, r0
 800a11c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a11e:	6a21      	ldr	r1, [r4, #32]
 800a120:	4628      	mov	r0, r5
 800a122:	47b0      	blx	r6
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	d106      	bne.n	800a138 <__sflush_r+0x68>
 800a12a:	6829      	ldr	r1, [r5, #0]
 800a12c:	291d      	cmp	r1, #29
 800a12e:	d82b      	bhi.n	800a188 <__sflush_r+0xb8>
 800a130:	4a29      	ldr	r2, [pc, #164]	; (800a1d8 <__sflush_r+0x108>)
 800a132:	410a      	asrs	r2, r1
 800a134:	07d6      	lsls	r6, r2, #31
 800a136:	d427      	bmi.n	800a188 <__sflush_r+0xb8>
 800a138:	2200      	movs	r2, #0
 800a13a:	6062      	str	r2, [r4, #4]
 800a13c:	04d9      	lsls	r1, r3, #19
 800a13e:	6922      	ldr	r2, [r4, #16]
 800a140:	6022      	str	r2, [r4, #0]
 800a142:	d504      	bpl.n	800a14e <__sflush_r+0x7e>
 800a144:	1c42      	adds	r2, r0, #1
 800a146:	d101      	bne.n	800a14c <__sflush_r+0x7c>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	b903      	cbnz	r3, 800a14e <__sflush_r+0x7e>
 800a14c:	6560      	str	r0, [r4, #84]	; 0x54
 800a14e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a150:	602f      	str	r7, [r5, #0]
 800a152:	2900      	cmp	r1, #0
 800a154:	d0c9      	beq.n	800a0ea <__sflush_r+0x1a>
 800a156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a15a:	4299      	cmp	r1, r3
 800a15c:	d002      	beq.n	800a164 <__sflush_r+0x94>
 800a15e:	4628      	mov	r0, r5
 800a160:	f7ff fb00 	bl	8009764 <_free_r>
 800a164:	2000      	movs	r0, #0
 800a166:	6360      	str	r0, [r4, #52]	; 0x34
 800a168:	e7c0      	b.n	800a0ec <__sflush_r+0x1c>
 800a16a:	2301      	movs	r3, #1
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b0      	blx	r6
 800a170:	1c41      	adds	r1, r0, #1
 800a172:	d1c8      	bne.n	800a106 <__sflush_r+0x36>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d0c5      	beq.n	800a106 <__sflush_r+0x36>
 800a17a:	2b1d      	cmp	r3, #29
 800a17c:	d001      	beq.n	800a182 <__sflush_r+0xb2>
 800a17e:	2b16      	cmp	r3, #22
 800a180:	d101      	bne.n	800a186 <__sflush_r+0xb6>
 800a182:	602f      	str	r7, [r5, #0]
 800a184:	e7b1      	b.n	800a0ea <__sflush_r+0x1a>
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	e7ad      	b.n	800a0ec <__sflush_r+0x1c>
 800a190:	690f      	ldr	r7, [r1, #16]
 800a192:	2f00      	cmp	r7, #0
 800a194:	d0a9      	beq.n	800a0ea <__sflush_r+0x1a>
 800a196:	0793      	lsls	r3, r2, #30
 800a198:	680e      	ldr	r6, [r1, #0]
 800a19a:	bf08      	it	eq
 800a19c:	694b      	ldreq	r3, [r1, #20]
 800a19e:	600f      	str	r7, [r1, #0]
 800a1a0:	bf18      	it	ne
 800a1a2:	2300      	movne	r3, #0
 800a1a4:	eba6 0807 	sub.w	r8, r6, r7
 800a1a8:	608b      	str	r3, [r1, #8]
 800a1aa:	f1b8 0f00 	cmp.w	r8, #0
 800a1ae:	dd9c      	ble.n	800a0ea <__sflush_r+0x1a>
 800a1b0:	6a21      	ldr	r1, [r4, #32]
 800a1b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1b4:	4643      	mov	r3, r8
 800a1b6:	463a      	mov	r2, r7
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	47b0      	blx	r6
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	dc06      	bgt.n	800a1ce <__sflush_r+0xfe>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1cc:	e78e      	b.n	800a0ec <__sflush_r+0x1c>
 800a1ce:	4407      	add	r7, r0
 800a1d0:	eba8 0800 	sub.w	r8, r8, r0
 800a1d4:	e7e9      	b.n	800a1aa <__sflush_r+0xda>
 800a1d6:	bf00      	nop
 800a1d8:	dfbffffe 	.word	0xdfbffffe

0800a1dc <_fflush_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	690b      	ldr	r3, [r1, #16]
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	b913      	cbnz	r3, 800a1ec <_fflush_r+0x10>
 800a1e6:	2500      	movs	r5, #0
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	b118      	cbz	r0, 800a1f6 <_fflush_r+0x1a>
 800a1ee:	6a03      	ldr	r3, [r0, #32]
 800a1f0:	b90b      	cbnz	r3, 800a1f6 <_fflush_r+0x1a>
 800a1f2:	f7fd fd6d 	bl	8007cd0 <__sinit>
 800a1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0f3      	beq.n	800a1e6 <_fflush_r+0xa>
 800a1fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a200:	07d0      	lsls	r0, r2, #31
 800a202:	d404      	bmi.n	800a20e <_fflush_r+0x32>
 800a204:	0599      	lsls	r1, r3, #22
 800a206:	d402      	bmi.n	800a20e <_fflush_r+0x32>
 800a208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a20a:	f7ff fa5b 	bl	80096c4 <__retarget_lock_acquire_recursive>
 800a20e:	4628      	mov	r0, r5
 800a210:	4621      	mov	r1, r4
 800a212:	f7ff ff5d 	bl	800a0d0 <__sflush_r>
 800a216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a218:	07da      	lsls	r2, r3, #31
 800a21a:	4605      	mov	r5, r0
 800a21c:	d4e4      	bmi.n	800a1e8 <_fflush_r+0xc>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	059b      	lsls	r3, r3, #22
 800a222:	d4e1      	bmi.n	800a1e8 <_fflush_r+0xc>
 800a224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a226:	f7ff fa4f 	bl	80096c8 <__retarget_lock_release_recursive>
 800a22a:	e7dd      	b.n	800a1e8 <_fflush_r+0xc>

0800a22c <fiprintf>:
 800a22c:	b40e      	push	{r1, r2, r3}
 800a22e:	b503      	push	{r0, r1, lr}
 800a230:	4601      	mov	r1, r0
 800a232:	ab03      	add	r3, sp, #12
 800a234:	4805      	ldr	r0, [pc, #20]	; (800a24c <fiprintf+0x20>)
 800a236:	f853 2b04 	ldr.w	r2, [r3], #4
 800a23a:	6800      	ldr	r0, [r0, #0]
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	f000 fb59 	bl	800a8f4 <_vfiprintf_r>
 800a242:	b002      	add	sp, #8
 800a244:	f85d eb04 	ldr.w	lr, [sp], #4
 800a248:	b003      	add	sp, #12
 800a24a:	4770      	bx	lr
 800a24c:	20000070 	.word	0x20000070

0800a250 <siscanf>:
 800a250:	b40e      	push	{r1, r2, r3}
 800a252:	b510      	push	{r4, lr}
 800a254:	b09f      	sub	sp, #124	; 0x7c
 800a256:	ac21      	add	r4, sp, #132	; 0x84
 800a258:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a25c:	f854 2b04 	ldr.w	r2, [r4], #4
 800a260:	9201      	str	r2, [sp, #4]
 800a262:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a266:	9004      	str	r0, [sp, #16]
 800a268:	9008      	str	r0, [sp, #32]
 800a26a:	f7f5 ffbb 	bl	80001e4 <strlen>
 800a26e:	4b0c      	ldr	r3, [pc, #48]	; (800a2a0 <siscanf+0x50>)
 800a270:	9005      	str	r0, [sp, #20]
 800a272:	9009      	str	r0, [sp, #36]	; 0x24
 800a274:	930d      	str	r3, [sp, #52]	; 0x34
 800a276:	480b      	ldr	r0, [pc, #44]	; (800a2a4 <siscanf+0x54>)
 800a278:	9a01      	ldr	r2, [sp, #4]
 800a27a:	6800      	ldr	r0, [r0, #0]
 800a27c:	9403      	str	r4, [sp, #12]
 800a27e:	2300      	movs	r3, #0
 800a280:	9311      	str	r3, [sp, #68]	; 0x44
 800a282:	9316      	str	r3, [sp, #88]	; 0x58
 800a284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a288:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a28c:	a904      	add	r1, sp, #16
 800a28e:	4623      	mov	r3, r4
 800a290:	f000 f98e 	bl	800a5b0 <__ssvfiscanf_r>
 800a294:	b01f      	add	sp, #124	; 0x7c
 800a296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a29a:	b003      	add	sp, #12
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	08007dc7 	.word	0x08007dc7
 800a2a4:	20000070 	.word	0x20000070

0800a2a8 <memmove>:
 800a2a8:	4288      	cmp	r0, r1
 800a2aa:	b510      	push	{r4, lr}
 800a2ac:	eb01 0402 	add.w	r4, r1, r2
 800a2b0:	d902      	bls.n	800a2b8 <memmove+0x10>
 800a2b2:	4284      	cmp	r4, r0
 800a2b4:	4623      	mov	r3, r4
 800a2b6:	d807      	bhi.n	800a2c8 <memmove+0x20>
 800a2b8:	1e43      	subs	r3, r0, #1
 800a2ba:	42a1      	cmp	r1, r4
 800a2bc:	d008      	beq.n	800a2d0 <memmove+0x28>
 800a2be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2c6:	e7f8      	b.n	800a2ba <memmove+0x12>
 800a2c8:	4402      	add	r2, r0
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	428a      	cmp	r2, r1
 800a2ce:	d100      	bne.n	800a2d2 <memmove+0x2a>
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2da:	e7f7      	b.n	800a2cc <memmove+0x24>

0800a2dc <strncmp>:
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	b16a      	cbz	r2, 800a2fc <strncmp+0x20>
 800a2e0:	3901      	subs	r1, #1
 800a2e2:	1884      	adds	r4, r0, r2
 800a2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d103      	bne.n	800a2f8 <strncmp+0x1c>
 800a2f0:	42a0      	cmp	r0, r4
 800a2f2:	d001      	beq.n	800a2f8 <strncmp+0x1c>
 800a2f4:	2a00      	cmp	r2, #0
 800a2f6:	d1f5      	bne.n	800a2e4 <strncmp+0x8>
 800a2f8:	1ad0      	subs	r0, r2, r3
 800a2fa:	bd10      	pop	{r4, pc}
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	e7fc      	b.n	800a2fa <strncmp+0x1e>

0800a300 <__gettzinfo>:
 800a300:	4800      	ldr	r0, [pc, #0]	; (800a304 <__gettzinfo+0x4>)
 800a302:	4770      	bx	lr
 800a304:	20000078 	.word	0x20000078

0800a308 <gmtime_r>:
 800a308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30c:	4a4d      	ldr	r2, [pc, #308]	; (800a444 <gmtime_r+0x13c>)
 800a30e:	460c      	mov	r4, r1
 800a310:	2300      	movs	r3, #0
 800a312:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a316:	f7f6 fca7 	bl	8000c68 <__aeabi_ldivmod>
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	bfbc      	itt	lt
 800a31e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a322:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a326:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a32a:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 800a32e:	fbb2 f3f1 	udiv	r3, r2, r1
 800a332:	fb01 2213 	mls	r2, r1, r3, r2
 800a336:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800a33a:	bfac      	ite	ge
 800a33c:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800a340:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800a344:	60a3      	str	r3, [r4, #8]
 800a346:	fbb2 f3f1 	udiv	r3, r2, r1
 800a34a:	fb01 2213 	mls	r2, r1, r3, r2
 800a34e:	6063      	str	r3, [r4, #4]
 800a350:	6022      	str	r2, [r4, #0]
 800a352:	1cc3      	adds	r3, r0, #3
 800a354:	2207      	movs	r2, #7
 800a356:	fb93 f2f2 	sdiv	r2, r3, r2
 800a35a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800a35e:	1a9b      	subs	r3, r3, r2
 800a360:	bf48      	it	mi
 800a362:	3307      	addmi	r3, #7
 800a364:	2800      	cmp	r0, #0
 800a366:	61a3      	str	r3, [r4, #24]
 800a368:	bfb8      	it	lt
 800a36a:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800a36e:	4936      	ldr	r1, [pc, #216]	; (800a448 <gmtime_r+0x140>)
 800a370:	bfae      	itee	ge
 800a372:	fb90 f1f1 	sdivge	r1, r0, r1
 800a376:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800a37a:	fb93 f1f1 	sdivlt	r1, r3, r1
 800a37e:	4b33      	ldr	r3, [pc, #204]	; (800a44c <gmtime_r+0x144>)
 800a380:	fb03 0001 	mla	r0, r3, r1, r0
 800a384:	f648 63ac 	movw	r3, #36524	; 0x8eac
 800a388:	fbb0 f3f3 	udiv	r3, r0, r3
 800a38c:	4403      	add	r3, r0
 800a38e:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800a392:	fbb0 f2fc 	udiv	r2, r0, ip
 800a396:	1a9b      	subs	r3, r3, r2
 800a398:	f240 176d 	movw	r7, #365	; 0x16d
 800a39c:	4a2c      	ldr	r2, [pc, #176]	; (800a450 <gmtime_r+0x148>)
 800a39e:	fbb0 f2f2 	udiv	r2, r0, r2
 800a3a2:	2664      	movs	r6, #100	; 0x64
 800a3a4:	1a9b      	subs	r3, r3, r2
 800a3a6:	fbb3 f2f7 	udiv	r2, r3, r7
 800a3aa:	fbb3 f3fc 	udiv	r3, r3, ip
 800a3ae:	fbb2 f5f6 	udiv	r5, r2, r6
 800a3b2:	1aeb      	subs	r3, r5, r3
 800a3b4:	4403      	add	r3, r0
 800a3b6:	fb07 3312 	mls	r3, r7, r2, r3
 800a3ba:	2099      	movs	r0, #153	; 0x99
 800a3bc:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800a3c0:	3702      	adds	r7, #2
 800a3c2:	f103 0e01 	add.w	lr, r3, #1
 800a3c6:	fbb7 fcf0 	udiv	ip, r7, r0
 800a3ca:	fb00 f00c 	mul.w	r0, r0, ip
 800a3ce:	3002      	adds	r0, #2
 800a3d0:	f04f 0805 	mov.w	r8, #5
 800a3d4:	fbb0 f0f8 	udiv	r0, r0, r8
 800a3d8:	ebae 0000 	sub.w	r0, lr, r0
 800a3dc:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800a3e0:	4577      	cmp	r7, lr
 800a3e2:	bf94      	ite	ls
 800a3e4:	2702      	movls	r7, #2
 800a3e6:	f06f 0709 	mvnhi.w	r7, #9
 800a3ea:	4467      	add	r7, ip
 800a3ec:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800a3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f4:	2f01      	cmp	r7, #1
 800a3f6:	bf98      	it	ls
 800a3f8:	3101      	addls	r1, #1
 800a3fa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a3fe:	d30c      	bcc.n	800a41a <gmtime_r+0x112>
 800a400:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a404:	61e3      	str	r3, [r4, #28]
 800a406:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800a40a:	2300      	movs	r3, #0
 800a40c:	60e0      	str	r0, [r4, #12]
 800a40e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800a412:	6223      	str	r3, [r4, #32]
 800a414:	4620      	mov	r0, r4
 800a416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a41a:	f012 0f03 	tst.w	r2, #3
 800a41e:	d102      	bne.n	800a426 <gmtime_r+0x11e>
 800a420:	fb06 2515 	mls	r5, r6, r5, r2
 800a424:	b95d      	cbnz	r5, 800a43e <gmtime_r+0x136>
 800a426:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800a42a:	fbb2 f6f5 	udiv	r6, r2, r5
 800a42e:	fb05 2216 	mls	r2, r5, r6, r2
 800a432:	fab2 f282 	clz	r2, r2
 800a436:	0952      	lsrs	r2, r2, #5
 800a438:	333b      	adds	r3, #59	; 0x3b
 800a43a:	4413      	add	r3, r2
 800a43c:	e7e2      	b.n	800a404 <gmtime_r+0xfc>
 800a43e:	2201      	movs	r2, #1
 800a440:	e7fa      	b.n	800a438 <gmtime_r+0x130>
 800a442:	bf00      	nop
 800a444:	00015180 	.word	0x00015180
 800a448:	00023ab1 	.word	0x00023ab1
 800a44c:	fffdc54f 	.word	0xfffdc54f
 800a450:	00023ab0 	.word	0x00023ab0

0800a454 <_sbrk_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d06      	ldr	r5, [pc, #24]	; (800a470 <_sbrk_r+0x1c>)
 800a458:	2300      	movs	r3, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	602b      	str	r3, [r5, #0]
 800a460:	f7f8 ffc0 	bl	80033e4 <_sbrk>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_sbrk_r+0x1a>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_sbrk_r+0x1a>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	200003d8 	.word	0x200003d8

0800a474 <abort>:
 800a474:	b508      	push	{r3, lr}
 800a476:	2006      	movs	r0, #6
 800a478:	f000 fdd4 	bl	800b024 <raise>
 800a47c:	2001      	movs	r0, #1
 800a47e:	f7f8 ff3a 	bl	80032f6 <_exit>
	...

0800a484 <__env_lock>:
 800a484:	4801      	ldr	r0, [pc, #4]	; (800a48c <__env_lock+0x8>)
 800a486:	f7ff b91d 	b.w	80096c4 <__retarget_lock_acquire_recursive>
 800a48a:	bf00      	nop
 800a48c:	200003dc 	.word	0x200003dc

0800a490 <__env_unlock>:
 800a490:	4801      	ldr	r0, [pc, #4]	; (800a498 <__env_unlock+0x8>)
 800a492:	f7ff b919 	b.w	80096c8 <__retarget_lock_release_recursive>
 800a496:	bf00      	nop
 800a498:	200003dc 	.word	0x200003dc

0800a49c <_realloc_r>:
 800a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a0:	4680      	mov	r8, r0
 800a4a2:	4614      	mov	r4, r2
 800a4a4:	460e      	mov	r6, r1
 800a4a6:	b921      	cbnz	r1, 800a4b2 <_realloc_r+0x16>
 800a4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	f7ff ba1d 	b.w	80098ec <_malloc_r>
 800a4b2:	b92a      	cbnz	r2, 800a4c0 <_realloc_r+0x24>
 800a4b4:	f7ff f956 	bl	8009764 <_free_r>
 800a4b8:	4625      	mov	r5, r4
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c0:	f000 fdcc 	bl	800b05c <_malloc_usable_size_r>
 800a4c4:	4284      	cmp	r4, r0
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	d802      	bhi.n	800a4d0 <_realloc_r+0x34>
 800a4ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4ce:	d812      	bhi.n	800a4f6 <_realloc_r+0x5a>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	f7ff fa0a 	bl	80098ec <_malloc_r>
 800a4d8:	4605      	mov	r5, r0
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d0ed      	beq.n	800a4ba <_realloc_r+0x1e>
 800a4de:	42bc      	cmp	r4, r7
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	bf28      	it	cs
 800a4e6:	463a      	movcs	r2, r7
 800a4e8:	f7ff f8f7 	bl	80096da <memcpy>
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	f7ff f938 	bl	8009764 <_free_r>
 800a4f4:	e7e1      	b.n	800a4ba <_realloc_r+0x1e>
 800a4f6:	4635      	mov	r5, r6
 800a4f8:	e7df      	b.n	800a4ba <_realloc_r+0x1e>

0800a4fa <_sungetc_r>:
 800a4fa:	b538      	push	{r3, r4, r5, lr}
 800a4fc:	1c4b      	adds	r3, r1, #1
 800a4fe:	4614      	mov	r4, r2
 800a500:	d103      	bne.n	800a50a <_sungetc_r+0x10>
 800a502:	f04f 35ff 	mov.w	r5, #4294967295
 800a506:	4628      	mov	r0, r5
 800a508:	bd38      	pop	{r3, r4, r5, pc}
 800a50a:	8993      	ldrh	r3, [r2, #12]
 800a50c:	f023 0320 	bic.w	r3, r3, #32
 800a510:	8193      	strh	r3, [r2, #12]
 800a512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a514:	6852      	ldr	r2, [r2, #4]
 800a516:	b2cd      	uxtb	r5, r1
 800a518:	b18b      	cbz	r3, 800a53e <_sungetc_r+0x44>
 800a51a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a51c:	4293      	cmp	r3, r2
 800a51e:	dd08      	ble.n	800a532 <_sungetc_r+0x38>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	1e5a      	subs	r2, r3, #1
 800a524:	6022      	str	r2, [r4, #0]
 800a526:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a52a:	6863      	ldr	r3, [r4, #4]
 800a52c:	3301      	adds	r3, #1
 800a52e:	6063      	str	r3, [r4, #4]
 800a530:	e7e9      	b.n	800a506 <_sungetc_r+0xc>
 800a532:	4621      	mov	r1, r4
 800a534:	f000 fc7f 	bl	800ae36 <__submore>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d0f1      	beq.n	800a520 <_sungetc_r+0x26>
 800a53c:	e7e1      	b.n	800a502 <_sungetc_r+0x8>
 800a53e:	6921      	ldr	r1, [r4, #16]
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	b151      	cbz	r1, 800a55a <_sungetc_r+0x60>
 800a544:	4299      	cmp	r1, r3
 800a546:	d208      	bcs.n	800a55a <_sungetc_r+0x60>
 800a548:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a54c:	42a9      	cmp	r1, r5
 800a54e:	d104      	bne.n	800a55a <_sungetc_r+0x60>
 800a550:	3b01      	subs	r3, #1
 800a552:	3201      	adds	r2, #1
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	6062      	str	r2, [r4, #4]
 800a558:	e7d5      	b.n	800a506 <_sungetc_r+0xc>
 800a55a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a55e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a562:	6363      	str	r3, [r4, #52]	; 0x34
 800a564:	2303      	movs	r3, #3
 800a566:	63a3      	str	r3, [r4, #56]	; 0x38
 800a568:	4623      	mov	r3, r4
 800a56a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a56e:	6023      	str	r3, [r4, #0]
 800a570:	2301      	movs	r3, #1
 800a572:	e7dc      	b.n	800a52e <_sungetc_r+0x34>

0800a574 <__ssrefill_r>:
 800a574:	b510      	push	{r4, lr}
 800a576:	460c      	mov	r4, r1
 800a578:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a57a:	b169      	cbz	r1, 800a598 <__ssrefill_r+0x24>
 800a57c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a580:	4299      	cmp	r1, r3
 800a582:	d001      	beq.n	800a588 <__ssrefill_r+0x14>
 800a584:	f7ff f8ee 	bl	8009764 <_free_r>
 800a588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a58a:	6063      	str	r3, [r4, #4]
 800a58c:	2000      	movs	r0, #0
 800a58e:	6360      	str	r0, [r4, #52]	; 0x34
 800a590:	b113      	cbz	r3, 800a598 <__ssrefill_r+0x24>
 800a592:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	bd10      	pop	{r4, pc}
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	2300      	movs	r3, #0
 800a59e:	6063      	str	r3, [r4, #4]
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	f043 0320 	orr.w	r3, r3, #32
 800a5a6:	81a3      	strh	r3, [r4, #12]
 800a5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ac:	e7f3      	b.n	800a596 <__ssrefill_r+0x22>
	...

0800a5b0 <__ssvfiscanf_r>:
 800a5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a5c0:	49a6      	ldr	r1, [pc, #664]	; (800a85c <__ssvfiscanf_r+0x2ac>)
 800a5c2:	91a0      	str	r1, [sp, #640]	; 0x280
 800a5c4:	f10d 0804 	add.w	r8, sp, #4
 800a5c8:	49a5      	ldr	r1, [pc, #660]	; (800a860 <__ssvfiscanf_r+0x2b0>)
 800a5ca:	4fa6      	ldr	r7, [pc, #664]	; (800a864 <__ssvfiscanf_r+0x2b4>)
 800a5cc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a868 <__ssvfiscanf_r+0x2b8>
 800a5d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	91a1      	str	r1, [sp, #644]	; 0x284
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	7813      	ldrb	r3, [r2, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 815a 	beq.w	800a896 <__ssvfiscanf_r+0x2e6>
 800a5e2:	5cf9      	ldrb	r1, [r7, r3]
 800a5e4:	f011 0108 	ands.w	r1, r1, #8
 800a5e8:	f102 0501 	add.w	r5, r2, #1
 800a5ec:	d019      	beq.n	800a622 <__ssvfiscanf_r+0x72>
 800a5ee:	6863      	ldr	r3, [r4, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	dd0f      	ble.n	800a614 <__ssvfiscanf_r+0x64>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	781a      	ldrb	r2, [r3, #0]
 800a5f8:	5cba      	ldrb	r2, [r7, r2]
 800a5fa:	0712      	lsls	r2, r2, #28
 800a5fc:	d401      	bmi.n	800a602 <__ssvfiscanf_r+0x52>
 800a5fe:	462a      	mov	r2, r5
 800a600:	e7eb      	b.n	800a5da <__ssvfiscanf_r+0x2a>
 800a602:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a604:	3201      	adds	r2, #1
 800a606:	9245      	str	r2, [sp, #276]	; 0x114
 800a608:	6862      	ldr	r2, [r4, #4]
 800a60a:	3301      	adds	r3, #1
 800a60c:	3a01      	subs	r2, #1
 800a60e:	6062      	str	r2, [r4, #4]
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	e7ec      	b.n	800a5ee <__ssvfiscanf_r+0x3e>
 800a614:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a616:	4621      	mov	r1, r4
 800a618:	4630      	mov	r0, r6
 800a61a:	4798      	blx	r3
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d0e9      	beq.n	800a5f4 <__ssvfiscanf_r+0x44>
 800a620:	e7ed      	b.n	800a5fe <__ssvfiscanf_r+0x4e>
 800a622:	2b25      	cmp	r3, #37	; 0x25
 800a624:	d012      	beq.n	800a64c <__ssvfiscanf_r+0x9c>
 800a626:	469a      	mov	sl, r3
 800a628:	6863      	ldr	r3, [r4, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f340 8091 	ble.w	800a752 <__ssvfiscanf_r+0x1a2>
 800a630:	6822      	ldr	r2, [r4, #0]
 800a632:	7813      	ldrb	r3, [r2, #0]
 800a634:	4553      	cmp	r3, sl
 800a636:	f040 812e 	bne.w	800a896 <__ssvfiscanf_r+0x2e6>
 800a63a:	6863      	ldr	r3, [r4, #4]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	6063      	str	r3, [r4, #4]
 800a640:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a642:	3201      	adds	r2, #1
 800a644:	3301      	adds	r3, #1
 800a646:	6022      	str	r2, [r4, #0]
 800a648:	9345      	str	r3, [sp, #276]	; 0x114
 800a64a:	e7d8      	b.n	800a5fe <__ssvfiscanf_r+0x4e>
 800a64c:	9141      	str	r1, [sp, #260]	; 0x104
 800a64e:	9143      	str	r1, [sp, #268]	; 0x10c
 800a650:	7853      	ldrb	r3, [r2, #1]
 800a652:	2b2a      	cmp	r3, #42	; 0x2a
 800a654:	bf02      	ittt	eq
 800a656:	2310      	moveq	r3, #16
 800a658:	1c95      	addeq	r5, r2, #2
 800a65a:	9341      	streq	r3, [sp, #260]	; 0x104
 800a65c:	220a      	movs	r2, #10
 800a65e:	46aa      	mov	sl, r5
 800a660:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a664:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a668:	2b09      	cmp	r3, #9
 800a66a:	d91c      	bls.n	800a6a6 <__ssvfiscanf_r+0xf6>
 800a66c:	487e      	ldr	r0, [pc, #504]	; (800a868 <__ssvfiscanf_r+0x2b8>)
 800a66e:	2203      	movs	r2, #3
 800a670:	f7f5 fdc6 	bl	8000200 <memchr>
 800a674:	b138      	cbz	r0, 800a686 <__ssvfiscanf_r+0xd6>
 800a676:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a678:	eba0 0009 	sub.w	r0, r0, r9
 800a67c:	2301      	movs	r3, #1
 800a67e:	4083      	lsls	r3, r0
 800a680:	4313      	orrs	r3, r2
 800a682:	9341      	str	r3, [sp, #260]	; 0x104
 800a684:	4655      	mov	r5, sl
 800a686:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a68a:	2b78      	cmp	r3, #120	; 0x78
 800a68c:	d806      	bhi.n	800a69c <__ssvfiscanf_r+0xec>
 800a68e:	2b57      	cmp	r3, #87	; 0x57
 800a690:	d810      	bhi.n	800a6b4 <__ssvfiscanf_r+0x104>
 800a692:	2b25      	cmp	r3, #37	; 0x25
 800a694:	d0c7      	beq.n	800a626 <__ssvfiscanf_r+0x76>
 800a696:	d857      	bhi.n	800a748 <__ssvfiscanf_r+0x198>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d065      	beq.n	800a768 <__ssvfiscanf_r+0x1b8>
 800a69c:	2303      	movs	r3, #3
 800a69e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a6a0:	230a      	movs	r3, #10
 800a6a2:	9342      	str	r3, [sp, #264]	; 0x108
 800a6a4:	e076      	b.n	800a794 <__ssvfiscanf_r+0x1e4>
 800a6a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a6a8:	fb02 1103 	mla	r1, r2, r3, r1
 800a6ac:	3930      	subs	r1, #48	; 0x30
 800a6ae:	9143      	str	r1, [sp, #268]	; 0x10c
 800a6b0:	4655      	mov	r5, sl
 800a6b2:	e7d4      	b.n	800a65e <__ssvfiscanf_r+0xae>
 800a6b4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a6b8:	2a20      	cmp	r2, #32
 800a6ba:	d8ef      	bhi.n	800a69c <__ssvfiscanf_r+0xec>
 800a6bc:	a101      	add	r1, pc, #4	; (adr r1, 800a6c4 <__ssvfiscanf_r+0x114>)
 800a6be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a777 	.word	0x0800a777
 800a6c8:	0800a69d 	.word	0x0800a69d
 800a6cc:	0800a69d 	.word	0x0800a69d
 800a6d0:	0800a7d5 	.word	0x0800a7d5
 800a6d4:	0800a69d 	.word	0x0800a69d
 800a6d8:	0800a69d 	.word	0x0800a69d
 800a6dc:	0800a69d 	.word	0x0800a69d
 800a6e0:	0800a69d 	.word	0x0800a69d
 800a6e4:	0800a69d 	.word	0x0800a69d
 800a6e8:	0800a69d 	.word	0x0800a69d
 800a6ec:	0800a69d 	.word	0x0800a69d
 800a6f0:	0800a7eb 	.word	0x0800a7eb
 800a6f4:	0800a7d1 	.word	0x0800a7d1
 800a6f8:	0800a74f 	.word	0x0800a74f
 800a6fc:	0800a74f 	.word	0x0800a74f
 800a700:	0800a74f 	.word	0x0800a74f
 800a704:	0800a69d 	.word	0x0800a69d
 800a708:	0800a78d 	.word	0x0800a78d
 800a70c:	0800a69d 	.word	0x0800a69d
 800a710:	0800a69d 	.word	0x0800a69d
 800a714:	0800a69d 	.word	0x0800a69d
 800a718:	0800a69d 	.word	0x0800a69d
 800a71c:	0800a7fb 	.word	0x0800a7fb
 800a720:	0800a7c9 	.word	0x0800a7c9
 800a724:	0800a76f 	.word	0x0800a76f
 800a728:	0800a69d 	.word	0x0800a69d
 800a72c:	0800a69d 	.word	0x0800a69d
 800a730:	0800a7f7 	.word	0x0800a7f7
 800a734:	0800a69d 	.word	0x0800a69d
 800a738:	0800a7d1 	.word	0x0800a7d1
 800a73c:	0800a69d 	.word	0x0800a69d
 800a740:	0800a69d 	.word	0x0800a69d
 800a744:	0800a777 	.word	0x0800a777
 800a748:	3b45      	subs	r3, #69	; 0x45
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d8a6      	bhi.n	800a69c <__ssvfiscanf_r+0xec>
 800a74e:	2305      	movs	r3, #5
 800a750:	e01f      	b.n	800a792 <__ssvfiscanf_r+0x1e2>
 800a752:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a754:	4621      	mov	r1, r4
 800a756:	4630      	mov	r0, r6
 800a758:	4798      	blx	r3
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f43f af68 	beq.w	800a630 <__ssvfiscanf_r+0x80>
 800a760:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a762:	2800      	cmp	r0, #0
 800a764:	f040 808d 	bne.w	800a882 <__ssvfiscanf_r+0x2d2>
 800a768:	f04f 30ff 	mov.w	r0, #4294967295
 800a76c:	e08f      	b.n	800a88e <__ssvfiscanf_r+0x2de>
 800a76e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a770:	f042 0220 	orr.w	r2, r2, #32
 800a774:	9241      	str	r2, [sp, #260]	; 0x104
 800a776:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a77c:	9241      	str	r2, [sp, #260]	; 0x104
 800a77e:	2210      	movs	r2, #16
 800a780:	2b6f      	cmp	r3, #111	; 0x6f
 800a782:	9242      	str	r2, [sp, #264]	; 0x108
 800a784:	bf34      	ite	cc
 800a786:	2303      	movcc	r3, #3
 800a788:	2304      	movcs	r3, #4
 800a78a:	e002      	b.n	800a792 <__ssvfiscanf_r+0x1e2>
 800a78c:	2300      	movs	r3, #0
 800a78e:	9342      	str	r3, [sp, #264]	; 0x108
 800a790:	2303      	movs	r3, #3
 800a792:	9347      	str	r3, [sp, #284]	; 0x11c
 800a794:	6863      	ldr	r3, [r4, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	dd3d      	ble.n	800a816 <__ssvfiscanf_r+0x266>
 800a79a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a79c:	0659      	lsls	r1, r3, #25
 800a79e:	d404      	bmi.n	800a7aa <__ssvfiscanf_r+0x1fa>
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	781a      	ldrb	r2, [r3, #0]
 800a7a4:	5cba      	ldrb	r2, [r7, r2]
 800a7a6:	0712      	lsls	r2, r2, #28
 800a7a8:	d43c      	bmi.n	800a824 <__ssvfiscanf_r+0x274>
 800a7aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	dc4b      	bgt.n	800a848 <__ssvfiscanf_r+0x298>
 800a7b0:	466b      	mov	r3, sp
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	a941      	add	r1, sp, #260	; 0x104
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f000 f9b6 	bl	800ab28 <_scanf_chars>
 800a7bc:	2801      	cmp	r0, #1
 800a7be:	d06a      	beq.n	800a896 <__ssvfiscanf_r+0x2e6>
 800a7c0:	2802      	cmp	r0, #2
 800a7c2:	f47f af1c 	bne.w	800a5fe <__ssvfiscanf_r+0x4e>
 800a7c6:	e7cb      	b.n	800a760 <__ssvfiscanf_r+0x1b0>
 800a7c8:	2308      	movs	r3, #8
 800a7ca:	9342      	str	r3, [sp, #264]	; 0x108
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	e7e0      	b.n	800a792 <__ssvfiscanf_r+0x1e2>
 800a7d0:	220a      	movs	r2, #10
 800a7d2:	e7d5      	b.n	800a780 <__ssvfiscanf_r+0x1d0>
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f000 faf4 	bl	800adc4 <__sccl>
 800a7dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7e2:	9341      	str	r3, [sp, #260]	; 0x104
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e7d3      	b.n	800a792 <__ssvfiscanf_r+0x1e2>
 800a7ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f0:	9341      	str	r3, [sp, #260]	; 0x104
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e7cd      	b.n	800a792 <__ssvfiscanf_r+0x1e2>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e7cb      	b.n	800a792 <__ssvfiscanf_r+0x1e2>
 800a7fa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a7fc:	06c3      	lsls	r3, r0, #27
 800a7fe:	f53f aefe 	bmi.w	800a5fe <__ssvfiscanf_r+0x4e>
 800a802:	9b00      	ldr	r3, [sp, #0]
 800a804:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a806:	1d19      	adds	r1, r3, #4
 800a808:	9100      	str	r1, [sp, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	07c0      	lsls	r0, r0, #31
 800a80e:	bf4c      	ite	mi
 800a810:	801a      	strhmi	r2, [r3, #0]
 800a812:	601a      	strpl	r2, [r3, #0]
 800a814:	e6f3      	b.n	800a5fe <__ssvfiscanf_r+0x4e>
 800a816:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a818:	4621      	mov	r1, r4
 800a81a:	4630      	mov	r0, r6
 800a81c:	4798      	blx	r3
 800a81e:	2800      	cmp	r0, #0
 800a820:	d0bb      	beq.n	800a79a <__ssvfiscanf_r+0x1ea>
 800a822:	e79d      	b.n	800a760 <__ssvfiscanf_r+0x1b0>
 800a824:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a826:	3201      	adds	r2, #1
 800a828:	9245      	str	r2, [sp, #276]	; 0x114
 800a82a:	6862      	ldr	r2, [r4, #4]
 800a82c:	3a01      	subs	r2, #1
 800a82e:	2a00      	cmp	r2, #0
 800a830:	6062      	str	r2, [r4, #4]
 800a832:	dd02      	ble.n	800a83a <__ssvfiscanf_r+0x28a>
 800a834:	3301      	adds	r3, #1
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	e7b2      	b.n	800a7a0 <__ssvfiscanf_r+0x1f0>
 800a83a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a83c:	4621      	mov	r1, r4
 800a83e:	4630      	mov	r0, r6
 800a840:	4798      	blx	r3
 800a842:	2800      	cmp	r0, #0
 800a844:	d0ac      	beq.n	800a7a0 <__ssvfiscanf_r+0x1f0>
 800a846:	e78b      	b.n	800a760 <__ssvfiscanf_r+0x1b0>
 800a848:	2b04      	cmp	r3, #4
 800a84a:	dc0f      	bgt.n	800a86c <__ssvfiscanf_r+0x2bc>
 800a84c:	466b      	mov	r3, sp
 800a84e:	4622      	mov	r2, r4
 800a850:	a941      	add	r1, sp, #260	; 0x104
 800a852:	4630      	mov	r0, r6
 800a854:	f000 f9c2 	bl	800abdc <_scanf_i>
 800a858:	e7b0      	b.n	800a7bc <__ssvfiscanf_r+0x20c>
 800a85a:	bf00      	nop
 800a85c:	0800a4fb 	.word	0x0800a4fb
 800a860:	0800a575 	.word	0x0800a575
 800a864:	0800c065 	.word	0x0800c065
 800a868:	0800c16b 	.word	0x0800c16b
 800a86c:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <__ssvfiscanf_r+0x2ec>)
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f43f aec5 	beq.w	800a5fe <__ssvfiscanf_r+0x4e>
 800a874:	466b      	mov	r3, sp
 800a876:	4622      	mov	r2, r4
 800a878:	a941      	add	r1, sp, #260	; 0x104
 800a87a:	4630      	mov	r0, r6
 800a87c:	f3af 8000 	nop.w
 800a880:	e79c      	b.n	800a7bc <__ssvfiscanf_r+0x20c>
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a888:	bf18      	it	ne
 800a88a:	f04f 30ff 	movne.w	r0, #4294967295
 800a88e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a896:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a898:	e7f9      	b.n	800a88e <__ssvfiscanf_r+0x2de>
 800a89a:	bf00      	nop
 800a89c:	00000000 	.word	0x00000000

0800a8a0 <__sfputc_r>:
 800a8a0:	6893      	ldr	r3, [r2, #8]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	b410      	push	{r4}
 800a8a8:	6093      	str	r3, [r2, #8]
 800a8aa:	da08      	bge.n	800a8be <__sfputc_r+0x1e>
 800a8ac:	6994      	ldr	r4, [r2, #24]
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	db01      	blt.n	800a8b6 <__sfputc_r+0x16>
 800a8b2:	290a      	cmp	r1, #10
 800a8b4:	d103      	bne.n	800a8be <__sfputc_r+0x1e>
 800a8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8ba:	f000 baf6 	b.w	800aeaa <__swbuf_r>
 800a8be:	6813      	ldr	r3, [r2, #0]
 800a8c0:	1c58      	adds	r0, r3, #1
 800a8c2:	6010      	str	r0, [r2, #0]
 800a8c4:	7019      	strb	r1, [r3, #0]
 800a8c6:	4608      	mov	r0, r1
 800a8c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <__sfputs_r>:
 800a8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	460f      	mov	r7, r1
 800a8d4:	4614      	mov	r4, r2
 800a8d6:	18d5      	adds	r5, r2, r3
 800a8d8:	42ac      	cmp	r4, r5
 800a8da:	d101      	bne.n	800a8e0 <__sfputs_r+0x12>
 800a8dc:	2000      	movs	r0, #0
 800a8de:	e007      	b.n	800a8f0 <__sfputs_r+0x22>
 800a8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e4:	463a      	mov	r2, r7
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f7ff ffda 	bl	800a8a0 <__sfputc_r>
 800a8ec:	1c43      	adds	r3, r0, #1
 800a8ee:	d1f3      	bne.n	800a8d8 <__sfputs_r+0xa>
 800a8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8f4 <_vfiprintf_r>:
 800a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	b09d      	sub	sp, #116	; 0x74
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	4698      	mov	r8, r3
 800a900:	4606      	mov	r6, r0
 800a902:	b118      	cbz	r0, 800a90c <_vfiprintf_r+0x18>
 800a904:	6a03      	ldr	r3, [r0, #32]
 800a906:	b90b      	cbnz	r3, 800a90c <_vfiprintf_r+0x18>
 800a908:	f7fd f9e2 	bl	8007cd0 <__sinit>
 800a90c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a90e:	07d9      	lsls	r1, r3, #31
 800a910:	d405      	bmi.n	800a91e <_vfiprintf_r+0x2a>
 800a912:	89ab      	ldrh	r3, [r5, #12]
 800a914:	059a      	lsls	r2, r3, #22
 800a916:	d402      	bmi.n	800a91e <_vfiprintf_r+0x2a>
 800a918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a91a:	f7fe fed3 	bl	80096c4 <__retarget_lock_acquire_recursive>
 800a91e:	89ab      	ldrh	r3, [r5, #12]
 800a920:	071b      	lsls	r3, r3, #28
 800a922:	d501      	bpl.n	800a928 <_vfiprintf_r+0x34>
 800a924:	692b      	ldr	r3, [r5, #16]
 800a926:	b99b      	cbnz	r3, 800a950 <_vfiprintf_r+0x5c>
 800a928:	4629      	mov	r1, r5
 800a92a:	4630      	mov	r0, r6
 800a92c:	f000 fafa 	bl	800af24 <__swsetup_r>
 800a930:	b170      	cbz	r0, 800a950 <_vfiprintf_r+0x5c>
 800a932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a934:	07dc      	lsls	r4, r3, #31
 800a936:	d504      	bpl.n	800a942 <_vfiprintf_r+0x4e>
 800a938:	f04f 30ff 	mov.w	r0, #4294967295
 800a93c:	b01d      	add	sp, #116	; 0x74
 800a93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a942:	89ab      	ldrh	r3, [r5, #12]
 800a944:	0598      	lsls	r0, r3, #22
 800a946:	d4f7      	bmi.n	800a938 <_vfiprintf_r+0x44>
 800a948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a94a:	f7fe febd 	bl	80096c8 <__retarget_lock_release_recursive>
 800a94e:	e7f3      	b.n	800a938 <_vfiprintf_r+0x44>
 800a950:	2300      	movs	r3, #0
 800a952:	9309      	str	r3, [sp, #36]	; 0x24
 800a954:	2320      	movs	r3, #32
 800a956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a95a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a95e:	2330      	movs	r3, #48	; 0x30
 800a960:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ab14 <_vfiprintf_r+0x220>
 800a964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a968:	f04f 0901 	mov.w	r9, #1
 800a96c:	4623      	mov	r3, r4
 800a96e:	469a      	mov	sl, r3
 800a970:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a974:	b10a      	cbz	r2, 800a97a <_vfiprintf_r+0x86>
 800a976:	2a25      	cmp	r2, #37	; 0x25
 800a978:	d1f9      	bne.n	800a96e <_vfiprintf_r+0x7a>
 800a97a:	ebba 0b04 	subs.w	fp, sl, r4
 800a97e:	d00b      	beq.n	800a998 <_vfiprintf_r+0xa4>
 800a980:	465b      	mov	r3, fp
 800a982:	4622      	mov	r2, r4
 800a984:	4629      	mov	r1, r5
 800a986:	4630      	mov	r0, r6
 800a988:	f7ff ffa1 	bl	800a8ce <__sfputs_r>
 800a98c:	3001      	adds	r0, #1
 800a98e:	f000 80a9 	beq.w	800aae4 <_vfiprintf_r+0x1f0>
 800a992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a994:	445a      	add	r2, fp
 800a996:	9209      	str	r2, [sp, #36]	; 0x24
 800a998:	f89a 3000 	ldrb.w	r3, [sl]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f000 80a1 	beq.w	800aae4 <_vfiprintf_r+0x1f0>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ac:	f10a 0a01 	add.w	sl, sl, #1
 800a9b0:	9304      	str	r3, [sp, #16]
 800a9b2:	9307      	str	r3, [sp, #28]
 800a9b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a9ba:	4654      	mov	r4, sl
 800a9bc:	2205      	movs	r2, #5
 800a9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c2:	4854      	ldr	r0, [pc, #336]	; (800ab14 <_vfiprintf_r+0x220>)
 800a9c4:	f7f5 fc1c 	bl	8000200 <memchr>
 800a9c8:	9a04      	ldr	r2, [sp, #16]
 800a9ca:	b9d8      	cbnz	r0, 800aa04 <_vfiprintf_r+0x110>
 800a9cc:	06d1      	lsls	r1, r2, #27
 800a9ce:	bf44      	itt	mi
 800a9d0:	2320      	movmi	r3, #32
 800a9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9d6:	0713      	lsls	r3, r2, #28
 800a9d8:	bf44      	itt	mi
 800a9da:	232b      	movmi	r3, #43	; 0x2b
 800a9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e6:	d015      	beq.n	800aa14 <_vfiprintf_r+0x120>
 800a9e8:	9a07      	ldr	r2, [sp, #28]
 800a9ea:	4654      	mov	r4, sl
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	f04f 0c0a 	mov.w	ip, #10
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9f8:	3b30      	subs	r3, #48	; 0x30
 800a9fa:	2b09      	cmp	r3, #9
 800a9fc:	d94d      	bls.n	800aa9a <_vfiprintf_r+0x1a6>
 800a9fe:	b1b0      	cbz	r0, 800aa2e <_vfiprintf_r+0x13a>
 800aa00:	9207      	str	r2, [sp, #28]
 800aa02:	e014      	b.n	800aa2e <_vfiprintf_r+0x13a>
 800aa04:	eba0 0308 	sub.w	r3, r0, r8
 800aa08:	fa09 f303 	lsl.w	r3, r9, r3
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	46a2      	mov	sl, r4
 800aa12:	e7d2      	b.n	800a9ba <_vfiprintf_r+0xc6>
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	1d19      	adds	r1, r3, #4
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	9103      	str	r1, [sp, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bfbb      	ittet	lt
 800aa20:	425b      	neglt	r3, r3
 800aa22:	f042 0202 	orrlt.w	r2, r2, #2
 800aa26:	9307      	strge	r3, [sp, #28]
 800aa28:	9307      	strlt	r3, [sp, #28]
 800aa2a:	bfb8      	it	lt
 800aa2c:	9204      	strlt	r2, [sp, #16]
 800aa2e:	7823      	ldrb	r3, [r4, #0]
 800aa30:	2b2e      	cmp	r3, #46	; 0x2e
 800aa32:	d10c      	bne.n	800aa4e <_vfiprintf_r+0x15a>
 800aa34:	7863      	ldrb	r3, [r4, #1]
 800aa36:	2b2a      	cmp	r3, #42	; 0x2a
 800aa38:	d134      	bne.n	800aaa4 <_vfiprintf_r+0x1b0>
 800aa3a:	9b03      	ldr	r3, [sp, #12]
 800aa3c:	1d1a      	adds	r2, r3, #4
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	9203      	str	r2, [sp, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	bfb8      	it	lt
 800aa46:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa4a:	3402      	adds	r4, #2
 800aa4c:	9305      	str	r3, [sp, #20]
 800aa4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ab24 <_vfiprintf_r+0x230>
 800aa52:	7821      	ldrb	r1, [r4, #0]
 800aa54:	2203      	movs	r2, #3
 800aa56:	4650      	mov	r0, sl
 800aa58:	f7f5 fbd2 	bl	8000200 <memchr>
 800aa5c:	b138      	cbz	r0, 800aa6e <_vfiprintf_r+0x17a>
 800aa5e:	9b04      	ldr	r3, [sp, #16]
 800aa60:	eba0 000a 	sub.w	r0, r0, sl
 800aa64:	2240      	movs	r2, #64	; 0x40
 800aa66:	4082      	lsls	r2, r0
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	3401      	adds	r4, #1
 800aa6c:	9304      	str	r3, [sp, #16]
 800aa6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa72:	4829      	ldr	r0, [pc, #164]	; (800ab18 <_vfiprintf_r+0x224>)
 800aa74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa78:	2206      	movs	r2, #6
 800aa7a:	f7f5 fbc1 	bl	8000200 <memchr>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d03f      	beq.n	800ab02 <_vfiprintf_r+0x20e>
 800aa82:	4b26      	ldr	r3, [pc, #152]	; (800ab1c <_vfiprintf_r+0x228>)
 800aa84:	bb1b      	cbnz	r3, 800aace <_vfiprintf_r+0x1da>
 800aa86:	9b03      	ldr	r3, [sp, #12]
 800aa88:	3307      	adds	r3, #7
 800aa8a:	f023 0307 	bic.w	r3, r3, #7
 800aa8e:	3308      	adds	r3, #8
 800aa90:	9303      	str	r3, [sp, #12]
 800aa92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa94:	443b      	add	r3, r7
 800aa96:	9309      	str	r3, [sp, #36]	; 0x24
 800aa98:	e768      	b.n	800a96c <_vfiprintf_r+0x78>
 800aa9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	e7a6      	b.n	800a9f2 <_vfiprintf_r+0xfe>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	3401      	adds	r4, #1
 800aaa8:	9305      	str	r3, [sp, #20]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	f04f 0c0a 	mov.w	ip, #10
 800aab0:	4620      	mov	r0, r4
 800aab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aab6:	3a30      	subs	r2, #48	; 0x30
 800aab8:	2a09      	cmp	r2, #9
 800aaba:	d903      	bls.n	800aac4 <_vfiprintf_r+0x1d0>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0c6      	beq.n	800aa4e <_vfiprintf_r+0x15a>
 800aac0:	9105      	str	r1, [sp, #20]
 800aac2:	e7c4      	b.n	800aa4e <_vfiprintf_r+0x15a>
 800aac4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aac8:	4604      	mov	r4, r0
 800aaca:	2301      	movs	r3, #1
 800aacc:	e7f0      	b.n	800aab0 <_vfiprintf_r+0x1bc>
 800aace:	ab03      	add	r3, sp, #12
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	462a      	mov	r2, r5
 800aad4:	4b12      	ldr	r3, [pc, #72]	; (800ab20 <_vfiprintf_r+0x22c>)
 800aad6:	a904      	add	r1, sp, #16
 800aad8:	4630      	mov	r0, r6
 800aada:	f3af 8000 	nop.w
 800aade:	4607      	mov	r7, r0
 800aae0:	1c78      	adds	r0, r7, #1
 800aae2:	d1d6      	bne.n	800aa92 <_vfiprintf_r+0x19e>
 800aae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aae6:	07d9      	lsls	r1, r3, #31
 800aae8:	d405      	bmi.n	800aaf6 <_vfiprintf_r+0x202>
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	059a      	lsls	r2, r3, #22
 800aaee:	d402      	bmi.n	800aaf6 <_vfiprintf_r+0x202>
 800aaf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaf2:	f7fe fde9 	bl	80096c8 <__retarget_lock_release_recursive>
 800aaf6:	89ab      	ldrh	r3, [r5, #12]
 800aaf8:	065b      	lsls	r3, r3, #25
 800aafa:	f53f af1d 	bmi.w	800a938 <_vfiprintf_r+0x44>
 800aafe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab00:	e71c      	b.n	800a93c <_vfiprintf_r+0x48>
 800ab02:	ab03      	add	r3, sp, #12
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	462a      	mov	r2, r5
 800ab08:	4b05      	ldr	r3, [pc, #20]	; (800ab20 <_vfiprintf_r+0x22c>)
 800ab0a:	a904      	add	r1, sp, #16
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f7ff f9bd 	bl	8009e8c <_printf_i>
 800ab12:	e7e4      	b.n	800aade <_vfiprintf_r+0x1ea>
 800ab14:	0800c165 	.word	0x0800c165
 800ab18:	0800c16f 	.word	0x0800c16f
 800ab1c:	00000000 	.word	0x00000000
 800ab20:	0800a8cf 	.word	0x0800a8cf
 800ab24:	0800c16b 	.word	0x0800c16b

0800ab28 <_scanf_chars>:
 800ab28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	4615      	mov	r5, r2
 800ab2e:	688a      	ldr	r2, [r1, #8]
 800ab30:	4680      	mov	r8, r0
 800ab32:	460c      	mov	r4, r1
 800ab34:	b932      	cbnz	r2, 800ab44 <_scanf_chars+0x1c>
 800ab36:	698a      	ldr	r2, [r1, #24]
 800ab38:	2a00      	cmp	r2, #0
 800ab3a:	bf0c      	ite	eq
 800ab3c:	2201      	moveq	r2, #1
 800ab3e:	f04f 32ff 	movne.w	r2, #4294967295
 800ab42:	608a      	str	r2, [r1, #8]
 800ab44:	6822      	ldr	r2, [r4, #0]
 800ab46:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800abd8 <_scanf_chars+0xb0>
 800ab4a:	06d1      	lsls	r1, r2, #27
 800ab4c:	bf5f      	itttt	pl
 800ab4e:	681a      	ldrpl	r2, [r3, #0]
 800ab50:	1d11      	addpl	r1, r2, #4
 800ab52:	6019      	strpl	r1, [r3, #0]
 800ab54:	6816      	ldrpl	r6, [r2, #0]
 800ab56:	2700      	movs	r7, #0
 800ab58:	69a0      	ldr	r0, [r4, #24]
 800ab5a:	b188      	cbz	r0, 800ab80 <_scanf_chars+0x58>
 800ab5c:	2801      	cmp	r0, #1
 800ab5e:	d107      	bne.n	800ab70 <_scanf_chars+0x48>
 800ab60:	682a      	ldr	r2, [r5, #0]
 800ab62:	7811      	ldrb	r1, [r2, #0]
 800ab64:	6962      	ldr	r2, [r4, #20]
 800ab66:	5c52      	ldrb	r2, [r2, r1]
 800ab68:	b952      	cbnz	r2, 800ab80 <_scanf_chars+0x58>
 800ab6a:	2f00      	cmp	r7, #0
 800ab6c:	d031      	beq.n	800abd2 <_scanf_chars+0xaa>
 800ab6e:	e022      	b.n	800abb6 <_scanf_chars+0x8e>
 800ab70:	2802      	cmp	r0, #2
 800ab72:	d120      	bne.n	800abb6 <_scanf_chars+0x8e>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ab7c:	071b      	lsls	r3, r3, #28
 800ab7e:	d41a      	bmi.n	800abb6 <_scanf_chars+0x8e>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	06da      	lsls	r2, r3, #27
 800ab84:	bf5e      	ittt	pl
 800ab86:	682b      	ldrpl	r3, [r5, #0]
 800ab88:	781b      	ldrbpl	r3, [r3, #0]
 800ab8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ab8e:	682a      	ldr	r2, [r5, #0]
 800ab90:	686b      	ldr	r3, [r5, #4]
 800ab92:	3201      	adds	r2, #1
 800ab94:	602a      	str	r2, [r5, #0]
 800ab96:	68a2      	ldr	r2, [r4, #8]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	3a01      	subs	r2, #1
 800ab9c:	606b      	str	r3, [r5, #4]
 800ab9e:	3701      	adds	r7, #1
 800aba0:	60a2      	str	r2, [r4, #8]
 800aba2:	b142      	cbz	r2, 800abb6 <_scanf_chars+0x8e>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	dcd7      	bgt.n	800ab58 <_scanf_chars+0x30>
 800aba8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abac:	4629      	mov	r1, r5
 800abae:	4640      	mov	r0, r8
 800abb0:	4798      	blx	r3
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d0d0      	beq.n	800ab58 <_scanf_chars+0x30>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	f013 0310 	ands.w	r3, r3, #16
 800abbc:	d105      	bne.n	800abca <_scanf_chars+0xa2>
 800abbe:	68e2      	ldr	r2, [r4, #12]
 800abc0:	3201      	adds	r2, #1
 800abc2:	60e2      	str	r2, [r4, #12]
 800abc4:	69a2      	ldr	r2, [r4, #24]
 800abc6:	b102      	cbz	r2, 800abca <_scanf_chars+0xa2>
 800abc8:	7033      	strb	r3, [r6, #0]
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	443b      	add	r3, r7
 800abce:	6123      	str	r3, [r4, #16]
 800abd0:	2000      	movs	r0, #0
 800abd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd6:	bf00      	nop
 800abd8:	0800c065 	.word	0x0800c065

0800abdc <_scanf_i>:
 800abdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe0:	4698      	mov	r8, r3
 800abe2:	4b74      	ldr	r3, [pc, #464]	; (800adb4 <_scanf_i+0x1d8>)
 800abe4:	460c      	mov	r4, r1
 800abe6:	4682      	mov	sl, r0
 800abe8:	4616      	mov	r6, r2
 800abea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800abee:	b087      	sub	sp, #28
 800abf0:	ab03      	add	r3, sp, #12
 800abf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800abf6:	4b70      	ldr	r3, [pc, #448]	; (800adb8 <_scanf_i+0x1dc>)
 800abf8:	69a1      	ldr	r1, [r4, #24]
 800abfa:	4a70      	ldr	r2, [pc, #448]	; (800adbc <_scanf_i+0x1e0>)
 800abfc:	2903      	cmp	r1, #3
 800abfe:	bf18      	it	ne
 800ac00:	461a      	movne	r2, r3
 800ac02:	68a3      	ldr	r3, [r4, #8]
 800ac04:	9201      	str	r2, [sp, #4]
 800ac06:	1e5a      	subs	r2, r3, #1
 800ac08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac0c:	bf88      	it	hi
 800ac0e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac12:	4627      	mov	r7, r4
 800ac14:	bf82      	ittt	hi
 800ac16:	eb03 0905 	addhi.w	r9, r3, r5
 800ac1a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac1e:	60a3      	strhi	r3, [r4, #8]
 800ac20:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ac24:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ac28:	bf98      	it	ls
 800ac2a:	f04f 0900 	movls.w	r9, #0
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	463d      	mov	r5, r7
 800ac32:	f04f 0b00 	mov.w	fp, #0
 800ac36:	6831      	ldr	r1, [r6, #0]
 800ac38:	ab03      	add	r3, sp, #12
 800ac3a:	7809      	ldrb	r1, [r1, #0]
 800ac3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ac40:	2202      	movs	r2, #2
 800ac42:	f7f5 fadd 	bl	8000200 <memchr>
 800ac46:	b328      	cbz	r0, 800ac94 <_scanf_i+0xb8>
 800ac48:	f1bb 0f01 	cmp.w	fp, #1
 800ac4c:	d159      	bne.n	800ad02 <_scanf_i+0x126>
 800ac4e:	6862      	ldr	r2, [r4, #4]
 800ac50:	b92a      	cbnz	r2, 800ac5e <_scanf_i+0x82>
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	2308      	movs	r3, #8
 800ac56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac5a:	6063      	str	r3, [r4, #4]
 800ac5c:	6022      	str	r2, [r4, #0]
 800ac5e:	6822      	ldr	r2, [r4, #0]
 800ac60:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ac64:	6022      	str	r2, [r4, #0]
 800ac66:	68a2      	ldr	r2, [r4, #8]
 800ac68:	1e51      	subs	r1, r2, #1
 800ac6a:	60a1      	str	r1, [r4, #8]
 800ac6c:	b192      	cbz	r2, 800ac94 <_scanf_i+0xb8>
 800ac6e:	6832      	ldr	r2, [r6, #0]
 800ac70:	1c51      	adds	r1, r2, #1
 800ac72:	6031      	str	r1, [r6, #0]
 800ac74:	7812      	ldrb	r2, [r2, #0]
 800ac76:	f805 2b01 	strb.w	r2, [r5], #1
 800ac7a:	6872      	ldr	r2, [r6, #4]
 800ac7c:	3a01      	subs	r2, #1
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	6072      	str	r2, [r6, #4]
 800ac82:	dc07      	bgt.n	800ac94 <_scanf_i+0xb8>
 800ac84:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ac88:	4631      	mov	r1, r6
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	4790      	blx	r2
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f040 8085 	bne.w	800ad9e <_scanf_i+0x1c2>
 800ac94:	f10b 0b01 	add.w	fp, fp, #1
 800ac98:	f1bb 0f03 	cmp.w	fp, #3
 800ac9c:	d1cb      	bne.n	800ac36 <_scanf_i+0x5a>
 800ac9e:	6863      	ldr	r3, [r4, #4]
 800aca0:	b90b      	cbnz	r3, 800aca6 <_scanf_i+0xca>
 800aca2:	230a      	movs	r3, #10
 800aca4:	6063      	str	r3, [r4, #4]
 800aca6:	6863      	ldr	r3, [r4, #4]
 800aca8:	4945      	ldr	r1, [pc, #276]	; (800adc0 <_scanf_i+0x1e4>)
 800acaa:	6960      	ldr	r0, [r4, #20]
 800acac:	1ac9      	subs	r1, r1, r3
 800acae:	f000 f889 	bl	800adc4 <__sccl>
 800acb2:	f04f 0b00 	mov.w	fp, #0
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	6822      	ldr	r2, [r4, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d03d      	beq.n	800ad3a <_scanf_i+0x15e>
 800acbe:	6831      	ldr	r1, [r6, #0]
 800acc0:	6960      	ldr	r0, [r4, #20]
 800acc2:	f891 c000 	ldrb.w	ip, [r1]
 800acc6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800acca:	2800      	cmp	r0, #0
 800accc:	d035      	beq.n	800ad3a <_scanf_i+0x15e>
 800acce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800acd2:	d124      	bne.n	800ad1e <_scanf_i+0x142>
 800acd4:	0510      	lsls	r0, r2, #20
 800acd6:	d522      	bpl.n	800ad1e <_scanf_i+0x142>
 800acd8:	f10b 0b01 	add.w	fp, fp, #1
 800acdc:	f1b9 0f00 	cmp.w	r9, #0
 800ace0:	d003      	beq.n	800acea <_scanf_i+0x10e>
 800ace2:	3301      	adds	r3, #1
 800ace4:	f109 39ff 	add.w	r9, r9, #4294967295
 800ace8:	60a3      	str	r3, [r4, #8]
 800acea:	6873      	ldr	r3, [r6, #4]
 800acec:	3b01      	subs	r3, #1
 800acee:	2b00      	cmp	r3, #0
 800acf0:	6073      	str	r3, [r6, #4]
 800acf2:	dd1b      	ble.n	800ad2c <_scanf_i+0x150>
 800acf4:	6833      	ldr	r3, [r6, #0]
 800acf6:	3301      	adds	r3, #1
 800acf8:	6033      	str	r3, [r6, #0]
 800acfa:	68a3      	ldr	r3, [r4, #8]
 800acfc:	3b01      	subs	r3, #1
 800acfe:	60a3      	str	r3, [r4, #8]
 800ad00:	e7d9      	b.n	800acb6 <_scanf_i+0xda>
 800ad02:	f1bb 0f02 	cmp.w	fp, #2
 800ad06:	d1ae      	bne.n	800ac66 <_scanf_i+0x8a>
 800ad08:	6822      	ldr	r2, [r4, #0]
 800ad0a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ad0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ad12:	d1bf      	bne.n	800ac94 <_scanf_i+0xb8>
 800ad14:	2310      	movs	r3, #16
 800ad16:	6063      	str	r3, [r4, #4]
 800ad18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad1c:	e7a2      	b.n	800ac64 <_scanf_i+0x88>
 800ad1e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ad22:	6022      	str	r2, [r4, #0]
 800ad24:	780b      	ldrb	r3, [r1, #0]
 800ad26:	f805 3b01 	strb.w	r3, [r5], #1
 800ad2a:	e7de      	b.n	800acea <_scanf_i+0x10e>
 800ad2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad30:	4631      	mov	r1, r6
 800ad32:	4650      	mov	r0, sl
 800ad34:	4798      	blx	r3
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d0df      	beq.n	800acfa <_scanf_i+0x11e>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	05d9      	lsls	r1, r3, #23
 800ad3e:	d50d      	bpl.n	800ad5c <_scanf_i+0x180>
 800ad40:	42bd      	cmp	r5, r7
 800ad42:	d909      	bls.n	800ad58 <_scanf_i+0x17c>
 800ad44:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ad48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad4c:	4632      	mov	r2, r6
 800ad4e:	4650      	mov	r0, sl
 800ad50:	4798      	blx	r3
 800ad52:	f105 39ff 	add.w	r9, r5, #4294967295
 800ad56:	464d      	mov	r5, r9
 800ad58:	42bd      	cmp	r5, r7
 800ad5a:	d028      	beq.n	800adae <_scanf_i+0x1d2>
 800ad5c:	6822      	ldr	r2, [r4, #0]
 800ad5e:	f012 0210 	ands.w	r2, r2, #16
 800ad62:	d113      	bne.n	800ad8c <_scanf_i+0x1b0>
 800ad64:	702a      	strb	r2, [r5, #0]
 800ad66:	6863      	ldr	r3, [r4, #4]
 800ad68:	9e01      	ldr	r6, [sp, #4]
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	4650      	mov	r0, sl
 800ad6e:	47b0      	blx	r6
 800ad70:	f8d8 3000 	ldr.w	r3, [r8]
 800ad74:	6821      	ldr	r1, [r4, #0]
 800ad76:	1d1a      	adds	r2, r3, #4
 800ad78:	f8c8 2000 	str.w	r2, [r8]
 800ad7c:	f011 0f20 	tst.w	r1, #32
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	d00f      	beq.n	800ada4 <_scanf_i+0x1c8>
 800ad84:	6018      	str	r0, [r3, #0]
 800ad86:	68e3      	ldr	r3, [r4, #12]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	60e3      	str	r3, [r4, #12]
 800ad8c:	6923      	ldr	r3, [r4, #16]
 800ad8e:	1bed      	subs	r5, r5, r7
 800ad90:	445d      	add	r5, fp
 800ad92:	442b      	add	r3, r5
 800ad94:	6123      	str	r3, [r4, #16]
 800ad96:	2000      	movs	r0, #0
 800ad98:	b007      	add	sp, #28
 800ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9e:	f04f 0b00 	mov.w	fp, #0
 800ada2:	e7ca      	b.n	800ad3a <_scanf_i+0x15e>
 800ada4:	07ca      	lsls	r2, r1, #31
 800ada6:	bf4c      	ite	mi
 800ada8:	8018      	strhmi	r0, [r3, #0]
 800adaa:	6018      	strpl	r0, [r3, #0]
 800adac:	e7eb      	b.n	800ad86 <_scanf_i+0x1aa>
 800adae:	2001      	movs	r0, #1
 800adb0:	e7f2      	b.n	800ad98 <_scanf_i+0x1bc>
 800adb2:	bf00      	nop
 800adb4:	0800bbd4 	.word	0x0800bbd4
 800adb8:	08009ae9 	.word	0x08009ae9
 800adbc:	0800b171 	.word	0x0800b171
 800adc0:	0800c1a8 	.word	0x0800c1a8

0800adc4 <__sccl>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	780b      	ldrb	r3, [r1, #0]
 800adc8:	4604      	mov	r4, r0
 800adca:	2b5e      	cmp	r3, #94	; 0x5e
 800adcc:	bf0b      	itete	eq
 800adce:	784b      	ldrbeq	r3, [r1, #1]
 800add0:	1c4a      	addne	r2, r1, #1
 800add2:	1c8a      	addeq	r2, r1, #2
 800add4:	2100      	movne	r1, #0
 800add6:	bf08      	it	eq
 800add8:	2101      	moveq	r1, #1
 800adda:	3801      	subs	r0, #1
 800addc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ade0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ade4:	42a8      	cmp	r0, r5
 800ade6:	d1fb      	bne.n	800ade0 <__sccl+0x1c>
 800ade8:	b90b      	cbnz	r3, 800adee <__sccl+0x2a>
 800adea:	1e50      	subs	r0, r2, #1
 800adec:	bd70      	pop	{r4, r5, r6, pc}
 800adee:	f081 0101 	eor.w	r1, r1, #1
 800adf2:	54e1      	strb	r1, [r4, r3]
 800adf4:	4610      	mov	r0, r2
 800adf6:	4602      	mov	r2, r0
 800adf8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800adfc:	2d2d      	cmp	r5, #45	; 0x2d
 800adfe:	d005      	beq.n	800ae0c <__sccl+0x48>
 800ae00:	2d5d      	cmp	r5, #93	; 0x5d
 800ae02:	d016      	beq.n	800ae32 <__sccl+0x6e>
 800ae04:	2d00      	cmp	r5, #0
 800ae06:	d0f1      	beq.n	800adec <__sccl+0x28>
 800ae08:	462b      	mov	r3, r5
 800ae0a:	e7f2      	b.n	800adf2 <__sccl+0x2e>
 800ae0c:	7846      	ldrb	r6, [r0, #1]
 800ae0e:	2e5d      	cmp	r6, #93	; 0x5d
 800ae10:	d0fa      	beq.n	800ae08 <__sccl+0x44>
 800ae12:	42b3      	cmp	r3, r6
 800ae14:	dcf8      	bgt.n	800ae08 <__sccl+0x44>
 800ae16:	3002      	adds	r0, #2
 800ae18:	461a      	mov	r2, r3
 800ae1a:	3201      	adds	r2, #1
 800ae1c:	4296      	cmp	r6, r2
 800ae1e:	54a1      	strb	r1, [r4, r2]
 800ae20:	dcfb      	bgt.n	800ae1a <__sccl+0x56>
 800ae22:	1af2      	subs	r2, r6, r3
 800ae24:	3a01      	subs	r2, #1
 800ae26:	1c5d      	adds	r5, r3, #1
 800ae28:	42b3      	cmp	r3, r6
 800ae2a:	bfa8      	it	ge
 800ae2c:	2200      	movge	r2, #0
 800ae2e:	18ab      	adds	r3, r5, r2
 800ae30:	e7e1      	b.n	800adf6 <__sccl+0x32>
 800ae32:	4610      	mov	r0, r2
 800ae34:	e7da      	b.n	800adec <__sccl+0x28>

0800ae36 <__submore>:
 800ae36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ae3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae42:	4299      	cmp	r1, r3
 800ae44:	d11d      	bne.n	800ae82 <__submore+0x4c>
 800ae46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae4a:	f7fe fd4f 	bl	80098ec <_malloc_r>
 800ae4e:	b918      	cbnz	r0, 800ae58 <__submore+0x22>
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae5c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae5e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ae62:	6360      	str	r0, [r4, #52]	; 0x34
 800ae64:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ae68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ae6c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ae70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ae74:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ae78:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ae7c:	6020      	str	r0, [r4, #0]
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e7e8      	b.n	800ae54 <__submore+0x1e>
 800ae82:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ae84:	0077      	lsls	r7, r6, #1
 800ae86:	463a      	mov	r2, r7
 800ae88:	f7ff fb08 	bl	800a49c <_realloc_r>
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d0de      	beq.n	800ae50 <__submore+0x1a>
 800ae92:	eb00 0806 	add.w	r8, r0, r6
 800ae96:	4601      	mov	r1, r0
 800ae98:	4632      	mov	r2, r6
 800ae9a:	4640      	mov	r0, r8
 800ae9c:	f7fe fc1d 	bl	80096da <memcpy>
 800aea0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800aea4:	f8c4 8000 	str.w	r8, [r4]
 800aea8:	e7e9      	b.n	800ae7e <__submore+0x48>

0800aeaa <__swbuf_r>:
 800aeaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeac:	460e      	mov	r6, r1
 800aeae:	4614      	mov	r4, r2
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	b118      	cbz	r0, 800aebc <__swbuf_r+0x12>
 800aeb4:	6a03      	ldr	r3, [r0, #32]
 800aeb6:	b90b      	cbnz	r3, 800aebc <__swbuf_r+0x12>
 800aeb8:	f7fc ff0a 	bl	8007cd0 <__sinit>
 800aebc:	69a3      	ldr	r3, [r4, #24]
 800aebe:	60a3      	str	r3, [r4, #8]
 800aec0:	89a3      	ldrh	r3, [r4, #12]
 800aec2:	071a      	lsls	r2, r3, #28
 800aec4:	d525      	bpl.n	800af12 <__swbuf_r+0x68>
 800aec6:	6923      	ldr	r3, [r4, #16]
 800aec8:	b31b      	cbz	r3, 800af12 <__swbuf_r+0x68>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	6922      	ldr	r2, [r4, #16]
 800aece:	1a98      	subs	r0, r3, r2
 800aed0:	6963      	ldr	r3, [r4, #20]
 800aed2:	b2f6      	uxtb	r6, r6
 800aed4:	4283      	cmp	r3, r0
 800aed6:	4637      	mov	r7, r6
 800aed8:	dc04      	bgt.n	800aee4 <__swbuf_r+0x3a>
 800aeda:	4621      	mov	r1, r4
 800aedc:	4628      	mov	r0, r5
 800aede:	f7ff f97d 	bl	800a1dc <_fflush_r>
 800aee2:	b9e0      	cbnz	r0, 800af1e <__swbuf_r+0x74>
 800aee4:	68a3      	ldr	r3, [r4, #8]
 800aee6:	3b01      	subs	r3, #1
 800aee8:	60a3      	str	r3, [r4, #8]
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	1c5a      	adds	r2, r3, #1
 800aeee:	6022      	str	r2, [r4, #0]
 800aef0:	701e      	strb	r6, [r3, #0]
 800aef2:	6962      	ldr	r2, [r4, #20]
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d004      	beq.n	800af04 <__swbuf_r+0x5a>
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	07db      	lsls	r3, r3, #31
 800aefe:	d506      	bpl.n	800af0e <__swbuf_r+0x64>
 800af00:	2e0a      	cmp	r6, #10
 800af02:	d104      	bne.n	800af0e <__swbuf_r+0x64>
 800af04:	4621      	mov	r1, r4
 800af06:	4628      	mov	r0, r5
 800af08:	f7ff f968 	bl	800a1dc <_fflush_r>
 800af0c:	b938      	cbnz	r0, 800af1e <__swbuf_r+0x74>
 800af0e:	4638      	mov	r0, r7
 800af10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af12:	4621      	mov	r1, r4
 800af14:	4628      	mov	r0, r5
 800af16:	f000 f805 	bl	800af24 <__swsetup_r>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d0d5      	beq.n	800aeca <__swbuf_r+0x20>
 800af1e:	f04f 37ff 	mov.w	r7, #4294967295
 800af22:	e7f4      	b.n	800af0e <__swbuf_r+0x64>

0800af24 <__swsetup_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4b2a      	ldr	r3, [pc, #168]	; (800afd0 <__swsetup_r+0xac>)
 800af28:	4605      	mov	r5, r0
 800af2a:	6818      	ldr	r0, [r3, #0]
 800af2c:	460c      	mov	r4, r1
 800af2e:	b118      	cbz	r0, 800af38 <__swsetup_r+0x14>
 800af30:	6a03      	ldr	r3, [r0, #32]
 800af32:	b90b      	cbnz	r3, 800af38 <__swsetup_r+0x14>
 800af34:	f7fc fecc 	bl	8007cd0 <__sinit>
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af3e:	0718      	lsls	r0, r3, #28
 800af40:	d422      	bmi.n	800af88 <__swsetup_r+0x64>
 800af42:	06d9      	lsls	r1, r3, #27
 800af44:	d407      	bmi.n	800af56 <__swsetup_r+0x32>
 800af46:	2309      	movs	r3, #9
 800af48:	602b      	str	r3, [r5, #0]
 800af4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	f04f 30ff 	mov.w	r0, #4294967295
 800af54:	e034      	b.n	800afc0 <__swsetup_r+0x9c>
 800af56:	0758      	lsls	r0, r3, #29
 800af58:	d512      	bpl.n	800af80 <__swsetup_r+0x5c>
 800af5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af5c:	b141      	cbz	r1, 800af70 <__swsetup_r+0x4c>
 800af5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af62:	4299      	cmp	r1, r3
 800af64:	d002      	beq.n	800af6c <__swsetup_r+0x48>
 800af66:	4628      	mov	r0, r5
 800af68:	f7fe fbfc 	bl	8009764 <_free_r>
 800af6c:	2300      	movs	r3, #0
 800af6e:	6363      	str	r3, [r4, #52]	; 0x34
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	2300      	movs	r3, #0
 800af7a:	6063      	str	r3, [r4, #4]
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	6023      	str	r3, [r4, #0]
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	f043 0308 	orr.w	r3, r3, #8
 800af86:	81a3      	strh	r3, [r4, #12]
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	b94b      	cbnz	r3, 800afa0 <__swsetup_r+0x7c>
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af96:	d003      	beq.n	800afa0 <__swsetup_r+0x7c>
 800af98:	4621      	mov	r1, r4
 800af9a:	4628      	mov	r0, r5
 800af9c:	f000 f910 	bl	800b1c0 <__smakebuf_r>
 800afa0:	89a0      	ldrh	r0, [r4, #12]
 800afa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afa6:	f010 0301 	ands.w	r3, r0, #1
 800afaa:	d00a      	beq.n	800afc2 <__swsetup_r+0x9e>
 800afac:	2300      	movs	r3, #0
 800afae:	60a3      	str	r3, [r4, #8]
 800afb0:	6963      	ldr	r3, [r4, #20]
 800afb2:	425b      	negs	r3, r3
 800afb4:	61a3      	str	r3, [r4, #24]
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	b943      	cbnz	r3, 800afcc <__swsetup_r+0xa8>
 800afba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afbe:	d1c4      	bne.n	800af4a <__swsetup_r+0x26>
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	0781      	lsls	r1, r0, #30
 800afc4:	bf58      	it	pl
 800afc6:	6963      	ldrpl	r3, [r4, #20]
 800afc8:	60a3      	str	r3, [r4, #8]
 800afca:	e7f4      	b.n	800afb6 <__swsetup_r+0x92>
 800afcc:	2000      	movs	r0, #0
 800afce:	e7f7      	b.n	800afc0 <__swsetup_r+0x9c>
 800afd0:	20000070 	.word	0x20000070

0800afd4 <_raise_r>:
 800afd4:	291f      	cmp	r1, #31
 800afd6:	b538      	push	{r3, r4, r5, lr}
 800afd8:	4604      	mov	r4, r0
 800afda:	460d      	mov	r5, r1
 800afdc:	d904      	bls.n	800afe8 <_raise_r+0x14>
 800afde:	2316      	movs	r3, #22
 800afe0:	6003      	str	r3, [r0, #0]
 800afe2:	f04f 30ff 	mov.w	r0, #4294967295
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800afea:	b112      	cbz	r2, 800aff2 <_raise_r+0x1e>
 800afec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aff0:	b94b      	cbnz	r3, 800b006 <_raise_r+0x32>
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 f830 	bl	800b058 <_getpid_r>
 800aff8:	462a      	mov	r2, r5
 800affa:	4601      	mov	r1, r0
 800affc:	4620      	mov	r0, r4
 800affe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b002:	f000 b817 	b.w	800b034 <_kill_r>
 800b006:	2b01      	cmp	r3, #1
 800b008:	d00a      	beq.n	800b020 <_raise_r+0x4c>
 800b00a:	1c59      	adds	r1, r3, #1
 800b00c:	d103      	bne.n	800b016 <_raise_r+0x42>
 800b00e:	2316      	movs	r3, #22
 800b010:	6003      	str	r3, [r0, #0]
 800b012:	2001      	movs	r0, #1
 800b014:	e7e7      	b.n	800afe6 <_raise_r+0x12>
 800b016:	2400      	movs	r4, #0
 800b018:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b01c:	4628      	mov	r0, r5
 800b01e:	4798      	blx	r3
 800b020:	2000      	movs	r0, #0
 800b022:	e7e0      	b.n	800afe6 <_raise_r+0x12>

0800b024 <raise>:
 800b024:	4b02      	ldr	r3, [pc, #8]	; (800b030 <raise+0xc>)
 800b026:	4601      	mov	r1, r0
 800b028:	6818      	ldr	r0, [r3, #0]
 800b02a:	f7ff bfd3 	b.w	800afd4 <_raise_r>
 800b02e:	bf00      	nop
 800b030:	20000070 	.word	0x20000070

0800b034 <_kill_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d07      	ldr	r5, [pc, #28]	; (800b054 <_kill_r+0x20>)
 800b038:	2300      	movs	r3, #0
 800b03a:	4604      	mov	r4, r0
 800b03c:	4608      	mov	r0, r1
 800b03e:	4611      	mov	r1, r2
 800b040:	602b      	str	r3, [r5, #0]
 800b042:	f7f8 f948 	bl	80032d6 <_kill>
 800b046:	1c43      	adds	r3, r0, #1
 800b048:	d102      	bne.n	800b050 <_kill_r+0x1c>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	b103      	cbz	r3, 800b050 <_kill_r+0x1c>
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	bd38      	pop	{r3, r4, r5, pc}
 800b052:	bf00      	nop
 800b054:	200003d8 	.word	0x200003d8

0800b058 <_getpid_r>:
 800b058:	f7f8 b935 	b.w	80032c6 <_getpid>

0800b05c <_malloc_usable_size_r>:
 800b05c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b060:	1f18      	subs	r0, r3, #4
 800b062:	2b00      	cmp	r3, #0
 800b064:	bfbc      	itt	lt
 800b066:	580b      	ldrlt	r3, [r1, r0]
 800b068:	18c0      	addlt	r0, r0, r3
 800b06a:	4770      	bx	lr

0800b06c <_strtol_l.constprop.0>:
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b072:	d001      	beq.n	800b078 <_strtol_l.constprop.0+0xc>
 800b074:	2b24      	cmp	r3, #36	; 0x24
 800b076:	d906      	bls.n	800b086 <_strtol_l.constprop.0+0x1a>
 800b078:	f7fe faf8 	bl	800966c <__errno>
 800b07c:	2316      	movs	r3, #22
 800b07e:	6003      	str	r3, [r0, #0]
 800b080:	2000      	movs	r0, #0
 800b082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b086:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b16c <_strtol_l.constprop.0+0x100>
 800b08a:	460d      	mov	r5, r1
 800b08c:	462e      	mov	r6, r5
 800b08e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b092:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b096:	f017 0708 	ands.w	r7, r7, #8
 800b09a:	d1f7      	bne.n	800b08c <_strtol_l.constprop.0+0x20>
 800b09c:	2c2d      	cmp	r4, #45	; 0x2d
 800b09e:	d132      	bne.n	800b106 <_strtol_l.constprop.0+0x9a>
 800b0a0:	782c      	ldrb	r4, [r5, #0]
 800b0a2:	2701      	movs	r7, #1
 800b0a4:	1cb5      	adds	r5, r6, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d05b      	beq.n	800b162 <_strtol_l.constprop.0+0xf6>
 800b0aa:	2b10      	cmp	r3, #16
 800b0ac:	d109      	bne.n	800b0c2 <_strtol_l.constprop.0+0x56>
 800b0ae:	2c30      	cmp	r4, #48	; 0x30
 800b0b0:	d107      	bne.n	800b0c2 <_strtol_l.constprop.0+0x56>
 800b0b2:	782c      	ldrb	r4, [r5, #0]
 800b0b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b0b8:	2c58      	cmp	r4, #88	; 0x58
 800b0ba:	d14d      	bne.n	800b158 <_strtol_l.constprop.0+0xec>
 800b0bc:	786c      	ldrb	r4, [r5, #1]
 800b0be:	2310      	movs	r3, #16
 800b0c0:	3502      	adds	r5, #2
 800b0c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b0c6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0ca:	f04f 0e00 	mov.w	lr, #0
 800b0ce:	fbb8 f9f3 	udiv	r9, r8, r3
 800b0d2:	4676      	mov	r6, lr
 800b0d4:	fb03 8a19 	mls	sl, r3, r9, r8
 800b0d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b0dc:	f1bc 0f09 	cmp.w	ip, #9
 800b0e0:	d816      	bhi.n	800b110 <_strtol_l.constprop.0+0xa4>
 800b0e2:	4664      	mov	r4, ip
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	dd24      	ble.n	800b132 <_strtol_l.constprop.0+0xc6>
 800b0e8:	f1be 3fff 	cmp.w	lr, #4294967295
 800b0ec:	d008      	beq.n	800b100 <_strtol_l.constprop.0+0x94>
 800b0ee:	45b1      	cmp	r9, r6
 800b0f0:	d31c      	bcc.n	800b12c <_strtol_l.constprop.0+0xc0>
 800b0f2:	d101      	bne.n	800b0f8 <_strtol_l.constprop.0+0x8c>
 800b0f4:	45a2      	cmp	sl, r4
 800b0f6:	db19      	blt.n	800b12c <_strtol_l.constprop.0+0xc0>
 800b0f8:	fb06 4603 	mla	r6, r6, r3, r4
 800b0fc:	f04f 0e01 	mov.w	lr, #1
 800b100:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b104:	e7e8      	b.n	800b0d8 <_strtol_l.constprop.0+0x6c>
 800b106:	2c2b      	cmp	r4, #43	; 0x2b
 800b108:	bf04      	itt	eq
 800b10a:	782c      	ldrbeq	r4, [r5, #0]
 800b10c:	1cb5      	addeq	r5, r6, #2
 800b10e:	e7ca      	b.n	800b0a6 <_strtol_l.constprop.0+0x3a>
 800b110:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b114:	f1bc 0f19 	cmp.w	ip, #25
 800b118:	d801      	bhi.n	800b11e <_strtol_l.constprop.0+0xb2>
 800b11a:	3c37      	subs	r4, #55	; 0x37
 800b11c:	e7e2      	b.n	800b0e4 <_strtol_l.constprop.0+0x78>
 800b11e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b122:	f1bc 0f19 	cmp.w	ip, #25
 800b126:	d804      	bhi.n	800b132 <_strtol_l.constprop.0+0xc6>
 800b128:	3c57      	subs	r4, #87	; 0x57
 800b12a:	e7db      	b.n	800b0e4 <_strtol_l.constprop.0+0x78>
 800b12c:	f04f 3eff 	mov.w	lr, #4294967295
 800b130:	e7e6      	b.n	800b100 <_strtol_l.constprop.0+0x94>
 800b132:	f1be 3fff 	cmp.w	lr, #4294967295
 800b136:	d105      	bne.n	800b144 <_strtol_l.constprop.0+0xd8>
 800b138:	2322      	movs	r3, #34	; 0x22
 800b13a:	6003      	str	r3, [r0, #0]
 800b13c:	4646      	mov	r6, r8
 800b13e:	b942      	cbnz	r2, 800b152 <_strtol_l.constprop.0+0xe6>
 800b140:	4630      	mov	r0, r6
 800b142:	e79e      	b.n	800b082 <_strtol_l.constprop.0+0x16>
 800b144:	b107      	cbz	r7, 800b148 <_strtol_l.constprop.0+0xdc>
 800b146:	4276      	negs	r6, r6
 800b148:	2a00      	cmp	r2, #0
 800b14a:	d0f9      	beq.n	800b140 <_strtol_l.constprop.0+0xd4>
 800b14c:	f1be 0f00 	cmp.w	lr, #0
 800b150:	d000      	beq.n	800b154 <_strtol_l.constprop.0+0xe8>
 800b152:	1e69      	subs	r1, r5, #1
 800b154:	6011      	str	r1, [r2, #0]
 800b156:	e7f3      	b.n	800b140 <_strtol_l.constprop.0+0xd4>
 800b158:	2430      	movs	r4, #48	; 0x30
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1b1      	bne.n	800b0c2 <_strtol_l.constprop.0+0x56>
 800b15e:	2308      	movs	r3, #8
 800b160:	e7af      	b.n	800b0c2 <_strtol_l.constprop.0+0x56>
 800b162:	2c30      	cmp	r4, #48	; 0x30
 800b164:	d0a5      	beq.n	800b0b2 <_strtol_l.constprop.0+0x46>
 800b166:	230a      	movs	r3, #10
 800b168:	e7ab      	b.n	800b0c2 <_strtol_l.constprop.0+0x56>
 800b16a:	bf00      	nop
 800b16c:	0800c065 	.word	0x0800c065

0800b170 <_strtol_r>:
 800b170:	f7ff bf7c 	b.w	800b06c <_strtol_l.constprop.0>

0800b174 <__swhatbuf_r>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	460c      	mov	r4, r1
 800b178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b17c:	2900      	cmp	r1, #0
 800b17e:	b096      	sub	sp, #88	; 0x58
 800b180:	4615      	mov	r5, r2
 800b182:	461e      	mov	r6, r3
 800b184:	da0d      	bge.n	800b1a2 <__swhatbuf_r+0x2e>
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b18c:	f04f 0100 	mov.w	r1, #0
 800b190:	bf0c      	ite	eq
 800b192:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b196:	2340      	movne	r3, #64	; 0x40
 800b198:	2000      	movs	r0, #0
 800b19a:	6031      	str	r1, [r6, #0]
 800b19c:	602b      	str	r3, [r5, #0]
 800b19e:	b016      	add	sp, #88	; 0x58
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	466a      	mov	r2, sp
 800b1a4:	f000 f848 	bl	800b238 <_fstat_r>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	dbec      	blt.n	800b186 <__swhatbuf_r+0x12>
 800b1ac:	9901      	ldr	r1, [sp, #4]
 800b1ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b1b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b1b6:	4259      	negs	r1, r3
 800b1b8:	4159      	adcs	r1, r3
 800b1ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1be:	e7eb      	b.n	800b198 <__swhatbuf_r+0x24>

0800b1c0 <__smakebuf_r>:
 800b1c0:	898b      	ldrh	r3, [r1, #12]
 800b1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1c4:	079d      	lsls	r5, r3, #30
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	d507      	bpl.n	800b1dc <__smakebuf_r+0x1c>
 800b1cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	6123      	str	r3, [r4, #16]
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	6163      	str	r3, [r4, #20]
 800b1d8:	b002      	add	sp, #8
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	ab01      	add	r3, sp, #4
 800b1de:	466a      	mov	r2, sp
 800b1e0:	f7ff ffc8 	bl	800b174 <__swhatbuf_r>
 800b1e4:	9900      	ldr	r1, [sp, #0]
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7fe fb7f 	bl	80098ec <_malloc_r>
 800b1ee:	b948      	cbnz	r0, 800b204 <__smakebuf_r+0x44>
 800b1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f4:	059a      	lsls	r2, r3, #22
 800b1f6:	d4ef      	bmi.n	800b1d8 <__smakebuf_r+0x18>
 800b1f8:	f023 0303 	bic.w	r3, r3, #3
 800b1fc:	f043 0302 	orr.w	r3, r3, #2
 800b200:	81a3      	strh	r3, [r4, #12]
 800b202:	e7e3      	b.n	800b1cc <__smakebuf_r+0xc>
 800b204:	89a3      	ldrh	r3, [r4, #12]
 800b206:	6020      	str	r0, [r4, #0]
 800b208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b20c:	81a3      	strh	r3, [r4, #12]
 800b20e:	9b00      	ldr	r3, [sp, #0]
 800b210:	6163      	str	r3, [r4, #20]
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	6120      	str	r0, [r4, #16]
 800b216:	b15b      	cbz	r3, 800b230 <__smakebuf_r+0x70>
 800b218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b21c:	4630      	mov	r0, r6
 800b21e:	f000 f81d 	bl	800b25c <_isatty_r>
 800b222:	b128      	cbz	r0, 800b230 <__smakebuf_r+0x70>
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	f023 0303 	bic.w	r3, r3, #3
 800b22a:	f043 0301 	orr.w	r3, r3, #1
 800b22e:	81a3      	strh	r3, [r4, #12]
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	431d      	orrs	r5, r3
 800b234:	81a5      	strh	r5, [r4, #12]
 800b236:	e7cf      	b.n	800b1d8 <__smakebuf_r+0x18>

0800b238 <_fstat_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4d07      	ldr	r5, [pc, #28]	; (800b258 <_fstat_r+0x20>)
 800b23c:	2300      	movs	r3, #0
 800b23e:	4604      	mov	r4, r0
 800b240:	4608      	mov	r0, r1
 800b242:	4611      	mov	r1, r2
 800b244:	602b      	str	r3, [r5, #0]
 800b246:	f7f8 f8a5 	bl	8003394 <_fstat>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	d102      	bne.n	800b254 <_fstat_r+0x1c>
 800b24e:	682b      	ldr	r3, [r5, #0]
 800b250:	b103      	cbz	r3, 800b254 <_fstat_r+0x1c>
 800b252:	6023      	str	r3, [r4, #0]
 800b254:	bd38      	pop	{r3, r4, r5, pc}
 800b256:	bf00      	nop
 800b258:	200003d8 	.word	0x200003d8

0800b25c <_isatty_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4d06      	ldr	r5, [pc, #24]	; (800b278 <_isatty_r+0x1c>)
 800b260:	2300      	movs	r3, #0
 800b262:	4604      	mov	r4, r0
 800b264:	4608      	mov	r0, r1
 800b266:	602b      	str	r3, [r5, #0]
 800b268:	f7f8 f8a4 	bl	80033b4 <_isatty>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_isatty_r+0x1a>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	b103      	cbz	r3, 800b276 <_isatty_r+0x1a>
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	200003d8 	.word	0x200003d8
 800b27c:	00000000 	.word	0x00000000

0800b280 <log>:
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	ed2d 8b02 	vpush	{d8}
 800b286:	ec55 4b10 	vmov	r4, r5, d0
 800b28a:	f000 f841 	bl	800b310 <__ieee754_log>
 800b28e:	4622      	mov	r2, r4
 800b290:	462b      	mov	r3, r5
 800b292:	4620      	mov	r0, r4
 800b294:	4629      	mov	r1, r5
 800b296:	eeb0 8a40 	vmov.f32	s16, s0
 800b29a:	eef0 8a60 	vmov.f32	s17, s1
 800b29e:	f7f5 fc55 	bl	8000b4c <__aeabi_dcmpun>
 800b2a2:	b998      	cbnz	r0, 800b2cc <log+0x4c>
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	f7f5 fc44 	bl	8000b38 <__aeabi_dcmpgt>
 800b2b0:	b960      	cbnz	r0, 800b2cc <log+0x4c>
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7f5 fc15 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2be:	b160      	cbz	r0, 800b2da <log+0x5a>
 800b2c0:	f7fe f9d4 	bl	800966c <__errno>
 800b2c4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b2f0 <log+0x70>
 800b2c8:	2322      	movs	r3, #34	; 0x22
 800b2ca:	6003      	str	r3, [r0, #0]
 800b2cc:	eeb0 0a48 	vmov.f32	s0, s16
 800b2d0:	eef0 0a68 	vmov.f32	s1, s17
 800b2d4:	ecbd 8b02 	vpop	{d8}
 800b2d8:	bd38      	pop	{r3, r4, r5, pc}
 800b2da:	f7fe f9c7 	bl	800966c <__errno>
 800b2de:	ecbd 8b02 	vpop	{d8}
 800b2e2:	2321      	movs	r3, #33	; 0x21
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ea:	4803      	ldr	r0, [pc, #12]	; (800b2f8 <log+0x78>)
 800b2ec:	f000 b808 	b.w	800b300 <nan>
 800b2f0:	00000000 	.word	0x00000000
 800b2f4:	fff00000 	.word	0xfff00000
 800b2f8:	0800c063 	.word	0x0800c063
 800b2fc:	00000000 	.word	0x00000000

0800b300 <nan>:
 800b300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b308 <nan+0x8>
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	00000000 	.word	0x00000000
 800b30c:	7ff80000 	.word	0x7ff80000

0800b310 <__ieee754_log>:
 800b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	ec51 0b10 	vmov	r0, r1, d0
 800b318:	ed2d 8b04 	vpush	{d8-d9}
 800b31c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b320:	b083      	sub	sp, #12
 800b322:	460d      	mov	r5, r1
 800b324:	da29      	bge.n	800b37a <__ieee754_log+0x6a>
 800b326:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b32a:	4303      	orrs	r3, r0
 800b32c:	ee10 2a10 	vmov	r2, s0
 800b330:	d10c      	bne.n	800b34c <__ieee754_log+0x3c>
 800b332:	49cf      	ldr	r1, [pc, #828]	; (800b670 <__ieee754_log+0x360>)
 800b334:	2200      	movs	r2, #0
 800b336:	2300      	movs	r3, #0
 800b338:	2000      	movs	r0, #0
 800b33a:	f7f5 fa97 	bl	800086c <__aeabi_ddiv>
 800b33e:	ec41 0b10 	vmov	d0, r0, r1
 800b342:	b003      	add	sp, #12
 800b344:	ecbd 8b04 	vpop	{d8-d9}
 800b348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34c:	2900      	cmp	r1, #0
 800b34e:	da05      	bge.n	800b35c <__ieee754_log+0x4c>
 800b350:	460b      	mov	r3, r1
 800b352:	f7f4 ffa9 	bl	80002a8 <__aeabi_dsub>
 800b356:	2200      	movs	r2, #0
 800b358:	2300      	movs	r3, #0
 800b35a:	e7ee      	b.n	800b33a <__ieee754_log+0x2a>
 800b35c:	4bc5      	ldr	r3, [pc, #788]	; (800b674 <__ieee754_log+0x364>)
 800b35e:	2200      	movs	r2, #0
 800b360:	f7f5 f95a 	bl	8000618 <__aeabi_dmul>
 800b364:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b368:	460d      	mov	r5, r1
 800b36a:	4ac3      	ldr	r2, [pc, #780]	; (800b678 <__ieee754_log+0x368>)
 800b36c:	4295      	cmp	r5, r2
 800b36e:	dd06      	ble.n	800b37e <__ieee754_log+0x6e>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	f7f4 ff9a 	bl	80002ac <__adddf3>
 800b378:	e7e1      	b.n	800b33e <__ieee754_log+0x2e>
 800b37a:	2300      	movs	r3, #0
 800b37c:	e7f5      	b.n	800b36a <__ieee754_log+0x5a>
 800b37e:	152c      	asrs	r4, r5, #20
 800b380:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b384:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b388:	441c      	add	r4, r3
 800b38a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b38e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b396:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b39a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b39e:	ea42 0105 	orr.w	r1, r2, r5
 800b3a2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	4bb4      	ldr	r3, [pc, #720]	; (800b67c <__ieee754_log+0x36c>)
 800b3aa:	f7f4 ff7d 	bl	80002a8 <__aeabi_dsub>
 800b3ae:	1cab      	adds	r3, r5, #2
 800b3b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	4682      	mov	sl, r0
 800b3b8:	468b      	mov	fp, r1
 800b3ba:	f04f 0200 	mov.w	r2, #0
 800b3be:	dc53      	bgt.n	800b468 <__ieee754_log+0x158>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f7f5 fb91 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3c6:	b1d0      	cbz	r0, 800b3fe <__ieee754_log+0xee>
 800b3c8:	2c00      	cmp	r4, #0
 800b3ca:	f000 8122 	beq.w	800b612 <__ieee754_log+0x302>
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7f5 f8b8 	bl	8000544 <__aeabi_i2d>
 800b3d4:	a390      	add	r3, pc, #576	; (adr r3, 800b618 <__ieee754_log+0x308>)
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	4606      	mov	r6, r0
 800b3dc:	460f      	mov	r7, r1
 800b3de:	f7f5 f91b 	bl	8000618 <__aeabi_dmul>
 800b3e2:	a38f      	add	r3, pc, #572	; (adr r3, 800b620 <__ieee754_log+0x310>)
 800b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	f7f5 f912 	bl	8000618 <__aeabi_dmul>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	e7ba      	b.n	800b374 <__ieee754_log+0x64>
 800b3fe:	a38a      	add	r3, pc, #552	; (adr r3, 800b628 <__ieee754_log+0x318>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	4650      	mov	r0, sl
 800b406:	4659      	mov	r1, fp
 800b408:	f7f5 f906 	bl	8000618 <__aeabi_dmul>
 800b40c:	4602      	mov	r2, r0
 800b40e:	460b      	mov	r3, r1
 800b410:	2000      	movs	r0, #0
 800b412:	499b      	ldr	r1, [pc, #620]	; (800b680 <__ieee754_log+0x370>)
 800b414:	f7f4 ff48 	bl	80002a8 <__aeabi_dsub>
 800b418:	4652      	mov	r2, sl
 800b41a:	4606      	mov	r6, r0
 800b41c:	460f      	mov	r7, r1
 800b41e:	465b      	mov	r3, fp
 800b420:	4650      	mov	r0, sl
 800b422:	4659      	mov	r1, fp
 800b424:	f7f5 f8f8 	bl	8000618 <__aeabi_dmul>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4630      	mov	r0, r6
 800b42e:	4639      	mov	r1, r7
 800b430:	f7f5 f8f2 	bl	8000618 <__aeabi_dmul>
 800b434:	4606      	mov	r6, r0
 800b436:	460f      	mov	r7, r1
 800b438:	b914      	cbnz	r4, 800b440 <__ieee754_log+0x130>
 800b43a:	4632      	mov	r2, r6
 800b43c:	463b      	mov	r3, r7
 800b43e:	e0a2      	b.n	800b586 <__ieee754_log+0x276>
 800b440:	4620      	mov	r0, r4
 800b442:	f7f5 f87f 	bl	8000544 <__aeabi_i2d>
 800b446:	a374      	add	r3, pc, #464	; (adr r3, 800b618 <__ieee754_log+0x308>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	4680      	mov	r8, r0
 800b44e:	4689      	mov	r9, r1
 800b450:	f7f5 f8e2 	bl	8000618 <__aeabi_dmul>
 800b454:	a372      	add	r3, pc, #456	; (adr r3, 800b620 <__ieee754_log+0x310>)
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	4604      	mov	r4, r0
 800b45c:	460d      	mov	r5, r1
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	f7f5 f8d9 	bl	8000618 <__aeabi_dmul>
 800b466:	e0a7      	b.n	800b5b8 <__ieee754_log+0x2a8>
 800b468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b46c:	f7f4 ff1e 	bl	80002ac <__adddf3>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	4650      	mov	r0, sl
 800b476:	4659      	mov	r1, fp
 800b478:	f7f5 f9f8 	bl	800086c <__aeabi_ddiv>
 800b47c:	ec41 0b18 	vmov	d8, r0, r1
 800b480:	4620      	mov	r0, r4
 800b482:	f7f5 f85f 	bl	8000544 <__aeabi_i2d>
 800b486:	ec53 2b18 	vmov	r2, r3, d8
 800b48a:	ec41 0b19 	vmov	d9, r0, r1
 800b48e:	ec51 0b18 	vmov	r0, r1, d8
 800b492:	f7f5 f8c1 	bl	8000618 <__aeabi_dmul>
 800b496:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b49a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	f7f5 f8b6 	bl	8000618 <__aeabi_dmul>
 800b4ac:	a360      	add	r3, pc, #384	; (adr r3, 800b630 <__ieee754_log+0x320>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	f7f5 f8af 	bl	8000618 <__aeabi_dmul>
 800b4ba:	a35f      	add	r3, pc, #380	; (adr r3, 800b638 <__ieee754_log+0x328>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 fef4 	bl	80002ac <__adddf3>
 800b4c4:	4632      	mov	r2, r6
 800b4c6:	463b      	mov	r3, r7
 800b4c8:	f7f5 f8a6 	bl	8000618 <__aeabi_dmul>
 800b4cc:	a35c      	add	r3, pc, #368	; (adr r3, 800b640 <__ieee754_log+0x330>)
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f7f4 feeb 	bl	80002ac <__adddf3>
 800b4d6:	4632      	mov	r2, r6
 800b4d8:	463b      	mov	r3, r7
 800b4da:	f7f5 f89d 	bl	8000618 <__aeabi_dmul>
 800b4de:	a35a      	add	r3, pc, #360	; (adr r3, 800b648 <__ieee754_log+0x338>)
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	f7f4 fee2 	bl	80002ac <__adddf3>
 800b4e8:	4642      	mov	r2, r8
 800b4ea:	464b      	mov	r3, r9
 800b4ec:	f7f5 f894 	bl	8000618 <__aeabi_dmul>
 800b4f0:	a357      	add	r3, pc, #348	; (adr r3, 800b650 <__ieee754_log+0x340>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	4680      	mov	r8, r0
 800b4f8:	4689      	mov	r9, r1
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	4639      	mov	r1, r7
 800b4fe:	f7f5 f88b 	bl	8000618 <__aeabi_dmul>
 800b502:	a355      	add	r3, pc, #340	; (adr r3, 800b658 <__ieee754_log+0x348>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f4 fed0 	bl	80002ac <__adddf3>
 800b50c:	4632      	mov	r2, r6
 800b50e:	463b      	mov	r3, r7
 800b510:	f7f5 f882 	bl	8000618 <__aeabi_dmul>
 800b514:	a352      	add	r3, pc, #328	; (adr r3, 800b660 <__ieee754_log+0x350>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 fec7 	bl	80002ac <__adddf3>
 800b51e:	4632      	mov	r2, r6
 800b520:	463b      	mov	r3, r7
 800b522:	f7f5 f879 	bl	8000618 <__aeabi_dmul>
 800b526:	460b      	mov	r3, r1
 800b528:	4602      	mov	r2, r0
 800b52a:	4649      	mov	r1, r9
 800b52c:	4640      	mov	r0, r8
 800b52e:	f7f4 febd 	bl	80002ac <__adddf3>
 800b532:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b536:	9b01      	ldr	r3, [sp, #4]
 800b538:	3551      	adds	r5, #81	; 0x51
 800b53a:	431d      	orrs	r5, r3
 800b53c:	2d00      	cmp	r5, #0
 800b53e:	4680      	mov	r8, r0
 800b540:	4689      	mov	r9, r1
 800b542:	dd48      	ble.n	800b5d6 <__ieee754_log+0x2c6>
 800b544:	4b4e      	ldr	r3, [pc, #312]	; (800b680 <__ieee754_log+0x370>)
 800b546:	2200      	movs	r2, #0
 800b548:	4650      	mov	r0, sl
 800b54a:	4659      	mov	r1, fp
 800b54c:	f7f5 f864 	bl	8000618 <__aeabi_dmul>
 800b550:	4652      	mov	r2, sl
 800b552:	465b      	mov	r3, fp
 800b554:	f7f5 f860 	bl	8000618 <__aeabi_dmul>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4606      	mov	r6, r0
 800b55e:	460f      	mov	r7, r1
 800b560:	4640      	mov	r0, r8
 800b562:	4649      	mov	r1, r9
 800b564:	f7f4 fea2 	bl	80002ac <__adddf3>
 800b568:	ec53 2b18 	vmov	r2, r3, d8
 800b56c:	f7f5 f854 	bl	8000618 <__aeabi_dmul>
 800b570:	4680      	mov	r8, r0
 800b572:	4689      	mov	r9, r1
 800b574:	b964      	cbnz	r4, 800b590 <__ieee754_log+0x280>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4630      	mov	r0, r6
 800b57c:	4639      	mov	r1, r7
 800b57e:	f7f4 fe93 	bl	80002a8 <__aeabi_dsub>
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	4650      	mov	r0, sl
 800b588:	4659      	mov	r1, fp
 800b58a:	f7f4 fe8d 	bl	80002a8 <__aeabi_dsub>
 800b58e:	e6d6      	b.n	800b33e <__ieee754_log+0x2e>
 800b590:	a321      	add	r3, pc, #132	; (adr r3, 800b618 <__ieee754_log+0x308>)
 800b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b596:	ec51 0b19 	vmov	r0, r1, d9
 800b59a:	f7f5 f83d 	bl	8000618 <__aeabi_dmul>
 800b59e:	a320      	add	r3, pc, #128	; (adr r3, 800b620 <__ieee754_log+0x310>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	460d      	mov	r5, r1
 800b5a8:	ec51 0b19 	vmov	r0, r1, d9
 800b5ac:	f7f5 f834 	bl	8000618 <__aeabi_dmul>
 800b5b0:	4642      	mov	r2, r8
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	f7f4 fe7a 	bl	80002ac <__adddf3>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4630      	mov	r0, r6
 800b5be:	4639      	mov	r1, r7
 800b5c0:	f7f4 fe72 	bl	80002a8 <__aeabi_dsub>
 800b5c4:	4652      	mov	r2, sl
 800b5c6:	465b      	mov	r3, fp
 800b5c8:	f7f4 fe6e 	bl	80002a8 <__aeabi_dsub>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	e7d9      	b.n	800b58a <__ieee754_log+0x27a>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4650      	mov	r0, sl
 800b5dc:	4659      	mov	r1, fp
 800b5de:	f7f4 fe63 	bl	80002a8 <__aeabi_dsub>
 800b5e2:	ec53 2b18 	vmov	r2, r3, d8
 800b5e6:	f7f5 f817 	bl	8000618 <__aeabi_dmul>
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	460f      	mov	r7, r1
 800b5ee:	2c00      	cmp	r4, #0
 800b5f0:	f43f af23 	beq.w	800b43a <__ieee754_log+0x12a>
 800b5f4:	a308      	add	r3, pc, #32	; (adr r3, 800b618 <__ieee754_log+0x308>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	ec51 0b19 	vmov	r0, r1, d9
 800b5fe:	f7f5 f80b 	bl	8000618 <__aeabi_dmul>
 800b602:	a307      	add	r3, pc, #28	; (adr r3, 800b620 <__ieee754_log+0x310>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	4604      	mov	r4, r0
 800b60a:	460d      	mov	r5, r1
 800b60c:	ec51 0b19 	vmov	r0, r1, d9
 800b610:	e727      	b.n	800b462 <__ieee754_log+0x152>
 800b612:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b668 <__ieee754_log+0x358>
 800b616:	e694      	b.n	800b342 <__ieee754_log+0x32>
 800b618:	fee00000 	.word	0xfee00000
 800b61c:	3fe62e42 	.word	0x3fe62e42
 800b620:	35793c76 	.word	0x35793c76
 800b624:	3dea39ef 	.word	0x3dea39ef
 800b628:	55555555 	.word	0x55555555
 800b62c:	3fd55555 	.word	0x3fd55555
 800b630:	df3e5244 	.word	0xdf3e5244
 800b634:	3fc2f112 	.word	0x3fc2f112
 800b638:	96cb03de 	.word	0x96cb03de
 800b63c:	3fc74664 	.word	0x3fc74664
 800b640:	94229359 	.word	0x94229359
 800b644:	3fd24924 	.word	0x3fd24924
 800b648:	55555593 	.word	0x55555593
 800b64c:	3fe55555 	.word	0x3fe55555
 800b650:	d078c69f 	.word	0xd078c69f
 800b654:	3fc39a09 	.word	0x3fc39a09
 800b658:	1d8e78af 	.word	0x1d8e78af
 800b65c:	3fcc71c5 	.word	0x3fcc71c5
 800b660:	9997fa04 	.word	0x9997fa04
 800b664:	3fd99999 	.word	0x3fd99999
	...
 800b670:	c3500000 	.word	0xc3500000
 800b674:	43500000 	.word	0x43500000
 800b678:	7fefffff 	.word	0x7fefffff
 800b67c:	3ff00000 	.word	0x3ff00000
 800b680:	3fe00000 	.word	0x3fe00000

0800b684 <_init>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	bf00      	nop
 800b688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68a:	bc08      	pop	{r3}
 800b68c:	469e      	mov	lr, r3
 800b68e:	4770      	bx	lr

0800b690 <_fini>:
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	bf00      	nop
 800b694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b696:	bc08      	pop	{r3}
 800b698:	469e      	mov	lr, r3
 800b69a:	4770      	bx	lr
