
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007afc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08007c90  08007c90  00017c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008454  08008454  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800845c  0800845c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001d4  08008638  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08008638  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da3b  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001deb  00000000  00000000  0002dc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093c  00000000  00000000  00030678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd63  00000000  00000000  00030fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4b0  00000000  00000000  0004cd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad59d  00000000  00000000  0005b1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042b0  00000000  00000000  00108764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  0010ca14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c74 	.word	0x08007c74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007c74 	.word	0x08007c74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <format_uint16>:
/**
 * Formats an unsigned 16-bit integer into the AFE's data buffer (little-endian byte order)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_uint16(uint8_t *dataArr, uint16_t data) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
	dataArr[0] = ((uint8_t)(data & 0xFF));
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	701a      	strb	r2, [r3, #0]
	dataArr[1] = ((uint8_t)(data >> 8));
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	701a      	strb	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <format_int16>:
/**
 * Formats a signed 16-bit integer into the AFE's data buffer (little-endian byte order, 2's complement)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_int16(uint8_t *dataArr, int data) {
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
	if (data < 0) format_uint16(dataArr, (~(abs(data)) + 1));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da0b      	bge.n	8000efa <format_int16+0x28>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bfb8      	it	lt
 8000ee8:	425b      	neglt	r3, r3
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	425b      	negs	r3, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffd6 	bl	8000ea4 <format_uint16>
	else format_uint16(dataArr, data);
}
 8000ef8:	e005      	b.n	8000f06 <format_int16+0x34>
	else format_uint16(dataArr, data);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ffcf 	bl	8000ea4 <format_uint16>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <main>:

// Global variables - used for ISRs to raise flags
bool logDataFlag = 0;
bool logAlertsFlag = 0;

int main(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0be      	sub	sp, #248	; 0xf8
 8000fa4:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 8000fa6:	f001 fa70 	bl	800248a <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 8000faa:	f000 fa1b 	bl	80013e4 <SystemClock_Config>

    // Initialize GPIO, SPI, UART, TIM1
    GPIO_Init();
 8000fae:	f000 fa51 	bl	8001454 <GPIO_Init>
    SPI1_Init();
 8000fb2:	f000 fadf 	bl	8001574 <SPI1_Init>
    USART1_Init();
 8000fb6:	f000 fb25 	bl	8001604 <USART1_Init>
    TIM1_Init();
 8000fba:	f000 fb5d 	bl	8001678 <TIM1_Init>

    // Start the logging timer
    TIM1->CR1 |= TIM_CR1_CEN;
 8000fbe:	4bae      	ldr	r3, [pc, #696]	; (8001278 <main+0x2d8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4aad      	ldr	r2, [pc, #692]	; (8001278 <main+0x2d8>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2120      	movs	r1, #32
 8000fce:	48ab      	ldr	r0, [pc, #684]	; (800127c <main+0x2dc>)
 8000fd0:	f001 fd78 	bl	8002ac4 <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000fda:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	619a      	str	r2, [r3, #24]

    uint16_t ctrlStatus = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
    uint16_t cellVolt = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
    uint16_t cellVolts[17] = {0};
 8000ffa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ffe:	2222      	movs	r2, #34	; 0x22
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fd29 	bl	8005a5a <memset>
    int16_t cellGains[16] = {12000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11900};
 8001008:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f004 fd22 	bl	8005a5a <memset>
 8001016:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800101a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800101e:	f642 637c 	movw	r3, #11900	; 0x2e7c
 8001022:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    int16_t temperature = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
    int16_t temperatures[3] = {0};
 800102c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	809a      	strh	r2, [r3, #4]
//    uint32_t adcCounts[16] = {0};
//    uint32_t adcCount = 0;
    uint16_t currentRead = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    uint8_t fetStatus = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    uint8_t safetyStatAlrt[6] = {0};
 8001042:	2300      	movs	r3, #0
 8001044:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001046:	2300      	movs	r3, #0
 8001048:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    uint8_t cmdAddr = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

    uint8_t writeData[32] = {0};
 8001052:	2300      	movs	r3, #0
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001056:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	619a      	str	r2, [r3, #24]

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 800106a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800106e:	2202      	movs	r2, #2
 8001070:	4619      	mov	r1, r3
 8001072:	2012      	movs	r0, #18
 8001074:	f000 fb78 	bl	8001768 <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 8001078:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800107c:	2202      	movs	r2, #2
 800107e:	4619      	mov	r1, r3
 8001080:	2057      	movs	r0, #87	; 0x57
 8001082:	f000 fc4b 	bl	800191c <SubCmdReadData>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001086:	2120      	movs	r1, #32
 8001088:	487c      	ldr	r0, [pc, #496]	; (800127c <main+0x2dc>)
 800108a:	f001 fd33 	bl	8002af4 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800108e:	20fa      	movs	r0, #250	; 0xfa
 8001090:	f001 fa70 	bl	8002574 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001094:	2120      	movs	r1, #32
 8001096:	4879      	ldr	r0, [pc, #484]	; (800127c <main+0x2dc>)
 8001098:	f001 fd2c 	bl	8002af4 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 800109c:	f240 20ee 	movw	r0, #750	; 0x2ee
 80010a0:	f001 fa68 	bl	8002574 <HAL_Delay>

	// Disable SLEEP mode and disable FET_TEST mode if already in FET_TEST
	SubCmdNoData(0x009A);
 80010a4:	209a      	movs	r0, #154	; 0x9a
 80010a6:	f000 fbf1 	bl	800188c <SubCmdNoData>
	if (!(readData[0] & (1 << 4))) SubCmdNoData(0x0022);
 80010aa:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <main+0x11c>
 80010b6:	2022      	movs	r0, #34	; 0x22
 80010b8:	f000 fbe8 	bl	800188c <SubCmdNoData>

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 80010bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80010c0:	2202      	movs	r2, #2
 80010c2:	4619      	mov	r1, r3
 80010c4:	2012      	movs	r0, #18
 80010c6:	f000 fb4f 	bl	8001768 <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 80010ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80010ce:	2202      	movs	r2, #2
 80010d0:	4619      	mov	r1, r3
 80010d2:	2057      	movs	r0, #87	; 0x57
 80010d4:	f000 fc22 	bl	800191c <SubCmdReadData>

	// Enter CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
 80010d8:	2090      	movs	r0, #144	; 0x90
 80010da:	f000 fbd7 	bl	800188c <SubCmdNoData>
	// Wait for Battery Status to confirm transition to CONFIG_UPDATE mode
	do {
		DirectCmdRead(0x12, readData, 2);
 80010de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80010e2:	2202      	movs	r2, #2
 80010e4:	4619      	mov	r1, r3
 80010e6:	2012      	movs	r0, #18
 80010e8:	f000 fb3e 	bl	8001768 <DirectCmdRead>
	} while (!(readData[0] & 0x01));
 80010ec:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f2      	beq.n	80010de <main+0x13e>

	// Configuring Settings in RAM
	writeData[0] = 0x02;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	RAMRegisterWrite(PROT_SCD_THLD, writeData, 1); // Set SCD threshold to 40mV
 80010fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	f249 2086 	movw	r0, #37510	; 0x9286
 800110a:	f000 fc83 	bl	8001a14 <RAMRegisterWrite>

	// Disable body diode protection
	writeData[0] = 0x0C;
 800110e:	230c      	movs	r3, #12
 8001110:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1);
 8001114:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	f249 3008 	movw	r0, #37640	; 0x9308
 8001120:	f000 fc78 	bl	8001a14 <RAMRegisterWrite>

	// Set calibration gain values for all cell voltages
	for (int i = 0; i < 16; i++) {
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800112a:	e020      	b.n	800116e <main+0x1ce>
		format_int16(writeData, cellGains[i]);
 800112c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	33f8      	adds	r3, #248	; 0xf8
 8001134:	443b      	add	r3, r7
 8001136:	f933 3c7c 	ldrsh.w	r3, [r3, #-124]
 800113a:	461a      	mov	r2, r3
 800113c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fec5 	bl	8000ed2 <format_int16>
		RAMRegisterWrite(CAL_GAIN_CL1 + i*2, writeData, 2);
 8001148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800114c:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8001150:	3340      	adds	r3, #64	; 0x40
 8001152:	b29b      	uxth	r3, r3
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800115c:	2202      	movs	r2, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fc58 	bl	8001a14 <RAMRegisterWrite>
	for (int i = 0; i < 16; i++) {
 8001164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001168:	3301      	adds	r3, #1
 800116a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800116e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001172:	2b0f      	cmp	r3, #15
 8001174:	ddda      	ble.n	800112c <main+0x18c>
	// Set calibration offset value for cell voltages
//	format_int16(writeData, 80);
//	RAMRegisterWrite(CAL_OFST_VCELL, writeData, 2);

	// Configure TS pins
	writeData[0] = 0x07; // Thermistor temperature, for cell temperature protection
 8001176:	2307      	movs	r3, #7
 8001178:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	RAMRegisterWrite(SET_CONF_TS1_CFG, writeData, 1);
 800117c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	f249 20fd 	movw	r0, #37629	; 0x92fd
 8001188:	f000 fc44 	bl	8001a14 <RAMRegisterWrite>
	RAMRegisterWrite(SET_CONF_TS2_CFG, writeData, 1);
 800118c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	f249 20fe 	movw	r0, #37630	; 0x92fe
 8001198:	f000 fc3c 	bl	8001a14 <RAMRegisterWrite>
	writeData[0] = 0x0F; // Thermistor temperature, for FET temperature protection
 800119c:	230f      	movs	r3, #15
 800119e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	RAMRegisterWrite(SET_CONF_TS3_CFG, writeData, 1);
 80011a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a6:	2201      	movs	r2, #1
 80011a8:	4619      	mov	r1, r3
 80011aa:	f249 20ff 	movw	r0, #37631	; 0x92ff
 80011ae:	f000 fc31 	bl	8001a14 <RAMRegisterWrite>

	// Setting MFG Status Init to disable FET Test commands
	format_uint16(writeData, 0x0050);
 80011b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011b6:	2150      	movs	r1, #80	; 0x50
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fe73 	bl	8000ea4 <format_uint16>
	RAMRegisterWrite(SET_MFG_STATUS_INIT, writeData, 2);
 80011be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011c2:	2202      	movs	r2, #2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f249 3033 	movw	r0, #37683	; 0x9333
 80011ca:	f000 fc23 	bl	8001a14 <RAMRegisterWrite>
	// Exit CONFIG_UPDATE mode, read manufacturing status register again
	SubCmdNoData(0x0092);
 80011ce:	2092      	movs	r0, #146	; 0x92
 80011d0:	f000 fb5c 	bl	800188c <SubCmdNoData>
	SubCmdReadData(0x0057, readData, 2);
 80011d4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011d8:	2202      	movs	r2, #2
 80011da:	4619      	mov	r1, r3
 80011dc:	2057      	movs	r0, #87	; 0x57
 80011de:	f000 fb9d 	bl	800191c <SubCmdReadData>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80011e2:	2120      	movs	r1, #32
 80011e4:	4825      	ldr	r0, [pc, #148]	; (800127c <main+0x2dc>)
 80011e6:	f001 fc85 	bl	8002af4 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80011ea:	20fa      	movs	r0, #250	; 0xfa
 80011ec:	f001 f9c2 	bl	8002574 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80011f0:	2120      	movs	r1, #32
 80011f2:	4822      	ldr	r0, [pc, #136]	; (800127c <main+0x2dc>)
 80011f4:	f001 fc7e 	bl	8002af4 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 80011f8:	f240 20ee 	movw	r0, #750	; 0x2ee
 80011fc:	f001 f9ba 	bl	8002574 <HAL_Delay>
    	// Read the control status register
//    	DirectCmdRead(0x02, readData, 2);
//    	ctrlStatus = (readData[0]) + (readData[1] << 8);

    	// Check if flag to log data was raised
    	if (logDataFlag) {
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <main+0x2e0>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 808d 	beq.w	8001324 <main+0x384>
    		logDataFlag = false; // Clear the flag
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <main+0x2e0>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
    		// Read the cell voltage for all 16 cells and then the pack voltage
			for (int i = 0; i < 17; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001216:	e027      	b.n	8001268 <main+0x2c8>
				cmdAddr = 0x14 + 2*i;
 8001218:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800121c:	330a      	adds	r3, #10
 800121e:	b2db      	uxtb	r3, r3
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
				DirectCmdRead(cmdAddr, readData, 2);
 8001226:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800122a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800122e:	2202      	movs	r2, #2
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fa99 	bl	8001768 <DirectCmdRead>
				// Combine the 2 8-bit cell voltage bytes into a single 16-byte variable
				cellVolt = (readData[0]) + (readData[1] << 8);
 8001236:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800123a:	b29a      	uxth	r2, r3
 800123c:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001240:	b29b      	uxth	r3, r3
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b29b      	uxth	r3, r3
 8001246:	4413      	add	r3, r2
 8001248:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
				cellVolts[i] = cellVolt;
 800124c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	33f8      	adds	r3, #248	; 0xf8
 8001254:	443b      	add	r3, r7
 8001256:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 800125a:	f823 2c5c 	strh.w	r2, [r3, #-92]
			for (int i = 0; i < 17; i++) {
 800125e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001262:	3301      	adds	r3, #1
 8001264:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001268:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800126c:	2b10      	cmp	r3, #16
 800126e:	ddd3      	ble.n	8001218 <main+0x278>
			}

			// Read the temperature measured at TS1-3
			for (int i = 0; i < 3; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001276:	e02e      	b.n	80012d6 <main+0x336>
 8001278:	40012c00 	.word	0x40012c00
 800127c:	48000400 	.word	0x48000400
 8001280:	200002dc 	.word	0x200002dc
				cmdAddr = 0x70 + 2*i;
 8001284:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001288:	3338      	adds	r3, #56	; 0x38
 800128a:	b2db      	uxtb	r3, r3
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
				DirectCmdRead(cmdAddr, readData, 2);
 8001292:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8001296:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800129a:	2202      	movs	r2, #2
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fa63 	bl	8001768 <DirectCmdRead>
				temperature = (readData[0]) + (readData[1] << 8);
 80012a2:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				temperatures[i] = temperature;
 80012ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	33f8      	adds	r3, #248	; 0xf8
 80012c2:	443b      	add	r3, r7
 80012c4:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 80012c8:	f823 2c84 	strh.w	r2, [r3, #-132]
			for (int i = 0; i < 3; i++) {
 80012cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012d0:	3301      	adds	r3, #1
 80012d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80012d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012da:	2b02      	cmp	r3, #2
 80012dc:	ddd2      	ble.n	8001284 <main+0x2e4>
//    			}
//    		}
//			TransmitCellVoltages(cellVolts, sizeof(cellVolts));
//			TransmitCellVoltages(cellVolts, 17);
//    		TransmitADCReadings(adcCounts, 16);
			TransmitTemperatures(temperatures, 3);
 80012de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012e2:	2103      	movs	r1, #3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fceb 	bl	8001cc0 <TransmitTemperatures>

			// Read the CC2 current and FET status
			DirectCmdRead(0x3A, readData, 2);
 80012ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012ee:	2202      	movs	r2, #2
 80012f0:	4619      	mov	r1, r3
 80012f2:	203a      	movs	r0, #58	; 0x3a
 80012f4:	f000 fa38 	bl	8001768 <DirectCmdRead>
			currentRead = (readData[0]) + (readData[1] << 8);
 80012f8:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001302:	b29b      	uxth	r3, r3
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b29b      	uxth	r3, r3
 8001308:	4413      	add	r3, r2
 800130a:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
			DirectCmdRead(0x7F, readData, 1);
 800130e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001312:	2201      	movs	r2, #1
 8001314:	4619      	mov	r1, r3
 8001316:	207f      	movs	r0, #127	; 0x7f
 8001318:	f000 fa26 	bl	8001768 <DirectCmdRead>
			fetStatus = readData[0];
 800131c:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8001320:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    	}

    	// Check if flag indicating a fault occurred was raised
    	if (logAlertsFlag) {
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <main+0x438>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f43f af69 	beq.w	8001200 <main+0x260>
    		logAlertsFlag = false;
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <main+0x438>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
			// Read the Alarm Status register to figure out what's causing the alert
    		DirectCmdRead(0x62, readData, 2);
 8001334:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001338:	2202      	movs	r2, #2
 800133a:	4619      	mov	r1, r3
 800133c:	2062      	movs	r0, #98	; 0x62
 800133e:	f000 fa13 	bl	8001768 <DirectCmdRead>
    		writeData[0] = 0x00;
 8001342:	2300      	movs	r3, #0
 8001344:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    		writeData[1] = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		// Check each bit and determine where to look for the cause of the alert
    		// Safety status B/C
    		if (readData[1] & (1 << 7)) {
 800134e:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8001352:	b25b      	sxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	da08      	bge.n	800136a <main+0x3ca>
    			TransmitSafetyStatusB();
 8001358:	f000 fdce 	bl	8001ef8 <TransmitSafetyStatusB>
    			// No need to check safety status C as no protections there are enabled
    			writeData[1] |= (1 << 7);
 800135c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001360:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		}
    		// Safety status A
    		if (readData[1] & (1 << 6)) {
 800136a:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 800136e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <main+0x3e8>
    			TransmitSafetyStatusA();
 8001376:	f000 fd39 	bl	8001dec <TransmitSafetyStatusA>
    			writeData[1] |= (1 << 6);
 800137a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800137e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		}
    		// Permanent failure
    		if (readData[1] & (1 << 5)) {
 8001388:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 800138c:	f003 0320 	and.w	r3, r3, #32
 8001390:	2b00      	cmp	r3, #0
 8001392:	d012      	beq.n	80013ba <main+0x41a>
    			// If there's a permanent failure, continuously transmit a distress signal
    			uint8_t msg[] = "Permanent failure! All BMS operations halted, requesting attention...";
 8001394:	4a11      	ldr	r2, [pc, #68]	; (80013dc <main+0x43c>)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	4611      	mov	r1, r2
 800139a:	2246      	movs	r2, #70	; 0x46
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fbee 	bl	8005b7e <memcpy>
    			while (1) {
    				HAL_Delay(10000);
 80013a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80013a6:	f001 f8e5 	bl	8002574 <HAL_Delay>
    				HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80013aa:	1d39      	adds	r1, r7, #4
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	2245      	movs	r2, #69	; 0x45
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <main+0x440>)
 80013b4:	f003 f8b8 	bl	8004528 <HAL_UART_Transmit>
    				HAL_Delay(10000);
 80013b8:	e7f3      	b.n	80013a2 <main+0x402>
    			}
    		}
    		// Clear the bits for the received safety statuses, as well as the masked safety alerts
    		writeData[1] |= 0x18;
 80013ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013be:	f043 0318 	orr.w	r3, r3, #24
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		DirectCmdWrite(0xE2, writeData, 2);
 80013c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013cc:	2202      	movs	r2, #2
 80013ce:	4619      	mov	r1, r3
 80013d0:	20e2      	movs	r0, #226	; 0xe2
 80013d2:	f000 fa13 	bl	80017fc <DirectCmdWrite>
    	if (logDataFlag) {
 80013d6:	e713      	b.n	8001200 <main+0x260>
 80013d8:	200002dd 	.word	0x200002dd
 80013dc:	08007c90 	.word	0x08007c90
 80013e0:	20000254 	.word	0x20000254

080013e4 <SystemClock_Config>:
}

/**
 * Configures the clocks for the STM32
 */
void SystemClock_Config(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b096      	sub	sp, #88	; 0x58
 80013e8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2244      	movs	r2, #68	; 0x44
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 fb31 	bl	8005a5a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001406:	f44f 7000 	mov.w	r0, #512	; 0x200
 800140a:	f001 fbb3 	bl	8002b74 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800140e:	2310      	movs	r3, #16
 8001410:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001412:	2301      	movs	r3, #1
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800141a:	2360      	movs	r3, #96	; 0x60
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800141e:	2300      	movs	r3, #0
 8001420:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fbfa 	bl	8002c20 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800142c:	230f      	movs	r3, #15
 800142e:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8001440:	463b      	mov	r3, r7
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f002 f84d 	bl	80034e4 <HAL_RCC_ClockConfig>
}
 800144a:	bf00      	nop
 800144c:	3758      	adds	r7, #88	; 0x58
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <GPIO_Init>:

/**
 * Initializes all GPIO pins
 */
void GPIO_Init(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <GPIO_Init+0x118>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a43      	ldr	r2, [pc, #268]	; (800156c <GPIO_Init+0x118>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <GPIO_Init+0x118>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <GPIO_Init+0x118>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a3d      	ldr	r2, [pc, #244]	; (800156c <GPIO_Init+0x118>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <GPIO_Init+0x118>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <GPIO_Init+0x118>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	4a37      	ldr	r2, [pc, #220]	; (800156c <GPIO_Init+0x118>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6613      	str	r3, [r2, #96]	; 0x60
 8001496:	4b35      	ldr	r3, [pc, #212]	; (800156c <GPIO_Init+0x118>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b2:	2301      	movs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014b6:	2311      	movs	r3, #17
 80014b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	4619      	mov	r1, r3
 80014c8:	4829      	ldr	r0, [pc, #164]	; (8001570 <GPIO_Init+0x11c>)
 80014ca:	f001 f989 	bl	80027e0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 80014ce:	2201      	movs	r2, #1
 80014d0:	2101      	movs	r1, #1
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <GPIO_Init+0x11c>)
 80014d4:	f001 faf6 	bl	8002ac4 <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014d8:	2320      	movs	r3, #32
 80014da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	4820      	ldr	r0, [pc, #128]	; (8001570 <GPIO_Init+0x11c>)
 80014f0:	f001 f976 	bl	80027e0 <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80014f4:	23e0      	movs	r3, #224	; 0xe0
 80014f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001504:	2305      	movs	r3, #5
 8001506:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f001 f965 	bl	80027e0 <HAL_GPIO_Init>

    // Configure PB6 (UART_TX), PB7 (UART_RX)
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001516:	23c0      	movs	r3, #192	; 0xc0
 8001518:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Alternate function for USART1
 8001526:	2307      	movs	r3, #7
 8001528:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	480f      	ldr	r0, [pc, #60]	; (8001570 <GPIO_Init+0x11c>)
 8001532:	f001 f955 	bl	80027e0 <HAL_GPIO_Init>

	// Configure PA4 (AFE ALERT pin) as an external interrupt
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001536:	2310      	movs	r3, #16
 8001538:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800153e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f001 f947 	bl	80027e0 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	200a      	movs	r0, #10
 8001558:	f001 f90b 	bl	8002772 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800155c:	200a      	movs	r0, #10
 800155e:	f001 f924 	bl	80027aa <HAL_NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	48000400 	.word	0x48000400

08001574 <SPI1_Init>:

// Initializes the SPI1 peripheral in master mode
void SPI1_Init(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <SPI1_Init+0x84>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <SPI1_Init+0x84>)
 8001580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001584:	6613      	str	r3, [r2, #96]	; 0x60
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <SPI1_Init+0x84>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <SPI1_Init+0x88>)
 8001594:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <SPI1_Init+0x8c>)
 8001596:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <SPI1_Init+0x88>)
 800159a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800159e:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <SPI1_Init+0x88>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <SPI1_Init+0x88>)
 80015a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015ac:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <SPI1_Init+0x88>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <SPI1_Init+0x88>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <SPI1_Init+0x88>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <SPI1_Init+0x88>)
 80015c4:	2228      	movs	r2, #40	; 0x28
 80015c6:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <SPI1_Init+0x88>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <SPI1_Init+0x88>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <SPI1_Init+0x88>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <SPI1_Init+0x88>)
 80015dc:	2207      	movs	r2, #7
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e0:	4806      	ldr	r0, [pc, #24]	; (80015fc <SPI1_Init+0x88>)
 80015e2:	f002 fb29 	bl	8003c38 <HAL_SPI_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d000      	beq.n	80015ee <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 80015ec:	e7fe      	b.n	80015ec <SPI1_Init+0x78>
    }
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	200001f0 	.word	0x200001f0
 8001600:	40013000 	.word	0x40013000

08001604 <USART1_Init>:

/**
 * Initializes the USART1 peripheral in UART TX/RX mode
 */
void USART1_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <USART1_Init+0x68>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <USART1_Init+0x68>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	6613      	str	r3, [r2, #96]	; 0x60
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <USART1_Init+0x68>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

	// Configure UART peripheral
	huart1.Instance = USART1;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <USART1_Init+0x6c>)
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <USART1_Init+0x70>)
 8001626:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <USART1_Init+0x6c>)
 800162a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800162e:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <USART1_Init+0x6c>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <USART1_Init+0x6c>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <USART1_Init+0x6c>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <USART1_Init+0x6c>)
 8001644:	220c      	movs	r2, #12
 8001646:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <USART1_Init+0x6c>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <USART1_Init+0x6c>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <USART1_Init+0x6c>)
 8001656:	f002 ff19 	bl	800448c <HAL_UART_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d000      	beq.n	8001662 <USART1_Init+0x5e>
	{
		// Initialization error
		while (1);
 8001660:	e7fe      	b.n	8001660 <USART1_Init+0x5c>
	}
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	20000254 	.word	0x20000254
 8001674:	40013800 	.word	0x40013800

08001678 <TIM1_Init>:

/**
 * Initializes the TIM1 peripheral with interrupts enabled
 */
void TIM1_Init(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Enable TIM1 clock
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <TIM1_Init+0x4c>)
 800167e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001680:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <TIM1_Init+0x4c>)
 8001682:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001686:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->PSC = 2000 - 1; // Given 2MHz clock, 2000 cycles for 1ms
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <TIM1_Init+0x50>)
 800168a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 2000 - 1; // Generate interrupt every 2000ms (2s)
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <TIM1_Init+0x50>)
 8001692:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <TIM1_Init+0x50>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <TIM1_Init+0x50>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0); // Set TIM1 interrupt priority
 80016a4:	2100      	movs	r1, #0
 80016a6:	2019      	movs	r0, #25
 80016a8:	f7ff fc50 	bl	8000f4c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); // Enable TIM1 interrupt
 80016ac:	2019      	movs	r0, #25
 80016ae:	f7ff fc2f 	bl	8000f10 <__NVIC_EnableIRQ>

	TIM1->CR1 |= TIM_CR1_CEN; // Enable TIM1
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <TIM1_Init+0x50>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <TIM1_Init+0x50>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6013      	str	r3, [r2, #0]
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40012c00 	.word	0x40012c00

080016cc <TIM1_UP_TIM16_IRQHandler>:

/**
 * Defining the ISR for the STM32 timers
 */
void TIM1_UP_TIM16_IRQHandler(void) {
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	// Check if UIF flag is set for TIM1
	if (TIM1->SR & TIM_SR_UIF) {
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <TIM1_UP_TIM16_IRQHandler+0x22>
		logDataFlag = true; // Raise a flag to log data from the AFE
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <TIM1_UP_TIM16_IRQHandler+0x30>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~TIM_SR_UIF; // Clear UIF flag
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6113      	str	r3, [r2, #16]
	}
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40012c00 	.word	0x40012c00
 80016fc:	200002dc 	.word	0x200002dc

08001700 <crc8>:
/**
 * Calculates a CRC value according to the polynomial x^8 + x^2 + x + 1
 * @param data Pointer to an array storing the data bytes that will be transmitted
 * @param len Number of bytes that will be transmitted
 */
uint8_t crc8(uint8_t *data, size_t len) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
    while (len--)
 800170e:	e01e      	b.n	800174e <crc8+0x4e>
    {
        crc ^= *data++;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	4053      	eors	r3, r2
 800171c:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 800171e:	2300      	movs	r3, #0
 8001720:	73bb      	strb	r3, [r7, #14]
 8001722:	e011      	b.n	8001748 <crc8+0x48>
        {
            if (crc & 0x80)
 8001724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da07      	bge.n	800173c <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	b25b      	sxtb	r3, r3
 8001732:	f083 0307 	eor.w	r3, r3, #7
 8001736:	b25b      	sxtb	r3, r3
 8001738:	73fb      	strb	r3, [r7, #15]
 800173a:	e002      	b.n	8001742 <crc8+0x42>
            else
                crc <<= 1;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	3301      	adds	r3, #1
 8001746:	73bb      	strb	r3, [r7, #14]
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	2b07      	cmp	r3, #7
 800174c:	d9ea      	bls.n	8001724 <crc8+0x24>
    while (len--)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	603a      	str	r2, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1db      	bne.n	8001710 <crc8+0x10>
        }
    }
    return crc;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <DirectCmdRead>:
 * Sends a direct command to the AFE and reads the data that is output
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
 8001774:	4613      	mov	r3, r2
 8001776:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <DirectCmdRead+0x90>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	823b      	strh	r3, [r7, #16]
 800177e:	2300      	movs	r3, #0
 8001780:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <DirectCmdRead+0x90>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	81bb      	strh	r3, [r7, #12]
 8001788:	2300      	movs	r3, #0
 800178a:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	723b      	strb	r3, [r7, #8]
 8001790:	23ff      	movs	r3, #255	; 0xff
 8001792:	727b      	strb	r3, [r7, #9]
	uint8_t crcLower = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	74fb      	strb	r3, [r7, #19]
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e023      	b.n	80017e6 <DirectCmdRead+0x7e>
	{
		fullCmd[0] = cmd + i; // Increment the address
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4413      	add	r3, r2
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	723b      	strb	r3, [r7, #8]
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	2102      	movs	r1, #2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ffa5 	bl	8001700 <crc8>
 80017b6:	4603      	mov	r3, r0
 80017b8:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 80017ba:	7a3b      	ldrb	r3, [r7, #8]
 80017bc:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 80017be:	7a7b      	ldrb	r3, [r7, #9]
 80017c0:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 80017c2:	7cfb      	ldrb	r3, [r7, #19]
 80017c4:	73bb      	strb	r3, [r7, #14]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 80017c6:	f107 0110 	add.w	r1, r7, #16
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	2203      	movs	r2, #3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f9f3 	bl	8001bbc <AFETransmitReadCmd>
		returnData[i] = rxData[1]; // Save data byte received from last transaction
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	7c7a      	ldrb	r2, [r7, #17]
 80017de:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbd7      	blt.n	800179e <DirectCmdRead+0x36>
	}
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	08007cd8 	.word	0x08007cd8

080017fc <DirectCmdWrite>:
 * Sends a direct command to the AFE and writes the provided data to it
 * @param cmd The address byte for the command
 * @param writeData Pointer to the 8-bit integer array containing the data to write
 * @param len Number of bytes to write to the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdWrite(uint8_t cmd, uint8_t *writeData, uint8_t len) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	4613      	mov	r3, r2
 800180a:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <DirectCmdWrite+0x8c>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	823b      	strh	r3, [r7, #16]
 8001812:	2300      	movs	r3, #0
 8001814:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <DirectCmdWrite+0x8c>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	81bb      	strh	r3, [r7, #12]
 800181c:	2300      	movs	r3, #0
 800181e:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[2] = {0};
 8001820:	2300      	movs	r3, #0
 8001822:	813b      	strh	r3, [r7, #8]
	uint8_t crcLower = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	74fb      	strb	r3, [r7, #19]

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++) {
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e023      	b.n	8001876 <DirectCmdWrite+0x7a>
		fullCmd[0] = cmd + i;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4413      	add	r3, r2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	723b      	strb	r3, [r7, #8]
		fullCmd[1] = writeData[i];
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	727b      	strb	r3, [r7, #9]
		crcLower = crc8(fullCmd, 2);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	2102      	movs	r1, #2
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff58 	bl	8001700 <crc8>
 8001850:	4603      	mov	r3, r0
 8001852:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 8001854:	7a3b      	ldrb	r3, [r7, #8]
 8001856:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 8001858:	7a7b      	ldrb	r3, [r7, #9]
 800185a:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 800185c:	7cfb      	ldrb	r3, [r7, #19]
 800185e:	73bb      	strb	r3, [r7, #14]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001860:	f107 0110 	add.w	r1, r7, #16
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2203      	movs	r2, #3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f9de 	bl	8001c2c <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++) {
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	79bb      	ldrb	r3, [r7, #6]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	429a      	cmp	r2, r3
 800187c:	dbd7      	blt.n	800182e <DirectCmdWrite+0x32>
	}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	08007cd8 	.word	0x08007cd8

0800188c <SubCmdNoData>:

/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <SubCmdNoData+0x8c>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	833b      	strh	r3, [r7, #24]
 800189c:	2300      	movs	r3, #0
 800189e:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 80018a0:	23be      	movs	r3, #190	; 0xbe
 80018a2:	753b      	strb	r3, [r7, #20]
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	2102      	movs	r1, #2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff25 	bl	8001700 <crc8>
 80018b6:	4603      	mov	r3, r0
 80018b8:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 80018ba:	23bf      	movs	r3, #191	; 0xbf
 80018bc:	743b      	strb	r3, [r7, #16]
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	2102      	movs	r1, #2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff16 	bl	8001700 <crc8>
 80018d4:	4603      	mov	r3, r0
 80018d6:	77bb      	strb	r3, [r7, #30]

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 80018d8:	7d3b      	ldrb	r3, [r7, #20]
 80018da:	733b      	strb	r3, [r7, #12]
 80018dc:	7d7b      	ldrb	r3, [r7, #21]
 80018de:	737b      	strb	r3, [r7, #13]
 80018e0:	7ffb      	ldrb	r3, [r7, #31]
 80018e2:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 80018e4:	f107 0118 	add.w	r1, r7, #24
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2203      	movs	r2, #3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f99c 	bl	8001c2c <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 80018f4:	7c3b      	ldrb	r3, [r7, #16]
 80018f6:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 80018f8:	7c7b      	ldrb	r3, [r7, #17]
 80018fa:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 80018fc:	7fbb      	ldrb	r3, [r7, #30]
 80018fe:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001900:	f107 0118 	add.w	r1, r7, #24
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2203      	movs	r2, #3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f98e 	bl	8001c2c <AFETransmitWriteCmd>
}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	08007cd8 	.word	0x08007cd8

0800191c <SubCmdReadData>:
 * Sends a sub-command to the AFE and reads the data that is output
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	80fb      	strh	r3, [r7, #6]
 8001928:	4613      	mov	r3, r2
 800192a:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <SubCmdReadData+0xf4>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	83bb      	strh	r3, [r7, #28]
 8001932:	2300      	movs	r3, #0
 8001934:	77bb      	strb	r3, [r7, #30]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001936:	23be      	movs	r3, #190	; 0xbe
 8001938:	763b      	strb	r3, [r7, #24]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	2102      	movs	r1, #2
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff feda 	bl	8001700 <crc8>
 800194c:	4603      	mov	r3, r0
 800194e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001952:	23bf      	movs	r3, #191	; 0xbf
 8001954:	753b      	strb	r3, [r7, #20]
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	b29b      	uxth	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2102      	movs	r1, #2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff feca 	bl	8001700 <crc8>
 800196c:	4603      	mov	r3, r0
 800196e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001972:	7e3b      	ldrb	r3, [r7, #24]
 8001974:	743b      	strb	r3, [r7, #16]
 8001976:	7e7b      	ldrb	r3, [r7, #25]
 8001978:	747b      	strb	r3, [r7, #17]
 800197a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800197e:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001980:	f107 011c 	add.w	r1, r7, #28
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	2203      	movs	r2, #3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f94e 	bl	8001c2c <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001990:	7d3b      	ldrb	r3, [r7, #20]
 8001992:	743b      	strb	r3, [r7, #16]
	txData[1] = commandUpperAddr[1];
 8001994:	7d7b      	ldrb	r3, [r7, #21]
 8001996:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001998:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800199c:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 800199e:	f107 011c 	add.w	r1, r7, #28
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	2203      	movs	r2, #3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f93f 	bl	8001c2c <AFETransmitWriteCmd>

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 80019ae:	2300      	movs	r3, #0
 80019b0:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
 80019b6:	e022      	b.n	80019fe <SubCmdReadData+0xe2>
		readData[0] = READ_DATA_BUFF_LSB + i;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3340      	adds	r3, #64	; 0x40
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	733b      	strb	r3, [r7, #12]
		readData[1] = 0xFF;
 80019c2:	23ff      	movs	r3, #255	; 0xff
 80019c4:	737b      	strb	r3, [r7, #13]

		txData[0] = readData[0];
 80019c6:	7b3b      	ldrb	r3, [r7, #12]
 80019c8:	743b      	strb	r3, [r7, #16]
		txData[1] = readData[1];
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(readData, 2);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	2102      	movs	r1, #2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fe93 	bl	8001700 <crc8>
 80019da:	4603      	mov	r3, r0
 80019dc:	74bb      	strb	r3, [r7, #18]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 80019de:	f107 011c 	add.w	r1, r7, #28
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	2203      	movs	r2, #3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f8e7 	bl	8001bbc <AFETransmitReadCmd>

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	7f7a      	ldrb	r2, [r7, #29]
 80019f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	3301      	adds	r3, #1
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	797b      	ldrb	r3, [r7, #5]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbd8      	blt.n	80019b8 <SubCmdReadData+0x9c>
	}
}
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	3728      	adds	r7, #40	; 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	08007cd8 	.word	0x08007cd8

08001a14 <RAMRegisterWrite>:
 * Might remove this function, it's exactly the same as the SubCmd read data function
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	80fb      	strh	r3, [r7, #6]
 8001a20:	4613      	mov	r3, r2
 8001a22:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001a24:	4b64      	ldr	r3, [pc, #400]	; (8001bb8 <RAMRegisterWrite+0x1a4>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	83bb      	strh	r3, [r7, #28]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	77bb      	strb	r3, [r7, #30]
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
 8001a2e:	23be      	movs	r3, #190	; 0xbe
 8001a30:	763b      	strb	r3, [r7, #24]
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(lowerAddr, 2);
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fe5e 	bl	8001700 <crc8>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
 8001a4a:	23bf      	movs	r3, #191	; 0xbf
 8001a4c:	753b      	strb	r3, [r7, #20]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(upperAddr, 2);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fe4e 	bl	8001700 <crc8>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
 8001a6a:	7e3b      	ldrb	r3, [r7, #24]
 8001a6c:	743b      	strb	r3, [r7, #16]
 8001a6e:	7e7b      	ldrb	r3, [r7, #25]
 8001a70:	747b      	strb	r3, [r7, #17]
 8001a72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a76:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001a78:	f107 011c 	add.w	r1, r7, #28
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	2203      	movs	r2, #3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f8d2 	bl	8001c2c <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = upperAddr[0];
 8001a88:	7d3b      	ldrb	r3, [r7, #20]
 8001a8a:	743b      	strb	r3, [r7, #16]
	txData[1] = upperAddr[1];
 8001a8c:	7d7b      	ldrb	r3, [r7, #21]
 8001a8e:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001a90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a94:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001a96:	f107 011c 	add.w	r1, r7, #28
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f8c3 	bl	8001c2c <AFETransmitWriteCmd>

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aae:	e020      	b.n	8001af2 <RAMRegisterWrite+0xde>
	{
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3b40      	subs	r3, #64	; 0x40
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	733b      	strb	r3, [r7, #12]
		writeBytes[1] = writeData[i];
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	737b      	strb	r3, [r7, #13]

		txData[0] = writeBytes[0];
 8001ac4:	7b3b      	ldrb	r3, [r7, #12]
 8001ac6:	743b      	strb	r3, [r7, #16]
		txData[1] = writeBytes[1];
 8001ac8:	7b7b      	ldrb	r3, [r7, #13]
 8001aca:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fe14 	bl	8001700 <crc8>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	74bb      	strb	r3, [r7, #18]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001adc:	f107 011c 	add.w	r1, r7, #28
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f8a0 	bl	8001c2c <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++)
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	3301      	adds	r3, #1
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af2:	797b      	ldrb	r3, [r7, #5]
 8001af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbda      	blt.n	8001ab0 <RAMRegisterWrite+0x9c>
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
 8001b04:	e00b      	b.n	8001b1e <RAMRegisterWrite+0x10a>
		checkSum += writeData[i];
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b12:	4413      	add	r3, r2
 8001b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	797b      	ldrb	r3, [r7, #5]
 8001b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dbef      	blt.n	8001b06 <RAMRegisterWrite+0xf2>
	}
	checkSum += lowerAddr[1];
 8001b26:	7e7a      	ldrb	r2, [r7, #25]
 8001b28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum += upperAddr[1];
 8001b32:	7d7a      	ldrb	r2, [r7, #21]
 8001b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b38:	4413      	add	r3, r2
 8001b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum = ~(checkSum);
 8001b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b42:	43db      	mvns	r3, r3
 8001b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
 8001b48:	23e0      	movs	r3, #224	; 0xe0
 8001b4a:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = checkSum;
 8001b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b50:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001b52:	7b3b      	ldrb	r3, [r7, #12]
 8001b54:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001b56:	7b7b      	ldrb	r3, [r7, #13]
 8001b58:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fdcd 	bl	8001700 <crc8>
 8001b66:	4603      	mov	r3, r0
 8001b68:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001b6a:	f107 011c 	add.w	r1, r7, #28
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	2203      	movs	r2, #3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f859 	bl	8001c2c <AFETransmitWriteCmd>

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
 8001b7a:	23e1      	movs	r3, #225	; 0xe1
 8001b7c:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes
 8001b7e:	797b      	ldrb	r3, [r7, #5]
 8001b80:	3304      	adds	r3, #4
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001b86:	7b3b      	ldrb	r3, [r7, #12]
 8001b88:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001b8a:	7b7b      	ldrb	r3, [r7, #13]
 8001b8c:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2102      	movs	r1, #2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fdb3 	bl	8001700 <crc8>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001b9e:	f107 011c 	add.w	r1, r7, #28
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f83f 	bl	8001c2c <AFETransmitWriteCmd>
}
 8001bae:	bf00      	nop
 8001bb0:	3730      	adds	r7, #48	; 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08007cd8 	.word	0x08007cd8

08001bbc <AFETransmitReadCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI read command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8001bce:	e01e      	b.n	8001c0e <AFETransmitReadCmd+0x52>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4813      	ldr	r0, [pc, #76]	; (8001c24 <AFETransmitReadCmd+0x68>)
 8001bd6:	f000 ff75 	bl	8002ac4 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	f04f 32ff 	mov.w	r2, #4294967295
 8001be2:	9200      	str	r2, [sp, #0]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	480f      	ldr	r0, [pc, #60]	; (8001c28 <AFETransmitReadCmd+0x6c>)
 8001bea:	f002 f8c8 	bl	8003d7e <HAL_SPI_TransmitReceive>

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		if (txBytes[0] == rxBytes[0]) commReceived = true;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d101      	bne.n	8001bfe <AFETransmitReadCmd+0x42>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
		// TODO: implement CRC checking for received data

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2101      	movs	r1, #1
 8001c02:	4808      	ldr	r0, [pc, #32]	; (8001c24 <AFETransmitReadCmd+0x68>)
 8001c04:	f000 ff5e 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f000 fcb3 	bl	8002574 <HAL_Delay>
	while (!commReceived)
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	f083 0301 	eor.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1da      	bne.n	8001bd0 <AFETransmitReadCmd+0x14>
	}

}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	48000400 	.word	0x48000400
 8001c28:	200001f0 	.word	0x200001f0

08001c2c <AFETransmitWriteCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI write command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8001c3e:	e02e      	b.n	8001c9e <AFETransmitWriteCmd+0x72>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2101      	movs	r1, #1
 8001c44:	481b      	ldr	r0, [pc, #108]	; (8001cb4 <AFETransmitWriteCmd+0x88>)
 8001c46:	f000 ff3d 	bl	8002ac4 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	68f9      	ldr	r1, [r7, #12]
 8001c58:	4817      	ldr	r0, [pc, #92]	; (8001cb8 <AFETransmitWriteCmd+0x8c>)
 8001c5a:	f002 f890 	bl	8003d7e <HAL_SPI_TransmitReceive>

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	e00e      	b.n	8001c86 <AFETransmitWriteCmd+0x5a>
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	440b      	add	r3, r1
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <AFETransmitWriteCmd+0x54>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	3301      	adds	r3, #1
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbec      	blt.n	8001c68 <AFETransmitWriteCmd+0x3c>
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2101      	movs	r1, #1
 8001c92:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <AFETransmitWriteCmd+0x88>)
 8001c94:	f000 ff16 	bl	8002ac4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f000 fc6b 	bl	8002574 <HAL_Delay>
	while (!commReceived)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ca      	bne.n	8001c40 <AFETransmitWriteCmd+0x14>
	}
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	48000400 	.word	0x48000400
 8001cb8:	200001f0 	.word	0x200001f0
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <TransmitTemperatures>:

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void TransmitTemperatures(int16_t *temps, uint8_t len) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8001cc6:	af02      	add	r7, sp, #8
 8001cc8:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001ccc:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001cd0:	6018      	str	r0, [r3, #0]
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001cd8:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 8001cdc:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0}; // Initialize buffer to store message
 8001cde:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001ce2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	3304      	adds	r3, #4
 8001cec:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 feb1 	bl	8005a5a <memset>
	char temp[32]; // Temporary buffer for each line
	double degC = 0;
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8001d04:	e9c1 2300 	strd	r2, r3, [r1]

	for (int i = 1; i <= len; i++) {
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001d0e:	e045      	b.n	8001d9c <TransmitTemperatures+0xdc>
		// Format the data into a single line
		degC = temps[i-1]/10 - 272.15;
 8001d10:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001d14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8001d20:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2c:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <TransmitTemperatures+0x120>)
 8001d2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d32:	1092      	asrs	r2, r2, #2
 8001d34:	17db      	asrs	r3, r3, #31
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fbf2 	bl	8000524 <__aeabi_i2d>
 8001d40:	a325      	add	r3, pc, #148	; (adr r3, 8001dd8 <TransmitTemperatures+0x118>)
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	f7fe fa9f 	bl	8000288 <__aeabi_dsub>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8001d52:	e9c1 2300 	strd	r2, r3, [r1]
		snprintf(temp, sizeof(temp), "TS%d: %.2f C\n", i, degC);
 8001d56:	f107 0008 	add.w	r0, r7, #8
 8001d5a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	e9cd 2300 	strd	r2, r3, [sp]
 8001d66:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <TransmitTemperatures+0x124>)
 8001d6c:	2120      	movs	r1, #32
 8001d6e:	f003 fdfd 	bl	800596c <sniprintf>
		// Append the formatted data to the buffer
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8001d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fa7a 	bl	8000270 <strlen>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8001d82:	3303      	adds	r3, #3
 8001d84:	f107 0108 	add.w	r1, r7, #8
 8001d88:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f003 fe6c 	bl	8005a6a <strncat>
	for (int i = 1; i <= len; i++) {
 8001d92:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001d96:	3301      	adds	r3, #1
 8001d98:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001d9c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001da0:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8001daa:	429a      	cmp	r2, r3
 8001dac:	ddb0      	ble.n	8001d10 <TransmitTemperatures+0x50>
	}

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fa5c 	bl	8000270 <strlen>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	4808      	ldr	r0, [pc, #32]	; (8001de8 <TransmitTemperatures+0x128>)
 8001dc6:	f002 fbaf 	bl	8004528 <HAL_UART_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	66666666 	.word	0x66666666
 8001ddc:	40710266 	.word	0x40710266
 8001de0:	66666667 	.word	0x66666667
 8001de4:	08007cfc 	.word	0x08007cfc
 8001de8:	20000254 	.word	0x20000254

08001dec <TransmitSafetyStatusA>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status A register
 */
void TransmitSafetyStatusA(void) {
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b098      	sub	sp, #96	; 0x60
 8001df0:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status A register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusA[1] = {0};
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x03, statusA, 1);
 8001df8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2003      	movs	r0, #3
 8001e02:	f7ff fcb1 	bl	8001768 <DirectCmdRead>

	// Short Circuit Discharge
	if (statusA[0] & (1 << 7)) {
 8001e06:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da0d      	bge.n	8001e2c <TransmitSafetyStatusA+0x40>
		uint8_t msg[] = "SCD fault triggered! Discharging will be disabled for a moment...\n";
 8001e10:	4a33      	ldr	r2, [pc, #204]	; (8001ee0 <TransmitSafetyStatusA+0xf4>)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4611      	mov	r1, r2
 8001e16:	2243      	movs	r2, #67	; 0x43
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 feb0 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001e1e:	1d39      	adds	r1, r7, #4
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	2242      	movs	r2, #66	; 0x42
 8001e26:	482f      	ldr	r0, [pc, #188]	; (8001ee4 <TransmitSafetyStatusA+0xf8>)
 8001e28:	f002 fb7e 	bl	8004528 <HAL_UART_Transmit>
	}
	// Overcurrent in Discharge 1st Tier
	if (statusA[0] & (1 << 5)) {
 8001e2c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <TransmitSafetyStatusA+0x68>
		uint8_t msg[] = "OCD1 fault triggered! Discharging will be disabled for a moment...\n";
 8001e38:	4a2b      	ldr	r2, [pc, #172]	; (8001ee8 <TransmitSafetyStatusA+0xfc>)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	2244      	movs	r2, #68	; 0x44
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fe9c 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001e46:	1d39      	adds	r1, r7, #4
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	2243      	movs	r2, #67	; 0x43
 8001e4e:	4825      	ldr	r0, [pc, #148]	; (8001ee4 <TransmitSafetyStatusA+0xf8>)
 8001e50:	f002 fb6a 	bl	8004528 <HAL_UART_Transmit>
	}
	// Overcurrent in Charge
	if (statusA[0] & (1 << 4)) {
 8001e54:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d013      	beq.n	8001e88 <TransmitSafetyStatusA+0x9c>
		uint8_t msg[] = "OCC fault triggered! Charging will be disabled for a moment...\n";
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <TransmitSafetyStatusA+0x100>)
 8001e62:	1d3c      	adds	r4, r7, #4
 8001e64:	461d      	mov	r5, r3
 8001e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001e7a:	1d39      	adds	r1, r7, #4
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	223f      	movs	r2, #63	; 0x3f
 8001e82:	4818      	ldr	r0, [pc, #96]	; (8001ee4 <TransmitSafetyStatusA+0xf8>)
 8001e84:	f002 fb50 	bl	8004528 <HAL_UART_Transmit>
	}
	// Cell Overvoltage
	if (statusA[0] & (1 << 3)) {
 8001e88:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <TransmitSafetyStatusA+0xc4>
		uint8_t msg[] = "COV fault triggered! Charging will be disabled until voltage drops sufficiently.\n";
 8001e94:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <TransmitSafetyStatusA+0x104>)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4611      	mov	r1, r2
 8001e9a:	2252      	movs	r2, #82	; 0x52
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fe6e 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001ea2:	1d39      	adds	r1, r7, #4
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea8:	2251      	movs	r2, #81	; 0x51
 8001eaa:	480e      	ldr	r0, [pc, #56]	; (8001ee4 <TransmitSafetyStatusA+0xf8>)
 8001eac:	f002 fb3c 	bl	8004528 <HAL_UART_Transmit>
	}
	// Cell Undervoltage
	if (statusA[0] & (1 << 2)) {
 8001eb0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <TransmitSafetyStatusA+0xec>
		uint8_t msg[] = "CUV fault triggered! Discharging will be disabled until voltage rises sufficiently.\n";
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <TransmitSafetyStatusA+0x108>)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	2255      	movs	r2, #85	; 0x55
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fe5a 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001eca:	1d39      	adds	r1, r7, #4
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	2254      	movs	r2, #84	; 0x54
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <TransmitSafetyStatusA+0xf8>)
 8001ed4:	f002 fb28 	bl	8004528 <HAL_UART_Transmit>
	}
}
 8001ed8:	bf00      	nop
 8001eda:	3760      	adds	r7, #96	; 0x60
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee0:	08007d0c 	.word	0x08007d0c
 8001ee4:	20000254 	.word	0x20000254
 8001ee8:	08007d50 	.word	0x08007d50
 8001eec:	08007d94 	.word	0x08007d94
 8001ef0:	08007dd4 	.word	0x08007dd4
 8001ef4:	08007e28 	.word	0x08007e28

08001ef8 <TransmitSafetyStatusB>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status B register
 */
void TransmitSafetyStatusB(void) {
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b098      	sub	sp, #96	; 0x60
 8001efc:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status B register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusB[1] = {0};
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x05, statusB, 1);
 8001f04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	2005      	movs	r0, #5
 8001f0e:	f7ff fc2b 	bl	8001768 <DirectCmdRead>

	// FET Overtemperature
	if (statusB[0] & (1 << 7)) {
 8001f12:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da0d      	bge.n	8001f38 <TransmitSafetyStatusB+0x40>
		uint8_t msg[] = "OTF fault triggered! Discharging will be disabled for a moment...\n";
 8001f1c:	4a47      	ldr	r2, [pc, #284]	; (800203c <TransmitSafetyStatusB+0x144>)
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	4611      	mov	r1, r2
 8001f22:	2243      	movs	r2, #67	; 0x43
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fe2a 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001f2a:	1d39      	adds	r1, r7, #4
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	2242      	movs	r2, #66	; 0x42
 8001f32:	4843      	ldr	r0, [pc, #268]	; (8002040 <TransmitSafetyStatusB+0x148>)
 8001f34:	f002 faf8 	bl	8004528 <HAL_UART_Transmit>
	}
	// Internal Overtemperature
	if (statusB[0] & (1 << 6)) {
 8001f38:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00d      	beq.n	8001f60 <TransmitSafetyStatusB+0x68>
		uint8_t msg[] = "OTINT fault triggered! All AFE operations will be disabled for a moment...\n";
 8001f44:	4a3f      	ldr	r2, [pc, #252]	; (8002044 <TransmitSafetyStatusB+0x14c>)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	4611      	mov	r1, r2
 8001f4a:	224c      	movs	r2, #76	; 0x4c
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fe16 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001f52:	1d39      	adds	r1, r7, #4
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	224b      	movs	r2, #75	; 0x4b
 8001f5a:	4839      	ldr	r0, [pc, #228]	; (8002040 <TransmitSafetyStatusB+0x148>)
 8001f5c:	f002 fae4 	bl	8004528 <HAL_UART_Transmit>
	}
	// Overtemperature in Discharge
	if (statusB[0] & (1 << 5)) {
 8001f60:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <TransmitSafetyStatusB+0x90>
		uint8_t msg[] = "OTD fault triggered! Discharging will be disabled for a moment...\n";
 8001f6c:	4a36      	ldr	r2, [pc, #216]	; (8002048 <TransmitSafetyStatusB+0x150>)
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	4611      	mov	r1, r2
 8001f72:	2243      	movs	r2, #67	; 0x43
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 fe02 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001f7a:	1d39      	adds	r1, r7, #4
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	2242      	movs	r2, #66	; 0x42
 8001f82:	482f      	ldr	r0, [pc, #188]	; (8002040 <TransmitSafetyStatusB+0x148>)
 8001f84:	f002 fad0 	bl	8004528 <HAL_UART_Transmit>
	}
	// Overtemperature in Charge
	if (statusB[0] & (1 << 4)) {
 8001f88:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <TransmitSafetyStatusB+0xc4>
		uint8_t msg[] = "OTC fault triggered! Charging will be disabled for a moment...\n";
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <TransmitSafetyStatusB+0x154>)
 8001f96:	1d3c      	adds	r4, r7, #4
 8001f98:	461d      	mov	r5, r3
 8001f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001faa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001fae:	1d39      	adds	r1, r7, #4
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	223f      	movs	r2, #63	; 0x3f
 8001fb6:	4822      	ldr	r0, [pc, #136]	; (8002040 <TransmitSafetyStatusB+0x148>)
 8001fb8:	f002 fab6 	bl	8004528 <HAL_UART_Transmit>
	}
	// Internal Undertemperature
	if (statusB[0] & (1 << 2)) {
 8001fbc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00d      	beq.n	8001fe4 <TransmitSafetyStatusB+0xec>
		uint8_t msg[] = "UTINT fault triggered! All AFE operations will be disabled for a moment...\n";
 8001fc8:	4a21      	ldr	r2, [pc, #132]	; (8002050 <TransmitSafetyStatusB+0x158>)
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	4611      	mov	r1, r2
 8001fce:	224c      	movs	r2, #76	; 0x4c
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fdd4 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001fd6:	1d39      	adds	r1, r7, #4
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fdc:	224b      	movs	r2, #75	; 0x4b
 8001fde:	4818      	ldr	r0, [pc, #96]	; (8002040 <TransmitSafetyStatusB+0x148>)
 8001fe0:	f002 faa2 	bl	8004528 <HAL_UART_Transmit>
	}
	// Undertemperature in Discharge
	if (statusB[0] & (1 << 1)) {
 8001fe4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00d      	beq.n	800200c <TransmitSafetyStatusB+0x114>
		uint8_t msg[] = "UTD fault triggered! No operational changes, but prolonged operation is not advised.\n";
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <TransmitSafetyStatusB+0x15c>)
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	2256      	movs	r2, #86	; 0x56
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fdc0 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001ffe:	1d39      	adds	r1, r7, #4
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
 8002004:	2255      	movs	r2, #85	; 0x55
 8002006:	480e      	ldr	r0, [pc, #56]	; (8002040 <TransmitSafetyStatusB+0x148>)
 8002008:	f002 fa8e 	bl	8004528 <HAL_UART_Transmit>
	}
	// Undertemperature in Charge
	if (statusB[0] & 0x01) {
 800200c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <TransmitSafetyStatusB+0x13c>
		uint8_t msg[] = "UTC fault triggered! No operational changes, but prolonged operation is not advised.\n";
 8002018:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <TransmitSafetyStatusB+0x160>)
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	4611      	mov	r1, r2
 800201e:	2256      	movs	r2, #86	; 0x56
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fdac 	bl	8005b7e <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002026:	1d39      	adds	r1, r7, #4
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	2255      	movs	r2, #85	; 0x55
 800202e:	4804      	ldr	r0, [pc, #16]	; (8002040 <TransmitSafetyStatusB+0x148>)
 8002030:	f002 fa7a 	bl	8004528 <HAL_UART_Transmit>
	}
}
 8002034:	bf00      	nop
 8002036:	3760      	adds	r7, #96	; 0x60
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	08007e80 	.word	0x08007e80
 8002040:	20000254 	.word	0x20000254
 8002044:	08007ec4 	.word	0x08007ec4
 8002048:	08007f10 	.word	0x08007f10
 800204c:	08007f54 	.word	0x08007f54
 8002050:	08007f94 	.word	0x08007f94
 8002054:	08007fe0 	.word	0x08007fe0
 8002058:	08008038 	.word	0x08008038

0800205c <Error_Handler>:

/**
 * Error handler if a UART transmission error occurs
 * TODO: Implement this
 */
void Error_Handler(void) {
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
    // Stay in an infinite loop to allow for debugging
    while (1);
 8002060:	e7fe      	b.n	8002060 <Error_Handler+0x4>
	...

08002064 <HAL_GPIO_EXTI_Callback>:

/**
 * Callback function for handling an interrupt from a GPIO pin
 * @param GPIO_Pin The GPIO pin number where an interrupt was received
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
	uint8_t msg[] = "Interrupt! ";
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	ca07      	ldmia	r2, {r0, r1, r2}
 8002076:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800207a:	f107 010c 	add.w	r1, r7, #12
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	220b      	movs	r2, #11
 8002084:	4807      	ldr	r0, [pc, #28]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x40>)
 8002086:	f002 fa4f 	bl	8004528 <HAL_UART_Transmit>

	switch (GPIO_Pin) {
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	2b10      	cmp	r3, #16
 800208e:	d102      	bne.n	8002096 <HAL_GPIO_EXTI_Callback+0x32>
	case GPIO_PIN_4:
		logAlertsFlag = true;
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x44>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
	}
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08008090 	.word	0x08008090
 80020a4:	20000254 	.word	0x20000254
 80020a8:	200002dd 	.word	0x200002dd

080020ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_MspInit+0x44>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <HAL_MspInit+0x44>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6613      	str	r3, [r2, #96]	; 0x60
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_MspInit+0x44>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_MspInit+0x44>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <HAL_MspInit+0x44>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	; 0x58
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_MspInit+0x44>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000

080020f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_SPI_MspInit+0x7c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d128      	bne.n	8002168 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_SPI_MspInit+0x80>)
 8002118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_SPI_MspInit+0x80>)
 800211c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002120:	6613      	str	r3, [r2, #96]	; 0x60
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_SPI_MspInit+0x80>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_SPI_MspInit+0x80>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_SPI_MspInit+0x80>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_SPI_MspInit+0x80>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002146:	23e0      	movs	r3, #224	; 0xe0
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002156:	2305      	movs	r3, #5
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002164:	f000 fb3c 	bl	80027e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40013000 	.word	0x40013000
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b096      	sub	sp, #88	; 0x58
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	2234      	movs	r2, #52	; 0x34
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fc5e 	bl	8005a5a <memset>
  if(huart->Instance==USART1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1e      	ldr	r2, [pc, #120]	; (800221c <HAL_UART_MspInit+0xa4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d135      	bne.n	8002214 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fbb9 	bl	800392c <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021c0:	f7ff ff4c 	bl	800205c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_UART_MspInit+0xa8>)
 80021c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c8:	4a15      	ldr	r2, [pc, #84]	; (8002220 <HAL_UART_MspInit+0xa8>)
 80021ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ce:	6613      	str	r3, [r2, #96]	; 0x60
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_UART_MspInit+0xa8>)
 80021d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_UART_MspInit+0xa8>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_UART_MspInit+0xa8>)
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_UART_MspInit+0xa8>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f4:	23c0      	movs	r3, #192	; 0xc0
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002204:	2307      	movs	r3, #7
 8002206:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002208:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800220c:	4619      	mov	r1, r3
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_UART_MspInit+0xac>)
 8002210:	f000 fae6 	bl	80027e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	3758      	adds	r7, #88	; 0x58
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40013800 	.word	0x40013800
 8002220:	40021000 	.word	0x40021000
 8002224:	48000400 	.word	0x48000400

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800222c:	e7fe      	b.n	800222c <NMI_Handler+0x4>

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002274:	f000 f95e 	bl	8002534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002280:	2002      	movs	r0, #2
 8002282:	f000 fc51 	bl	8002b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}

0800228a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  return 1;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_kill>:

int _kill(int pid, int sig)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022a4:	f003 fc3e 	bl	8005b24 <__errno>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2216      	movs	r2, #22
 80022ac:	601a      	str	r2, [r3, #0]
  return -1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_exit>:

void _exit (int status)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c2:	f04f 31ff 	mov.w	r1, #4294967295
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffe7 	bl	800229a <_kill>
  while (1) {}    /* Make sure we hang here */
 80022cc:	e7fe      	b.n	80022cc <_exit+0x12>

080022ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e00a      	b.n	80022f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e0:	f3af 8000 	nop.w
 80022e4:	4601      	mov	r1, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	b2ca      	uxtb	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	dbf0      	blt.n	80022e0 <_read+0x12>
  }

  return len;
 80022fe:	687b      	ldr	r3, [r7, #4]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e009      	b.n	800232e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	60ba      	str	r2, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	dbf1      	blt.n	800231a <_write+0x12>
  }
  return len;
 8002336:	687b      	ldr	r3, [r7, #4]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_close>:

int _close(int file)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002368:	605a      	str	r2, [r3, #4]
  return 0;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_isatty>:

int _isatty(int file)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002380:	2301      	movs	r3, #1
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f003 fba4 	bl	8005b24 <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000a000 	.word	0x2000a000
 8002408:	00000400 	.word	0x00000400
 800240c:	200002e0 	.word	0x200002e0
 8002410:	20000438 	.word	0x20000438

08002414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002470 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800243c:	f7ff ffea 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <LoopForever+0x6>)
  ldr r1, =_edata
 8002442:	490d      	ldr	r1, [pc, #52]	; (8002478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002444:	4a0d      	ldr	r2, [pc, #52]	; (800247c <LoopForever+0xe>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002448:	e002      	b.n	8002450 <LoopCopyDataInit>

0800244a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800244c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244e:	3304      	adds	r3, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002454:	d3f9      	bcc.n	800244a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002458:	4c0a      	ldr	r4, [pc, #40]	; (8002484 <LoopForever+0x16>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800245c:	e001      	b.n	8002462 <LoopFillZerobss>

0800245e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002460:	3204      	adds	r2, #4

08002462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002464:	d3fb      	bcc.n	800245e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002466:	f003 fb63 	bl	8005b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800246a:	f7fe fd99 	bl	8000fa0 <main>

0800246e <LoopForever>:

LoopForever:
    b LoopForever
 800246e:	e7fe      	b.n	800246e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002470:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002478:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800247c:	08008464 	.word	0x08008464
  ldr r2, =_sbss
 8002480:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002484:	20000434 	.word	0x20000434

08002488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002488:	e7fe      	b.n	8002488 <ADC1_2_IRQHandler>

0800248a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002494:	2003      	movs	r0, #3
 8002496:	f000 f961 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800249a:	200f      	movs	r0, #15
 800249c:	f000 f80e 	bl	80024bc <HAL_InitTick>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	71fb      	strb	r3, [r7, #7]
 80024aa:	e001      	b.n	80024b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ac:	f7ff fdfe 	bl	80020ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024b0:	79fb      	ldrb	r3, [r7, #7]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_InitTick+0x6c>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d023      	beq.n	8002518 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_InitTick+0x70>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_InitTick+0x6c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024de:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f96d 	bl	80027c6 <HAL_SYSTICK_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d809      	bhi.n	800250c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f8:	2200      	movs	r2, #0
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f000 f937 	bl	8002772 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002504:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <HAL_InitTick+0x74>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e007      	b.n	800251c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	e004      	b.n	800251c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	e001      	b.n	800251c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000008 	.word	0x20000008
 800252c:	20000000 	.word	0x20000000
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_IncTick+0x20>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x24>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_IncTick+0x24>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008
 8002558:	200002e4 	.word	0x200002e4

0800255c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_GetTick+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	200002e4 	.word	0x200002e4

08002574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff ffee 	bl	800255c <HAL_GetTick>
 8002580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d005      	beq.n	800259a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_Delay+0x44>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800259a:	bf00      	nop
 800259c:	f7ff ffde 	bl	800255c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d8f7      	bhi.n	800259c <HAL_Delay+0x28>
  {
  }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000008 	.word	0x20000008

080025bc <__NVIC_SetPriorityGrouping>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4907      	ldr	r1, [pc, #28]	; (8002658 <__NVIC_EnableIRQ+0x38>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
         );
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f7ff ff8e 	bl	800265c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff29 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff3e 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff8e 	bl	80026b0 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5d 	bl	800265c <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff31 	bl	8002620 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffa2 	bl	8002718 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ee:	e14e      	b.n	8002a8e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8140 	beq.w	8002a88 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d005      	beq.n	8002820 <HAL_GPIO_Init+0x40>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d130      	bne.n	8002882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002856:	2201      	movs	r2, #1
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0201 	and.w	r2, r3, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b03      	cmp	r3, #3
 800288c:	d017      	beq.n	80028be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d123      	bne.n	8002912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	6939      	ldr	r1, [r7, #16]
 800290e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0203 	and.w	r2, r3, #3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 809a 	beq.w	8002a88 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002954:	4b55      	ldr	r3, [pc, #340]	; (8002aac <HAL_GPIO_Init+0x2cc>)
 8002956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002958:	4a54      	ldr	r2, [pc, #336]	; (8002aac <HAL_GPIO_Init+0x2cc>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6613      	str	r3, [r2, #96]	; 0x60
 8002960:	4b52      	ldr	r3, [pc, #328]	; (8002aac <HAL_GPIO_Init+0x2cc>)
 8002962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800296c:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002996:	d013      	beq.n	80029c0 <HAL_GPIO_Init+0x1e0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a46      	ldr	r2, [pc, #280]	; (8002ab4 <HAL_GPIO_Init+0x2d4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00d      	beq.n	80029bc <HAL_GPIO_Init+0x1dc>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a45      	ldr	r2, [pc, #276]	; (8002ab8 <HAL_GPIO_Init+0x2d8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <HAL_GPIO_Init+0x1d8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a44      	ldr	r2, [pc, #272]	; (8002abc <HAL_GPIO_Init+0x2dc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_GPIO_Init+0x1d4>
 80029b0:	2303      	movs	r3, #3
 80029b2:	e006      	b.n	80029c2 <HAL_GPIO_Init+0x1e2>
 80029b4:	2307      	movs	r3, #7
 80029b6:	e004      	b.n	80029c2 <HAL_GPIO_Init+0x1e2>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e002      	b.n	80029c2 <HAL_GPIO_Init+0x1e2>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_GPIO_Init+0x1e2>
 80029c0:	2300      	movs	r3, #0
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	f002 0203 	and.w	r2, r2, #3
 80029c8:	0092      	lsls	r2, r2, #2
 80029ca:	4093      	lsls	r3, r2
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029d2:	4937      	ldr	r1, [pc, #220]	; (8002ab0 <HAL_GPIO_Init+0x2d0>)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e0:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <HAL_GPIO_Init+0x2e0>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a04:	4a2e      	ldr	r2, [pc, #184]	; (8002ac0 <HAL_GPIO_Init+0x2e0>)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_GPIO_Init+0x2e0>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a2e:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <HAL_GPIO_Init+0x2e0>)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_GPIO_Init+0x2e0>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a58:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_GPIO_Init+0x2e0>)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_GPIO_Init+0x2e0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a82:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <HAL_GPIO_Init+0x2e0>)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f47f aea9 	bne.w	80027f0 <HAL_GPIO_Init+0x10>
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	48000400 	.word	0x48000400
 8002ab8:	48000800 	.word	0x48000800
 8002abc:	48000c00 	.word	0x48000c00
 8002ac0:	40010400 	.word	0x40010400

08002ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae0:	e002      	b.n	8002ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	041a      	lsls	r2, r3, #16
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43d9      	mvns	r1, r3
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	400b      	ands	r3, r1
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d006      	beq.n	8002b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fa8c 	bl	8002064 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40007000 	.word	0x40007000

08002b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b82:	d130      	bne.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b84:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b90:	d038      	beq.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2232      	movs	r2, #50	; 0x32
 8002ba8:	fb02 f303 	mul.w	r3, r2, r3
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	0c9b      	lsrs	r3, r3, #18
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb8:	e002      	b.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d102      	bne.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f2      	bne.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d110      	bne.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e00f      	b.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d007      	beq.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40007000 	.word	0x40007000
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	431bde83 	.word	0x431bde83

08002c20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f000 bc4f 	b.w	80034d2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c34:	4b97      	ldr	r3, [pc, #604]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c3e:	4b95      	ldr	r3, [pc, #596]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80e6 	beq.w	8002e22 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4c>
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	f040 808d 	bne.w	8002d7e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	f040 8089 	bne.w	8002d7e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c6c:	4b89      	ldr	r3, [pc, #548]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <HAL_RCC_OscConfig+0x66>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f000 bc26 	b.w	80034d2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c8a:	4b82      	ldr	r3, [pc, #520]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x80>
 8002c96:	4b7f      	ldr	r3, [pc, #508]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9e:	e005      	b.n	8002cac <HAL_RCC_OscConfig+0x8c>
 8002ca0:	4b7c      	ldr	r3, [pc, #496]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d224      	bcs.n	8002cfa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fdd9 	bl	800386c <RCC_SetFlashLatencyFromMSIRange>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f000 bc06 	b.w	80034d2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc6:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a72      	ldr	r2, [pc, #456]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b70      	ldr	r3, [pc, #448]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	496d      	ldr	r1, [pc, #436]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ce4:	4b6b      	ldr	r3, [pc, #428]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	4968      	ldr	r1, [pc, #416]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
 8002cf8:	e025      	b.n	8002d46 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cfa:	4b66      	ldr	r3, [pc, #408]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a65      	ldr	r2, [pc, #404]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d00:	f043 0308 	orr.w	r3, r3, #8
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	4960      	ldr	r1, [pc, #384]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d18:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	495b      	ldr	r1, [pc, #364]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fd98 	bl	800386c <RCC_SetFlashLatencyFromMSIRange>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e3c5      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d46:	f000 fccd 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b51      	ldr	r3, [pc, #324]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	4950      	ldr	r1, [pc, #320]	; (8002e98 <HAL_RCC_OscConfig+0x278>)
 8002d58:	5ccb      	ldrb	r3, [r1, r3]
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	4a4e      	ldr	r2, [pc, #312]	; (8002e9c <HAL_RCC_OscConfig+0x27c>)
 8002d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d66:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fba6 	bl	80024bc <HAL_InitTick>
 8002d70:	4603      	mov	r3, r0
 8002d72:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d052      	beq.n	8002e20 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	e3a9      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d032      	beq.n	8002dec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a42      	ldr	r2, [pc, #264]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d92:	f7ff fbe3 	bl	800255c <HAL_GetTick>
 8002d96:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d9a:	f7ff fbdf 	bl	800255c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e392      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dac:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002dbe:	f043 0308 	orr.w	r3, r3, #8
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	4930      	ldr	r1, [pc, #192]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd6:	4b2f      	ldr	r3, [pc, #188]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	492b      	ldr	r1, [pc, #172]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
 8002dea:	e01a      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002df8:	f7ff fbb0 	bl	800255c <HAL_GetTick>
 8002dfc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e00:	f7ff fbac 	bl	800255c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e35f      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1e0>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d073      	beq.n	8002f16 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_OscConfig+0x220>
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d10e      	bne.n	8002e58 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d10b      	bne.n	8002e58 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d063      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2f4>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d15f      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e33c      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d106      	bne.n	8002e70 <HAL_RCC_OscConfig+0x250>
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e025      	b.n	8002ebc <HAL_RCC_OscConfig+0x29c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e78:	d114      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x284>
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e013      	b.n	8002ebc <HAL_RCC_OscConfig+0x29c>
 8002e94:	40021000 	.word	0x40021000
 8002e98:	0800809c 	.word	0x0800809c
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	4b8f      	ldr	r3, [pc, #572]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a8e      	ldr	r2, [pc, #568]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a8b      	ldr	r2, [pc, #556]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fb4a 	bl	800255c <HAL_GetTick>
 8002ec8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7ff fb46 	bl	800255c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e2f9      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ede:	4b81      	ldr	r3, [pc, #516]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x2ac>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7ff fb36 	bl	800255c <HAL_GetTick>
 8002ef0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7ff fb32 	bl	800255c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e2e5      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f06:	4b77      	ldr	r3, [pc, #476]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d060      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_OscConfig+0x314>
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d119      	bne.n	8002f62 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d116      	bne.n	8002f62 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f34:	4b6b      	ldr	r3, [pc, #428]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_OscConfig+0x32c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e2c2      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b65      	ldr	r3, [pc, #404]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	4962      	ldr	r1, [pc, #392]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f60:	e040      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d023      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6a:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a5d      	ldr	r2, [pc, #372]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7ff faf1 	bl	800255c <HAL_GetTick>
 8002f7a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7e:	f7ff faed 	bl	800255c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e2a0      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f90:	4b54      	ldr	r3, [pc, #336]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9c:	4b51      	ldr	r3, [pc, #324]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	494e      	ldr	r1, [pc, #312]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
 8002fb0:	e018      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a4b      	ldr	r2, [pc, #300]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7ff facd 	bl	800255c <HAL_GetTick>
 8002fc2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7ff fac9 	bl	800255c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e27c      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd8:	4b42      	ldr	r3, [pc, #264]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8082 	beq.w	80030f6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d05f      	beq.n	80030ba <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003000:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	429a      	cmp	r2, r3
 800300e:	d037      	beq.n	8003080 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e254      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01b      	beq.n	800306a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003032:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003038:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003042:	f7ff fa8b 	bl	800255c <HAL_GetTick>
 8003046:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304a:	f7ff fa87 	bl	800255c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b11      	cmp	r3, #17
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e23a      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ef      	bne.n	800304a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003070:	f023 0210 	bic.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	491a      	ldr	r1, [pc, #104]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7ff fa64 	bl	800255c <HAL_GetTick>
 8003094:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003098:	f7ff fa60 	bl	800255c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b11      	cmp	r3, #17
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e213      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <HAL_RCC_OscConfig+0x478>
 80030b8:	e01d      	b.n	80030f6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c0:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7ff fa47 	bl	800255c <HAL_GetTick>
 80030ce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7ff fa43 	bl	800255c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b11      	cmp	r3, #17
 80030de:	d903      	bls.n	80030e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1f6      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
 80030e4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e8:	4ba9      	ldr	r3, [pc, #676]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ed      	bne.n	80030d2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80bd 	beq.w	800327e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800310a:	4ba1      	ldr	r3, [pc, #644]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10e      	bne.n	8003134 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b9e      	ldr	r3, [pc, #632]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	4a9d      	ldr	r2, [pc, #628]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6593      	str	r3, [r2, #88]	; 0x58
 8003122:	4b9b      	ldr	r3, [pc, #620]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003134:	4b97      	ldr	r3, [pc, #604]	; (8003394 <HAL_RCC_OscConfig+0x774>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d118      	bne.n	8003172 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003140:	4b94      	ldr	r3, [pc, #592]	; (8003394 <HAL_RCC_OscConfig+0x774>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a93      	ldr	r2, [pc, #588]	; (8003394 <HAL_RCC_OscConfig+0x774>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314c:	f7ff fa06 	bl	800255c <HAL_GetTick>
 8003150:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003154:	f7ff fa02 	bl	800255c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e1b5      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003166:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x774>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d02c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800317e:	4b84      	ldr	r3, [pc, #528]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	497f      	ldr	r1, [pc, #508]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031a4:	4b7a      	ldr	r3, [pc, #488]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	4a79      	ldr	r2, [pc, #484]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031b4:	4b76      	ldr	r3, [pc, #472]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	4a75      	ldr	r2, [pc, #468]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c4:	e018      	b.n	80031f8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031c6:	4b72      	ldr	r3, [pc, #456]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	4a70      	ldr	r2, [pc, #448]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d6:	e00f      	b.n	80031f8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031d8:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	4a6c      	ldr	r2, [pc, #432]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031e8:	4b69      	ldr	r3, [pc, #420]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	4a68      	ldr	r2, [pc, #416]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d016      	beq.n	800322e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7ff f9ac 	bl	800255c <HAL_GetTick>
 8003204:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7ff f9a8 	bl	800255c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e159      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	4b5c      	ldr	r3, [pc, #368]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ed      	beq.n	8003208 <HAL_RCC_OscConfig+0x5e8>
 800322c:	e01d      	b.n	800326a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7ff f995 	bl	800255c <HAL_GetTick>
 8003232:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7ff f991 	bl	800255c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e142      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324c:	4b50      	ldr	r3, [pc, #320]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ed      	bne.n	8003236 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800325a:	4b4d      	ldr	r3, [pc, #308]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800326a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800326e:	2b01      	cmp	r3, #1
 8003270:	d105      	bne.n	800327e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	4a46      	ldr	r2, [pc, #280]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d03c      	beq.n	8003304 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01c      	beq.n	80032cc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003298:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7ff f95b 	bl	800255c <HAL_GetTick>
 80032a6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032aa:	f7ff f957 	bl	800255c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e10a      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032bc:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80032be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ef      	beq.n	80032aa <HAL_RCC_OscConfig+0x68a>
 80032ca:	e01b      	b.n	8003304 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032cc:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80032ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032d2:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032dc:	f7ff f93e 	bl	800255c <HAL_GetTick>
 80032e0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e4:	f7ff f93a 	bl	800255c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0ed      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032f6:	4b26      	ldr	r3, [pc, #152]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 80032f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ef      	bne.n	80032e4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80e1 	beq.w	80034d0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	2b02      	cmp	r3, #2
 8003314:	f040 80b5 	bne.w	8003482 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f003 0203 	and.w	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	429a      	cmp	r2, r3
 800332a:	d124      	bne.n	8003376 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003336:	3b01      	subs	r3, #1
 8003338:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d11b      	bne.n	8003376 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d113      	bne.n	8003376 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	3b01      	subs	r3, #1
 800335c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d109      	bne.n	8003376 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	3b01      	subs	r3, #1
 8003370:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d05f      	beq.n	8003436 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d05a      	beq.n	8003432 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a03      	ldr	r2, [pc, #12]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003386:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003388:	f7ff f8e8 	bl	800255c <HAL_GetTick>
 800338c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338e:	e00c      	b.n	80033aa <HAL_RCC_OscConfig+0x78a>
 8003390:	40021000 	.word	0x40021000
 8003394:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7ff f8e0 	bl	800255c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e093      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033aa:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	4b49      	ldr	r3, [pc, #292]	; (80034e0 <HAL_RCC_OscConfig+0x8c0>)
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033c6:	3a01      	subs	r2, #1
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033d0:	0212      	lsls	r2, r2, #8
 80033d2:	4311      	orrs	r1, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033d8:	0852      	lsrs	r2, r2, #1
 80033da:	3a01      	subs	r2, #1
 80033dc:	0552      	lsls	r2, r2, #21
 80033de:	4311      	orrs	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033e4:	0852      	lsrs	r2, r2, #1
 80033e6:	3a01      	subs	r2, #1
 80033e8:	0652      	lsls	r2, r2, #25
 80033ea:	430a      	orrs	r2, r1
 80033ec:	493b      	ldr	r1, [pc, #236]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033f2:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a39      	ldr	r2, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 80033f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033fe:	4b37      	ldr	r3, [pc, #220]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	4a36      	ldr	r2, [pc, #216]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 8003404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003408:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800340a:	f7ff f8a7 	bl	800255c <HAL_GetTick>
 800340e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003412:	f7ff f8a3 	bl	800255c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e056      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003430:	e04e      	b.n	80034d0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e04d      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003436:	4b29      	ldr	r3, [pc, #164]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d146      	bne.n	80034d0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 8003448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800344e:	4b23      	ldr	r3, [pc, #140]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4a22      	ldr	r2, [pc, #136]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 8003454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003458:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800345a:	f7ff f87f 	bl	800255c <HAL_GetTick>
 800345e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7ff f87b 	bl	800255c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e02e      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x842>
 8003480:	e026      	b.n	80034d0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d021      	beq.n	80034cc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b14      	ldr	r3, [pc, #80]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a13      	ldr	r2, [pc, #76]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 800348e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7ff f862 	bl	800255c <HAL_GetTick>
 8003498:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7ff f85e 	bl	800255c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e011      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <HAL_RCC_OscConfig+0x8bc>)
 80034c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034c4:	f023 0303 	bic.w	r3, r3, #3
 80034c8:	60d3      	str	r3, [r2, #12]
 80034ca:	e001      	b.n	80034d0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3728      	adds	r7, #40	; 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	f99f808c 	.word	0xf99f808c

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0e7      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b75      	ldr	r3, [pc, #468]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d910      	bls.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0207 	bic.w	r2, r3, #7
 800350e:	4970      	ldr	r1, [pc, #448]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b6e      	ldr	r3, [pc, #440]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0cf      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003540:	429a      	cmp	r2, r3
 8003542:	d908      	bls.n	8003556 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4960      	ldr	r1, [pc, #384]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d04c      	beq.n	80035fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b5a      	ldr	r3, [pc, #360]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d121      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0a6      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	4b54      	ldr	r3, [pc, #336]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d115      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e09a      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800359a:	4b4e      	ldr	r3, [pc, #312]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e08e      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035aa:	4b4a      	ldr	r3, [pc, #296]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e086      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4943      	ldr	r1, [pc, #268]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035cc:	f7fe ffc6 	bl	800255c <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fe ffc2 	bl	800255c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e06e      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d010      	beq.n	800362a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003614:	429a      	cmp	r2, r3
 8003616:	d208      	bcs.n	800362a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	492b      	ldr	r1, [pc, #172]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d210      	bcs.n	800365a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 0207 	bic.w	r2, r3, #7
 8003640:	4923      	ldr	r1, [pc, #140]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003648:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <HAL_RCC_ClockConfig+0x1ec>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d001      	beq.n	800365a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e036      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4918      	ldr	r1, [pc, #96]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4910      	ldr	r1, [pc, #64]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003698:	f000 f824 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	490b      	ldr	r1, [pc, #44]	; (80036d8 <HAL_RCC_ClockConfig+0x1f4>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1f8>)
 80036b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1fc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fefd 	bl	80024bc <HAL_InitTick>
 80036c2:	4603      	mov	r3, r0
 80036c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80036c6:	7afb      	ldrb	r3, [r7, #11]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40022000 	.word	0x40022000
 80036d4:	40021000 	.word	0x40021000
 80036d8:	0800809c 	.word	0x0800809c
 80036dc:	20000000 	.word	0x20000000
 80036e0:	20000004 	.word	0x20000004

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f2:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036fc:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x34>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d121      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d11e      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003724:	4b31      	ldr	r3, [pc, #196]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	e005      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003740:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10d      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003754:	e00a      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d102      	bne.n	8003762 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800375c:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e004      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d101      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003768:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800376a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d134      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0xa6>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d003      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0xac>
 8003788:	e005      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800378c:	617b      	str	r3, [r7, #20]
      break;
 800378e:	e005      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003792:	617b      	str	r3, [r7, #20]
      break;
 8003794:	e002      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	617b      	str	r3, [r7, #20]
      break;
 800379a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	3301      	adds	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	fb03 f202 	mul.w	r2, r3, r2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_RCC_GetSysClockFreq+0x108>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	0e5b      	lsrs	r3, r3, #25
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	3301      	adds	r3, #1
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037dc:	69bb      	ldr	r3, [r7, #24]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	080080b4 	.word	0x080080b4
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	007a1200 	.word	0x007a1200

080037fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003818:	f7ff fff0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4904      	ldr	r1, [pc, #16]	; (800383c <HAL_RCC_GetPCLK1Freq+0x28>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	080080ac 	.word	0x080080ac

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003844:	f7ff ffda 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0adb      	lsrs	r3, r3, #11
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4904      	ldr	r1, [pc, #16]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	080080ac 	.word	0x080080ac

0800386c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003878:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003884:	f7ff f968 	bl	8002b58 <HAL_PWREx_GetVoltageRange>
 8003888:	6178      	str	r0, [r7, #20]
 800388a:	e014      	b.n	80038b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800388c:	4b25      	ldr	r3, [pc, #148]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003896:	6593      	str	r3, [r2, #88]	; 0x58
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038a4:	f7ff f958 	bl	8002b58 <HAL_PWREx_GetVoltageRange>
 80038a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038aa:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038bc:	d10b      	bne.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d919      	bls.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2ba0      	cmp	r3, #160	; 0xa0
 80038c8:	d902      	bls.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ca:	2302      	movs	r3, #2
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e013      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038d0:	2301      	movs	r3, #1
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e010      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d902      	bls.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038dc:	2303      	movs	r3, #3
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e00a      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b80      	cmp	r3, #128	; 0x80
 80038e6:	d102      	bne.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038e8:	2302      	movs	r3, #2
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	e004      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b70      	cmp	r3, #112	; 0x70
 80038f2:	d101      	bne.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038f4:	2301      	movs	r3, #1
 80038f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 0207 	bic.w	r2, r3, #7
 8003900:	4909      	ldr	r1, [pc, #36]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003908:	4b07      	ldr	r3, [pc, #28]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	40022000 	.word	0x40022000

0800392c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003934:	2300      	movs	r3, #0
 8003936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003938:	2300      	movs	r3, #0
 800393a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 809e 	beq.w	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800394e:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003964:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	4a3f      	ldr	r2, [pc, #252]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800396a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396e:	6593      	str	r3, [r2, #88]	; 0x58
 8003970:	4b3d      	ldr	r3, [pc, #244]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397c:	2301      	movs	r3, #1
 800397e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003980:	4b3a      	ldr	r3, [pc, #232]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a39      	ldr	r2, [pc, #228]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800398c:	f7fe fde6 	bl	800255c <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003992:	e009      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003994:	f7fe fde2 	bl	800255c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	74fb      	strb	r3, [r7, #19]
        break;
 80039a6:	e005      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039a8:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ef      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d15a      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01e      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d019      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039e2:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a02:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d016      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe fda2 	bl	800255c <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fe fd9e 	bl	800255c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d902      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	74fb      	strb	r3, [r7, #19]
            break;
 8003a32:	e006      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0ec      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10b      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a48:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4904      	ldr	r1, [pc, #16]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a5e:	e009      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	74bb      	strb	r3, [r7, #18]
 8003a64:	e006      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a74:	7c7b      	ldrb	r3, [r7, #17]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4b6e      	ldr	r3, [pc, #440]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	4a6d      	ldr	r2, [pc, #436]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a92:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f023 0203 	bic.w	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4964      	ldr	r1, [pc, #400]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ab4:	4b5f      	ldr	r3, [pc, #380]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 020c 	bic.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	495c      	ldr	r1, [pc, #368]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ad6:	4b57      	ldr	r3, [pc, #348]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4953      	ldr	r1, [pc, #332]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003af8:	4b4e      	ldr	r3, [pc, #312]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	494b      	ldr	r1, [pc, #300]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b1a:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4942      	ldr	r1, [pc, #264]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b3c:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	493a      	ldr	r1, [pc, #232]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b5e:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	4931      	ldr	r1, [pc, #196]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b80:	4b2c      	ldr	r3, [pc, #176]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	4929      	ldr	r1, [pc, #164]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	4920      	ldr	r1, [pc, #128]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d015      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	4918      	ldr	r1, [pc, #96]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bee:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d015      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	490a      	ldr	r1, [pc, #40]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c1a:	d105      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c28:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000

08003c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e095      	b.n	8003d76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5a:	d009      	beq.n	8003c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	61da      	str	r2, [r3, #28]
 8003c62:	e005      	b.n	8003c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe fa32 	bl	80020f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cb0:	d902      	bls.n	8003cb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e002      	b.n	8003cbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cc6:	d007      	beq.n	8003cd8 <HAL_SPI_Init+0xa0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1a:	ea42 0103 	orr.w	r1, r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	f003 0204 	and.w	r2, r3, #4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d54:	ea42 0103 	orr.w	r1, r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b08a      	sub	sp, #40	; 0x28
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x26>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e20a      	b.n	80041ba <HAL_SPI_TransmitReceive+0x43c>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dac:	f7fe fbd6 	bl	800255c <HAL_GetTick>
 8003db0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003db8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003dc0:	887b      	ldrh	r3, [r7, #2]
 8003dc2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dc8:	7efb      	ldrb	r3, [r7, #27]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d00e      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x6e>
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd4:	d106      	bne.n	8003de4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <HAL_SPI_TransmitReceive+0x66>
 8003dde:	7efb      	ldrb	r3, [r7, #27]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d003      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003dea:	e1e0      	b.n	80041ae <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x80>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x80>
 8003df8:	887b      	ldrh	r3, [r7, #2]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e04:	e1d3      	b.n	80041ae <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d003      	beq.n	8003e1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2205      	movs	r2, #5
 8003e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	887a      	ldrh	r2, [r7, #2]
 8003e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	887a      	ldrh	r2, [r7, #2]
 8003e32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	887a      	ldrh	r2, [r7, #2]
 8003e40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	887a      	ldrh	r2, [r7, #2]
 8003e46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e5c:	d802      	bhi.n	8003e64 <HAL_SPI_TransmitReceive+0xe6>
 8003e5e:	8a3b      	ldrh	r3, [r7, #16]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d908      	bls.n	8003e76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	e007      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d007      	beq.n	8003ea4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eac:	f240 8081 	bls.w	8003fb2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0x140>
 8003eb8:	8a7b      	ldrh	r3, [r7, #18]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d16d      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	881a      	ldrh	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee2:	e05a      	b.n	8003f9a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d11b      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x1ac>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d016      	beq.n	8003f2a <HAL_SPI_TransmitReceive+0x1ac>
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d113      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	881a      	ldrh	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	1c9a      	adds	r2, r3, #2
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d11c      	bne.n	8003f72 <HAL_SPI_TransmitReceive+0x1f4>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d016      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	b292      	uxth	r2, r2
 8003f50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	1c9a      	adds	r2, r3, #2
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f72:	f7fe faf3 	bl	800255c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d80b      	bhi.n	8003f9a <HAL_SPI_TransmitReceive+0x21c>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d007      	beq.n	8003f9a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003f98:	e109      	b.n	80041ae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d19f      	bne.n	8003ee4 <HAL_SPI_TransmitReceive+0x166>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d199      	bne.n	8003ee4 <HAL_SPI_TransmitReceive+0x166>
 8003fb0:	e0e3      	b.n	800417a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_SPI_TransmitReceive+0x244>
 8003fba:	8a7b      	ldrh	r3, [r7, #18]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f040 80cf 	bne.w	8004160 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d912      	bls.n	8003ff2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	1c9a      	adds	r2, r3, #2
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b02      	subs	r3, #2
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ff0:	e0b6      	b.n	8004160 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	7812      	ldrb	r2, [r2, #0]
 8003ffe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004018:	e0a2      	b.n	8004160 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b02      	cmp	r3, #2
 8004026:	d134      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x314>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d02f      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x314>
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	2b01      	cmp	r3, #1
 8004036:	d12c      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d912      	bls.n	8004068 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	881a      	ldrh	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b02      	subs	r3, #2
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004066:	e012      	b.n	800408e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	7812      	ldrb	r2, [r2, #0]
 8004074:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d148      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x3b4>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d042      	beq.n	8004132 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d923      	bls.n	8004100 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	b292      	uxth	r2, r2
 80040c4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	1c9a      	adds	r2, r3, #2
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b02      	subs	r3, #2
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d81f      	bhi.n	800412e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	e016      	b.n	800412e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f103 020c 	add.w	r2, r3, #12
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800412e:	2301      	movs	r3, #1
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004132:	f7fe fa13 	bl	800255c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413e:	429a      	cmp	r2, r3
 8004140:	d803      	bhi.n	800414a <HAL_SPI_TransmitReceive+0x3cc>
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d102      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x3d2>
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	2b00      	cmp	r3, #0
 800414e:	d107      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800415e:	e026      	b.n	80041ae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	f47f af57 	bne.w	800401a <HAL_SPI_TransmitReceive+0x29c>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	f47f af50 	bne.w	800401a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f93e 	bl	8004400 <SPI_EndRxTxTransaction>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a4:	e003      	b.n	80041ae <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3728      	adds	r7, #40	; 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041d4:	f7fe f9c2 	bl	800255c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	4413      	add	r3, r2
 80041e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041e4:	f7fe f9ba 	bl	800255c <HAL_GetTick>
 80041e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ea:	4b39      	ldr	r3, [pc, #228]	; (80042d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	015b      	lsls	r3, r3, #5
 80041f0:	0d1b      	lsrs	r3, r3, #20
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	fb02 f303 	mul.w	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041fa:	e054      	b.n	80042a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d050      	beq.n	80042a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004204:	f7fe f9aa 	bl	800255c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	429a      	cmp	r2, r3
 8004212:	d902      	bls.n	800421a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d13d      	bne.n	8004296 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004228:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004232:	d111      	bne.n	8004258 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423c:	d004      	beq.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d107      	bne.n	8004258 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004256:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004260:	d10f      	bne.n	8004282 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004280:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e017      	b.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4013      	ands	r3, r2
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	bf0c      	ite	eq
 80042b6:	2301      	moveq	r3, #1
 80042b8:	2300      	movne	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d19b      	bne.n	80041fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000000 	.word	0x20000000

080042d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042e6:	f7fe f939 	bl	800255c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	4413      	add	r3, r2
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80042f6:	f7fe f931 	bl	800255c <HAL_GetTick>
 80042fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004304:	4b3d      	ldr	r3, [pc, #244]	; (80043fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	00da      	lsls	r2, r3, #3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	0d1b      	lsrs	r3, r3, #20
 8004314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800431c:	e060      	b.n	80043e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004324:	d107      	bne.n	8004336 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004334:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d050      	beq.n	80043e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800433e:	f7fe f90d 	bl	800255c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	429a      	cmp	r2, r3
 800434c:	d902      	bls.n	8004354 <SPI_WaitFifoStateUntilTimeout+0x80>
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	2b00      	cmp	r3, #0
 8004352:	d13d      	bne.n	80043d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004362:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800436c:	d111      	bne.n	8004392 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004376:	d004      	beq.n	8004382 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004380:	d107      	bne.n	8004392 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004390:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439a:	d10f      	bne.n	80043bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e010      	b.n	80043f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	3b01      	subs	r3, #1
 80043de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d196      	bne.n	800431e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3728      	adds	r7, #40	; 0x28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000

08004400 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2200      	movs	r2, #0
 8004414:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7ff ff5b 	bl	80042d4 <SPI_WaitFifoStateUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e027      	b.n	8004484 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2200      	movs	r2, #0
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff fec0 	bl	80041c4 <SPI_WaitFlagStateUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444e:	f043 0220 	orr.w	r2, r3, #32
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e014      	b.n	8004484 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2200      	movs	r2, #0
 8004462:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff ff34 	bl	80042d4 <SPI_WaitFifoStateUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004476:	f043 0220 	orr.w	r2, r3, #32
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e000      	b.n	8004484 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e040      	b.n	8004520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd fe62 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fb0c 	bl	8004af0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8af 	bl	800463c <UART_SetConfig>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e01b      	b.n	8004520 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fb8b 	bl	8004c34 <UART_CheckIdleState>
 800451e:	4603      	mov	r3, r0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453c:	2b20      	cmp	r3, #32
 800453e:	d178      	bne.n	8004632 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_UART_Transmit+0x24>
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e071      	b.n	8004634 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2221      	movs	r2, #33	; 0x21
 800455c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800455e:	f7fd fffd 	bl	800255c <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d108      	bne.n	8004590 <HAL_UART_Transmit+0x68>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e003      	b.n	8004598 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004598:	e030      	b.n	80045fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	2180      	movs	r1, #128	; 0x80
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fbed 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e03c      	b.n	8004634 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10b      	bne.n	80045d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045cc:	b292      	uxth	r2, r2
 80045ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	3302      	adds	r3, #2
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	e008      	b.n	80045ea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	b292      	uxth	r2, r2
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1c8      	bne.n	800459a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2200      	movs	r2, #0
 8004610:	2140      	movs	r1, #64	; 0x40
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fbb6 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e005      	b.n	8004634 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	e000      	b.n	8004634 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
  }
}
 8004634:	4618      	mov	r0, r3
 8004636:	3720      	adds	r7, #32
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800463c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004640:	b08a      	sub	sp, #40	; 0x28
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	431a      	orrs	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	4313      	orrs	r3, r2
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b9e      	ldr	r3, [pc, #632]	; (80048e4 <UART_SetConfig+0x2a8>)
 800466c:	4013      	ands	r3, r2
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004674:	430b      	orrs	r3, r1
 8004676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a93      	ldr	r2, [pc, #588]	; (80048e8 <UART_SetConfig+0x2ac>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a4:	4313      	orrs	r3, r2
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	430a      	orrs	r2, r1
 80046ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a8a      	ldr	r2, [pc, #552]	; (80048ec <UART_SetConfig+0x2b0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d126      	bne.n	8004714 <UART_SetConfig+0xd8>
 80046c6:	4b8a      	ldr	r3, [pc, #552]	; (80048f0 <UART_SetConfig+0x2b4>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d81b      	bhi.n	800470c <UART_SetConfig+0xd0>
 80046d4:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <UART_SetConfig+0xa0>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004705 	.word	0x08004705
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f2:	e0ab      	b.n	800484c <UART_SetConfig+0x210>
 80046f4:	2302      	movs	r3, #2
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e0a7      	b.n	800484c <UART_SetConfig+0x210>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e0a3      	b.n	800484c <UART_SetConfig+0x210>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e09f      	b.n	800484c <UART_SetConfig+0x210>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e09b      	b.n	800484c <UART_SetConfig+0x210>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a76      	ldr	r2, [pc, #472]	; (80048f4 <UART_SetConfig+0x2b8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d138      	bne.n	8004790 <UART_SetConfig+0x154>
 800471e:	4b74      	ldr	r3, [pc, #464]	; (80048f0 <UART_SetConfig+0x2b4>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d82d      	bhi.n	8004788 <UART_SetConfig+0x14c>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0xf8>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004769 	.word	0x08004769
 8004738:	08004789 	.word	0x08004789
 800473c:	08004789 	.word	0x08004789
 8004740:	08004789 	.word	0x08004789
 8004744:	08004779 	.word	0x08004779
 8004748:	08004789 	.word	0x08004789
 800474c:	08004789 	.word	0x08004789
 8004750:	08004789 	.word	0x08004789
 8004754:	08004771 	.word	0x08004771
 8004758:	08004789 	.word	0x08004789
 800475c:	08004789 	.word	0x08004789
 8004760:	08004789 	.word	0x08004789
 8004764:	08004781 	.word	0x08004781
 8004768:	2300      	movs	r3, #0
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e06d      	b.n	800484c <UART_SetConfig+0x210>
 8004770:	2302      	movs	r3, #2
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e069      	b.n	800484c <UART_SetConfig+0x210>
 8004778:	2304      	movs	r3, #4
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e065      	b.n	800484c <UART_SetConfig+0x210>
 8004780:	2308      	movs	r3, #8
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e061      	b.n	800484c <UART_SetConfig+0x210>
 8004788:	2310      	movs	r3, #16
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e05d      	b.n	800484c <UART_SetConfig+0x210>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a58      	ldr	r2, [pc, #352]	; (80048f8 <UART_SetConfig+0x2bc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d125      	bne.n	80047e6 <UART_SetConfig+0x1aa>
 800479a:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <UART_SetConfig+0x2b4>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047a4:	2b30      	cmp	r3, #48	; 0x30
 80047a6:	d016      	beq.n	80047d6 <UART_SetConfig+0x19a>
 80047a8:	2b30      	cmp	r3, #48	; 0x30
 80047aa:	d818      	bhi.n	80047de <UART_SetConfig+0x1a2>
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d00a      	beq.n	80047c6 <UART_SetConfig+0x18a>
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d814      	bhi.n	80047de <UART_SetConfig+0x1a2>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <UART_SetConfig+0x182>
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d008      	beq.n	80047ce <UART_SetConfig+0x192>
 80047bc:	e00f      	b.n	80047de <UART_SetConfig+0x1a2>
 80047be:	2300      	movs	r3, #0
 80047c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c4:	e042      	b.n	800484c <UART_SetConfig+0x210>
 80047c6:	2302      	movs	r3, #2
 80047c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047cc:	e03e      	b.n	800484c <UART_SetConfig+0x210>
 80047ce:	2304      	movs	r3, #4
 80047d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d4:	e03a      	b.n	800484c <UART_SetConfig+0x210>
 80047d6:	2308      	movs	r3, #8
 80047d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047dc:	e036      	b.n	800484c <UART_SetConfig+0x210>
 80047de:	2310      	movs	r3, #16
 80047e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e4:	e032      	b.n	800484c <UART_SetConfig+0x210>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3f      	ldr	r2, [pc, #252]	; (80048e8 <UART_SetConfig+0x2ac>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d12a      	bne.n	8004846 <UART_SetConfig+0x20a>
 80047f0:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <UART_SetConfig+0x2b4>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047fe:	d01a      	beq.n	8004836 <UART_SetConfig+0x1fa>
 8004800:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004804:	d81b      	bhi.n	800483e <UART_SetConfig+0x202>
 8004806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480a:	d00c      	beq.n	8004826 <UART_SetConfig+0x1ea>
 800480c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004810:	d815      	bhi.n	800483e <UART_SetConfig+0x202>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <UART_SetConfig+0x1e2>
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481a:	d008      	beq.n	800482e <UART_SetConfig+0x1f2>
 800481c:	e00f      	b.n	800483e <UART_SetConfig+0x202>
 800481e:	2300      	movs	r3, #0
 8004820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004824:	e012      	b.n	800484c <UART_SetConfig+0x210>
 8004826:	2302      	movs	r3, #2
 8004828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482c:	e00e      	b.n	800484c <UART_SetConfig+0x210>
 800482e:	2304      	movs	r3, #4
 8004830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004834:	e00a      	b.n	800484c <UART_SetConfig+0x210>
 8004836:	2308      	movs	r3, #8
 8004838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483c:	e006      	b.n	800484c <UART_SetConfig+0x210>
 800483e:	2310      	movs	r3, #16
 8004840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004844:	e002      	b.n	800484c <UART_SetConfig+0x210>
 8004846:	2310      	movs	r3, #16
 8004848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a25      	ldr	r2, [pc, #148]	; (80048e8 <UART_SetConfig+0x2ac>)
 8004852:	4293      	cmp	r3, r2
 8004854:	f040 808a 	bne.w	800496c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800485c:	2b08      	cmp	r3, #8
 800485e:	d824      	bhi.n	80048aa <UART_SetConfig+0x26e>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x22c>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800488d 	.word	0x0800488d
 800486c:	080048ab 	.word	0x080048ab
 8004870:	08004895 	.word	0x08004895
 8004874:	080048ab 	.word	0x080048ab
 8004878:	0800489b 	.word	0x0800489b
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048ab 	.word	0x080048ab
 8004884:	080048ab 	.word	0x080048ab
 8004888:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fe ffc2 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8004890:	61f8      	str	r0, [r7, #28]
        break;
 8004892:	e010      	b.n	80048b6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <UART_SetConfig+0x2c0>)
 8004896:	61fb      	str	r3, [r7, #28]
        break;
 8004898:	e00d      	b.n	80048b6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7fe ff23 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800489e:	61f8      	str	r0, [r7, #28]
        break;
 80048a0:	e009      	b.n	80048b6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a6:	61fb      	str	r3, [r7, #28]
        break;
 80048a8:	e005      	b.n	80048b6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8109 	beq.w	8004ad0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d305      	bcc.n	80048da <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d912      	bls.n	8004900 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048e0:	e0f6      	b.n	8004ad0 <UART_SetConfig+0x494>
 80048e2:	bf00      	nop
 80048e4:	efff69f3 	.word	0xefff69f3
 80048e8:	40008000 	.word	0x40008000
 80048ec:	40013800 	.word	0x40013800
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40004400 	.word	0x40004400
 80048f8:	40004800 	.word	0x40004800
 80048fc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2200      	movs	r2, #0
 8004904:	461c      	mov	r4, r3
 8004906:	4615      	mov	r5, r2
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	022b      	lsls	r3, r5, #8
 8004912:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004916:	0222      	lsls	r2, r4, #8
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	6849      	ldr	r1, [r1, #4]
 800491c:	0849      	lsrs	r1, r1, #1
 800491e:	2000      	movs	r0, #0
 8004920:	4688      	mov	r8, r1
 8004922:	4681      	mov	r9, r0
 8004924:	eb12 0a08 	adds.w	sl, r2, r8
 8004928:	eb43 0b09 	adc.w	fp, r3, r9
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800493a:	4650      	mov	r0, sl
 800493c:	4659      	mov	r1, fp
 800493e:	f7fc f933 	bl	8000ba8 <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4613      	mov	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004950:	d308      	bcc.n	8004964 <UART_SetConfig+0x328>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004958:	d204      	bcs.n	8004964 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e0b5      	b.n	8004ad0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800496a:	e0b1      	b.n	8004ad0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	d15d      	bne.n	8004a32 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800497a:	2b08      	cmp	r3, #8
 800497c:	d827      	bhi.n	80049ce <UART_SetConfig+0x392>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x348>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049cf 	.word	0x080049cf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049cf 	.word	0x080049cf
 80049a4:	080049c7 	.word	0x080049c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe ff34 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 80049ac:	61f8      	str	r0, [r7, #28]
        break;
 80049ae:	e014      	b.n	80049da <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7fe ff46 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 80049b4:	61f8      	str	r0, [r7, #28]
        break;
 80049b6:	e010      	b.n	80049da <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b8:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <UART_SetConfig+0x4b0>)
 80049ba:	61fb      	str	r3, [r7, #28]
        break;
 80049bc:	e00d      	b.n	80049da <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049be:	f7fe fe91 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80049c2:	61f8      	str	r0, [r7, #28]
        break;
 80049c4:	e009      	b.n	80049da <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ca:	61fb      	str	r3, [r7, #28]
        break;
 80049cc:	e005      	b.n	80049da <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d077      	beq.n	8004ad0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	005a      	lsls	r2, r3, #1
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	441a      	add	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b0f      	cmp	r3, #15
 80049fa:	d916      	bls.n	8004a2a <UART_SetConfig+0x3ee>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d212      	bcs.n	8004a2a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f023 030f 	bic.w	r3, r3, #15
 8004a0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	8afb      	ldrh	r3, [r7, #22]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	8afa      	ldrh	r2, [r7, #22]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	e052      	b.n	8004ad0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a30:	e04e      	b.n	8004ad0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d827      	bhi.n	8004a8a <UART_SetConfig+0x44e>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x404>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a75 	.word	0x08004a75
 8004a4c:	08004a8b 	.word	0x08004a8b
 8004a50:	08004a7b 	.word	0x08004a7b
 8004a54:	08004a8b 	.word	0x08004a8b
 8004a58:	08004a8b 	.word	0x08004a8b
 8004a5c:	08004a8b 	.word	0x08004a8b
 8004a60:	08004a83 	.word	0x08004a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7fe fed6 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8004a68:	61f8      	str	r0, [r7, #28]
        break;
 8004a6a:	e014      	b.n	8004a96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a6c:	f7fe fee8 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8004a70:	61f8      	str	r0, [r7, #28]
        break;
 8004a72:	e010      	b.n	8004a96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <UART_SetConfig+0x4b0>)
 8004a76:	61fb      	str	r3, [r7, #28]
        break;
 8004a78:	e00d      	b.n	8004a96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7a:	f7fe fe33 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 8004a7e:	61f8      	str	r0, [r7, #28]
        break;
 8004a80:	e009      	b.n	8004a96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a86:	61fb      	str	r3, [r7, #28]
        break;
 8004a88:	e005      	b.n	8004a96 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a94:	bf00      	nop
    }

    if (pclk != 0U)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	085a      	lsrs	r2, r3, #1
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	d909      	bls.n	8004aca <UART_SetConfig+0x48e>
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abc:	d205      	bcs.n	8004aca <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
 8004ac8:	e002      	b.n	8004ad0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004adc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3728      	adds	r7, #40	; 0x28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aea:	bf00      	nop
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01a      	beq.n	8004c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bee:	d10a      	bne.n	8004c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b098      	sub	sp, #96	; 0x60
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c44:	f7fd fc8a 	bl	800255c <HAL_GetTick>
 8004c48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d12e      	bne.n	8004cb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c60:	2200      	movs	r2, #0
 8004c62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f88c 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d021      	beq.n	8004cb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c86:	653b      	str	r3, [r7, #80]	; 0x50
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c90:	647b      	str	r3, [r7, #68]	; 0x44
 8004c92:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e062      	b.n	8004d7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d149      	bne.n	8004d58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f856 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d03c      	beq.n	8004d58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	623b      	str	r3, [r7, #32]
   return(result);
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8004cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e6      	bne.n	8004cde <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d30:	61fa      	str	r2, [r7, #28]
 8004d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	69b9      	ldr	r1, [r7, #24]
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e011      	b.n	8004d7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3758      	adds	r7, #88	; 0x58
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	e049      	b.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d045      	beq.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fd fbdd 	bl	800255c <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e048      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d031      	beq.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d110      	bne.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2208      	movs	r2, #8
 8004dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f838 	bl	8004e52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2208      	movs	r2, #8
 8004de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e029      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e04:	d111      	bne.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f81e 	bl	8004e52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e00f      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	bf0c      	ite	eq
 8004e3a:	2301      	moveq	r3, #1
 8004e3c:	2300      	movne	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d0a6      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b095      	sub	sp, #84	; 0x54
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e78:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e6      	bne.n	8004e5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d118      	bne.n	8004efa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f023 0310 	bic.w	r3, r3, #16
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e6      	bne.n	8004ec8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f0e:	bf00      	nop
 8004f10:	3754      	adds	r7, #84	; 0x54
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <__cvt>:
 8004f1a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1e:	ec55 4b10 	vmov	r4, r5, d0
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	460e      	mov	r6, r1
 8004f26:	4619      	mov	r1, r3
 8004f28:	462b      	mov	r3, r5
 8004f2a:	bfbb      	ittet	lt
 8004f2c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f30:	461d      	movlt	r5, r3
 8004f32:	2300      	movge	r3, #0
 8004f34:	232d      	movlt	r3, #45	; 0x2d
 8004f36:	700b      	strb	r3, [r1, #0]
 8004f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f3a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f3e:	4691      	mov	r9, r2
 8004f40:	f023 0820 	bic.w	r8, r3, #32
 8004f44:	bfbc      	itt	lt
 8004f46:	4622      	movlt	r2, r4
 8004f48:	4614      	movlt	r4, r2
 8004f4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f4e:	d005      	beq.n	8004f5c <__cvt+0x42>
 8004f50:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f54:	d100      	bne.n	8004f58 <__cvt+0x3e>
 8004f56:	3601      	adds	r6, #1
 8004f58:	2102      	movs	r1, #2
 8004f5a:	e000      	b.n	8004f5e <__cvt+0x44>
 8004f5c:	2103      	movs	r1, #3
 8004f5e:	ab03      	add	r3, sp, #12
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	ab02      	add	r3, sp, #8
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	ec45 4b10 	vmov	d0, r4, r5
 8004f6a:	4653      	mov	r3, sl
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	f000 fe9f 	bl	8005cb0 <_dtoa_r>
 8004f72:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f76:	4607      	mov	r7, r0
 8004f78:	d102      	bne.n	8004f80 <__cvt+0x66>
 8004f7a:	f019 0f01 	tst.w	r9, #1
 8004f7e:	d022      	beq.n	8004fc6 <__cvt+0xac>
 8004f80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f84:	eb07 0906 	add.w	r9, r7, r6
 8004f88:	d110      	bne.n	8004fac <__cvt+0x92>
 8004f8a:	783b      	ldrb	r3, [r7, #0]
 8004f8c:	2b30      	cmp	r3, #48	; 0x30
 8004f8e:	d10a      	bne.n	8004fa6 <__cvt+0x8c>
 8004f90:	2200      	movs	r2, #0
 8004f92:	2300      	movs	r3, #0
 8004f94:	4620      	mov	r0, r4
 8004f96:	4629      	mov	r1, r5
 8004f98:	f7fb fd96 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f9c:	b918      	cbnz	r0, 8004fa6 <__cvt+0x8c>
 8004f9e:	f1c6 0601 	rsb	r6, r6, #1
 8004fa2:	f8ca 6000 	str.w	r6, [sl]
 8004fa6:	f8da 3000 	ldr.w	r3, [sl]
 8004faa:	4499      	add	r9, r3
 8004fac:	2200      	movs	r2, #0
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	f7fb fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fb8:	b108      	cbz	r0, 8004fbe <__cvt+0xa4>
 8004fba:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fbe:	2230      	movs	r2, #48	; 0x30
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	454b      	cmp	r3, r9
 8004fc4:	d307      	bcc.n	8004fd6 <__cvt+0xbc>
 8004fc6:	9b03      	ldr	r3, [sp, #12]
 8004fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fca:	1bdb      	subs	r3, r3, r7
 8004fcc:	4638      	mov	r0, r7
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	b004      	add	sp, #16
 8004fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd6:	1c59      	adds	r1, r3, #1
 8004fd8:	9103      	str	r1, [sp, #12]
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	e7f0      	b.n	8004fc0 <__cvt+0xa6>

08004fde <__exponent>:
 8004fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	bfb8      	it	lt
 8004fe6:	4249      	neglt	r1, r1
 8004fe8:	f803 2b02 	strb.w	r2, [r3], #2
 8004fec:	bfb4      	ite	lt
 8004fee:	222d      	movlt	r2, #45	; 0x2d
 8004ff0:	222b      	movge	r2, #43	; 0x2b
 8004ff2:	2909      	cmp	r1, #9
 8004ff4:	7042      	strb	r2, [r0, #1]
 8004ff6:	dd2a      	ble.n	800504e <__exponent+0x70>
 8004ff8:	f10d 0207 	add.w	r2, sp, #7
 8004ffc:	4617      	mov	r7, r2
 8004ffe:	260a      	movs	r6, #10
 8005000:	4694      	mov	ip, r2
 8005002:	fb91 f5f6 	sdiv	r5, r1, r6
 8005006:	fb06 1415 	mls	r4, r6, r5, r1
 800500a:	3430      	adds	r4, #48	; 0x30
 800500c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005010:	460c      	mov	r4, r1
 8005012:	2c63      	cmp	r4, #99	; 0x63
 8005014:	f102 32ff 	add.w	r2, r2, #4294967295
 8005018:	4629      	mov	r1, r5
 800501a:	dcf1      	bgt.n	8005000 <__exponent+0x22>
 800501c:	3130      	adds	r1, #48	; 0x30
 800501e:	f1ac 0402 	sub.w	r4, ip, #2
 8005022:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005026:	1c41      	adds	r1, r0, #1
 8005028:	4622      	mov	r2, r4
 800502a:	42ba      	cmp	r2, r7
 800502c:	d30a      	bcc.n	8005044 <__exponent+0x66>
 800502e:	f10d 0209 	add.w	r2, sp, #9
 8005032:	eba2 020c 	sub.w	r2, r2, ip
 8005036:	42bc      	cmp	r4, r7
 8005038:	bf88      	it	hi
 800503a:	2200      	movhi	r2, #0
 800503c:	4413      	add	r3, r2
 800503e:	1a18      	subs	r0, r3, r0
 8005040:	b003      	add	sp, #12
 8005042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005044:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005048:	f801 5f01 	strb.w	r5, [r1, #1]!
 800504c:	e7ed      	b.n	800502a <__exponent+0x4c>
 800504e:	2330      	movs	r3, #48	; 0x30
 8005050:	3130      	adds	r1, #48	; 0x30
 8005052:	7083      	strb	r3, [r0, #2]
 8005054:	70c1      	strb	r1, [r0, #3]
 8005056:	1d03      	adds	r3, r0, #4
 8005058:	e7f1      	b.n	800503e <__exponent+0x60>
	...

0800505c <_printf_float>:
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	ed2d 8b02 	vpush	{d8}
 8005064:	b08d      	sub	sp, #52	; 0x34
 8005066:	460c      	mov	r4, r1
 8005068:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800506c:	4616      	mov	r6, r2
 800506e:	461f      	mov	r7, r3
 8005070:	4605      	mov	r5, r0
 8005072:	f000 fd0d 	bl	8005a90 <_localeconv_r>
 8005076:	f8d0 a000 	ldr.w	sl, [r0]
 800507a:	4650      	mov	r0, sl
 800507c:	f7fb f8f8 	bl	8000270 <strlen>
 8005080:	2300      	movs	r3, #0
 8005082:	930a      	str	r3, [sp, #40]	; 0x28
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	9305      	str	r3, [sp, #20]
 8005088:	f8d8 3000 	ldr.w	r3, [r8]
 800508c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005090:	3307      	adds	r3, #7
 8005092:	f023 0307 	bic.w	r3, r3, #7
 8005096:	f103 0208 	add.w	r2, r3, #8
 800509a:	f8c8 2000 	str.w	r2, [r8]
 800509e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050a6:	9307      	str	r3, [sp, #28]
 80050a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80050ac:	ee08 0a10 	vmov	s16, r0
 80050b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80050b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050b8:	4b9e      	ldr	r3, [pc, #632]	; (8005334 <_printf_float+0x2d8>)
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295
 80050be:	f7fb fd35 	bl	8000b2c <__aeabi_dcmpun>
 80050c2:	bb88      	cbnz	r0, 8005128 <_printf_float+0xcc>
 80050c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050c8:	4b9a      	ldr	r3, [pc, #616]	; (8005334 <_printf_float+0x2d8>)
 80050ca:	f04f 32ff 	mov.w	r2, #4294967295
 80050ce:	f7fb fd0f 	bl	8000af0 <__aeabi_dcmple>
 80050d2:	bb48      	cbnz	r0, 8005128 <_printf_float+0xcc>
 80050d4:	2200      	movs	r2, #0
 80050d6:	2300      	movs	r3, #0
 80050d8:	4640      	mov	r0, r8
 80050da:	4649      	mov	r1, r9
 80050dc:	f7fb fcfe 	bl	8000adc <__aeabi_dcmplt>
 80050e0:	b110      	cbz	r0, 80050e8 <_printf_float+0x8c>
 80050e2:	232d      	movs	r3, #45	; 0x2d
 80050e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e8:	4a93      	ldr	r2, [pc, #588]	; (8005338 <_printf_float+0x2dc>)
 80050ea:	4b94      	ldr	r3, [pc, #592]	; (800533c <_printf_float+0x2e0>)
 80050ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050f0:	bf94      	ite	ls
 80050f2:	4690      	movls	r8, r2
 80050f4:	4698      	movhi	r8, r3
 80050f6:	2303      	movs	r3, #3
 80050f8:	6123      	str	r3, [r4, #16]
 80050fa:	9b05      	ldr	r3, [sp, #20]
 80050fc:	f023 0304 	bic.w	r3, r3, #4
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	f04f 0900 	mov.w	r9, #0
 8005106:	9700      	str	r7, [sp, #0]
 8005108:	4633      	mov	r3, r6
 800510a:	aa0b      	add	r2, sp, #44	; 0x2c
 800510c:	4621      	mov	r1, r4
 800510e:	4628      	mov	r0, r5
 8005110:	f000 f9da 	bl	80054c8 <_printf_common>
 8005114:	3001      	adds	r0, #1
 8005116:	f040 8090 	bne.w	800523a <_printf_float+0x1de>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	b00d      	add	sp, #52	; 0x34
 8005120:	ecbd 8b02 	vpop	{d8}
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	4640      	mov	r0, r8
 800512e:	4649      	mov	r1, r9
 8005130:	f7fb fcfc 	bl	8000b2c <__aeabi_dcmpun>
 8005134:	b140      	cbz	r0, 8005148 <_printf_float+0xec>
 8005136:	464b      	mov	r3, r9
 8005138:	2b00      	cmp	r3, #0
 800513a:	bfbc      	itt	lt
 800513c:	232d      	movlt	r3, #45	; 0x2d
 800513e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005142:	4a7f      	ldr	r2, [pc, #508]	; (8005340 <_printf_float+0x2e4>)
 8005144:	4b7f      	ldr	r3, [pc, #508]	; (8005344 <_printf_float+0x2e8>)
 8005146:	e7d1      	b.n	80050ec <_printf_float+0x90>
 8005148:	6863      	ldr	r3, [r4, #4]
 800514a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800514e:	9206      	str	r2, [sp, #24]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	d13f      	bne.n	80051d4 <_printf_float+0x178>
 8005154:	2306      	movs	r3, #6
 8005156:	6063      	str	r3, [r4, #4]
 8005158:	9b05      	ldr	r3, [sp, #20]
 800515a:	6861      	ldr	r1, [r4, #4]
 800515c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005160:	2300      	movs	r3, #0
 8005162:	9303      	str	r3, [sp, #12]
 8005164:	ab0a      	add	r3, sp, #40	; 0x28
 8005166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800516a:	ab09      	add	r3, sp, #36	; 0x24
 800516c:	ec49 8b10 	vmov	d0, r8, r9
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	6022      	str	r2, [r4, #0]
 8005174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005178:	4628      	mov	r0, r5
 800517a:	f7ff fece 	bl	8004f1a <__cvt>
 800517e:	9b06      	ldr	r3, [sp, #24]
 8005180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005182:	2b47      	cmp	r3, #71	; 0x47
 8005184:	4680      	mov	r8, r0
 8005186:	d108      	bne.n	800519a <_printf_float+0x13e>
 8005188:	1cc8      	adds	r0, r1, #3
 800518a:	db02      	blt.n	8005192 <_printf_float+0x136>
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	4299      	cmp	r1, r3
 8005190:	dd41      	ble.n	8005216 <_printf_float+0x1ba>
 8005192:	f1ab 0302 	sub.w	r3, fp, #2
 8005196:	fa5f fb83 	uxtb.w	fp, r3
 800519a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800519e:	d820      	bhi.n	80051e2 <_printf_float+0x186>
 80051a0:	3901      	subs	r1, #1
 80051a2:	465a      	mov	r2, fp
 80051a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051a8:	9109      	str	r1, [sp, #36]	; 0x24
 80051aa:	f7ff ff18 	bl	8004fde <__exponent>
 80051ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051b0:	1813      	adds	r3, r2, r0
 80051b2:	2a01      	cmp	r2, #1
 80051b4:	4681      	mov	r9, r0
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	dc02      	bgt.n	80051c0 <_printf_float+0x164>
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	07d2      	lsls	r2, r2, #31
 80051be:	d501      	bpl.n	80051c4 <_printf_float+0x168>
 80051c0:	3301      	adds	r3, #1
 80051c2:	6123      	str	r3, [r4, #16]
 80051c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d09c      	beq.n	8005106 <_printf_float+0xaa>
 80051cc:	232d      	movs	r3, #45	; 0x2d
 80051ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051d2:	e798      	b.n	8005106 <_printf_float+0xaa>
 80051d4:	9a06      	ldr	r2, [sp, #24]
 80051d6:	2a47      	cmp	r2, #71	; 0x47
 80051d8:	d1be      	bne.n	8005158 <_printf_float+0xfc>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1bc      	bne.n	8005158 <_printf_float+0xfc>
 80051de:	2301      	movs	r3, #1
 80051e0:	e7b9      	b.n	8005156 <_printf_float+0xfa>
 80051e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051e6:	d118      	bne.n	800521a <_printf_float+0x1be>
 80051e8:	2900      	cmp	r1, #0
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	dd0b      	ble.n	8005206 <_printf_float+0x1aa>
 80051ee:	6121      	str	r1, [r4, #16]
 80051f0:	b913      	cbnz	r3, 80051f8 <_printf_float+0x19c>
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	07d0      	lsls	r0, r2, #31
 80051f6:	d502      	bpl.n	80051fe <_printf_float+0x1a2>
 80051f8:	3301      	adds	r3, #1
 80051fa:	440b      	add	r3, r1
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005200:	f04f 0900 	mov.w	r9, #0
 8005204:	e7de      	b.n	80051c4 <_printf_float+0x168>
 8005206:	b913      	cbnz	r3, 800520e <_printf_float+0x1b2>
 8005208:	6822      	ldr	r2, [r4, #0]
 800520a:	07d2      	lsls	r2, r2, #31
 800520c:	d501      	bpl.n	8005212 <_printf_float+0x1b6>
 800520e:	3302      	adds	r3, #2
 8005210:	e7f4      	b.n	80051fc <_printf_float+0x1a0>
 8005212:	2301      	movs	r3, #1
 8005214:	e7f2      	b.n	80051fc <_printf_float+0x1a0>
 8005216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800521a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800521c:	4299      	cmp	r1, r3
 800521e:	db05      	blt.n	800522c <_printf_float+0x1d0>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	6121      	str	r1, [r4, #16]
 8005224:	07d8      	lsls	r0, r3, #31
 8005226:	d5ea      	bpl.n	80051fe <_printf_float+0x1a2>
 8005228:	1c4b      	adds	r3, r1, #1
 800522a:	e7e7      	b.n	80051fc <_printf_float+0x1a0>
 800522c:	2900      	cmp	r1, #0
 800522e:	bfd4      	ite	le
 8005230:	f1c1 0202 	rsble	r2, r1, #2
 8005234:	2201      	movgt	r2, #1
 8005236:	4413      	add	r3, r2
 8005238:	e7e0      	b.n	80051fc <_printf_float+0x1a0>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	055a      	lsls	r2, r3, #21
 800523e:	d407      	bmi.n	8005250 <_printf_float+0x1f4>
 8005240:	6923      	ldr	r3, [r4, #16]
 8005242:	4642      	mov	r2, r8
 8005244:	4631      	mov	r1, r6
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	d12c      	bne.n	80052a8 <_printf_float+0x24c>
 800524e:	e764      	b.n	800511a <_printf_float+0xbe>
 8005250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005254:	f240 80e0 	bls.w	8005418 <_printf_float+0x3bc>
 8005258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800525c:	2200      	movs	r2, #0
 800525e:	2300      	movs	r3, #0
 8005260:	f7fb fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8005264:	2800      	cmp	r0, #0
 8005266:	d034      	beq.n	80052d2 <_printf_float+0x276>
 8005268:	4a37      	ldr	r2, [pc, #220]	; (8005348 <_printf_float+0x2ec>)
 800526a:	2301      	movs	r3, #1
 800526c:	4631      	mov	r1, r6
 800526e:	4628      	mov	r0, r5
 8005270:	47b8      	blx	r7
 8005272:	3001      	adds	r0, #1
 8005274:	f43f af51 	beq.w	800511a <_printf_float+0xbe>
 8005278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800527c:	429a      	cmp	r2, r3
 800527e:	db02      	blt.n	8005286 <_printf_float+0x22a>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	07d8      	lsls	r0, r3, #31
 8005284:	d510      	bpl.n	80052a8 <_printf_float+0x24c>
 8005286:	ee18 3a10 	vmov	r3, s16
 800528a:	4652      	mov	r2, sl
 800528c:	4631      	mov	r1, r6
 800528e:	4628      	mov	r0, r5
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	f43f af41 	beq.w	800511a <_printf_float+0xbe>
 8005298:	f04f 0800 	mov.w	r8, #0
 800529c:	f104 091a 	add.w	r9, r4, #26
 80052a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	4543      	cmp	r3, r8
 80052a6:	dc09      	bgt.n	80052bc <_printf_float+0x260>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	079b      	lsls	r3, r3, #30
 80052ac:	f100 8107 	bmi.w	80054be <_printf_float+0x462>
 80052b0:	68e0      	ldr	r0, [r4, #12]
 80052b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052b4:	4298      	cmp	r0, r3
 80052b6:	bfb8      	it	lt
 80052b8:	4618      	movlt	r0, r3
 80052ba:	e730      	b.n	800511e <_printf_float+0xc2>
 80052bc:	2301      	movs	r3, #1
 80052be:	464a      	mov	r2, r9
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f af27 	beq.w	800511a <_printf_float+0xbe>
 80052cc:	f108 0801 	add.w	r8, r8, #1
 80052d0:	e7e6      	b.n	80052a0 <_printf_float+0x244>
 80052d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dc39      	bgt.n	800534c <_printf_float+0x2f0>
 80052d8:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <_printf_float+0x2ec>)
 80052da:	2301      	movs	r3, #1
 80052dc:	4631      	mov	r1, r6
 80052de:	4628      	mov	r0, r5
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	f43f af19 	beq.w	800511a <_printf_float+0xbe>
 80052e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80052ec:	4313      	orrs	r3, r2
 80052ee:	d102      	bne.n	80052f6 <_printf_float+0x29a>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	07d9      	lsls	r1, r3, #31
 80052f4:	d5d8      	bpl.n	80052a8 <_printf_float+0x24c>
 80052f6:	ee18 3a10 	vmov	r3, s16
 80052fa:	4652      	mov	r2, sl
 80052fc:	4631      	mov	r1, r6
 80052fe:	4628      	mov	r0, r5
 8005300:	47b8      	blx	r7
 8005302:	3001      	adds	r0, #1
 8005304:	f43f af09 	beq.w	800511a <_printf_float+0xbe>
 8005308:	f04f 0900 	mov.w	r9, #0
 800530c:	f104 0a1a 	add.w	sl, r4, #26
 8005310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005312:	425b      	negs	r3, r3
 8005314:	454b      	cmp	r3, r9
 8005316:	dc01      	bgt.n	800531c <_printf_float+0x2c0>
 8005318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800531a:	e792      	b.n	8005242 <_printf_float+0x1e6>
 800531c:	2301      	movs	r3, #1
 800531e:	4652      	mov	r2, sl
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	f43f aef7 	beq.w	800511a <_printf_float+0xbe>
 800532c:	f109 0901 	add.w	r9, r9, #1
 8005330:	e7ee      	b.n	8005310 <_printf_float+0x2b4>
 8005332:	bf00      	nop
 8005334:	7fefffff 	.word	0x7fefffff
 8005338:	080080e4 	.word	0x080080e4
 800533c:	080080e8 	.word	0x080080e8
 8005340:	080080ec 	.word	0x080080ec
 8005344:	080080f0 	.word	0x080080f0
 8005348:	080080f4 	.word	0x080080f4
 800534c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800534e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005350:	429a      	cmp	r2, r3
 8005352:	bfa8      	it	ge
 8005354:	461a      	movge	r2, r3
 8005356:	2a00      	cmp	r2, #0
 8005358:	4691      	mov	r9, r2
 800535a:	dc37      	bgt.n	80053cc <_printf_float+0x370>
 800535c:	f04f 0b00 	mov.w	fp, #0
 8005360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005364:	f104 021a 	add.w	r2, r4, #26
 8005368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800536a:	9305      	str	r3, [sp, #20]
 800536c:	eba3 0309 	sub.w	r3, r3, r9
 8005370:	455b      	cmp	r3, fp
 8005372:	dc33      	bgt.n	80053dc <_printf_float+0x380>
 8005374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005378:	429a      	cmp	r2, r3
 800537a:	db3b      	blt.n	80053f4 <_printf_float+0x398>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	07da      	lsls	r2, r3, #31
 8005380:	d438      	bmi.n	80053f4 <_printf_float+0x398>
 8005382:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005386:	eba2 0903 	sub.w	r9, r2, r3
 800538a:	9b05      	ldr	r3, [sp, #20]
 800538c:	1ad2      	subs	r2, r2, r3
 800538e:	4591      	cmp	r9, r2
 8005390:	bfa8      	it	ge
 8005392:	4691      	movge	r9, r2
 8005394:	f1b9 0f00 	cmp.w	r9, #0
 8005398:	dc35      	bgt.n	8005406 <_printf_float+0x3aa>
 800539a:	f04f 0800 	mov.w	r8, #0
 800539e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053a2:	f104 0a1a 	add.w	sl, r4, #26
 80053a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	eba3 0309 	sub.w	r3, r3, r9
 80053b0:	4543      	cmp	r3, r8
 80053b2:	f77f af79 	ble.w	80052a8 <_printf_float+0x24c>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4652      	mov	r2, sl
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	f43f aeaa 	beq.w	800511a <_printf_float+0xbe>
 80053c6:	f108 0801 	add.w	r8, r8, #1
 80053ca:	e7ec      	b.n	80053a6 <_printf_float+0x34a>
 80053cc:	4613      	mov	r3, r2
 80053ce:	4631      	mov	r1, r6
 80053d0:	4642      	mov	r2, r8
 80053d2:	4628      	mov	r0, r5
 80053d4:	47b8      	blx	r7
 80053d6:	3001      	adds	r0, #1
 80053d8:	d1c0      	bne.n	800535c <_printf_float+0x300>
 80053da:	e69e      	b.n	800511a <_printf_float+0xbe>
 80053dc:	2301      	movs	r3, #1
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	9205      	str	r2, [sp, #20]
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	f43f ae97 	beq.w	800511a <_printf_float+0xbe>
 80053ec:	9a05      	ldr	r2, [sp, #20]
 80053ee:	f10b 0b01 	add.w	fp, fp, #1
 80053f2:	e7b9      	b.n	8005368 <_printf_float+0x30c>
 80053f4:	ee18 3a10 	vmov	r3, s16
 80053f8:	4652      	mov	r2, sl
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	d1be      	bne.n	8005382 <_printf_float+0x326>
 8005404:	e689      	b.n	800511a <_printf_float+0xbe>
 8005406:	9a05      	ldr	r2, [sp, #20]
 8005408:	464b      	mov	r3, r9
 800540a:	4442      	add	r2, r8
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	d1c1      	bne.n	800539a <_printf_float+0x33e>
 8005416:	e680      	b.n	800511a <_printf_float+0xbe>
 8005418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800541a:	2a01      	cmp	r2, #1
 800541c:	dc01      	bgt.n	8005422 <_printf_float+0x3c6>
 800541e:	07db      	lsls	r3, r3, #31
 8005420:	d53a      	bpl.n	8005498 <_printf_float+0x43c>
 8005422:	2301      	movs	r3, #1
 8005424:	4642      	mov	r2, r8
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	f43f ae74 	beq.w	800511a <_printf_float+0xbe>
 8005432:	ee18 3a10 	vmov	r3, s16
 8005436:	4652      	mov	r2, sl
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	f43f ae6b 	beq.w	800511a <_printf_float+0xbe>
 8005444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005448:	2200      	movs	r2, #0
 800544a:	2300      	movs	r3, #0
 800544c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005450:	f7fb fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005454:	b9d8      	cbnz	r0, 800548e <_printf_float+0x432>
 8005456:	f10a 33ff 	add.w	r3, sl, #4294967295
 800545a:	f108 0201 	add.w	r2, r8, #1
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	d10e      	bne.n	8005486 <_printf_float+0x42a>
 8005468:	e657      	b.n	800511a <_printf_float+0xbe>
 800546a:	2301      	movs	r3, #1
 800546c:	4652      	mov	r2, sl
 800546e:	4631      	mov	r1, r6
 8005470:	4628      	mov	r0, r5
 8005472:	47b8      	blx	r7
 8005474:	3001      	adds	r0, #1
 8005476:	f43f ae50 	beq.w	800511a <_printf_float+0xbe>
 800547a:	f108 0801 	add.w	r8, r8, #1
 800547e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	4543      	cmp	r3, r8
 8005484:	dcf1      	bgt.n	800546a <_printf_float+0x40e>
 8005486:	464b      	mov	r3, r9
 8005488:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800548c:	e6da      	b.n	8005244 <_printf_float+0x1e8>
 800548e:	f04f 0800 	mov.w	r8, #0
 8005492:	f104 0a1a 	add.w	sl, r4, #26
 8005496:	e7f2      	b.n	800547e <_printf_float+0x422>
 8005498:	2301      	movs	r3, #1
 800549a:	4642      	mov	r2, r8
 800549c:	e7df      	b.n	800545e <_printf_float+0x402>
 800549e:	2301      	movs	r3, #1
 80054a0:	464a      	mov	r2, r9
 80054a2:	4631      	mov	r1, r6
 80054a4:	4628      	mov	r0, r5
 80054a6:	47b8      	blx	r7
 80054a8:	3001      	adds	r0, #1
 80054aa:	f43f ae36 	beq.w	800511a <_printf_float+0xbe>
 80054ae:	f108 0801 	add.w	r8, r8, #1
 80054b2:	68e3      	ldr	r3, [r4, #12]
 80054b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054b6:	1a5b      	subs	r3, r3, r1
 80054b8:	4543      	cmp	r3, r8
 80054ba:	dcf0      	bgt.n	800549e <_printf_float+0x442>
 80054bc:	e6f8      	b.n	80052b0 <_printf_float+0x254>
 80054be:	f04f 0800 	mov.w	r8, #0
 80054c2:	f104 0919 	add.w	r9, r4, #25
 80054c6:	e7f4      	b.n	80054b2 <_printf_float+0x456>

080054c8 <_printf_common>:
 80054c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054cc:	4616      	mov	r6, r2
 80054ce:	4699      	mov	r9, r3
 80054d0:	688a      	ldr	r2, [r1, #8]
 80054d2:	690b      	ldr	r3, [r1, #16]
 80054d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054d8:	4293      	cmp	r3, r2
 80054da:	bfb8      	it	lt
 80054dc:	4613      	movlt	r3, r2
 80054de:	6033      	str	r3, [r6, #0]
 80054e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054e4:	4607      	mov	r7, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	b10a      	cbz	r2, 80054ee <_printf_common+0x26>
 80054ea:	3301      	adds	r3, #1
 80054ec:	6033      	str	r3, [r6, #0]
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	0699      	lsls	r1, r3, #26
 80054f2:	bf42      	ittt	mi
 80054f4:	6833      	ldrmi	r3, [r6, #0]
 80054f6:	3302      	addmi	r3, #2
 80054f8:	6033      	strmi	r3, [r6, #0]
 80054fa:	6825      	ldr	r5, [r4, #0]
 80054fc:	f015 0506 	ands.w	r5, r5, #6
 8005500:	d106      	bne.n	8005510 <_printf_common+0x48>
 8005502:	f104 0a19 	add.w	sl, r4, #25
 8005506:	68e3      	ldr	r3, [r4, #12]
 8005508:	6832      	ldr	r2, [r6, #0]
 800550a:	1a9b      	subs	r3, r3, r2
 800550c:	42ab      	cmp	r3, r5
 800550e:	dc26      	bgt.n	800555e <_printf_common+0x96>
 8005510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005514:	1e13      	subs	r3, r2, #0
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	bf18      	it	ne
 800551a:	2301      	movne	r3, #1
 800551c:	0692      	lsls	r2, r2, #26
 800551e:	d42b      	bmi.n	8005578 <_printf_common+0xb0>
 8005520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005524:	4649      	mov	r1, r9
 8005526:	4638      	mov	r0, r7
 8005528:	47c0      	blx	r8
 800552a:	3001      	adds	r0, #1
 800552c:	d01e      	beq.n	800556c <_printf_common+0xa4>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	6922      	ldr	r2, [r4, #16]
 8005532:	f003 0306 	and.w	r3, r3, #6
 8005536:	2b04      	cmp	r3, #4
 8005538:	bf02      	ittt	eq
 800553a:	68e5      	ldreq	r5, [r4, #12]
 800553c:	6833      	ldreq	r3, [r6, #0]
 800553e:	1aed      	subeq	r5, r5, r3
 8005540:	68a3      	ldr	r3, [r4, #8]
 8005542:	bf0c      	ite	eq
 8005544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005548:	2500      	movne	r5, #0
 800554a:	4293      	cmp	r3, r2
 800554c:	bfc4      	itt	gt
 800554e:	1a9b      	subgt	r3, r3, r2
 8005550:	18ed      	addgt	r5, r5, r3
 8005552:	2600      	movs	r6, #0
 8005554:	341a      	adds	r4, #26
 8005556:	42b5      	cmp	r5, r6
 8005558:	d11a      	bne.n	8005590 <_printf_common+0xc8>
 800555a:	2000      	movs	r0, #0
 800555c:	e008      	b.n	8005570 <_printf_common+0xa8>
 800555e:	2301      	movs	r3, #1
 8005560:	4652      	mov	r2, sl
 8005562:	4649      	mov	r1, r9
 8005564:	4638      	mov	r0, r7
 8005566:	47c0      	blx	r8
 8005568:	3001      	adds	r0, #1
 800556a:	d103      	bne.n	8005574 <_printf_common+0xac>
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005574:	3501      	adds	r5, #1
 8005576:	e7c6      	b.n	8005506 <_printf_common+0x3e>
 8005578:	18e1      	adds	r1, r4, r3
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	2030      	movs	r0, #48	; 0x30
 800557e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005582:	4422      	add	r2, r4
 8005584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800558c:	3302      	adds	r3, #2
 800558e:	e7c7      	b.n	8005520 <_printf_common+0x58>
 8005590:	2301      	movs	r3, #1
 8005592:	4622      	mov	r2, r4
 8005594:	4649      	mov	r1, r9
 8005596:	4638      	mov	r0, r7
 8005598:	47c0      	blx	r8
 800559a:	3001      	adds	r0, #1
 800559c:	d0e6      	beq.n	800556c <_printf_common+0xa4>
 800559e:	3601      	adds	r6, #1
 80055a0:	e7d9      	b.n	8005556 <_printf_common+0x8e>
	...

080055a4 <_printf_i>:
 80055a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055a8:	7e0f      	ldrb	r7, [r1, #24]
 80055aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055ac:	2f78      	cmp	r7, #120	; 0x78
 80055ae:	4691      	mov	r9, r2
 80055b0:	4680      	mov	r8, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	469a      	mov	sl, r3
 80055b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055ba:	d807      	bhi.n	80055cc <_printf_i+0x28>
 80055bc:	2f62      	cmp	r7, #98	; 0x62
 80055be:	d80a      	bhi.n	80055d6 <_printf_i+0x32>
 80055c0:	2f00      	cmp	r7, #0
 80055c2:	f000 80d4 	beq.w	800576e <_printf_i+0x1ca>
 80055c6:	2f58      	cmp	r7, #88	; 0x58
 80055c8:	f000 80c0 	beq.w	800574c <_printf_i+0x1a8>
 80055cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055d4:	e03a      	b.n	800564c <_printf_i+0xa8>
 80055d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055da:	2b15      	cmp	r3, #21
 80055dc:	d8f6      	bhi.n	80055cc <_printf_i+0x28>
 80055de:	a101      	add	r1, pc, #4	; (adr r1, 80055e4 <_printf_i+0x40>)
 80055e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055e4:	0800563d 	.word	0x0800563d
 80055e8:	08005651 	.word	0x08005651
 80055ec:	080055cd 	.word	0x080055cd
 80055f0:	080055cd 	.word	0x080055cd
 80055f4:	080055cd 	.word	0x080055cd
 80055f8:	080055cd 	.word	0x080055cd
 80055fc:	08005651 	.word	0x08005651
 8005600:	080055cd 	.word	0x080055cd
 8005604:	080055cd 	.word	0x080055cd
 8005608:	080055cd 	.word	0x080055cd
 800560c:	080055cd 	.word	0x080055cd
 8005610:	08005755 	.word	0x08005755
 8005614:	0800567d 	.word	0x0800567d
 8005618:	0800570f 	.word	0x0800570f
 800561c:	080055cd 	.word	0x080055cd
 8005620:	080055cd 	.word	0x080055cd
 8005624:	08005777 	.word	0x08005777
 8005628:	080055cd 	.word	0x080055cd
 800562c:	0800567d 	.word	0x0800567d
 8005630:	080055cd 	.word	0x080055cd
 8005634:	080055cd 	.word	0x080055cd
 8005638:	08005717 	.word	0x08005717
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	1d1a      	adds	r2, r3, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	602a      	str	r2, [r5, #0]
 8005644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800564c:	2301      	movs	r3, #1
 800564e:	e09f      	b.n	8005790 <_printf_i+0x1ec>
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	0607      	lsls	r7, r0, #24
 8005656:	f103 0104 	add.w	r1, r3, #4
 800565a:	6029      	str	r1, [r5, #0]
 800565c:	d501      	bpl.n	8005662 <_printf_i+0xbe>
 800565e:	681e      	ldr	r6, [r3, #0]
 8005660:	e003      	b.n	800566a <_printf_i+0xc6>
 8005662:	0646      	lsls	r6, r0, #25
 8005664:	d5fb      	bpl.n	800565e <_printf_i+0xba>
 8005666:	f9b3 6000 	ldrsh.w	r6, [r3]
 800566a:	2e00      	cmp	r6, #0
 800566c:	da03      	bge.n	8005676 <_printf_i+0xd2>
 800566e:	232d      	movs	r3, #45	; 0x2d
 8005670:	4276      	negs	r6, r6
 8005672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005676:	485a      	ldr	r0, [pc, #360]	; (80057e0 <_printf_i+0x23c>)
 8005678:	230a      	movs	r3, #10
 800567a:	e012      	b.n	80056a2 <_printf_i+0xfe>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	1d19      	adds	r1, r3, #4
 8005682:	6029      	str	r1, [r5, #0]
 8005684:	0605      	lsls	r5, r0, #24
 8005686:	d501      	bpl.n	800568c <_printf_i+0xe8>
 8005688:	681e      	ldr	r6, [r3, #0]
 800568a:	e002      	b.n	8005692 <_printf_i+0xee>
 800568c:	0641      	lsls	r1, r0, #25
 800568e:	d5fb      	bpl.n	8005688 <_printf_i+0xe4>
 8005690:	881e      	ldrh	r6, [r3, #0]
 8005692:	4853      	ldr	r0, [pc, #332]	; (80057e0 <_printf_i+0x23c>)
 8005694:	2f6f      	cmp	r7, #111	; 0x6f
 8005696:	bf0c      	ite	eq
 8005698:	2308      	moveq	r3, #8
 800569a:	230a      	movne	r3, #10
 800569c:	2100      	movs	r1, #0
 800569e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056a2:	6865      	ldr	r5, [r4, #4]
 80056a4:	60a5      	str	r5, [r4, #8]
 80056a6:	2d00      	cmp	r5, #0
 80056a8:	bfa2      	ittt	ge
 80056aa:	6821      	ldrge	r1, [r4, #0]
 80056ac:	f021 0104 	bicge.w	r1, r1, #4
 80056b0:	6021      	strge	r1, [r4, #0]
 80056b2:	b90e      	cbnz	r6, 80056b8 <_printf_i+0x114>
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	d04b      	beq.n	8005750 <_printf_i+0x1ac>
 80056b8:	4615      	mov	r5, r2
 80056ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80056be:	fb03 6711 	mls	r7, r3, r1, r6
 80056c2:	5dc7      	ldrb	r7, [r0, r7]
 80056c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056c8:	4637      	mov	r7, r6
 80056ca:	42bb      	cmp	r3, r7
 80056cc:	460e      	mov	r6, r1
 80056ce:	d9f4      	bls.n	80056ba <_printf_i+0x116>
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d10b      	bne.n	80056ec <_printf_i+0x148>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	07de      	lsls	r6, r3, #31
 80056d8:	d508      	bpl.n	80056ec <_printf_i+0x148>
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	6861      	ldr	r1, [r4, #4]
 80056de:	4299      	cmp	r1, r3
 80056e0:	bfde      	ittt	le
 80056e2:	2330      	movle	r3, #48	; 0x30
 80056e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056ec:	1b52      	subs	r2, r2, r5
 80056ee:	6122      	str	r2, [r4, #16]
 80056f0:	f8cd a000 	str.w	sl, [sp]
 80056f4:	464b      	mov	r3, r9
 80056f6:	aa03      	add	r2, sp, #12
 80056f8:	4621      	mov	r1, r4
 80056fa:	4640      	mov	r0, r8
 80056fc:	f7ff fee4 	bl	80054c8 <_printf_common>
 8005700:	3001      	adds	r0, #1
 8005702:	d14a      	bne.n	800579a <_printf_i+0x1f6>
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	b004      	add	sp, #16
 800570a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f043 0320 	orr.w	r3, r3, #32
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	4833      	ldr	r0, [pc, #204]	; (80057e4 <_printf_i+0x240>)
 8005718:	2778      	movs	r7, #120	; 0x78
 800571a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	6829      	ldr	r1, [r5, #0]
 8005722:	061f      	lsls	r7, r3, #24
 8005724:	f851 6b04 	ldr.w	r6, [r1], #4
 8005728:	d402      	bmi.n	8005730 <_printf_i+0x18c>
 800572a:	065f      	lsls	r7, r3, #25
 800572c:	bf48      	it	mi
 800572e:	b2b6      	uxthmi	r6, r6
 8005730:	07df      	lsls	r7, r3, #31
 8005732:	bf48      	it	mi
 8005734:	f043 0320 	orrmi.w	r3, r3, #32
 8005738:	6029      	str	r1, [r5, #0]
 800573a:	bf48      	it	mi
 800573c:	6023      	strmi	r3, [r4, #0]
 800573e:	b91e      	cbnz	r6, 8005748 <_printf_i+0x1a4>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	f023 0320 	bic.w	r3, r3, #32
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	2310      	movs	r3, #16
 800574a:	e7a7      	b.n	800569c <_printf_i+0xf8>
 800574c:	4824      	ldr	r0, [pc, #144]	; (80057e0 <_printf_i+0x23c>)
 800574e:	e7e4      	b.n	800571a <_printf_i+0x176>
 8005750:	4615      	mov	r5, r2
 8005752:	e7bd      	b.n	80056d0 <_printf_i+0x12c>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	6826      	ldr	r6, [r4, #0]
 8005758:	6961      	ldr	r1, [r4, #20]
 800575a:	1d18      	adds	r0, r3, #4
 800575c:	6028      	str	r0, [r5, #0]
 800575e:	0635      	lsls	r5, r6, #24
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	d501      	bpl.n	8005768 <_printf_i+0x1c4>
 8005764:	6019      	str	r1, [r3, #0]
 8005766:	e002      	b.n	800576e <_printf_i+0x1ca>
 8005768:	0670      	lsls	r0, r6, #25
 800576a:	d5fb      	bpl.n	8005764 <_printf_i+0x1c0>
 800576c:	8019      	strh	r1, [r3, #0]
 800576e:	2300      	movs	r3, #0
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	4615      	mov	r5, r2
 8005774:	e7bc      	b.n	80056f0 <_printf_i+0x14c>
 8005776:	682b      	ldr	r3, [r5, #0]
 8005778:	1d1a      	adds	r2, r3, #4
 800577a:	602a      	str	r2, [r5, #0]
 800577c:	681d      	ldr	r5, [r3, #0]
 800577e:	6862      	ldr	r2, [r4, #4]
 8005780:	2100      	movs	r1, #0
 8005782:	4628      	mov	r0, r5
 8005784:	f7fa fd24 	bl	80001d0 <memchr>
 8005788:	b108      	cbz	r0, 800578e <_printf_i+0x1ea>
 800578a:	1b40      	subs	r0, r0, r5
 800578c:	6060      	str	r0, [r4, #4]
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	2300      	movs	r3, #0
 8005794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005798:	e7aa      	b.n	80056f0 <_printf_i+0x14c>
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	462a      	mov	r2, r5
 800579e:	4649      	mov	r1, r9
 80057a0:	4640      	mov	r0, r8
 80057a2:	47d0      	blx	sl
 80057a4:	3001      	adds	r0, #1
 80057a6:	d0ad      	beq.n	8005704 <_printf_i+0x160>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	079b      	lsls	r3, r3, #30
 80057ac:	d413      	bmi.n	80057d6 <_printf_i+0x232>
 80057ae:	68e0      	ldr	r0, [r4, #12]
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	4298      	cmp	r0, r3
 80057b4:	bfb8      	it	lt
 80057b6:	4618      	movlt	r0, r3
 80057b8:	e7a6      	b.n	8005708 <_printf_i+0x164>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4632      	mov	r2, r6
 80057be:	4649      	mov	r1, r9
 80057c0:	4640      	mov	r0, r8
 80057c2:	47d0      	blx	sl
 80057c4:	3001      	adds	r0, #1
 80057c6:	d09d      	beq.n	8005704 <_printf_i+0x160>
 80057c8:	3501      	adds	r5, #1
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	9903      	ldr	r1, [sp, #12]
 80057ce:	1a5b      	subs	r3, r3, r1
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	dcf2      	bgt.n	80057ba <_printf_i+0x216>
 80057d4:	e7eb      	b.n	80057ae <_printf_i+0x20a>
 80057d6:	2500      	movs	r5, #0
 80057d8:	f104 0619 	add.w	r6, r4, #25
 80057dc:	e7f5      	b.n	80057ca <_printf_i+0x226>
 80057de:	bf00      	nop
 80057e0:	080080f6 	.word	0x080080f6
 80057e4:	08008107 	.word	0x08008107

080057e8 <std>:
 80057e8:	2300      	movs	r3, #0
 80057ea:	b510      	push	{r4, lr}
 80057ec:	4604      	mov	r4, r0
 80057ee:	e9c0 3300 	strd	r3, r3, [r0]
 80057f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057f6:	6083      	str	r3, [r0, #8]
 80057f8:	8181      	strh	r1, [r0, #12]
 80057fa:	6643      	str	r3, [r0, #100]	; 0x64
 80057fc:	81c2      	strh	r2, [r0, #14]
 80057fe:	6183      	str	r3, [r0, #24]
 8005800:	4619      	mov	r1, r3
 8005802:	2208      	movs	r2, #8
 8005804:	305c      	adds	r0, #92	; 0x5c
 8005806:	f000 f928 	bl	8005a5a <memset>
 800580a:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <std+0x58>)
 800580c:	6263      	str	r3, [r4, #36]	; 0x24
 800580e:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <std+0x5c>)
 8005810:	62a3      	str	r3, [r4, #40]	; 0x28
 8005812:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <std+0x60>)
 8005814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <std+0x64>)
 8005818:	6323      	str	r3, [r4, #48]	; 0x30
 800581a:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <std+0x68>)
 800581c:	6224      	str	r4, [r4, #32]
 800581e:	429c      	cmp	r4, r3
 8005820:	d006      	beq.n	8005830 <std+0x48>
 8005822:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005826:	4294      	cmp	r4, r2
 8005828:	d002      	beq.n	8005830 <std+0x48>
 800582a:	33d0      	adds	r3, #208	; 0xd0
 800582c:	429c      	cmp	r4, r3
 800582e:	d105      	bne.n	800583c <std+0x54>
 8005830:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005838:	f000 b99e 	b.w	8005b78 <__retarget_lock_init_recursive>
 800583c:	bd10      	pop	{r4, pc}
 800583e:	bf00      	nop
 8005840:	080059d5 	.word	0x080059d5
 8005844:	080059f7 	.word	0x080059f7
 8005848:	08005a2f 	.word	0x08005a2f
 800584c:	08005a53 	.word	0x08005a53
 8005850:	200002e8 	.word	0x200002e8

08005854 <stdio_exit_handler>:
 8005854:	4a02      	ldr	r2, [pc, #8]	; (8005860 <stdio_exit_handler+0xc>)
 8005856:	4903      	ldr	r1, [pc, #12]	; (8005864 <stdio_exit_handler+0x10>)
 8005858:	4803      	ldr	r0, [pc, #12]	; (8005868 <stdio_exit_handler+0x14>)
 800585a:	f000 b869 	b.w	8005930 <_fwalk_sglue>
 800585e:	bf00      	nop
 8005860:	2000000c 	.word	0x2000000c
 8005864:	08007549 	.word	0x08007549
 8005868:	20000018 	.word	0x20000018

0800586c <cleanup_stdio>:
 800586c:	6841      	ldr	r1, [r0, #4]
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <cleanup_stdio+0x34>)
 8005870:	4299      	cmp	r1, r3
 8005872:	b510      	push	{r4, lr}
 8005874:	4604      	mov	r4, r0
 8005876:	d001      	beq.n	800587c <cleanup_stdio+0x10>
 8005878:	f001 fe66 	bl	8007548 <_fflush_r>
 800587c:	68a1      	ldr	r1, [r4, #8]
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <cleanup_stdio+0x38>)
 8005880:	4299      	cmp	r1, r3
 8005882:	d002      	beq.n	800588a <cleanup_stdio+0x1e>
 8005884:	4620      	mov	r0, r4
 8005886:	f001 fe5f 	bl	8007548 <_fflush_r>
 800588a:	68e1      	ldr	r1, [r4, #12]
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <cleanup_stdio+0x3c>)
 800588e:	4299      	cmp	r1, r3
 8005890:	d004      	beq.n	800589c <cleanup_stdio+0x30>
 8005892:	4620      	mov	r0, r4
 8005894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005898:	f001 be56 	b.w	8007548 <_fflush_r>
 800589c:	bd10      	pop	{r4, pc}
 800589e:	bf00      	nop
 80058a0:	200002e8 	.word	0x200002e8
 80058a4:	20000350 	.word	0x20000350
 80058a8:	200003b8 	.word	0x200003b8

080058ac <global_stdio_init.part.0>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <global_stdio_init.part.0+0x30>)
 80058b0:	4c0b      	ldr	r4, [pc, #44]	; (80058e0 <global_stdio_init.part.0+0x34>)
 80058b2:	4a0c      	ldr	r2, [pc, #48]	; (80058e4 <global_stdio_init.part.0+0x38>)
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	4620      	mov	r0, r4
 80058b8:	2200      	movs	r2, #0
 80058ba:	2104      	movs	r1, #4
 80058bc:	f7ff ff94 	bl	80057e8 <std>
 80058c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058c4:	2201      	movs	r2, #1
 80058c6:	2109      	movs	r1, #9
 80058c8:	f7ff ff8e 	bl	80057e8 <std>
 80058cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058d0:	2202      	movs	r2, #2
 80058d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d6:	2112      	movs	r1, #18
 80058d8:	f7ff bf86 	b.w	80057e8 <std>
 80058dc:	20000420 	.word	0x20000420
 80058e0:	200002e8 	.word	0x200002e8
 80058e4:	08005855 	.word	0x08005855

080058e8 <__sfp_lock_acquire>:
 80058e8:	4801      	ldr	r0, [pc, #4]	; (80058f0 <__sfp_lock_acquire+0x8>)
 80058ea:	f000 b946 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 80058ee:	bf00      	nop
 80058f0:	20000429 	.word	0x20000429

080058f4 <__sfp_lock_release>:
 80058f4:	4801      	ldr	r0, [pc, #4]	; (80058fc <__sfp_lock_release+0x8>)
 80058f6:	f000 b941 	b.w	8005b7c <__retarget_lock_release_recursive>
 80058fa:	bf00      	nop
 80058fc:	20000429 	.word	0x20000429

08005900 <__sinit>:
 8005900:	b510      	push	{r4, lr}
 8005902:	4604      	mov	r4, r0
 8005904:	f7ff fff0 	bl	80058e8 <__sfp_lock_acquire>
 8005908:	6a23      	ldr	r3, [r4, #32]
 800590a:	b11b      	cbz	r3, 8005914 <__sinit+0x14>
 800590c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005910:	f7ff bff0 	b.w	80058f4 <__sfp_lock_release>
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <__sinit+0x28>)
 8005916:	6223      	str	r3, [r4, #32]
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <__sinit+0x2c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f5      	bne.n	800590c <__sinit+0xc>
 8005920:	f7ff ffc4 	bl	80058ac <global_stdio_init.part.0>
 8005924:	e7f2      	b.n	800590c <__sinit+0xc>
 8005926:	bf00      	nop
 8005928:	0800586d 	.word	0x0800586d
 800592c:	20000420 	.word	0x20000420

08005930 <_fwalk_sglue>:
 8005930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005934:	4607      	mov	r7, r0
 8005936:	4688      	mov	r8, r1
 8005938:	4614      	mov	r4, r2
 800593a:	2600      	movs	r6, #0
 800593c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005940:	f1b9 0901 	subs.w	r9, r9, #1
 8005944:	d505      	bpl.n	8005952 <_fwalk_sglue+0x22>
 8005946:	6824      	ldr	r4, [r4, #0]
 8005948:	2c00      	cmp	r4, #0
 800594a:	d1f7      	bne.n	800593c <_fwalk_sglue+0xc>
 800594c:	4630      	mov	r0, r6
 800594e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005952:	89ab      	ldrh	r3, [r5, #12]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d907      	bls.n	8005968 <_fwalk_sglue+0x38>
 8005958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800595c:	3301      	adds	r3, #1
 800595e:	d003      	beq.n	8005968 <_fwalk_sglue+0x38>
 8005960:	4629      	mov	r1, r5
 8005962:	4638      	mov	r0, r7
 8005964:	47c0      	blx	r8
 8005966:	4306      	orrs	r6, r0
 8005968:	3568      	adds	r5, #104	; 0x68
 800596a:	e7e9      	b.n	8005940 <_fwalk_sglue+0x10>

0800596c <sniprintf>:
 800596c:	b40c      	push	{r2, r3}
 800596e:	b530      	push	{r4, r5, lr}
 8005970:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <sniprintf+0x64>)
 8005972:	1e0c      	subs	r4, r1, #0
 8005974:	681d      	ldr	r5, [r3, #0]
 8005976:	b09d      	sub	sp, #116	; 0x74
 8005978:	da08      	bge.n	800598c <sniprintf+0x20>
 800597a:	238b      	movs	r3, #139	; 0x8b
 800597c:	602b      	str	r3, [r5, #0]
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
 8005982:	b01d      	add	sp, #116	; 0x74
 8005984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005988:	b002      	add	sp, #8
 800598a:	4770      	bx	lr
 800598c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005990:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005994:	bf14      	ite	ne
 8005996:	f104 33ff 	addne.w	r3, r4, #4294967295
 800599a:	4623      	moveq	r3, r4
 800599c:	9304      	str	r3, [sp, #16]
 800599e:	9307      	str	r3, [sp, #28]
 80059a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059a4:	9002      	str	r0, [sp, #8]
 80059a6:	9006      	str	r0, [sp, #24]
 80059a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059ae:	ab21      	add	r3, sp, #132	; 0x84
 80059b0:	a902      	add	r1, sp, #8
 80059b2:	4628      	mov	r0, r5
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	f001 fc43 	bl	8007240 <_svfiprintf_r>
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	bfbc      	itt	lt
 80059be:	238b      	movlt	r3, #139	; 0x8b
 80059c0:	602b      	strlt	r3, [r5, #0]
 80059c2:	2c00      	cmp	r4, #0
 80059c4:	d0dd      	beq.n	8005982 <sniprintf+0x16>
 80059c6:	9b02      	ldr	r3, [sp, #8]
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	e7d9      	b.n	8005982 <sniprintf+0x16>
 80059ce:	bf00      	nop
 80059d0:	20000064 	.word	0x20000064

080059d4 <__sread>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	460c      	mov	r4, r1
 80059d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059dc:	f000 f87e 	bl	8005adc <_read_r>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	bfab      	itete	ge
 80059e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059e6:	89a3      	ldrhlt	r3, [r4, #12]
 80059e8:	181b      	addge	r3, r3, r0
 80059ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ee:	bfac      	ite	ge
 80059f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80059f2:	81a3      	strhlt	r3, [r4, #12]
 80059f4:	bd10      	pop	{r4, pc}

080059f6 <__swrite>:
 80059f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fa:	461f      	mov	r7, r3
 80059fc:	898b      	ldrh	r3, [r1, #12]
 80059fe:	05db      	lsls	r3, r3, #23
 8005a00:	4605      	mov	r5, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	4616      	mov	r6, r2
 8005a06:	d505      	bpl.n	8005a14 <__swrite+0x1e>
 8005a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f000 f852 	bl	8005ab8 <_lseek_r>
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	4632      	mov	r2, r6
 8005a22:	463b      	mov	r3, r7
 8005a24:	4628      	mov	r0, r5
 8005a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2a:	f000 b869 	b.w	8005b00 <_write_r>

08005a2e <__sseek>:
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	460c      	mov	r4, r1
 8005a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a36:	f000 f83f 	bl	8005ab8 <_lseek_r>
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	bf15      	itete	ne
 8005a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a4a:	81a3      	strheq	r3, [r4, #12]
 8005a4c:	bf18      	it	ne
 8005a4e:	81a3      	strhne	r3, [r4, #12]
 8005a50:	bd10      	pop	{r4, pc}

08005a52 <__sclose>:
 8005a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a56:	f000 b81f 	b.w	8005a98 <_close_r>

08005a5a <memset>:
 8005a5a:	4402      	add	r2, r0
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d100      	bne.n	8005a64 <memset+0xa>
 8005a62:	4770      	bx	lr
 8005a64:	f803 1b01 	strb.w	r1, [r3], #1
 8005a68:	e7f9      	b.n	8005a5e <memset+0x4>

08005a6a <strncat>:
 8005a6a:	b530      	push	{r4, r5, lr}
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	7825      	ldrb	r5, [r4, #0]
 8005a70:	4623      	mov	r3, r4
 8005a72:	3401      	adds	r4, #1
 8005a74:	2d00      	cmp	r5, #0
 8005a76:	d1fa      	bne.n	8005a6e <strncat+0x4>
 8005a78:	3a01      	subs	r2, #1
 8005a7a:	d304      	bcc.n	8005a86 <strncat+0x1c>
 8005a7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a80:	f803 4b01 	strb.w	r4, [r3], #1
 8005a84:	b904      	cbnz	r4, 8005a88 <strncat+0x1e>
 8005a86:	bd30      	pop	{r4, r5, pc}
 8005a88:	2a00      	cmp	r2, #0
 8005a8a:	d1f5      	bne.n	8005a78 <strncat+0xe>
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	e7f3      	b.n	8005a78 <strncat+0xe>

08005a90 <_localeconv_r>:
 8005a90:	4800      	ldr	r0, [pc, #0]	; (8005a94 <_localeconv_r+0x4>)
 8005a92:	4770      	bx	lr
 8005a94:	20000158 	.word	0x20000158

08005a98 <_close_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d06      	ldr	r5, [pc, #24]	; (8005ab4 <_close_r+0x1c>)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	f7fc fc4c 	bl	8002340 <_close>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_close_r+0x1a>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_close_r+0x1a>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000424 	.word	0x20000424

08005ab8 <_lseek_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	; (8005ad8 <_lseek_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fc fc61 	bl	800238e <_lseek>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_lseek_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_lseek_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000424 	.word	0x20000424

08005adc <_read_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	; (8005afc <_read_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fc fbef 	bl	80022ce <_read>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_read_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_read_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20000424 	.word	0x20000424

08005b00 <_write_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	; (8005b20 <_write_r+0x20>)
 8005b04:	4604      	mov	r4, r0
 8005b06:	4608      	mov	r0, r1
 8005b08:	4611      	mov	r1, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fc fbfa 	bl	8002308 <_write>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_write_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_write_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20000424 	.word	0x20000424

08005b24 <__errno>:
 8005b24:	4b01      	ldr	r3, [pc, #4]	; (8005b2c <__errno+0x8>)
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000064 	.word	0x20000064

08005b30 <__libc_init_array>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	4d0d      	ldr	r5, [pc, #52]	; (8005b68 <__libc_init_array+0x38>)
 8005b34:	4c0d      	ldr	r4, [pc, #52]	; (8005b6c <__libc_init_array+0x3c>)
 8005b36:	1b64      	subs	r4, r4, r5
 8005b38:	10a4      	asrs	r4, r4, #2
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	42a6      	cmp	r6, r4
 8005b3e:	d109      	bne.n	8005b54 <__libc_init_array+0x24>
 8005b40:	4d0b      	ldr	r5, [pc, #44]	; (8005b70 <__libc_init_array+0x40>)
 8005b42:	4c0c      	ldr	r4, [pc, #48]	; (8005b74 <__libc_init_array+0x44>)
 8005b44:	f002 f896 	bl	8007c74 <_init>
 8005b48:	1b64      	subs	r4, r4, r5
 8005b4a:	10a4      	asrs	r4, r4, #2
 8005b4c:	2600      	movs	r6, #0
 8005b4e:	42a6      	cmp	r6, r4
 8005b50:	d105      	bne.n	8005b5e <__libc_init_array+0x2e>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b58:	4798      	blx	r3
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7ee      	b.n	8005b3c <__libc_init_array+0xc>
 8005b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b62:	4798      	blx	r3
 8005b64:	3601      	adds	r6, #1
 8005b66:	e7f2      	b.n	8005b4e <__libc_init_array+0x1e>
 8005b68:	0800845c 	.word	0x0800845c
 8005b6c:	0800845c 	.word	0x0800845c
 8005b70:	0800845c 	.word	0x0800845c
 8005b74:	08008460 	.word	0x08008460

08005b78 <__retarget_lock_init_recursive>:
 8005b78:	4770      	bx	lr

08005b7a <__retarget_lock_acquire_recursive>:
 8005b7a:	4770      	bx	lr

08005b7c <__retarget_lock_release_recursive>:
 8005b7c:	4770      	bx	lr

08005b7e <memcpy>:
 8005b7e:	440a      	add	r2, r1
 8005b80:	4291      	cmp	r1, r2
 8005b82:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b86:	d100      	bne.n	8005b8a <memcpy+0xc>
 8005b88:	4770      	bx	lr
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b94:	4291      	cmp	r1, r2
 8005b96:	d1f9      	bne.n	8005b8c <memcpy+0xe>
 8005b98:	bd10      	pop	{r4, pc}

08005b9a <quorem>:
 8005b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9e:	6903      	ldr	r3, [r0, #16]
 8005ba0:	690c      	ldr	r4, [r1, #16]
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	db7e      	blt.n	8005ca6 <quorem+0x10c>
 8005ba8:	3c01      	subs	r4, #1
 8005baa:	f101 0814 	add.w	r8, r1, #20
 8005bae:	f100 0514 	add.w	r5, r0, #20
 8005bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bd0:	d331      	bcc.n	8005c36 <quorem+0x9c>
 8005bd2:	f04f 0e00 	mov.w	lr, #0
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	46ac      	mov	ip, r5
 8005bda:	46f2      	mov	sl, lr
 8005bdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005be0:	b293      	uxth	r3, r2
 8005be2:	fb06 e303 	mla	r3, r6, r3, lr
 8005be6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bea:	0c1a      	lsrs	r2, r3, #16
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	ebaa 0303 	sub.w	r3, sl, r3
 8005bf2:	f8dc a000 	ldr.w	sl, [ip]
 8005bf6:	fa13 f38a 	uxtah	r3, r3, sl
 8005bfa:	fb06 220e 	mla	r2, r6, lr, r2
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	9b00      	ldr	r3, [sp, #0]
 8005c02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c06:	b292      	uxth	r2, r2
 8005c08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c10:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c14:	4581      	cmp	r9, r0
 8005c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c1a:	f84c 3b04 	str.w	r3, [ip], #4
 8005c1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c22:	d2db      	bcs.n	8005bdc <quorem+0x42>
 8005c24:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c28:	b92b      	cbnz	r3, 8005c36 <quorem+0x9c>
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	3b04      	subs	r3, #4
 8005c2e:	429d      	cmp	r5, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	d32c      	bcc.n	8005c8e <quorem+0xf4>
 8005c34:	613c      	str	r4, [r7, #16]
 8005c36:	4638      	mov	r0, r7
 8005c38:	f001 f9a8 	bl	8006f8c <__mcmp>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	db22      	blt.n	8005c86 <quorem+0xec>
 8005c40:	3601      	adds	r6, #1
 8005c42:	4629      	mov	r1, r5
 8005c44:	2000      	movs	r0, #0
 8005c46:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c4a:	f8d1 c000 	ldr.w	ip, [r1]
 8005c4e:	b293      	uxth	r3, r2
 8005c50:	1ac3      	subs	r3, r0, r3
 8005c52:	0c12      	lsrs	r2, r2, #16
 8005c54:	fa13 f38c 	uxtah	r3, r3, ip
 8005c58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c66:	45c1      	cmp	r9, r8
 8005c68:	f841 3b04 	str.w	r3, [r1], #4
 8005c6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c70:	d2e9      	bcs.n	8005c46 <quorem+0xac>
 8005c72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c7a:	b922      	cbnz	r2, 8005c86 <quorem+0xec>
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	429d      	cmp	r5, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	d30a      	bcc.n	8005c9a <quorem+0x100>
 8005c84:	613c      	str	r4, [r7, #16]
 8005c86:	4630      	mov	r0, r6
 8005c88:	b003      	add	sp, #12
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	3b04      	subs	r3, #4
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	d1ce      	bne.n	8005c34 <quorem+0x9a>
 8005c96:	3c01      	subs	r4, #1
 8005c98:	e7c9      	b.n	8005c2e <quorem+0x94>
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	3b04      	subs	r3, #4
 8005c9e:	2a00      	cmp	r2, #0
 8005ca0:	d1f0      	bne.n	8005c84 <quorem+0xea>
 8005ca2:	3c01      	subs	r4, #1
 8005ca4:	e7eb      	b.n	8005c7e <quorem+0xe4>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e7ee      	b.n	8005c88 <quorem+0xee>
 8005caa:	0000      	movs	r0, r0
 8005cac:	0000      	movs	r0, r0
	...

08005cb0 <_dtoa_r>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	ed2d 8b04 	vpush	{d8-d9}
 8005cb8:	69c5      	ldr	r5, [r0, #28]
 8005cba:	b093      	sub	sp, #76	; 0x4c
 8005cbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005cc0:	ec57 6b10 	vmov	r6, r7, d0
 8005cc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005cc8:	9107      	str	r1, [sp, #28]
 8005cca:	4604      	mov	r4, r0
 8005ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8005cce:	930d      	str	r3, [sp, #52]	; 0x34
 8005cd0:	b975      	cbnz	r5, 8005cf0 <_dtoa_r+0x40>
 8005cd2:	2010      	movs	r0, #16
 8005cd4:	f000 fe2a 	bl	800692c <malloc>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	61e0      	str	r0, [r4, #28]
 8005cdc:	b920      	cbnz	r0, 8005ce8 <_dtoa_r+0x38>
 8005cde:	4bae      	ldr	r3, [pc, #696]	; (8005f98 <_dtoa_r+0x2e8>)
 8005ce0:	21ef      	movs	r1, #239	; 0xef
 8005ce2:	48ae      	ldr	r0, [pc, #696]	; (8005f9c <_dtoa_r+0x2ec>)
 8005ce4:	f001 fc82 	bl	80075ec <__assert_func>
 8005ce8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cec:	6005      	str	r5, [r0, #0]
 8005cee:	60c5      	str	r5, [r0, #12]
 8005cf0:	69e3      	ldr	r3, [r4, #28]
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	b151      	cbz	r1, 8005d0c <_dtoa_r+0x5c>
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	604a      	str	r2, [r1, #4]
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4093      	lsls	r3, r2
 8005cfe:	608b      	str	r3, [r1, #8]
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 ff07 	bl	8006b14 <_Bfree>
 8005d06:	69e3      	ldr	r3, [r4, #28]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	1e3b      	subs	r3, r7, #0
 8005d0e:	bfbb      	ittet	lt
 8005d10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	9303      	strlt	r3, [sp, #12]
 8005d16:	2300      	movge	r3, #0
 8005d18:	2201      	movlt	r2, #1
 8005d1a:	bfac      	ite	ge
 8005d1c:	f8c8 3000 	strge.w	r3, [r8]
 8005d20:	f8c8 2000 	strlt.w	r2, [r8]
 8005d24:	4b9e      	ldr	r3, [pc, #632]	; (8005fa0 <_dtoa_r+0x2f0>)
 8005d26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d2a:	ea33 0308 	bics.w	r3, r3, r8
 8005d2e:	d11b      	bne.n	8005d68 <_dtoa_r+0xb8>
 8005d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d32:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d3c:	4333      	orrs	r3, r6
 8005d3e:	f000 8593 	beq.w	8006868 <_dtoa_r+0xbb8>
 8005d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d44:	b963      	cbnz	r3, 8005d60 <_dtoa_r+0xb0>
 8005d46:	4b97      	ldr	r3, [pc, #604]	; (8005fa4 <_dtoa_r+0x2f4>)
 8005d48:	e027      	b.n	8005d9a <_dtoa_r+0xea>
 8005d4a:	4b97      	ldr	r3, [pc, #604]	; (8005fa8 <_dtoa_r+0x2f8>)
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	9800      	ldr	r0, [sp, #0]
 8005d56:	b013      	add	sp, #76	; 0x4c
 8005d58:	ecbd 8b04 	vpop	{d8-d9}
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d60:	4b90      	ldr	r3, [pc, #576]	; (8005fa4 <_dtoa_r+0x2f4>)
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	3303      	adds	r3, #3
 8005d66:	e7f3      	b.n	8005d50 <_dtoa_r+0xa0>
 8005d68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	ec51 0b17 	vmov	r0, r1, d7
 8005d72:	eeb0 8a47 	vmov.f32	s16, s14
 8005d76:	eef0 8a67 	vmov.f32	s17, s15
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f7fa fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d80:	4681      	mov	r9, r0
 8005d82:	b160      	cbz	r0, 8005d9e <_dtoa_r+0xee>
 8005d84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d86:	2301      	movs	r3, #1
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8568 	beq.w	8006862 <_dtoa_r+0xbb2>
 8005d92:	4b86      	ldr	r3, [pc, #536]	; (8005fac <_dtoa_r+0x2fc>)
 8005d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	e7da      	b.n	8005d54 <_dtoa_r+0xa4>
 8005d9e:	aa10      	add	r2, sp, #64	; 0x40
 8005da0:	a911      	add	r1, sp, #68	; 0x44
 8005da2:	4620      	mov	r0, r4
 8005da4:	eeb0 0a48 	vmov.f32	s0, s16
 8005da8:	eef0 0a68 	vmov.f32	s1, s17
 8005dac:	f001 f994 	bl	80070d8 <__d2b>
 8005db0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005db4:	4682      	mov	sl, r0
 8005db6:	2d00      	cmp	r5, #0
 8005db8:	d07f      	beq.n	8005eba <_dtoa_r+0x20a>
 8005dba:	ee18 3a90 	vmov	r3, s17
 8005dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005dc6:	ec51 0b18 	vmov	r0, r1, d8
 8005dca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005dd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4b75      	ldr	r3, [pc, #468]	; (8005fb0 <_dtoa_r+0x300>)
 8005ddc:	f7fa fa54 	bl	8000288 <__aeabi_dsub>
 8005de0:	a367      	add	r3, pc, #412	; (adr r3, 8005f80 <_dtoa_r+0x2d0>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fc07 	bl	80005f8 <__aeabi_dmul>
 8005dea:	a367      	add	r3, pc, #412	; (adr r3, 8005f88 <_dtoa_r+0x2d8>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f7fa fa4c 	bl	800028c <__adddf3>
 8005df4:	4606      	mov	r6, r0
 8005df6:	4628      	mov	r0, r5
 8005df8:	460f      	mov	r7, r1
 8005dfa:	f7fa fb93 	bl	8000524 <__aeabi_i2d>
 8005dfe:	a364      	add	r3, pc, #400	; (adr r3, 8005f90 <_dtoa_r+0x2e0>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f7fa fbf8 	bl	80005f8 <__aeabi_dmul>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	4639      	mov	r1, r7
 8005e10:	f7fa fa3c 	bl	800028c <__adddf3>
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	f7fa fe9e 	bl	8000b58 <__aeabi_d2iz>
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4683      	mov	fp, r0
 8005e20:	2300      	movs	r3, #0
 8005e22:	4630      	mov	r0, r6
 8005e24:	4639      	mov	r1, r7
 8005e26:	f7fa fe59 	bl	8000adc <__aeabi_dcmplt>
 8005e2a:	b148      	cbz	r0, 8005e40 <_dtoa_r+0x190>
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	f7fa fb79 	bl	8000524 <__aeabi_i2d>
 8005e32:	4632      	mov	r2, r6
 8005e34:	463b      	mov	r3, r7
 8005e36:	f7fa fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e3a:	b908      	cbnz	r0, 8005e40 <_dtoa_r+0x190>
 8005e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e40:	f1bb 0f16 	cmp.w	fp, #22
 8005e44:	d857      	bhi.n	8005ef6 <_dtoa_r+0x246>
 8005e46:	4b5b      	ldr	r3, [pc, #364]	; (8005fb4 <_dtoa_r+0x304>)
 8005e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	ec51 0b18 	vmov	r0, r1, d8
 8005e54:	f7fa fe42 	bl	8000adc <__aeabi_dcmplt>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d04e      	beq.n	8005efa <_dtoa_r+0x24a>
 8005e5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e60:	2300      	movs	r3, #0
 8005e62:	930c      	str	r3, [sp, #48]	; 0x30
 8005e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e66:	1b5b      	subs	r3, r3, r5
 8005e68:	1e5a      	subs	r2, r3, #1
 8005e6a:	bf45      	ittet	mi
 8005e6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005e70:	9305      	strmi	r3, [sp, #20]
 8005e72:	2300      	movpl	r3, #0
 8005e74:	2300      	movmi	r3, #0
 8005e76:	9206      	str	r2, [sp, #24]
 8005e78:	bf54      	ite	pl
 8005e7a:	9305      	strpl	r3, [sp, #20]
 8005e7c:	9306      	strmi	r3, [sp, #24]
 8005e7e:	f1bb 0f00 	cmp.w	fp, #0
 8005e82:	db3c      	blt.n	8005efe <_dtoa_r+0x24e>
 8005e84:	9b06      	ldr	r3, [sp, #24]
 8005e86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005e8a:	445b      	add	r3, fp
 8005e8c:	9306      	str	r3, [sp, #24]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9308      	str	r3, [sp, #32]
 8005e92:	9b07      	ldr	r3, [sp, #28]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d868      	bhi.n	8005f6a <_dtoa_r+0x2ba>
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	bfc4      	itt	gt
 8005e9c:	3b04      	subgt	r3, #4
 8005e9e:	9307      	strgt	r3, [sp, #28]
 8005ea0:	9b07      	ldr	r3, [sp, #28]
 8005ea2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ea6:	bfcc      	ite	gt
 8005ea8:	2500      	movgt	r5, #0
 8005eaa:	2501      	movle	r5, #1
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	f200 8085 	bhi.w	8005fbc <_dtoa_r+0x30c>
 8005eb2:	e8df f003 	tbb	[pc, r3]
 8005eb6:	3b2e      	.short	0x3b2e
 8005eb8:	5839      	.short	0x5839
 8005eba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ebe:	441d      	add	r5, r3
 8005ec0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	bfc1      	itttt	gt
 8005ec8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ecc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005ed0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005ed4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ed8:	bfd6      	itet	le
 8005eda:	f1c3 0320 	rsble	r3, r3, #32
 8005ede:	ea48 0003 	orrgt.w	r0, r8, r3
 8005ee2:	fa06 f003 	lslle.w	r0, r6, r3
 8005ee6:	f7fa fb0d 	bl	8000504 <__aeabi_ui2d>
 8005eea:	2201      	movs	r2, #1
 8005eec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ef0:	3d01      	subs	r5, #1
 8005ef2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ef4:	e76f      	b.n	8005dd6 <_dtoa_r+0x126>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e7b3      	b.n	8005e62 <_dtoa_r+0x1b2>
 8005efa:	900c      	str	r0, [sp, #48]	; 0x30
 8005efc:	e7b2      	b.n	8005e64 <_dtoa_r+0x1b4>
 8005efe:	9b05      	ldr	r3, [sp, #20]
 8005f00:	eba3 030b 	sub.w	r3, r3, fp
 8005f04:	9305      	str	r3, [sp, #20]
 8005f06:	f1cb 0300 	rsb	r3, fp, #0
 8005f0a:	9308      	str	r3, [sp, #32]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f10:	e7bf      	b.n	8005e92 <_dtoa_r+0x1e2>
 8005f12:	2300      	movs	r3, #0
 8005f14:	9309      	str	r3, [sp, #36]	; 0x24
 8005f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	dc52      	bgt.n	8005fc2 <_dtoa_r+0x312>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	461a      	mov	r2, r3
 8005f24:	920a      	str	r2, [sp, #40]	; 0x28
 8005f26:	e00b      	b.n	8005f40 <_dtoa_r+0x290>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e7f3      	b.n	8005f14 <_dtoa_r+0x264>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f32:	445b      	add	r3, fp
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	3301      	adds	r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	bfb8      	it	lt
 8005f3e:	2301      	movlt	r3, #1
 8005f40:	69e0      	ldr	r0, [r4, #28]
 8005f42:	2100      	movs	r1, #0
 8005f44:	2204      	movs	r2, #4
 8005f46:	f102 0614 	add.w	r6, r2, #20
 8005f4a:	429e      	cmp	r6, r3
 8005f4c:	d93d      	bls.n	8005fca <_dtoa_r+0x31a>
 8005f4e:	6041      	str	r1, [r0, #4]
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fd9f 	bl	8006a94 <_Balloc>
 8005f56:	9000      	str	r0, [sp, #0]
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d139      	bne.n	8005fd0 <_dtoa_r+0x320>
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <_dtoa_r+0x308>)
 8005f5e:	4602      	mov	r2, r0
 8005f60:	f240 11af 	movw	r1, #431	; 0x1af
 8005f64:	e6bd      	b.n	8005ce2 <_dtoa_r+0x32>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e7e1      	b.n	8005f2e <_dtoa_r+0x27e>
 8005f6a:	2501      	movs	r5, #1
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9307      	str	r3, [sp, #28]
 8005f70:	9509      	str	r5, [sp, #36]	; 0x24
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	9304      	str	r3, [sp, #16]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2312      	movs	r3, #18
 8005f7e:	e7d1      	b.n	8005f24 <_dtoa_r+0x274>
 8005f80:	636f4361 	.word	0x636f4361
 8005f84:	3fd287a7 	.word	0x3fd287a7
 8005f88:	8b60c8b3 	.word	0x8b60c8b3
 8005f8c:	3fc68a28 	.word	0x3fc68a28
 8005f90:	509f79fb 	.word	0x509f79fb
 8005f94:	3fd34413 	.word	0x3fd34413
 8005f98:	08008125 	.word	0x08008125
 8005f9c:	0800813c 	.word	0x0800813c
 8005fa0:	7ff00000 	.word	0x7ff00000
 8005fa4:	08008121 	.word	0x08008121
 8005fa8:	08008118 	.word	0x08008118
 8005fac:	080080f5 	.word	0x080080f5
 8005fb0:	3ff80000 	.word	0x3ff80000
 8005fb4:	08008228 	.word	0x08008228
 8005fb8:	08008194 	.word	0x08008194
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc0:	e7d7      	b.n	8005f72 <_dtoa_r+0x2c2>
 8005fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	9304      	str	r3, [sp, #16]
 8005fc8:	e7ba      	b.n	8005f40 <_dtoa_r+0x290>
 8005fca:	3101      	adds	r1, #1
 8005fcc:	0052      	lsls	r2, r2, #1
 8005fce:	e7ba      	b.n	8005f46 <_dtoa_r+0x296>
 8005fd0:	69e3      	ldr	r3, [r4, #28]
 8005fd2:	9a00      	ldr	r2, [sp, #0]
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	9b04      	ldr	r3, [sp, #16]
 8005fd8:	2b0e      	cmp	r3, #14
 8005fda:	f200 80a8 	bhi.w	800612e <_dtoa_r+0x47e>
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	f000 80a5 	beq.w	800612e <_dtoa_r+0x47e>
 8005fe4:	f1bb 0f00 	cmp.w	fp, #0
 8005fe8:	dd38      	ble.n	800605c <_dtoa_r+0x3ac>
 8005fea:	4bc0      	ldr	r3, [pc, #768]	; (80062ec <_dtoa_r+0x63c>)
 8005fec:	f00b 020f 	and.w	r2, fp, #15
 8005ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ff4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005ff8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005ffc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006000:	d019      	beq.n	8006036 <_dtoa_r+0x386>
 8006002:	4bbb      	ldr	r3, [pc, #748]	; (80062f0 <_dtoa_r+0x640>)
 8006004:	ec51 0b18 	vmov	r0, r1, d8
 8006008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800600c:	f7fa fc1e 	bl	800084c <__aeabi_ddiv>
 8006010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006014:	f008 080f 	and.w	r8, r8, #15
 8006018:	2503      	movs	r5, #3
 800601a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80062f0 <_dtoa_r+0x640>
 800601e:	f1b8 0f00 	cmp.w	r8, #0
 8006022:	d10a      	bne.n	800603a <_dtoa_r+0x38a>
 8006024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006028:	4632      	mov	r2, r6
 800602a:	463b      	mov	r3, r7
 800602c:	f7fa fc0e 	bl	800084c <__aeabi_ddiv>
 8006030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006034:	e02b      	b.n	800608e <_dtoa_r+0x3de>
 8006036:	2502      	movs	r5, #2
 8006038:	e7ef      	b.n	800601a <_dtoa_r+0x36a>
 800603a:	f018 0f01 	tst.w	r8, #1
 800603e:	d008      	beq.n	8006052 <_dtoa_r+0x3a2>
 8006040:	4630      	mov	r0, r6
 8006042:	4639      	mov	r1, r7
 8006044:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006048:	f7fa fad6 	bl	80005f8 <__aeabi_dmul>
 800604c:	3501      	adds	r5, #1
 800604e:	4606      	mov	r6, r0
 8006050:	460f      	mov	r7, r1
 8006052:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006056:	f109 0908 	add.w	r9, r9, #8
 800605a:	e7e0      	b.n	800601e <_dtoa_r+0x36e>
 800605c:	f000 809f 	beq.w	800619e <_dtoa_r+0x4ee>
 8006060:	f1cb 0600 	rsb	r6, fp, #0
 8006064:	4ba1      	ldr	r3, [pc, #644]	; (80062ec <_dtoa_r+0x63c>)
 8006066:	4fa2      	ldr	r7, [pc, #648]	; (80062f0 <_dtoa_r+0x640>)
 8006068:	f006 020f 	and.w	r2, r6, #15
 800606c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	ec51 0b18 	vmov	r0, r1, d8
 8006078:	f7fa fabe 	bl	80005f8 <__aeabi_dmul>
 800607c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006080:	1136      	asrs	r6, r6, #4
 8006082:	2300      	movs	r3, #0
 8006084:	2502      	movs	r5, #2
 8006086:	2e00      	cmp	r6, #0
 8006088:	d17e      	bne.n	8006188 <_dtoa_r+0x4d8>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1d0      	bne.n	8006030 <_dtoa_r+0x380>
 800608e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006090:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8084 	beq.w	80061a2 <_dtoa_r+0x4f2>
 800609a:	4b96      	ldr	r3, [pc, #600]	; (80062f4 <_dtoa_r+0x644>)
 800609c:	2200      	movs	r2, #0
 800609e:	4640      	mov	r0, r8
 80060a0:	4649      	mov	r1, r9
 80060a2:	f7fa fd1b 	bl	8000adc <__aeabi_dcmplt>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d07b      	beq.n	80061a2 <_dtoa_r+0x4f2>
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d078      	beq.n	80061a2 <_dtoa_r+0x4f2>
 80060b0:	9b01      	ldr	r3, [sp, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dd39      	ble.n	800612a <_dtoa_r+0x47a>
 80060b6:	4b90      	ldr	r3, [pc, #576]	; (80062f8 <_dtoa_r+0x648>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	f7fa fa9b 	bl	80005f8 <__aeabi_dmul>
 80060c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060c6:	9e01      	ldr	r6, [sp, #4]
 80060c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80060cc:	3501      	adds	r5, #1
 80060ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80060d2:	4628      	mov	r0, r5
 80060d4:	f7fa fa26 	bl	8000524 <__aeabi_i2d>
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	f7fa fa8c 	bl	80005f8 <__aeabi_dmul>
 80060e0:	4b86      	ldr	r3, [pc, #536]	; (80062fc <_dtoa_r+0x64c>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	f7fa f8d2 	bl	800028c <__adddf3>
 80060e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80060ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f0:	9303      	str	r3, [sp, #12]
 80060f2:	2e00      	cmp	r6, #0
 80060f4:	d158      	bne.n	80061a8 <_dtoa_r+0x4f8>
 80060f6:	4b82      	ldr	r3, [pc, #520]	; (8006300 <_dtoa_r+0x650>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	4640      	mov	r0, r8
 80060fc:	4649      	mov	r1, r9
 80060fe:	f7fa f8c3 	bl	8000288 <__aeabi_dsub>
 8006102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006106:	4680      	mov	r8, r0
 8006108:	4689      	mov	r9, r1
 800610a:	f7fa fd05 	bl	8000b18 <__aeabi_dcmpgt>
 800610e:	2800      	cmp	r0, #0
 8006110:	f040 8296 	bne.w	8006640 <_dtoa_r+0x990>
 8006114:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006118:	4640      	mov	r0, r8
 800611a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800611e:	4649      	mov	r1, r9
 8006120:	f7fa fcdc 	bl	8000adc <__aeabi_dcmplt>
 8006124:	2800      	cmp	r0, #0
 8006126:	f040 8289 	bne.w	800663c <_dtoa_r+0x98c>
 800612a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800612e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006130:	2b00      	cmp	r3, #0
 8006132:	f2c0 814e 	blt.w	80063d2 <_dtoa_r+0x722>
 8006136:	f1bb 0f0e 	cmp.w	fp, #14
 800613a:	f300 814a 	bgt.w	80063d2 <_dtoa_r+0x722>
 800613e:	4b6b      	ldr	r3, [pc, #428]	; (80062ec <_dtoa_r+0x63c>)
 8006140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006144:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614a:	2b00      	cmp	r3, #0
 800614c:	f280 80dc 	bge.w	8006308 <_dtoa_r+0x658>
 8006150:	9b04      	ldr	r3, [sp, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f300 80d8 	bgt.w	8006308 <_dtoa_r+0x658>
 8006158:	f040 826f 	bne.w	800663a <_dtoa_r+0x98a>
 800615c:	4b68      	ldr	r3, [pc, #416]	; (8006300 <_dtoa_r+0x650>)
 800615e:	2200      	movs	r2, #0
 8006160:	4640      	mov	r0, r8
 8006162:	4649      	mov	r1, r9
 8006164:	f7fa fa48 	bl	80005f8 <__aeabi_dmul>
 8006168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800616c:	f7fa fcca 	bl	8000b04 <__aeabi_dcmpge>
 8006170:	9e04      	ldr	r6, [sp, #16]
 8006172:	4637      	mov	r7, r6
 8006174:	2800      	cmp	r0, #0
 8006176:	f040 8245 	bne.w	8006604 <_dtoa_r+0x954>
 800617a:	9d00      	ldr	r5, [sp, #0]
 800617c:	2331      	movs	r3, #49	; 0x31
 800617e:	f805 3b01 	strb.w	r3, [r5], #1
 8006182:	f10b 0b01 	add.w	fp, fp, #1
 8006186:	e241      	b.n	800660c <_dtoa_r+0x95c>
 8006188:	07f2      	lsls	r2, r6, #31
 800618a:	d505      	bpl.n	8006198 <_dtoa_r+0x4e8>
 800618c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006190:	f7fa fa32 	bl	80005f8 <__aeabi_dmul>
 8006194:	3501      	adds	r5, #1
 8006196:	2301      	movs	r3, #1
 8006198:	1076      	asrs	r6, r6, #1
 800619a:	3708      	adds	r7, #8
 800619c:	e773      	b.n	8006086 <_dtoa_r+0x3d6>
 800619e:	2502      	movs	r5, #2
 80061a0:	e775      	b.n	800608e <_dtoa_r+0x3de>
 80061a2:	9e04      	ldr	r6, [sp, #16]
 80061a4:	465f      	mov	r7, fp
 80061a6:	e792      	b.n	80060ce <_dtoa_r+0x41e>
 80061a8:	9900      	ldr	r1, [sp, #0]
 80061aa:	4b50      	ldr	r3, [pc, #320]	; (80062ec <_dtoa_r+0x63c>)
 80061ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061b0:	4431      	add	r1, r6
 80061b2:	9102      	str	r1, [sp, #8]
 80061b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061b6:	eeb0 9a47 	vmov.f32	s18, s14
 80061ba:	eef0 9a67 	vmov.f32	s19, s15
 80061be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061c6:	2900      	cmp	r1, #0
 80061c8:	d044      	beq.n	8006254 <_dtoa_r+0x5a4>
 80061ca:	494e      	ldr	r1, [pc, #312]	; (8006304 <_dtoa_r+0x654>)
 80061cc:	2000      	movs	r0, #0
 80061ce:	f7fa fb3d 	bl	800084c <__aeabi_ddiv>
 80061d2:	ec53 2b19 	vmov	r2, r3, d9
 80061d6:	f7fa f857 	bl	8000288 <__aeabi_dsub>
 80061da:	9d00      	ldr	r5, [sp, #0]
 80061dc:	ec41 0b19 	vmov	d9, r0, r1
 80061e0:	4649      	mov	r1, r9
 80061e2:	4640      	mov	r0, r8
 80061e4:	f7fa fcb8 	bl	8000b58 <__aeabi_d2iz>
 80061e8:	4606      	mov	r6, r0
 80061ea:	f7fa f99b 	bl	8000524 <__aeabi_i2d>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7fa f847 	bl	8000288 <__aeabi_dsub>
 80061fa:	3630      	adds	r6, #48	; 0x30
 80061fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006200:	ec53 2b19 	vmov	r2, r3, d9
 8006204:	4680      	mov	r8, r0
 8006206:	4689      	mov	r9, r1
 8006208:	f7fa fc68 	bl	8000adc <__aeabi_dcmplt>
 800620c:	2800      	cmp	r0, #0
 800620e:	d164      	bne.n	80062da <_dtoa_r+0x62a>
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	4937      	ldr	r1, [pc, #220]	; (80062f4 <_dtoa_r+0x644>)
 8006216:	2000      	movs	r0, #0
 8006218:	f7fa f836 	bl	8000288 <__aeabi_dsub>
 800621c:	ec53 2b19 	vmov	r2, r3, d9
 8006220:	f7fa fc5c 	bl	8000adc <__aeabi_dcmplt>
 8006224:	2800      	cmp	r0, #0
 8006226:	f040 80b6 	bne.w	8006396 <_dtoa_r+0x6e6>
 800622a:	9b02      	ldr	r3, [sp, #8]
 800622c:	429d      	cmp	r5, r3
 800622e:	f43f af7c 	beq.w	800612a <_dtoa_r+0x47a>
 8006232:	4b31      	ldr	r3, [pc, #196]	; (80062f8 <_dtoa_r+0x648>)
 8006234:	ec51 0b19 	vmov	r0, r1, d9
 8006238:	2200      	movs	r2, #0
 800623a:	f7fa f9dd 	bl	80005f8 <__aeabi_dmul>
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <_dtoa_r+0x648>)
 8006240:	ec41 0b19 	vmov	d9, r0, r1
 8006244:	2200      	movs	r2, #0
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7fa f9d5 	bl	80005f8 <__aeabi_dmul>
 800624e:	4680      	mov	r8, r0
 8006250:	4689      	mov	r9, r1
 8006252:	e7c5      	b.n	80061e0 <_dtoa_r+0x530>
 8006254:	ec51 0b17 	vmov	r0, r1, d7
 8006258:	f7fa f9ce 	bl	80005f8 <__aeabi_dmul>
 800625c:	9b02      	ldr	r3, [sp, #8]
 800625e:	9d00      	ldr	r5, [sp, #0]
 8006260:	930f      	str	r3, [sp, #60]	; 0x3c
 8006262:	ec41 0b19 	vmov	d9, r0, r1
 8006266:	4649      	mov	r1, r9
 8006268:	4640      	mov	r0, r8
 800626a:	f7fa fc75 	bl	8000b58 <__aeabi_d2iz>
 800626e:	4606      	mov	r6, r0
 8006270:	f7fa f958 	bl	8000524 <__aeabi_i2d>
 8006274:	3630      	adds	r6, #48	; 0x30
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4640      	mov	r0, r8
 800627c:	4649      	mov	r1, r9
 800627e:	f7fa f803 	bl	8000288 <__aeabi_dsub>
 8006282:	f805 6b01 	strb.w	r6, [r5], #1
 8006286:	9b02      	ldr	r3, [sp, #8]
 8006288:	429d      	cmp	r5, r3
 800628a:	4680      	mov	r8, r0
 800628c:	4689      	mov	r9, r1
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	d124      	bne.n	80062de <_dtoa_r+0x62e>
 8006294:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <_dtoa_r+0x654>)
 8006296:	ec51 0b19 	vmov	r0, r1, d9
 800629a:	f7f9 fff7 	bl	800028c <__adddf3>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4640      	mov	r0, r8
 80062a4:	4649      	mov	r1, r9
 80062a6:	f7fa fc37 	bl	8000b18 <__aeabi_dcmpgt>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d173      	bne.n	8006396 <_dtoa_r+0x6e6>
 80062ae:	ec53 2b19 	vmov	r2, r3, d9
 80062b2:	4914      	ldr	r1, [pc, #80]	; (8006304 <_dtoa_r+0x654>)
 80062b4:	2000      	movs	r0, #0
 80062b6:	f7f9 ffe7 	bl	8000288 <__aeabi_dsub>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4640      	mov	r0, r8
 80062c0:	4649      	mov	r1, r9
 80062c2:	f7fa fc0b 	bl	8000adc <__aeabi_dcmplt>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f43f af2f 	beq.w	800612a <_dtoa_r+0x47a>
 80062cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062ce:	1e6b      	subs	r3, r5, #1
 80062d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062d6:	2b30      	cmp	r3, #48	; 0x30
 80062d8:	d0f8      	beq.n	80062cc <_dtoa_r+0x61c>
 80062da:	46bb      	mov	fp, r7
 80062dc:	e04a      	b.n	8006374 <_dtoa_r+0x6c4>
 80062de:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <_dtoa_r+0x648>)
 80062e0:	f7fa f98a 	bl	80005f8 <__aeabi_dmul>
 80062e4:	4680      	mov	r8, r0
 80062e6:	4689      	mov	r9, r1
 80062e8:	e7bd      	b.n	8006266 <_dtoa_r+0x5b6>
 80062ea:	bf00      	nop
 80062ec:	08008228 	.word	0x08008228
 80062f0:	08008200 	.word	0x08008200
 80062f4:	3ff00000 	.word	0x3ff00000
 80062f8:	40240000 	.word	0x40240000
 80062fc:	401c0000 	.word	0x401c0000
 8006300:	40140000 	.word	0x40140000
 8006304:	3fe00000 	.word	0x3fe00000
 8006308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800630c:	9d00      	ldr	r5, [sp, #0]
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	4630      	mov	r0, r6
 8006314:	4639      	mov	r1, r7
 8006316:	f7fa fa99 	bl	800084c <__aeabi_ddiv>
 800631a:	f7fa fc1d 	bl	8000b58 <__aeabi_d2iz>
 800631e:	9001      	str	r0, [sp, #4]
 8006320:	f7fa f900 	bl	8000524 <__aeabi_i2d>
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	f7fa f966 	bl	80005f8 <__aeabi_dmul>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	f7f9 ffa8 	bl	8000288 <__aeabi_dsub>
 8006338:	9e01      	ldr	r6, [sp, #4]
 800633a:	9f04      	ldr	r7, [sp, #16]
 800633c:	3630      	adds	r6, #48	; 0x30
 800633e:	f805 6b01 	strb.w	r6, [r5], #1
 8006342:	9e00      	ldr	r6, [sp, #0]
 8006344:	1bae      	subs	r6, r5, r6
 8006346:	42b7      	cmp	r7, r6
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	d134      	bne.n	80063b8 <_dtoa_r+0x708>
 800634e:	f7f9 ff9d 	bl	800028c <__adddf3>
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	4606      	mov	r6, r0
 8006358:	460f      	mov	r7, r1
 800635a:	f7fa fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800635e:	b9c8      	cbnz	r0, 8006394 <_dtoa_r+0x6e4>
 8006360:	4642      	mov	r2, r8
 8006362:	464b      	mov	r3, r9
 8006364:	4630      	mov	r0, r6
 8006366:	4639      	mov	r1, r7
 8006368:	f7fa fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800636c:	b110      	cbz	r0, 8006374 <_dtoa_r+0x6c4>
 800636e:	9b01      	ldr	r3, [sp, #4]
 8006370:	07db      	lsls	r3, r3, #31
 8006372:	d40f      	bmi.n	8006394 <_dtoa_r+0x6e4>
 8006374:	4651      	mov	r1, sl
 8006376:	4620      	mov	r0, r4
 8006378:	f000 fbcc 	bl	8006b14 <_Bfree>
 800637c:	2300      	movs	r3, #0
 800637e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006380:	702b      	strb	r3, [r5, #0]
 8006382:	f10b 0301 	add.w	r3, fp, #1
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800638a:	2b00      	cmp	r3, #0
 800638c:	f43f ace2 	beq.w	8005d54 <_dtoa_r+0xa4>
 8006390:	601d      	str	r5, [r3, #0]
 8006392:	e4df      	b.n	8005d54 <_dtoa_r+0xa4>
 8006394:	465f      	mov	r7, fp
 8006396:	462b      	mov	r3, r5
 8006398:	461d      	mov	r5, r3
 800639a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800639e:	2a39      	cmp	r2, #57	; 0x39
 80063a0:	d106      	bne.n	80063b0 <_dtoa_r+0x700>
 80063a2:	9a00      	ldr	r2, [sp, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d1f7      	bne.n	8006398 <_dtoa_r+0x6e8>
 80063a8:	9900      	ldr	r1, [sp, #0]
 80063aa:	2230      	movs	r2, #48	; 0x30
 80063ac:	3701      	adds	r7, #1
 80063ae:	700a      	strb	r2, [r1, #0]
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	3201      	adds	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e790      	b.n	80062da <_dtoa_r+0x62a>
 80063b8:	4ba3      	ldr	r3, [pc, #652]	; (8006648 <_dtoa_r+0x998>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	f7fa f91c 	bl	80005f8 <__aeabi_dmul>
 80063c0:	2200      	movs	r2, #0
 80063c2:	2300      	movs	r3, #0
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	f7fa fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d09e      	beq.n	800630e <_dtoa_r+0x65e>
 80063d0:	e7d0      	b.n	8006374 <_dtoa_r+0x6c4>
 80063d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d4:	2a00      	cmp	r2, #0
 80063d6:	f000 80ca 	beq.w	800656e <_dtoa_r+0x8be>
 80063da:	9a07      	ldr	r2, [sp, #28]
 80063dc:	2a01      	cmp	r2, #1
 80063de:	f300 80ad 	bgt.w	800653c <_dtoa_r+0x88c>
 80063e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	f000 80a5 	beq.w	8006534 <_dtoa_r+0x884>
 80063ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063ee:	9e08      	ldr	r6, [sp, #32]
 80063f0:	9d05      	ldr	r5, [sp, #20]
 80063f2:	9a05      	ldr	r2, [sp, #20]
 80063f4:	441a      	add	r2, r3
 80063f6:	9205      	str	r2, [sp, #20]
 80063f8:	9a06      	ldr	r2, [sp, #24]
 80063fa:	2101      	movs	r1, #1
 80063fc:	441a      	add	r2, r3
 80063fe:	4620      	mov	r0, r4
 8006400:	9206      	str	r2, [sp, #24]
 8006402:	f000 fc3d 	bl	8006c80 <__i2b>
 8006406:	4607      	mov	r7, r0
 8006408:	b165      	cbz	r5, 8006424 <_dtoa_r+0x774>
 800640a:	9b06      	ldr	r3, [sp, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	dd09      	ble.n	8006424 <_dtoa_r+0x774>
 8006410:	42ab      	cmp	r3, r5
 8006412:	9a05      	ldr	r2, [sp, #20]
 8006414:	bfa8      	it	ge
 8006416:	462b      	movge	r3, r5
 8006418:	1ad2      	subs	r2, r2, r3
 800641a:	9205      	str	r2, [sp, #20]
 800641c:	9a06      	ldr	r2, [sp, #24]
 800641e:	1aed      	subs	r5, r5, r3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	9306      	str	r3, [sp, #24]
 8006424:	9b08      	ldr	r3, [sp, #32]
 8006426:	b1f3      	cbz	r3, 8006466 <_dtoa_r+0x7b6>
 8006428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 80a3 	beq.w	8006576 <_dtoa_r+0x8c6>
 8006430:	2e00      	cmp	r6, #0
 8006432:	dd10      	ble.n	8006456 <_dtoa_r+0x7a6>
 8006434:	4639      	mov	r1, r7
 8006436:	4632      	mov	r2, r6
 8006438:	4620      	mov	r0, r4
 800643a:	f000 fce1 	bl	8006e00 <__pow5mult>
 800643e:	4652      	mov	r2, sl
 8006440:	4601      	mov	r1, r0
 8006442:	4607      	mov	r7, r0
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fc31 	bl	8006cac <__multiply>
 800644a:	4651      	mov	r1, sl
 800644c:	4680      	mov	r8, r0
 800644e:	4620      	mov	r0, r4
 8006450:	f000 fb60 	bl	8006b14 <_Bfree>
 8006454:	46c2      	mov	sl, r8
 8006456:	9b08      	ldr	r3, [sp, #32]
 8006458:	1b9a      	subs	r2, r3, r6
 800645a:	d004      	beq.n	8006466 <_dtoa_r+0x7b6>
 800645c:	4651      	mov	r1, sl
 800645e:	4620      	mov	r0, r4
 8006460:	f000 fcce 	bl	8006e00 <__pow5mult>
 8006464:	4682      	mov	sl, r0
 8006466:	2101      	movs	r1, #1
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fc09 	bl	8006c80 <__i2b>
 800646e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006470:	2b00      	cmp	r3, #0
 8006472:	4606      	mov	r6, r0
 8006474:	f340 8081 	ble.w	800657a <_dtoa_r+0x8ca>
 8006478:	461a      	mov	r2, r3
 800647a:	4601      	mov	r1, r0
 800647c:	4620      	mov	r0, r4
 800647e:	f000 fcbf 	bl	8006e00 <__pow5mult>
 8006482:	9b07      	ldr	r3, [sp, #28]
 8006484:	2b01      	cmp	r3, #1
 8006486:	4606      	mov	r6, r0
 8006488:	dd7a      	ble.n	8006580 <_dtoa_r+0x8d0>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	6933      	ldr	r3, [r6, #16]
 8006490:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006494:	6918      	ldr	r0, [r3, #16]
 8006496:	f000 fba5 	bl	8006be4 <__hi0bits>
 800649a:	f1c0 0020 	rsb	r0, r0, #32
 800649e:	9b06      	ldr	r3, [sp, #24]
 80064a0:	4418      	add	r0, r3
 80064a2:	f010 001f 	ands.w	r0, r0, #31
 80064a6:	f000 8094 	beq.w	80065d2 <_dtoa_r+0x922>
 80064aa:	f1c0 0320 	rsb	r3, r0, #32
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	f340 8085 	ble.w	80065be <_dtoa_r+0x90e>
 80064b4:	9b05      	ldr	r3, [sp, #20]
 80064b6:	f1c0 001c 	rsb	r0, r0, #28
 80064ba:	4403      	add	r3, r0
 80064bc:	9305      	str	r3, [sp, #20]
 80064be:	9b06      	ldr	r3, [sp, #24]
 80064c0:	4403      	add	r3, r0
 80064c2:	4405      	add	r5, r0
 80064c4:	9306      	str	r3, [sp, #24]
 80064c6:	9b05      	ldr	r3, [sp, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	dd05      	ble.n	80064d8 <_dtoa_r+0x828>
 80064cc:	4651      	mov	r1, sl
 80064ce:	461a      	mov	r2, r3
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 fcef 	bl	8006eb4 <__lshift>
 80064d6:	4682      	mov	sl, r0
 80064d8:	9b06      	ldr	r3, [sp, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dd05      	ble.n	80064ea <_dtoa_r+0x83a>
 80064de:	4631      	mov	r1, r6
 80064e0:	461a      	mov	r2, r3
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fce6 	bl	8006eb4 <__lshift>
 80064e8:	4606      	mov	r6, r0
 80064ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d072      	beq.n	80065d6 <_dtoa_r+0x926>
 80064f0:	4631      	mov	r1, r6
 80064f2:	4650      	mov	r0, sl
 80064f4:	f000 fd4a 	bl	8006f8c <__mcmp>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	da6c      	bge.n	80065d6 <_dtoa_r+0x926>
 80064fc:	2300      	movs	r3, #0
 80064fe:	4651      	mov	r1, sl
 8006500:	220a      	movs	r2, #10
 8006502:	4620      	mov	r0, r4
 8006504:	f000 fb28 	bl	8006b58 <__multadd>
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800650e:	4682      	mov	sl, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 81b0 	beq.w	8006876 <_dtoa_r+0xbc6>
 8006516:	2300      	movs	r3, #0
 8006518:	4639      	mov	r1, r7
 800651a:	220a      	movs	r2, #10
 800651c:	4620      	mov	r0, r4
 800651e:	f000 fb1b 	bl	8006b58 <__multadd>
 8006522:	9b01      	ldr	r3, [sp, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	4607      	mov	r7, r0
 8006528:	f300 8096 	bgt.w	8006658 <_dtoa_r+0x9a8>
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	2b02      	cmp	r3, #2
 8006530:	dc59      	bgt.n	80065e6 <_dtoa_r+0x936>
 8006532:	e091      	b.n	8006658 <_dtoa_r+0x9a8>
 8006534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800653a:	e758      	b.n	80063ee <_dtoa_r+0x73e>
 800653c:	9b04      	ldr	r3, [sp, #16]
 800653e:	1e5e      	subs	r6, r3, #1
 8006540:	9b08      	ldr	r3, [sp, #32]
 8006542:	42b3      	cmp	r3, r6
 8006544:	bfbf      	itttt	lt
 8006546:	9b08      	ldrlt	r3, [sp, #32]
 8006548:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800654a:	9608      	strlt	r6, [sp, #32]
 800654c:	1af3      	sublt	r3, r6, r3
 800654e:	bfb4      	ite	lt
 8006550:	18d2      	addlt	r2, r2, r3
 8006552:	1b9e      	subge	r6, r3, r6
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	bfbc      	itt	lt
 8006558:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800655a:	2600      	movlt	r6, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfb7      	itett	lt
 8006560:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006564:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006568:	1a9d      	sublt	r5, r3, r2
 800656a:	2300      	movlt	r3, #0
 800656c:	e741      	b.n	80063f2 <_dtoa_r+0x742>
 800656e:	9e08      	ldr	r6, [sp, #32]
 8006570:	9d05      	ldr	r5, [sp, #20]
 8006572:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006574:	e748      	b.n	8006408 <_dtoa_r+0x758>
 8006576:	9a08      	ldr	r2, [sp, #32]
 8006578:	e770      	b.n	800645c <_dtoa_r+0x7ac>
 800657a:	9b07      	ldr	r3, [sp, #28]
 800657c:	2b01      	cmp	r3, #1
 800657e:	dc19      	bgt.n	80065b4 <_dtoa_r+0x904>
 8006580:	9b02      	ldr	r3, [sp, #8]
 8006582:	b9bb      	cbnz	r3, 80065b4 <_dtoa_r+0x904>
 8006584:	9b03      	ldr	r3, [sp, #12]
 8006586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800658a:	b99b      	cbnz	r3, 80065b4 <_dtoa_r+0x904>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006592:	0d1b      	lsrs	r3, r3, #20
 8006594:	051b      	lsls	r3, r3, #20
 8006596:	b183      	cbz	r3, 80065ba <_dtoa_r+0x90a>
 8006598:	9b05      	ldr	r3, [sp, #20]
 800659a:	3301      	adds	r3, #1
 800659c:	9305      	str	r3, [sp, #20]
 800659e:	9b06      	ldr	r3, [sp, #24]
 80065a0:	3301      	adds	r3, #1
 80065a2:	9306      	str	r3, [sp, #24]
 80065a4:	f04f 0801 	mov.w	r8, #1
 80065a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f47f af6f 	bne.w	800648e <_dtoa_r+0x7de>
 80065b0:	2001      	movs	r0, #1
 80065b2:	e774      	b.n	800649e <_dtoa_r+0x7ee>
 80065b4:	f04f 0800 	mov.w	r8, #0
 80065b8:	e7f6      	b.n	80065a8 <_dtoa_r+0x8f8>
 80065ba:	4698      	mov	r8, r3
 80065bc:	e7f4      	b.n	80065a8 <_dtoa_r+0x8f8>
 80065be:	d082      	beq.n	80064c6 <_dtoa_r+0x816>
 80065c0:	9a05      	ldr	r2, [sp, #20]
 80065c2:	331c      	adds	r3, #28
 80065c4:	441a      	add	r2, r3
 80065c6:	9205      	str	r2, [sp, #20]
 80065c8:	9a06      	ldr	r2, [sp, #24]
 80065ca:	441a      	add	r2, r3
 80065cc:	441d      	add	r5, r3
 80065ce:	9206      	str	r2, [sp, #24]
 80065d0:	e779      	b.n	80064c6 <_dtoa_r+0x816>
 80065d2:	4603      	mov	r3, r0
 80065d4:	e7f4      	b.n	80065c0 <_dtoa_r+0x910>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	dc37      	bgt.n	800664c <_dtoa_r+0x99c>
 80065dc:	9b07      	ldr	r3, [sp, #28]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	dd34      	ble.n	800664c <_dtoa_r+0x99c>
 80065e2:	9b04      	ldr	r3, [sp, #16]
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	b963      	cbnz	r3, 8006604 <_dtoa_r+0x954>
 80065ea:	4631      	mov	r1, r6
 80065ec:	2205      	movs	r2, #5
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 fab2 	bl	8006b58 <__multadd>
 80065f4:	4601      	mov	r1, r0
 80065f6:	4606      	mov	r6, r0
 80065f8:	4650      	mov	r0, sl
 80065fa:	f000 fcc7 	bl	8006f8c <__mcmp>
 80065fe:	2800      	cmp	r0, #0
 8006600:	f73f adbb 	bgt.w	800617a <_dtoa_r+0x4ca>
 8006604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006606:	9d00      	ldr	r5, [sp, #0]
 8006608:	ea6f 0b03 	mvn.w	fp, r3
 800660c:	f04f 0800 	mov.w	r8, #0
 8006610:	4631      	mov	r1, r6
 8006612:	4620      	mov	r0, r4
 8006614:	f000 fa7e 	bl	8006b14 <_Bfree>
 8006618:	2f00      	cmp	r7, #0
 800661a:	f43f aeab 	beq.w	8006374 <_dtoa_r+0x6c4>
 800661e:	f1b8 0f00 	cmp.w	r8, #0
 8006622:	d005      	beq.n	8006630 <_dtoa_r+0x980>
 8006624:	45b8      	cmp	r8, r7
 8006626:	d003      	beq.n	8006630 <_dtoa_r+0x980>
 8006628:	4641      	mov	r1, r8
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fa72 	bl	8006b14 <_Bfree>
 8006630:	4639      	mov	r1, r7
 8006632:	4620      	mov	r0, r4
 8006634:	f000 fa6e 	bl	8006b14 <_Bfree>
 8006638:	e69c      	b.n	8006374 <_dtoa_r+0x6c4>
 800663a:	2600      	movs	r6, #0
 800663c:	4637      	mov	r7, r6
 800663e:	e7e1      	b.n	8006604 <_dtoa_r+0x954>
 8006640:	46bb      	mov	fp, r7
 8006642:	4637      	mov	r7, r6
 8006644:	e599      	b.n	800617a <_dtoa_r+0x4ca>
 8006646:	bf00      	nop
 8006648:	40240000 	.word	0x40240000
 800664c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80c8 	beq.w	80067e4 <_dtoa_r+0xb34>
 8006654:	9b04      	ldr	r3, [sp, #16]
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	2d00      	cmp	r5, #0
 800665a:	dd05      	ble.n	8006668 <_dtoa_r+0x9b8>
 800665c:	4639      	mov	r1, r7
 800665e:	462a      	mov	r2, r5
 8006660:	4620      	mov	r0, r4
 8006662:	f000 fc27 	bl	8006eb4 <__lshift>
 8006666:	4607      	mov	r7, r0
 8006668:	f1b8 0f00 	cmp.w	r8, #0
 800666c:	d05b      	beq.n	8006726 <_dtoa_r+0xa76>
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fa0f 	bl	8006a94 <_Balloc>
 8006676:	4605      	mov	r5, r0
 8006678:	b928      	cbnz	r0, 8006686 <_dtoa_r+0x9d6>
 800667a:	4b83      	ldr	r3, [pc, #524]	; (8006888 <_dtoa_r+0xbd8>)
 800667c:	4602      	mov	r2, r0
 800667e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006682:	f7ff bb2e 	b.w	8005ce2 <_dtoa_r+0x32>
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	3202      	adds	r2, #2
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	f107 010c 	add.w	r1, r7, #12
 8006690:	300c      	adds	r0, #12
 8006692:	f7ff fa74 	bl	8005b7e <memcpy>
 8006696:	2201      	movs	r2, #1
 8006698:	4629      	mov	r1, r5
 800669a:	4620      	mov	r0, r4
 800669c:	f000 fc0a 	bl	8006eb4 <__lshift>
 80066a0:	9b00      	ldr	r3, [sp, #0]
 80066a2:	3301      	adds	r3, #1
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066aa:	4413      	add	r3, r2
 80066ac:	9308      	str	r3, [sp, #32]
 80066ae:	9b02      	ldr	r3, [sp, #8]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	46b8      	mov	r8, r7
 80066b6:	9306      	str	r3, [sp, #24]
 80066b8:	4607      	mov	r7, r0
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	4631      	mov	r1, r6
 80066be:	3b01      	subs	r3, #1
 80066c0:	4650      	mov	r0, sl
 80066c2:	9301      	str	r3, [sp, #4]
 80066c4:	f7ff fa69 	bl	8005b9a <quorem>
 80066c8:	4641      	mov	r1, r8
 80066ca:	9002      	str	r0, [sp, #8]
 80066cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066d0:	4650      	mov	r0, sl
 80066d2:	f000 fc5b 	bl	8006f8c <__mcmp>
 80066d6:	463a      	mov	r2, r7
 80066d8:	9005      	str	r0, [sp, #20]
 80066da:	4631      	mov	r1, r6
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fc71 	bl	8006fc4 <__mdiff>
 80066e2:	68c2      	ldr	r2, [r0, #12]
 80066e4:	4605      	mov	r5, r0
 80066e6:	bb02      	cbnz	r2, 800672a <_dtoa_r+0xa7a>
 80066e8:	4601      	mov	r1, r0
 80066ea:	4650      	mov	r0, sl
 80066ec:	f000 fc4e 	bl	8006f8c <__mcmp>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4629      	mov	r1, r5
 80066f4:	4620      	mov	r0, r4
 80066f6:	9209      	str	r2, [sp, #36]	; 0x24
 80066f8:	f000 fa0c 	bl	8006b14 <_Bfree>
 80066fc:	9b07      	ldr	r3, [sp, #28]
 80066fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006700:	9d04      	ldr	r5, [sp, #16]
 8006702:	ea43 0102 	orr.w	r1, r3, r2
 8006706:	9b06      	ldr	r3, [sp, #24]
 8006708:	4319      	orrs	r1, r3
 800670a:	d110      	bne.n	800672e <_dtoa_r+0xa7e>
 800670c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006710:	d029      	beq.n	8006766 <_dtoa_r+0xab6>
 8006712:	9b05      	ldr	r3, [sp, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	dd02      	ble.n	800671e <_dtoa_r+0xa6e>
 8006718:	9b02      	ldr	r3, [sp, #8]
 800671a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	f883 9000 	strb.w	r9, [r3]
 8006724:	e774      	b.n	8006610 <_dtoa_r+0x960>
 8006726:	4638      	mov	r0, r7
 8006728:	e7ba      	b.n	80066a0 <_dtoa_r+0x9f0>
 800672a:	2201      	movs	r2, #1
 800672c:	e7e1      	b.n	80066f2 <_dtoa_r+0xa42>
 800672e:	9b05      	ldr	r3, [sp, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	db04      	blt.n	800673e <_dtoa_r+0xa8e>
 8006734:	9907      	ldr	r1, [sp, #28]
 8006736:	430b      	orrs	r3, r1
 8006738:	9906      	ldr	r1, [sp, #24]
 800673a:	430b      	orrs	r3, r1
 800673c:	d120      	bne.n	8006780 <_dtoa_r+0xad0>
 800673e:	2a00      	cmp	r2, #0
 8006740:	dded      	ble.n	800671e <_dtoa_r+0xa6e>
 8006742:	4651      	mov	r1, sl
 8006744:	2201      	movs	r2, #1
 8006746:	4620      	mov	r0, r4
 8006748:	f000 fbb4 	bl	8006eb4 <__lshift>
 800674c:	4631      	mov	r1, r6
 800674e:	4682      	mov	sl, r0
 8006750:	f000 fc1c 	bl	8006f8c <__mcmp>
 8006754:	2800      	cmp	r0, #0
 8006756:	dc03      	bgt.n	8006760 <_dtoa_r+0xab0>
 8006758:	d1e1      	bne.n	800671e <_dtoa_r+0xa6e>
 800675a:	f019 0f01 	tst.w	r9, #1
 800675e:	d0de      	beq.n	800671e <_dtoa_r+0xa6e>
 8006760:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006764:	d1d8      	bne.n	8006718 <_dtoa_r+0xa68>
 8006766:	9a01      	ldr	r2, [sp, #4]
 8006768:	2339      	movs	r3, #57	; 0x39
 800676a:	7013      	strb	r3, [r2, #0]
 800676c:	462b      	mov	r3, r5
 800676e:	461d      	mov	r5, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006776:	2a39      	cmp	r2, #57	; 0x39
 8006778:	d06c      	beq.n	8006854 <_dtoa_r+0xba4>
 800677a:	3201      	adds	r2, #1
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e747      	b.n	8006610 <_dtoa_r+0x960>
 8006780:	2a00      	cmp	r2, #0
 8006782:	dd07      	ble.n	8006794 <_dtoa_r+0xae4>
 8006784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006788:	d0ed      	beq.n	8006766 <_dtoa_r+0xab6>
 800678a:	9a01      	ldr	r2, [sp, #4]
 800678c:	f109 0301 	add.w	r3, r9, #1
 8006790:	7013      	strb	r3, [r2, #0]
 8006792:	e73d      	b.n	8006610 <_dtoa_r+0x960>
 8006794:	9b04      	ldr	r3, [sp, #16]
 8006796:	9a08      	ldr	r2, [sp, #32]
 8006798:	f803 9c01 	strb.w	r9, [r3, #-1]
 800679c:	4293      	cmp	r3, r2
 800679e:	d043      	beq.n	8006828 <_dtoa_r+0xb78>
 80067a0:	4651      	mov	r1, sl
 80067a2:	2300      	movs	r3, #0
 80067a4:	220a      	movs	r2, #10
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 f9d6 	bl	8006b58 <__multadd>
 80067ac:	45b8      	cmp	r8, r7
 80067ae:	4682      	mov	sl, r0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	f04f 020a 	mov.w	r2, #10
 80067b8:	4641      	mov	r1, r8
 80067ba:	4620      	mov	r0, r4
 80067bc:	d107      	bne.n	80067ce <_dtoa_r+0xb1e>
 80067be:	f000 f9cb 	bl	8006b58 <__multadd>
 80067c2:	4680      	mov	r8, r0
 80067c4:	4607      	mov	r7, r0
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	3301      	adds	r3, #1
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	e775      	b.n	80066ba <_dtoa_r+0xa0a>
 80067ce:	f000 f9c3 	bl	8006b58 <__multadd>
 80067d2:	4639      	mov	r1, r7
 80067d4:	4680      	mov	r8, r0
 80067d6:	2300      	movs	r3, #0
 80067d8:	220a      	movs	r2, #10
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 f9bc 	bl	8006b58 <__multadd>
 80067e0:	4607      	mov	r7, r0
 80067e2:	e7f0      	b.n	80067c6 <_dtoa_r+0xb16>
 80067e4:	9b04      	ldr	r3, [sp, #16]
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	9d00      	ldr	r5, [sp, #0]
 80067ea:	4631      	mov	r1, r6
 80067ec:	4650      	mov	r0, sl
 80067ee:	f7ff f9d4 	bl	8005b9a <quorem>
 80067f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067f6:	9b00      	ldr	r3, [sp, #0]
 80067f8:	f805 9b01 	strb.w	r9, [r5], #1
 80067fc:	1aea      	subs	r2, r5, r3
 80067fe:	9b01      	ldr	r3, [sp, #4]
 8006800:	4293      	cmp	r3, r2
 8006802:	dd07      	ble.n	8006814 <_dtoa_r+0xb64>
 8006804:	4651      	mov	r1, sl
 8006806:	2300      	movs	r3, #0
 8006808:	220a      	movs	r2, #10
 800680a:	4620      	mov	r0, r4
 800680c:	f000 f9a4 	bl	8006b58 <__multadd>
 8006810:	4682      	mov	sl, r0
 8006812:	e7ea      	b.n	80067ea <_dtoa_r+0xb3a>
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfc8      	it	gt
 800681a:	461d      	movgt	r5, r3
 800681c:	9b00      	ldr	r3, [sp, #0]
 800681e:	bfd8      	it	le
 8006820:	2501      	movle	r5, #1
 8006822:	441d      	add	r5, r3
 8006824:	f04f 0800 	mov.w	r8, #0
 8006828:	4651      	mov	r1, sl
 800682a:	2201      	movs	r2, #1
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fb41 	bl	8006eb4 <__lshift>
 8006832:	4631      	mov	r1, r6
 8006834:	4682      	mov	sl, r0
 8006836:	f000 fba9 	bl	8006f8c <__mcmp>
 800683a:	2800      	cmp	r0, #0
 800683c:	dc96      	bgt.n	800676c <_dtoa_r+0xabc>
 800683e:	d102      	bne.n	8006846 <_dtoa_r+0xb96>
 8006840:	f019 0f01 	tst.w	r9, #1
 8006844:	d192      	bne.n	800676c <_dtoa_r+0xabc>
 8006846:	462b      	mov	r3, r5
 8006848:	461d      	mov	r5, r3
 800684a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800684e:	2a30      	cmp	r2, #48	; 0x30
 8006850:	d0fa      	beq.n	8006848 <_dtoa_r+0xb98>
 8006852:	e6dd      	b.n	8006610 <_dtoa_r+0x960>
 8006854:	9a00      	ldr	r2, [sp, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d189      	bne.n	800676e <_dtoa_r+0xabe>
 800685a:	f10b 0b01 	add.w	fp, fp, #1
 800685e:	2331      	movs	r3, #49	; 0x31
 8006860:	e796      	b.n	8006790 <_dtoa_r+0xae0>
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <_dtoa_r+0xbdc>)
 8006864:	f7ff ba99 	b.w	8005d9a <_dtoa_r+0xea>
 8006868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800686a:	2b00      	cmp	r3, #0
 800686c:	f47f aa6d 	bne.w	8005d4a <_dtoa_r+0x9a>
 8006870:	4b07      	ldr	r3, [pc, #28]	; (8006890 <_dtoa_r+0xbe0>)
 8006872:	f7ff ba92 	b.w	8005d9a <_dtoa_r+0xea>
 8006876:	9b01      	ldr	r3, [sp, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	dcb5      	bgt.n	80067e8 <_dtoa_r+0xb38>
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	2b02      	cmp	r3, #2
 8006880:	f73f aeb1 	bgt.w	80065e6 <_dtoa_r+0x936>
 8006884:	e7b0      	b.n	80067e8 <_dtoa_r+0xb38>
 8006886:	bf00      	nop
 8006888:	08008194 	.word	0x08008194
 800688c:	080080f4 	.word	0x080080f4
 8006890:	08008118 	.word	0x08008118

08006894 <_free_r>:
 8006894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006896:	2900      	cmp	r1, #0
 8006898:	d044      	beq.n	8006924 <_free_r+0x90>
 800689a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800689e:	9001      	str	r0, [sp, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f1a1 0404 	sub.w	r4, r1, #4
 80068a6:	bfb8      	it	lt
 80068a8:	18e4      	addlt	r4, r4, r3
 80068aa:	f000 f8e7 	bl	8006a7c <__malloc_lock>
 80068ae:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <_free_r+0x94>)
 80068b0:	9801      	ldr	r0, [sp, #4]
 80068b2:	6813      	ldr	r3, [r2, #0]
 80068b4:	b933      	cbnz	r3, 80068c4 <_free_r+0x30>
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	6014      	str	r4, [r2, #0]
 80068ba:	b003      	add	sp, #12
 80068bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c0:	f000 b8e2 	b.w	8006a88 <__malloc_unlock>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d908      	bls.n	80068da <_free_r+0x46>
 80068c8:	6825      	ldr	r5, [r4, #0]
 80068ca:	1961      	adds	r1, r4, r5
 80068cc:	428b      	cmp	r3, r1
 80068ce:	bf01      	itttt	eq
 80068d0:	6819      	ldreq	r1, [r3, #0]
 80068d2:	685b      	ldreq	r3, [r3, #4]
 80068d4:	1949      	addeq	r1, r1, r5
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	e7ed      	b.n	80068b6 <_free_r+0x22>
 80068da:	461a      	mov	r2, r3
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b10b      	cbz	r3, 80068e4 <_free_r+0x50>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d9fa      	bls.n	80068da <_free_r+0x46>
 80068e4:	6811      	ldr	r1, [r2, #0]
 80068e6:	1855      	adds	r5, r2, r1
 80068e8:	42a5      	cmp	r5, r4
 80068ea:	d10b      	bne.n	8006904 <_free_r+0x70>
 80068ec:	6824      	ldr	r4, [r4, #0]
 80068ee:	4421      	add	r1, r4
 80068f0:	1854      	adds	r4, r2, r1
 80068f2:	42a3      	cmp	r3, r4
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	d1e0      	bne.n	80068ba <_free_r+0x26>
 80068f8:	681c      	ldr	r4, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	6053      	str	r3, [r2, #4]
 80068fe:	440c      	add	r4, r1
 8006900:	6014      	str	r4, [r2, #0]
 8006902:	e7da      	b.n	80068ba <_free_r+0x26>
 8006904:	d902      	bls.n	800690c <_free_r+0x78>
 8006906:	230c      	movs	r3, #12
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	e7d6      	b.n	80068ba <_free_r+0x26>
 800690c:	6825      	ldr	r5, [r4, #0]
 800690e:	1961      	adds	r1, r4, r5
 8006910:	428b      	cmp	r3, r1
 8006912:	bf04      	itt	eq
 8006914:	6819      	ldreq	r1, [r3, #0]
 8006916:	685b      	ldreq	r3, [r3, #4]
 8006918:	6063      	str	r3, [r4, #4]
 800691a:	bf04      	itt	eq
 800691c:	1949      	addeq	r1, r1, r5
 800691e:	6021      	streq	r1, [r4, #0]
 8006920:	6054      	str	r4, [r2, #4]
 8006922:	e7ca      	b.n	80068ba <_free_r+0x26>
 8006924:	b003      	add	sp, #12
 8006926:	bd30      	pop	{r4, r5, pc}
 8006928:	2000042c 	.word	0x2000042c

0800692c <malloc>:
 800692c:	4b02      	ldr	r3, [pc, #8]	; (8006938 <malloc+0xc>)
 800692e:	4601      	mov	r1, r0
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f000 b823 	b.w	800697c <_malloc_r>
 8006936:	bf00      	nop
 8006938:	20000064 	.word	0x20000064

0800693c <sbrk_aligned>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4e0e      	ldr	r6, [pc, #56]	; (8006978 <sbrk_aligned+0x3c>)
 8006940:	460c      	mov	r4, r1
 8006942:	6831      	ldr	r1, [r6, #0]
 8006944:	4605      	mov	r5, r0
 8006946:	b911      	cbnz	r1, 800694e <sbrk_aligned+0x12>
 8006948:	f000 fe40 	bl	80075cc <_sbrk_r>
 800694c:	6030      	str	r0, [r6, #0]
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f000 fe3b 	bl	80075cc <_sbrk_r>
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d00a      	beq.n	8006970 <sbrk_aligned+0x34>
 800695a:	1cc4      	adds	r4, r0, #3
 800695c:	f024 0403 	bic.w	r4, r4, #3
 8006960:	42a0      	cmp	r0, r4
 8006962:	d007      	beq.n	8006974 <sbrk_aligned+0x38>
 8006964:	1a21      	subs	r1, r4, r0
 8006966:	4628      	mov	r0, r5
 8006968:	f000 fe30 	bl	80075cc <_sbrk_r>
 800696c:	3001      	adds	r0, #1
 800696e:	d101      	bne.n	8006974 <sbrk_aligned+0x38>
 8006970:	f04f 34ff 	mov.w	r4, #4294967295
 8006974:	4620      	mov	r0, r4
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	20000430 	.word	0x20000430

0800697c <_malloc_r>:
 800697c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006980:	1ccd      	adds	r5, r1, #3
 8006982:	f025 0503 	bic.w	r5, r5, #3
 8006986:	3508      	adds	r5, #8
 8006988:	2d0c      	cmp	r5, #12
 800698a:	bf38      	it	cc
 800698c:	250c      	movcc	r5, #12
 800698e:	2d00      	cmp	r5, #0
 8006990:	4607      	mov	r7, r0
 8006992:	db01      	blt.n	8006998 <_malloc_r+0x1c>
 8006994:	42a9      	cmp	r1, r5
 8006996:	d905      	bls.n	80069a4 <_malloc_r+0x28>
 8006998:	230c      	movs	r3, #12
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	2600      	movs	r6, #0
 800699e:	4630      	mov	r0, r6
 80069a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a78 <_malloc_r+0xfc>
 80069a8:	f000 f868 	bl	8006a7c <__malloc_lock>
 80069ac:	f8d8 3000 	ldr.w	r3, [r8]
 80069b0:	461c      	mov	r4, r3
 80069b2:	bb5c      	cbnz	r4, 8006a0c <_malloc_r+0x90>
 80069b4:	4629      	mov	r1, r5
 80069b6:	4638      	mov	r0, r7
 80069b8:	f7ff ffc0 	bl	800693c <sbrk_aligned>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	4604      	mov	r4, r0
 80069c0:	d155      	bne.n	8006a6e <_malloc_r+0xf2>
 80069c2:	f8d8 4000 	ldr.w	r4, [r8]
 80069c6:	4626      	mov	r6, r4
 80069c8:	2e00      	cmp	r6, #0
 80069ca:	d145      	bne.n	8006a58 <_malloc_r+0xdc>
 80069cc:	2c00      	cmp	r4, #0
 80069ce:	d048      	beq.n	8006a62 <_malloc_r+0xe6>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	4631      	mov	r1, r6
 80069d4:	4638      	mov	r0, r7
 80069d6:	eb04 0903 	add.w	r9, r4, r3
 80069da:	f000 fdf7 	bl	80075cc <_sbrk_r>
 80069de:	4581      	cmp	r9, r0
 80069e0:	d13f      	bne.n	8006a62 <_malloc_r+0xe6>
 80069e2:	6821      	ldr	r1, [r4, #0]
 80069e4:	1a6d      	subs	r5, r5, r1
 80069e6:	4629      	mov	r1, r5
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7ff ffa7 	bl	800693c <sbrk_aligned>
 80069ee:	3001      	adds	r0, #1
 80069f0:	d037      	beq.n	8006a62 <_malloc_r+0xe6>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	442b      	add	r3, r5
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	f8d8 3000 	ldr.w	r3, [r8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d038      	beq.n	8006a72 <_malloc_r+0xf6>
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	42a2      	cmp	r2, r4
 8006a04:	d12b      	bne.n	8006a5e <_malloc_r+0xe2>
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]
 8006a0a:	e00f      	b.n	8006a2c <_malloc_r+0xb0>
 8006a0c:	6822      	ldr	r2, [r4, #0]
 8006a0e:	1b52      	subs	r2, r2, r5
 8006a10:	d41f      	bmi.n	8006a52 <_malloc_r+0xd6>
 8006a12:	2a0b      	cmp	r2, #11
 8006a14:	d917      	bls.n	8006a46 <_malloc_r+0xca>
 8006a16:	1961      	adds	r1, r4, r5
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	6025      	str	r5, [r4, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	6059      	strne	r1, [r3, #4]
 8006a20:	6863      	ldr	r3, [r4, #4]
 8006a22:	bf08      	it	eq
 8006a24:	f8c8 1000 	streq.w	r1, [r8]
 8006a28:	5162      	str	r2, [r4, r5]
 8006a2a:	604b      	str	r3, [r1, #4]
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f104 060b 	add.w	r6, r4, #11
 8006a32:	f000 f829 	bl	8006a88 <__malloc_unlock>
 8006a36:	f026 0607 	bic.w	r6, r6, #7
 8006a3a:	1d23      	adds	r3, r4, #4
 8006a3c:	1af2      	subs	r2, r6, r3
 8006a3e:	d0ae      	beq.n	800699e <_malloc_r+0x22>
 8006a40:	1b9b      	subs	r3, r3, r6
 8006a42:	50a3      	str	r3, [r4, r2]
 8006a44:	e7ab      	b.n	800699e <_malloc_r+0x22>
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	6862      	ldr	r2, [r4, #4]
 8006a4a:	d1dd      	bne.n	8006a08 <_malloc_r+0x8c>
 8006a4c:	f8c8 2000 	str.w	r2, [r8]
 8006a50:	e7ec      	b.n	8006a2c <_malloc_r+0xb0>
 8006a52:	4623      	mov	r3, r4
 8006a54:	6864      	ldr	r4, [r4, #4]
 8006a56:	e7ac      	b.n	80069b2 <_malloc_r+0x36>
 8006a58:	4634      	mov	r4, r6
 8006a5a:	6876      	ldr	r6, [r6, #4]
 8006a5c:	e7b4      	b.n	80069c8 <_malloc_r+0x4c>
 8006a5e:	4613      	mov	r3, r2
 8006a60:	e7cc      	b.n	80069fc <_malloc_r+0x80>
 8006a62:	230c      	movs	r3, #12
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	4638      	mov	r0, r7
 8006a68:	f000 f80e 	bl	8006a88 <__malloc_unlock>
 8006a6c:	e797      	b.n	800699e <_malloc_r+0x22>
 8006a6e:	6025      	str	r5, [r4, #0]
 8006a70:	e7dc      	b.n	8006a2c <_malloc_r+0xb0>
 8006a72:	605b      	str	r3, [r3, #4]
 8006a74:	deff      	udf	#255	; 0xff
 8006a76:	bf00      	nop
 8006a78:	2000042c 	.word	0x2000042c

08006a7c <__malloc_lock>:
 8006a7c:	4801      	ldr	r0, [pc, #4]	; (8006a84 <__malloc_lock+0x8>)
 8006a7e:	f7ff b87c 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 8006a82:	bf00      	nop
 8006a84:	20000428 	.word	0x20000428

08006a88 <__malloc_unlock>:
 8006a88:	4801      	ldr	r0, [pc, #4]	; (8006a90 <__malloc_unlock+0x8>)
 8006a8a:	f7ff b877 	b.w	8005b7c <__retarget_lock_release_recursive>
 8006a8e:	bf00      	nop
 8006a90:	20000428 	.word	0x20000428

08006a94 <_Balloc>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	69c6      	ldr	r6, [r0, #28]
 8006a98:	4604      	mov	r4, r0
 8006a9a:	460d      	mov	r5, r1
 8006a9c:	b976      	cbnz	r6, 8006abc <_Balloc+0x28>
 8006a9e:	2010      	movs	r0, #16
 8006aa0:	f7ff ff44 	bl	800692c <malloc>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	61e0      	str	r0, [r4, #28]
 8006aa8:	b920      	cbnz	r0, 8006ab4 <_Balloc+0x20>
 8006aaa:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <_Balloc+0x78>)
 8006aac:	4818      	ldr	r0, [pc, #96]	; (8006b10 <_Balloc+0x7c>)
 8006aae:	216b      	movs	r1, #107	; 0x6b
 8006ab0:	f000 fd9c 	bl	80075ec <__assert_func>
 8006ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ab8:	6006      	str	r6, [r0, #0]
 8006aba:	60c6      	str	r6, [r0, #12]
 8006abc:	69e6      	ldr	r6, [r4, #28]
 8006abe:	68f3      	ldr	r3, [r6, #12]
 8006ac0:	b183      	cbz	r3, 8006ae4 <_Balloc+0x50>
 8006ac2:	69e3      	ldr	r3, [r4, #28]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006aca:	b9b8      	cbnz	r0, 8006afc <_Balloc+0x68>
 8006acc:	2101      	movs	r1, #1
 8006ace:	fa01 f605 	lsl.w	r6, r1, r5
 8006ad2:	1d72      	adds	r2, r6, #5
 8006ad4:	0092      	lsls	r2, r2, #2
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f000 fda6 	bl	8007628 <_calloc_r>
 8006adc:	b160      	cbz	r0, 8006af8 <_Balloc+0x64>
 8006ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ae2:	e00e      	b.n	8006b02 <_Balloc+0x6e>
 8006ae4:	2221      	movs	r2, #33	; 0x21
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fd9d 	bl	8007628 <_calloc_r>
 8006aee:	69e3      	ldr	r3, [r4, #28]
 8006af0:	60f0      	str	r0, [r6, #12]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e4      	bne.n	8006ac2 <_Balloc+0x2e>
 8006af8:	2000      	movs	r0, #0
 8006afa:	bd70      	pop	{r4, r5, r6, pc}
 8006afc:	6802      	ldr	r2, [r0, #0]
 8006afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b02:	2300      	movs	r3, #0
 8006b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b08:	e7f7      	b.n	8006afa <_Balloc+0x66>
 8006b0a:	bf00      	nop
 8006b0c:	08008125 	.word	0x08008125
 8006b10:	080081a5 	.word	0x080081a5

08006b14 <_Bfree>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	69c6      	ldr	r6, [r0, #28]
 8006b18:	4605      	mov	r5, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	b976      	cbnz	r6, 8006b3c <_Bfree+0x28>
 8006b1e:	2010      	movs	r0, #16
 8006b20:	f7ff ff04 	bl	800692c <malloc>
 8006b24:	4602      	mov	r2, r0
 8006b26:	61e8      	str	r0, [r5, #28]
 8006b28:	b920      	cbnz	r0, 8006b34 <_Bfree+0x20>
 8006b2a:	4b09      	ldr	r3, [pc, #36]	; (8006b50 <_Bfree+0x3c>)
 8006b2c:	4809      	ldr	r0, [pc, #36]	; (8006b54 <_Bfree+0x40>)
 8006b2e:	218f      	movs	r1, #143	; 0x8f
 8006b30:	f000 fd5c 	bl	80075ec <__assert_func>
 8006b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b38:	6006      	str	r6, [r0, #0]
 8006b3a:	60c6      	str	r6, [r0, #12]
 8006b3c:	b13c      	cbz	r4, 8006b4e <_Bfree+0x3a>
 8006b3e:	69eb      	ldr	r3, [r5, #28]
 8006b40:	6862      	ldr	r2, [r4, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b48:	6021      	str	r1, [r4, #0]
 8006b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	08008125 	.word	0x08008125
 8006b54:	080081a5 	.word	0x080081a5

08006b58 <__multadd>:
 8006b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5c:	690d      	ldr	r5, [r1, #16]
 8006b5e:	4607      	mov	r7, r0
 8006b60:	460c      	mov	r4, r1
 8006b62:	461e      	mov	r6, r3
 8006b64:	f101 0c14 	add.w	ip, r1, #20
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f8dc 3000 	ldr.w	r3, [ip]
 8006b6e:	b299      	uxth	r1, r3
 8006b70:	fb02 6101 	mla	r1, r2, r1, r6
 8006b74:	0c1e      	lsrs	r6, r3, #16
 8006b76:	0c0b      	lsrs	r3, r1, #16
 8006b78:	fb02 3306 	mla	r3, r2, r6, r3
 8006b7c:	b289      	uxth	r1, r1
 8006b7e:	3001      	adds	r0, #1
 8006b80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b84:	4285      	cmp	r5, r0
 8006b86:	f84c 1b04 	str.w	r1, [ip], #4
 8006b8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b8e:	dcec      	bgt.n	8006b6a <__multadd+0x12>
 8006b90:	b30e      	cbz	r6, 8006bd6 <__multadd+0x7e>
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	42ab      	cmp	r3, r5
 8006b96:	dc19      	bgt.n	8006bcc <__multadd+0x74>
 8006b98:	6861      	ldr	r1, [r4, #4]
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	3101      	adds	r1, #1
 8006b9e:	f7ff ff79 	bl	8006a94 <_Balloc>
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	b928      	cbnz	r0, 8006bb2 <__multadd+0x5a>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <__multadd+0x84>)
 8006baa:	480d      	ldr	r0, [pc, #52]	; (8006be0 <__multadd+0x88>)
 8006bac:	21ba      	movs	r1, #186	; 0xba
 8006bae:	f000 fd1d 	bl	80075ec <__assert_func>
 8006bb2:	6922      	ldr	r2, [r4, #16]
 8006bb4:	3202      	adds	r2, #2
 8006bb6:	f104 010c 	add.w	r1, r4, #12
 8006bba:	0092      	lsls	r2, r2, #2
 8006bbc:	300c      	adds	r0, #12
 8006bbe:	f7fe ffde 	bl	8005b7e <memcpy>
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f7ff ffa5 	bl	8006b14 <_Bfree>
 8006bca:	4644      	mov	r4, r8
 8006bcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	615e      	str	r6, [r3, #20]
 8006bd4:	6125      	str	r5, [r4, #16]
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bdc:	08008194 	.word	0x08008194
 8006be0:	080081a5 	.word	0x080081a5

08006be4 <__hi0bits>:
 8006be4:	0c03      	lsrs	r3, r0, #16
 8006be6:	041b      	lsls	r3, r3, #16
 8006be8:	b9d3      	cbnz	r3, 8006c20 <__hi0bits+0x3c>
 8006bea:	0400      	lsls	r0, r0, #16
 8006bec:	2310      	movs	r3, #16
 8006bee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006bf2:	bf04      	itt	eq
 8006bf4:	0200      	lsleq	r0, r0, #8
 8006bf6:	3308      	addeq	r3, #8
 8006bf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006bfc:	bf04      	itt	eq
 8006bfe:	0100      	lsleq	r0, r0, #4
 8006c00:	3304      	addeq	r3, #4
 8006c02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c06:	bf04      	itt	eq
 8006c08:	0080      	lsleq	r0, r0, #2
 8006c0a:	3302      	addeq	r3, #2
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	db05      	blt.n	8006c1c <__hi0bits+0x38>
 8006c10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c14:	f103 0301 	add.w	r3, r3, #1
 8006c18:	bf08      	it	eq
 8006c1a:	2320      	moveq	r3, #32
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	4770      	bx	lr
 8006c20:	2300      	movs	r3, #0
 8006c22:	e7e4      	b.n	8006bee <__hi0bits+0xa>

08006c24 <__lo0bits>:
 8006c24:	6803      	ldr	r3, [r0, #0]
 8006c26:	f013 0207 	ands.w	r2, r3, #7
 8006c2a:	d00c      	beq.n	8006c46 <__lo0bits+0x22>
 8006c2c:	07d9      	lsls	r1, r3, #31
 8006c2e:	d422      	bmi.n	8006c76 <__lo0bits+0x52>
 8006c30:	079a      	lsls	r2, r3, #30
 8006c32:	bf49      	itett	mi
 8006c34:	085b      	lsrmi	r3, r3, #1
 8006c36:	089b      	lsrpl	r3, r3, #2
 8006c38:	6003      	strmi	r3, [r0, #0]
 8006c3a:	2201      	movmi	r2, #1
 8006c3c:	bf5c      	itt	pl
 8006c3e:	6003      	strpl	r3, [r0, #0]
 8006c40:	2202      	movpl	r2, #2
 8006c42:	4610      	mov	r0, r2
 8006c44:	4770      	bx	lr
 8006c46:	b299      	uxth	r1, r3
 8006c48:	b909      	cbnz	r1, 8006c4e <__lo0bits+0x2a>
 8006c4a:	0c1b      	lsrs	r3, r3, #16
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	b2d9      	uxtb	r1, r3
 8006c50:	b909      	cbnz	r1, 8006c56 <__lo0bits+0x32>
 8006c52:	3208      	adds	r2, #8
 8006c54:	0a1b      	lsrs	r3, r3, #8
 8006c56:	0719      	lsls	r1, r3, #28
 8006c58:	bf04      	itt	eq
 8006c5a:	091b      	lsreq	r3, r3, #4
 8006c5c:	3204      	addeq	r2, #4
 8006c5e:	0799      	lsls	r1, r3, #30
 8006c60:	bf04      	itt	eq
 8006c62:	089b      	lsreq	r3, r3, #2
 8006c64:	3202      	addeq	r2, #2
 8006c66:	07d9      	lsls	r1, r3, #31
 8006c68:	d403      	bmi.n	8006c72 <__lo0bits+0x4e>
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	f102 0201 	add.w	r2, r2, #1
 8006c70:	d003      	beq.n	8006c7a <__lo0bits+0x56>
 8006c72:	6003      	str	r3, [r0, #0]
 8006c74:	e7e5      	b.n	8006c42 <__lo0bits+0x1e>
 8006c76:	2200      	movs	r2, #0
 8006c78:	e7e3      	b.n	8006c42 <__lo0bits+0x1e>
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	e7e1      	b.n	8006c42 <__lo0bits+0x1e>
	...

08006c80 <__i2b>:
 8006c80:	b510      	push	{r4, lr}
 8006c82:	460c      	mov	r4, r1
 8006c84:	2101      	movs	r1, #1
 8006c86:	f7ff ff05 	bl	8006a94 <_Balloc>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	b928      	cbnz	r0, 8006c9a <__i2b+0x1a>
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <__i2b+0x24>)
 8006c90:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <__i2b+0x28>)
 8006c92:	f240 1145 	movw	r1, #325	; 0x145
 8006c96:	f000 fca9 	bl	80075ec <__assert_func>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	6144      	str	r4, [r0, #20]
 8006c9e:	6103      	str	r3, [r0, #16]
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	bf00      	nop
 8006ca4:	08008194 	.word	0x08008194
 8006ca8:	080081a5 	.word	0x080081a5

08006cac <__multiply>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	4691      	mov	r9, r2
 8006cb2:	690a      	ldr	r2, [r1, #16]
 8006cb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	bfb8      	it	lt
 8006cbc:	460b      	movlt	r3, r1
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	bfbc      	itt	lt
 8006cc2:	464c      	movlt	r4, r9
 8006cc4:	4699      	movlt	r9, r3
 8006cc6:	6927      	ldr	r7, [r4, #16]
 8006cc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ccc:	68a3      	ldr	r3, [r4, #8]
 8006cce:	6861      	ldr	r1, [r4, #4]
 8006cd0:	eb07 060a 	add.w	r6, r7, sl
 8006cd4:	42b3      	cmp	r3, r6
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	bfb8      	it	lt
 8006cda:	3101      	addlt	r1, #1
 8006cdc:	f7ff feda 	bl	8006a94 <_Balloc>
 8006ce0:	b930      	cbnz	r0, 8006cf0 <__multiply+0x44>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	4b44      	ldr	r3, [pc, #272]	; (8006df8 <__multiply+0x14c>)
 8006ce6:	4845      	ldr	r0, [pc, #276]	; (8006dfc <__multiply+0x150>)
 8006ce8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006cec:	f000 fc7e 	bl	80075ec <__assert_func>
 8006cf0:	f100 0514 	add.w	r5, r0, #20
 8006cf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4543      	cmp	r3, r8
 8006cfe:	d321      	bcc.n	8006d44 <__multiply+0x98>
 8006d00:	f104 0314 	add.w	r3, r4, #20
 8006d04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d08:	f109 0314 	add.w	r3, r9, #20
 8006d0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d10:	9202      	str	r2, [sp, #8]
 8006d12:	1b3a      	subs	r2, r7, r4
 8006d14:	3a15      	subs	r2, #21
 8006d16:	f022 0203 	bic.w	r2, r2, #3
 8006d1a:	3204      	adds	r2, #4
 8006d1c:	f104 0115 	add.w	r1, r4, #21
 8006d20:	428f      	cmp	r7, r1
 8006d22:	bf38      	it	cc
 8006d24:	2204      	movcc	r2, #4
 8006d26:	9201      	str	r2, [sp, #4]
 8006d28:	9a02      	ldr	r2, [sp, #8]
 8006d2a:	9303      	str	r3, [sp, #12]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d80c      	bhi.n	8006d4a <__multiply+0x9e>
 8006d30:	2e00      	cmp	r6, #0
 8006d32:	dd03      	ble.n	8006d3c <__multiply+0x90>
 8006d34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d05b      	beq.n	8006df4 <__multiply+0x148>
 8006d3c:	6106      	str	r6, [r0, #16]
 8006d3e:	b005      	add	sp, #20
 8006d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d44:	f843 2b04 	str.w	r2, [r3], #4
 8006d48:	e7d8      	b.n	8006cfc <__multiply+0x50>
 8006d4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d4e:	f1ba 0f00 	cmp.w	sl, #0
 8006d52:	d024      	beq.n	8006d9e <__multiply+0xf2>
 8006d54:	f104 0e14 	add.w	lr, r4, #20
 8006d58:	46a9      	mov	r9, r5
 8006d5a:	f04f 0c00 	mov.w	ip, #0
 8006d5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d62:	f8d9 1000 	ldr.w	r1, [r9]
 8006d66:	fa1f fb82 	uxth.w	fp, r2
 8006d6a:	b289      	uxth	r1, r1
 8006d6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d74:	f8d9 2000 	ldr.w	r2, [r9]
 8006d78:	4461      	add	r1, ip
 8006d7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d86:	b289      	uxth	r1, r1
 8006d88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d8c:	4577      	cmp	r7, lr
 8006d8e:	f849 1b04 	str.w	r1, [r9], #4
 8006d92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d96:	d8e2      	bhi.n	8006d5e <__multiply+0xb2>
 8006d98:	9a01      	ldr	r2, [sp, #4]
 8006d9a:	f845 c002 	str.w	ip, [r5, r2]
 8006d9e:	9a03      	ldr	r2, [sp, #12]
 8006da0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006da4:	3304      	adds	r3, #4
 8006da6:	f1b9 0f00 	cmp.w	r9, #0
 8006daa:	d021      	beq.n	8006df0 <__multiply+0x144>
 8006dac:	6829      	ldr	r1, [r5, #0]
 8006dae:	f104 0c14 	add.w	ip, r4, #20
 8006db2:	46ae      	mov	lr, r5
 8006db4:	f04f 0a00 	mov.w	sl, #0
 8006db8:	f8bc b000 	ldrh.w	fp, [ip]
 8006dbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006dc0:	fb09 220b 	mla	r2, r9, fp, r2
 8006dc4:	4452      	add	r2, sl
 8006dc6:	b289      	uxth	r1, r1
 8006dc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dcc:	f84e 1b04 	str.w	r1, [lr], #4
 8006dd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006dd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006dd8:	f8be 1000 	ldrh.w	r1, [lr]
 8006ddc:	fb09 110a 	mla	r1, r9, sl, r1
 8006de0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006de4:	4567      	cmp	r7, ip
 8006de6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006dea:	d8e5      	bhi.n	8006db8 <__multiply+0x10c>
 8006dec:	9a01      	ldr	r2, [sp, #4]
 8006dee:	50a9      	str	r1, [r5, r2]
 8006df0:	3504      	adds	r5, #4
 8006df2:	e799      	b.n	8006d28 <__multiply+0x7c>
 8006df4:	3e01      	subs	r6, #1
 8006df6:	e79b      	b.n	8006d30 <__multiply+0x84>
 8006df8:	08008194 	.word	0x08008194
 8006dfc:	080081a5 	.word	0x080081a5

08006e00 <__pow5mult>:
 8006e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e04:	4615      	mov	r5, r2
 8006e06:	f012 0203 	ands.w	r2, r2, #3
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	460f      	mov	r7, r1
 8006e0e:	d007      	beq.n	8006e20 <__pow5mult+0x20>
 8006e10:	4c25      	ldr	r4, [pc, #148]	; (8006ea8 <__pow5mult+0xa8>)
 8006e12:	3a01      	subs	r2, #1
 8006e14:	2300      	movs	r3, #0
 8006e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e1a:	f7ff fe9d 	bl	8006b58 <__multadd>
 8006e1e:	4607      	mov	r7, r0
 8006e20:	10ad      	asrs	r5, r5, #2
 8006e22:	d03d      	beq.n	8006ea0 <__pow5mult+0xa0>
 8006e24:	69f4      	ldr	r4, [r6, #28]
 8006e26:	b97c      	cbnz	r4, 8006e48 <__pow5mult+0x48>
 8006e28:	2010      	movs	r0, #16
 8006e2a:	f7ff fd7f 	bl	800692c <malloc>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	61f0      	str	r0, [r6, #28]
 8006e32:	b928      	cbnz	r0, 8006e40 <__pow5mult+0x40>
 8006e34:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <__pow5mult+0xac>)
 8006e36:	481e      	ldr	r0, [pc, #120]	; (8006eb0 <__pow5mult+0xb0>)
 8006e38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006e3c:	f000 fbd6 	bl	80075ec <__assert_func>
 8006e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e44:	6004      	str	r4, [r0, #0]
 8006e46:	60c4      	str	r4, [r0, #12]
 8006e48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e50:	b94c      	cbnz	r4, 8006e66 <__pow5mult+0x66>
 8006e52:	f240 2171 	movw	r1, #625	; 0x271
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7ff ff12 	bl	8006c80 <__i2b>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e62:	4604      	mov	r4, r0
 8006e64:	6003      	str	r3, [r0, #0]
 8006e66:	f04f 0900 	mov.w	r9, #0
 8006e6a:	07eb      	lsls	r3, r5, #31
 8006e6c:	d50a      	bpl.n	8006e84 <__pow5mult+0x84>
 8006e6e:	4639      	mov	r1, r7
 8006e70:	4622      	mov	r2, r4
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ff1a 	bl	8006cac <__multiply>
 8006e78:	4639      	mov	r1, r7
 8006e7a:	4680      	mov	r8, r0
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff fe49 	bl	8006b14 <_Bfree>
 8006e82:	4647      	mov	r7, r8
 8006e84:	106d      	asrs	r5, r5, #1
 8006e86:	d00b      	beq.n	8006ea0 <__pow5mult+0xa0>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	b938      	cbnz	r0, 8006e9c <__pow5mult+0x9c>
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ff0b 	bl	8006cac <__multiply>
 8006e96:	6020      	str	r0, [r4, #0]
 8006e98:	f8c0 9000 	str.w	r9, [r0]
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	e7e4      	b.n	8006e6a <__pow5mult+0x6a>
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ea6:	bf00      	nop
 8006ea8:	080082f0 	.word	0x080082f0
 8006eac:	08008125 	.word	0x08008125
 8006eb0:	080081a5 	.word	0x080081a5

08006eb4 <__lshift>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	460c      	mov	r4, r1
 8006eba:	6849      	ldr	r1, [r1, #4]
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ec2:	68a3      	ldr	r3, [r4, #8]
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	4691      	mov	r9, r2
 8006ec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ecc:	f108 0601 	add.w	r6, r8, #1
 8006ed0:	42b3      	cmp	r3, r6
 8006ed2:	db0b      	blt.n	8006eec <__lshift+0x38>
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff fddd 	bl	8006a94 <_Balloc>
 8006eda:	4605      	mov	r5, r0
 8006edc:	b948      	cbnz	r0, 8006ef2 <__lshift+0x3e>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <__lshift+0xd0>)
 8006ee2:	4829      	ldr	r0, [pc, #164]	; (8006f88 <__lshift+0xd4>)
 8006ee4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006ee8:	f000 fb80 	bl	80075ec <__assert_func>
 8006eec:	3101      	adds	r1, #1
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	e7ee      	b.n	8006ed0 <__lshift+0x1c>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f100 0114 	add.w	r1, r0, #20
 8006ef8:	f100 0210 	add.w	r2, r0, #16
 8006efc:	4618      	mov	r0, r3
 8006efe:	4553      	cmp	r3, sl
 8006f00:	db33      	blt.n	8006f6a <__lshift+0xb6>
 8006f02:	6920      	ldr	r0, [r4, #16]
 8006f04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f08:	f104 0314 	add.w	r3, r4, #20
 8006f0c:	f019 091f 	ands.w	r9, r9, #31
 8006f10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f18:	d02b      	beq.n	8006f72 <__lshift+0xbe>
 8006f1a:	f1c9 0e20 	rsb	lr, r9, #32
 8006f1e:	468a      	mov	sl, r1
 8006f20:	2200      	movs	r2, #0
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	fa00 f009 	lsl.w	r0, r0, r9
 8006f28:	4310      	orrs	r0, r2
 8006f2a:	f84a 0b04 	str.w	r0, [sl], #4
 8006f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f32:	459c      	cmp	ip, r3
 8006f34:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f38:	d8f3      	bhi.n	8006f22 <__lshift+0x6e>
 8006f3a:	ebac 0304 	sub.w	r3, ip, r4
 8006f3e:	3b15      	subs	r3, #21
 8006f40:	f023 0303 	bic.w	r3, r3, #3
 8006f44:	3304      	adds	r3, #4
 8006f46:	f104 0015 	add.w	r0, r4, #21
 8006f4a:	4584      	cmp	ip, r0
 8006f4c:	bf38      	it	cc
 8006f4e:	2304      	movcc	r3, #4
 8006f50:	50ca      	str	r2, [r1, r3]
 8006f52:	b10a      	cbz	r2, 8006f58 <__lshift+0xa4>
 8006f54:	f108 0602 	add.w	r6, r8, #2
 8006f58:	3e01      	subs	r6, #1
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	612e      	str	r6, [r5, #16]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	f7ff fdd8 	bl	8006b14 <_Bfree>
 8006f64:	4628      	mov	r0, r5
 8006f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f6e:	3301      	adds	r3, #1
 8006f70:	e7c5      	b.n	8006efe <__lshift+0x4a>
 8006f72:	3904      	subs	r1, #4
 8006f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f78:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f7c:	459c      	cmp	ip, r3
 8006f7e:	d8f9      	bhi.n	8006f74 <__lshift+0xc0>
 8006f80:	e7ea      	b.n	8006f58 <__lshift+0xa4>
 8006f82:	bf00      	nop
 8006f84:	08008194 	.word	0x08008194
 8006f88:	080081a5 	.word	0x080081a5

08006f8c <__mcmp>:
 8006f8c:	b530      	push	{r4, r5, lr}
 8006f8e:	6902      	ldr	r2, [r0, #16]
 8006f90:	690c      	ldr	r4, [r1, #16]
 8006f92:	1b12      	subs	r2, r2, r4
 8006f94:	d10e      	bne.n	8006fb4 <__mcmp+0x28>
 8006f96:	f100 0314 	add.w	r3, r0, #20
 8006f9a:	3114      	adds	r1, #20
 8006f9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006fa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006fa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006fa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006fac:	42a5      	cmp	r5, r4
 8006fae:	d003      	beq.n	8006fb8 <__mcmp+0x2c>
 8006fb0:	d305      	bcc.n	8006fbe <__mcmp+0x32>
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	bd30      	pop	{r4, r5, pc}
 8006fb8:	4283      	cmp	r3, r0
 8006fba:	d3f3      	bcc.n	8006fa4 <__mcmp+0x18>
 8006fbc:	e7fa      	b.n	8006fb4 <__mcmp+0x28>
 8006fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc2:	e7f7      	b.n	8006fb4 <__mcmp+0x28>

08006fc4 <__mdiff>:
 8006fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	460c      	mov	r4, r1
 8006fca:	4606      	mov	r6, r0
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4620      	mov	r0, r4
 8006fd0:	4690      	mov	r8, r2
 8006fd2:	f7ff ffdb 	bl	8006f8c <__mcmp>
 8006fd6:	1e05      	subs	r5, r0, #0
 8006fd8:	d110      	bne.n	8006ffc <__mdiff+0x38>
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff fd59 	bl	8006a94 <_Balloc>
 8006fe2:	b930      	cbnz	r0, 8006ff2 <__mdiff+0x2e>
 8006fe4:	4b3a      	ldr	r3, [pc, #232]	; (80070d0 <__mdiff+0x10c>)
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	f240 2137 	movw	r1, #567	; 0x237
 8006fec:	4839      	ldr	r0, [pc, #228]	; (80070d4 <__mdiff+0x110>)
 8006fee:	f000 fafd 	bl	80075ec <__assert_func>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffc:	bfa4      	itt	ge
 8006ffe:	4643      	movge	r3, r8
 8007000:	46a0      	movge	r8, r4
 8007002:	4630      	mov	r0, r6
 8007004:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007008:	bfa6      	itte	ge
 800700a:	461c      	movge	r4, r3
 800700c:	2500      	movge	r5, #0
 800700e:	2501      	movlt	r5, #1
 8007010:	f7ff fd40 	bl	8006a94 <_Balloc>
 8007014:	b920      	cbnz	r0, 8007020 <__mdiff+0x5c>
 8007016:	4b2e      	ldr	r3, [pc, #184]	; (80070d0 <__mdiff+0x10c>)
 8007018:	4602      	mov	r2, r0
 800701a:	f240 2145 	movw	r1, #581	; 0x245
 800701e:	e7e5      	b.n	8006fec <__mdiff+0x28>
 8007020:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007024:	6926      	ldr	r6, [r4, #16]
 8007026:	60c5      	str	r5, [r0, #12]
 8007028:	f104 0914 	add.w	r9, r4, #20
 800702c:	f108 0514 	add.w	r5, r8, #20
 8007030:	f100 0e14 	add.w	lr, r0, #20
 8007034:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007038:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800703c:	f108 0210 	add.w	r2, r8, #16
 8007040:	46f2      	mov	sl, lr
 8007042:	2100      	movs	r1, #0
 8007044:	f859 3b04 	ldr.w	r3, [r9], #4
 8007048:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800704c:	fa11 f88b 	uxtah	r8, r1, fp
 8007050:	b299      	uxth	r1, r3
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	eba8 0801 	sub.w	r8, r8, r1
 8007058:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800705c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007060:	fa1f f888 	uxth.w	r8, r8
 8007064:	1419      	asrs	r1, r3, #16
 8007066:	454e      	cmp	r6, r9
 8007068:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800706c:	f84a 3b04 	str.w	r3, [sl], #4
 8007070:	d8e8      	bhi.n	8007044 <__mdiff+0x80>
 8007072:	1b33      	subs	r3, r6, r4
 8007074:	3b15      	subs	r3, #21
 8007076:	f023 0303 	bic.w	r3, r3, #3
 800707a:	3304      	adds	r3, #4
 800707c:	3415      	adds	r4, #21
 800707e:	42a6      	cmp	r6, r4
 8007080:	bf38      	it	cc
 8007082:	2304      	movcc	r3, #4
 8007084:	441d      	add	r5, r3
 8007086:	4473      	add	r3, lr
 8007088:	469e      	mov	lr, r3
 800708a:	462e      	mov	r6, r5
 800708c:	4566      	cmp	r6, ip
 800708e:	d30e      	bcc.n	80070ae <__mdiff+0xea>
 8007090:	f10c 0203 	add.w	r2, ip, #3
 8007094:	1b52      	subs	r2, r2, r5
 8007096:	f022 0203 	bic.w	r2, r2, #3
 800709a:	3d03      	subs	r5, #3
 800709c:	45ac      	cmp	ip, r5
 800709e:	bf38      	it	cc
 80070a0:	2200      	movcc	r2, #0
 80070a2:	4413      	add	r3, r2
 80070a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80070a8:	b17a      	cbz	r2, 80070ca <__mdiff+0x106>
 80070aa:	6107      	str	r7, [r0, #16]
 80070ac:	e7a4      	b.n	8006ff8 <__mdiff+0x34>
 80070ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80070b2:	fa11 f288 	uxtah	r2, r1, r8
 80070b6:	1414      	asrs	r4, r2, #16
 80070b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80070bc:	b292      	uxth	r2, r2
 80070be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80070c2:	f84e 2b04 	str.w	r2, [lr], #4
 80070c6:	1421      	asrs	r1, r4, #16
 80070c8:	e7e0      	b.n	800708c <__mdiff+0xc8>
 80070ca:	3f01      	subs	r7, #1
 80070cc:	e7ea      	b.n	80070a4 <__mdiff+0xe0>
 80070ce:	bf00      	nop
 80070d0:	08008194 	.word	0x08008194
 80070d4:	080081a5 	.word	0x080081a5

080070d8 <__d2b>:
 80070d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070dc:	460f      	mov	r7, r1
 80070de:	2101      	movs	r1, #1
 80070e0:	ec59 8b10 	vmov	r8, r9, d0
 80070e4:	4616      	mov	r6, r2
 80070e6:	f7ff fcd5 	bl	8006a94 <_Balloc>
 80070ea:	4604      	mov	r4, r0
 80070ec:	b930      	cbnz	r0, 80070fc <__d2b+0x24>
 80070ee:	4602      	mov	r2, r0
 80070f0:	4b24      	ldr	r3, [pc, #144]	; (8007184 <__d2b+0xac>)
 80070f2:	4825      	ldr	r0, [pc, #148]	; (8007188 <__d2b+0xb0>)
 80070f4:	f240 310f 	movw	r1, #783	; 0x30f
 80070f8:	f000 fa78 	bl	80075ec <__assert_func>
 80070fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007104:	bb2d      	cbnz	r5, 8007152 <__d2b+0x7a>
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	f1b8 0300 	subs.w	r3, r8, #0
 800710c:	d026      	beq.n	800715c <__d2b+0x84>
 800710e:	4668      	mov	r0, sp
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	f7ff fd87 	bl	8006c24 <__lo0bits>
 8007116:	e9dd 1200 	ldrd	r1, r2, [sp]
 800711a:	b1e8      	cbz	r0, 8007158 <__d2b+0x80>
 800711c:	f1c0 0320 	rsb	r3, r0, #32
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	430b      	orrs	r3, r1
 8007126:	40c2      	lsrs	r2, r0
 8007128:	6163      	str	r3, [r4, #20]
 800712a:	9201      	str	r2, [sp, #4]
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	61a3      	str	r3, [r4, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	bf14      	ite	ne
 8007134:	2202      	movne	r2, #2
 8007136:	2201      	moveq	r2, #1
 8007138:	6122      	str	r2, [r4, #16]
 800713a:	b1bd      	cbz	r5, 800716c <__d2b+0x94>
 800713c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007140:	4405      	add	r5, r0
 8007142:	603d      	str	r5, [r7, #0]
 8007144:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007148:	6030      	str	r0, [r6, #0]
 800714a:	4620      	mov	r0, r4
 800714c:	b003      	add	sp, #12
 800714e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007156:	e7d6      	b.n	8007106 <__d2b+0x2e>
 8007158:	6161      	str	r1, [r4, #20]
 800715a:	e7e7      	b.n	800712c <__d2b+0x54>
 800715c:	a801      	add	r0, sp, #4
 800715e:	f7ff fd61 	bl	8006c24 <__lo0bits>
 8007162:	9b01      	ldr	r3, [sp, #4]
 8007164:	6163      	str	r3, [r4, #20]
 8007166:	3020      	adds	r0, #32
 8007168:	2201      	movs	r2, #1
 800716a:	e7e5      	b.n	8007138 <__d2b+0x60>
 800716c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007174:	6038      	str	r0, [r7, #0]
 8007176:	6918      	ldr	r0, [r3, #16]
 8007178:	f7ff fd34 	bl	8006be4 <__hi0bits>
 800717c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007180:	e7e2      	b.n	8007148 <__d2b+0x70>
 8007182:	bf00      	nop
 8007184:	08008194 	.word	0x08008194
 8007188:	080081a5 	.word	0x080081a5

0800718c <__ssputs_r>:
 800718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	688e      	ldr	r6, [r1, #8]
 8007192:	461f      	mov	r7, r3
 8007194:	42be      	cmp	r6, r7
 8007196:	680b      	ldr	r3, [r1, #0]
 8007198:	4682      	mov	sl, r0
 800719a:	460c      	mov	r4, r1
 800719c:	4690      	mov	r8, r2
 800719e:	d82c      	bhi.n	80071fa <__ssputs_r+0x6e>
 80071a0:	898a      	ldrh	r2, [r1, #12]
 80071a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071a6:	d026      	beq.n	80071f6 <__ssputs_r+0x6a>
 80071a8:	6965      	ldr	r5, [r4, #20]
 80071aa:	6909      	ldr	r1, [r1, #16]
 80071ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071b0:	eba3 0901 	sub.w	r9, r3, r1
 80071b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071b8:	1c7b      	adds	r3, r7, #1
 80071ba:	444b      	add	r3, r9
 80071bc:	106d      	asrs	r5, r5, #1
 80071be:	429d      	cmp	r5, r3
 80071c0:	bf38      	it	cc
 80071c2:	461d      	movcc	r5, r3
 80071c4:	0553      	lsls	r3, r2, #21
 80071c6:	d527      	bpl.n	8007218 <__ssputs_r+0x8c>
 80071c8:	4629      	mov	r1, r5
 80071ca:	f7ff fbd7 	bl	800697c <_malloc_r>
 80071ce:	4606      	mov	r6, r0
 80071d0:	b360      	cbz	r0, 800722c <__ssputs_r+0xa0>
 80071d2:	6921      	ldr	r1, [r4, #16]
 80071d4:	464a      	mov	r2, r9
 80071d6:	f7fe fcd2 	bl	8005b7e <memcpy>
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e4:	81a3      	strh	r3, [r4, #12]
 80071e6:	6126      	str	r6, [r4, #16]
 80071e8:	6165      	str	r5, [r4, #20]
 80071ea:	444e      	add	r6, r9
 80071ec:	eba5 0509 	sub.w	r5, r5, r9
 80071f0:	6026      	str	r6, [r4, #0]
 80071f2:	60a5      	str	r5, [r4, #8]
 80071f4:	463e      	mov	r6, r7
 80071f6:	42be      	cmp	r6, r7
 80071f8:	d900      	bls.n	80071fc <__ssputs_r+0x70>
 80071fa:	463e      	mov	r6, r7
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	4632      	mov	r2, r6
 8007200:	4641      	mov	r1, r8
 8007202:	f000 f9c9 	bl	8007598 <memmove>
 8007206:	68a3      	ldr	r3, [r4, #8]
 8007208:	1b9b      	subs	r3, r3, r6
 800720a:	60a3      	str	r3, [r4, #8]
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	4433      	add	r3, r6
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	2000      	movs	r0, #0
 8007214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007218:	462a      	mov	r2, r5
 800721a:	f000 fa2d 	bl	8007678 <_realloc_r>
 800721e:	4606      	mov	r6, r0
 8007220:	2800      	cmp	r0, #0
 8007222:	d1e0      	bne.n	80071e6 <__ssputs_r+0x5a>
 8007224:	6921      	ldr	r1, [r4, #16]
 8007226:	4650      	mov	r0, sl
 8007228:	f7ff fb34 	bl	8006894 <_free_r>
 800722c:	230c      	movs	r3, #12
 800722e:	f8ca 3000 	str.w	r3, [sl]
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	e7e9      	b.n	8007214 <__ssputs_r+0x88>

08007240 <_svfiprintf_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	4698      	mov	r8, r3
 8007246:	898b      	ldrh	r3, [r1, #12]
 8007248:	061b      	lsls	r3, r3, #24
 800724a:	b09d      	sub	sp, #116	; 0x74
 800724c:	4607      	mov	r7, r0
 800724e:	460d      	mov	r5, r1
 8007250:	4614      	mov	r4, r2
 8007252:	d50e      	bpl.n	8007272 <_svfiprintf_r+0x32>
 8007254:	690b      	ldr	r3, [r1, #16]
 8007256:	b963      	cbnz	r3, 8007272 <_svfiprintf_r+0x32>
 8007258:	2140      	movs	r1, #64	; 0x40
 800725a:	f7ff fb8f 	bl	800697c <_malloc_r>
 800725e:	6028      	str	r0, [r5, #0]
 8007260:	6128      	str	r0, [r5, #16]
 8007262:	b920      	cbnz	r0, 800726e <_svfiprintf_r+0x2e>
 8007264:	230c      	movs	r3, #12
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	f04f 30ff 	mov.w	r0, #4294967295
 800726c:	e0d0      	b.n	8007410 <_svfiprintf_r+0x1d0>
 800726e:	2340      	movs	r3, #64	; 0x40
 8007270:	616b      	str	r3, [r5, #20]
 8007272:	2300      	movs	r3, #0
 8007274:	9309      	str	r3, [sp, #36]	; 0x24
 8007276:	2320      	movs	r3, #32
 8007278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800727c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007280:	2330      	movs	r3, #48	; 0x30
 8007282:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007428 <_svfiprintf_r+0x1e8>
 8007286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800728a:	f04f 0901 	mov.w	r9, #1
 800728e:	4623      	mov	r3, r4
 8007290:	469a      	mov	sl, r3
 8007292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007296:	b10a      	cbz	r2, 800729c <_svfiprintf_r+0x5c>
 8007298:	2a25      	cmp	r2, #37	; 0x25
 800729a:	d1f9      	bne.n	8007290 <_svfiprintf_r+0x50>
 800729c:	ebba 0b04 	subs.w	fp, sl, r4
 80072a0:	d00b      	beq.n	80072ba <_svfiprintf_r+0x7a>
 80072a2:	465b      	mov	r3, fp
 80072a4:	4622      	mov	r2, r4
 80072a6:	4629      	mov	r1, r5
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ff6f 	bl	800718c <__ssputs_r>
 80072ae:	3001      	adds	r0, #1
 80072b0:	f000 80a9 	beq.w	8007406 <_svfiprintf_r+0x1c6>
 80072b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b6:	445a      	add	r2, fp
 80072b8:	9209      	str	r2, [sp, #36]	; 0x24
 80072ba:	f89a 3000 	ldrb.w	r3, [sl]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 80a1 	beq.w	8007406 <_svfiprintf_r+0x1c6>
 80072c4:	2300      	movs	r3, #0
 80072c6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ce:	f10a 0a01 	add.w	sl, sl, #1
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	9307      	str	r3, [sp, #28]
 80072d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072da:	931a      	str	r3, [sp, #104]	; 0x68
 80072dc:	4654      	mov	r4, sl
 80072de:	2205      	movs	r2, #5
 80072e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e4:	4850      	ldr	r0, [pc, #320]	; (8007428 <_svfiprintf_r+0x1e8>)
 80072e6:	f7f8 ff73 	bl	80001d0 <memchr>
 80072ea:	9a04      	ldr	r2, [sp, #16]
 80072ec:	b9d8      	cbnz	r0, 8007326 <_svfiprintf_r+0xe6>
 80072ee:	06d0      	lsls	r0, r2, #27
 80072f0:	bf44      	itt	mi
 80072f2:	2320      	movmi	r3, #32
 80072f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f8:	0711      	lsls	r1, r2, #28
 80072fa:	bf44      	itt	mi
 80072fc:	232b      	movmi	r3, #43	; 0x2b
 80072fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007302:	f89a 3000 	ldrb.w	r3, [sl]
 8007306:	2b2a      	cmp	r3, #42	; 0x2a
 8007308:	d015      	beq.n	8007336 <_svfiprintf_r+0xf6>
 800730a:	9a07      	ldr	r2, [sp, #28]
 800730c:	4654      	mov	r4, sl
 800730e:	2000      	movs	r0, #0
 8007310:	f04f 0c0a 	mov.w	ip, #10
 8007314:	4621      	mov	r1, r4
 8007316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800731a:	3b30      	subs	r3, #48	; 0x30
 800731c:	2b09      	cmp	r3, #9
 800731e:	d94d      	bls.n	80073bc <_svfiprintf_r+0x17c>
 8007320:	b1b0      	cbz	r0, 8007350 <_svfiprintf_r+0x110>
 8007322:	9207      	str	r2, [sp, #28]
 8007324:	e014      	b.n	8007350 <_svfiprintf_r+0x110>
 8007326:	eba0 0308 	sub.w	r3, r0, r8
 800732a:	fa09 f303 	lsl.w	r3, r9, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	46a2      	mov	sl, r4
 8007334:	e7d2      	b.n	80072dc <_svfiprintf_r+0x9c>
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	1d19      	adds	r1, r3, #4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	9103      	str	r1, [sp, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfbb      	ittet	lt
 8007342:	425b      	neglt	r3, r3
 8007344:	f042 0202 	orrlt.w	r2, r2, #2
 8007348:	9307      	strge	r3, [sp, #28]
 800734a:	9307      	strlt	r3, [sp, #28]
 800734c:	bfb8      	it	lt
 800734e:	9204      	strlt	r2, [sp, #16]
 8007350:	7823      	ldrb	r3, [r4, #0]
 8007352:	2b2e      	cmp	r3, #46	; 0x2e
 8007354:	d10c      	bne.n	8007370 <_svfiprintf_r+0x130>
 8007356:	7863      	ldrb	r3, [r4, #1]
 8007358:	2b2a      	cmp	r3, #42	; 0x2a
 800735a:	d134      	bne.n	80073c6 <_svfiprintf_r+0x186>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	9203      	str	r2, [sp, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	bfb8      	it	lt
 8007368:	f04f 33ff 	movlt.w	r3, #4294967295
 800736c:	3402      	adds	r4, #2
 800736e:	9305      	str	r3, [sp, #20]
 8007370:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007438 <_svfiprintf_r+0x1f8>
 8007374:	7821      	ldrb	r1, [r4, #0]
 8007376:	2203      	movs	r2, #3
 8007378:	4650      	mov	r0, sl
 800737a:	f7f8 ff29 	bl	80001d0 <memchr>
 800737e:	b138      	cbz	r0, 8007390 <_svfiprintf_r+0x150>
 8007380:	9b04      	ldr	r3, [sp, #16]
 8007382:	eba0 000a 	sub.w	r0, r0, sl
 8007386:	2240      	movs	r2, #64	; 0x40
 8007388:	4082      	lsls	r2, r0
 800738a:	4313      	orrs	r3, r2
 800738c:	3401      	adds	r4, #1
 800738e:	9304      	str	r3, [sp, #16]
 8007390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007394:	4825      	ldr	r0, [pc, #148]	; (800742c <_svfiprintf_r+0x1ec>)
 8007396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800739a:	2206      	movs	r2, #6
 800739c:	f7f8 ff18 	bl	80001d0 <memchr>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d038      	beq.n	8007416 <_svfiprintf_r+0x1d6>
 80073a4:	4b22      	ldr	r3, [pc, #136]	; (8007430 <_svfiprintf_r+0x1f0>)
 80073a6:	bb1b      	cbnz	r3, 80073f0 <_svfiprintf_r+0x1b0>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	3307      	adds	r3, #7
 80073ac:	f023 0307 	bic.w	r3, r3, #7
 80073b0:	3308      	adds	r3, #8
 80073b2:	9303      	str	r3, [sp, #12]
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	4433      	add	r3, r6
 80073b8:	9309      	str	r3, [sp, #36]	; 0x24
 80073ba:	e768      	b.n	800728e <_svfiprintf_r+0x4e>
 80073bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c0:	460c      	mov	r4, r1
 80073c2:	2001      	movs	r0, #1
 80073c4:	e7a6      	b.n	8007314 <_svfiprintf_r+0xd4>
 80073c6:	2300      	movs	r3, #0
 80073c8:	3401      	adds	r4, #1
 80073ca:	9305      	str	r3, [sp, #20]
 80073cc:	4619      	mov	r1, r3
 80073ce:	f04f 0c0a 	mov.w	ip, #10
 80073d2:	4620      	mov	r0, r4
 80073d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d8:	3a30      	subs	r2, #48	; 0x30
 80073da:	2a09      	cmp	r2, #9
 80073dc:	d903      	bls.n	80073e6 <_svfiprintf_r+0x1a6>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0c6      	beq.n	8007370 <_svfiprintf_r+0x130>
 80073e2:	9105      	str	r1, [sp, #20]
 80073e4:	e7c4      	b.n	8007370 <_svfiprintf_r+0x130>
 80073e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ea:	4604      	mov	r4, r0
 80073ec:	2301      	movs	r3, #1
 80073ee:	e7f0      	b.n	80073d2 <_svfiprintf_r+0x192>
 80073f0:	ab03      	add	r3, sp, #12
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	462a      	mov	r2, r5
 80073f6:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <_svfiprintf_r+0x1f4>)
 80073f8:	a904      	add	r1, sp, #16
 80073fa:	4638      	mov	r0, r7
 80073fc:	f7fd fe2e 	bl	800505c <_printf_float>
 8007400:	1c42      	adds	r2, r0, #1
 8007402:	4606      	mov	r6, r0
 8007404:	d1d6      	bne.n	80073b4 <_svfiprintf_r+0x174>
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	065b      	lsls	r3, r3, #25
 800740a:	f53f af2d 	bmi.w	8007268 <_svfiprintf_r+0x28>
 800740e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007410:	b01d      	add	sp, #116	; 0x74
 8007412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007416:	ab03      	add	r3, sp, #12
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	462a      	mov	r2, r5
 800741c:	4b05      	ldr	r3, [pc, #20]	; (8007434 <_svfiprintf_r+0x1f4>)
 800741e:	a904      	add	r1, sp, #16
 8007420:	4638      	mov	r0, r7
 8007422:	f7fe f8bf 	bl	80055a4 <_printf_i>
 8007426:	e7eb      	b.n	8007400 <_svfiprintf_r+0x1c0>
 8007428:	080082fc 	.word	0x080082fc
 800742c:	08008306 	.word	0x08008306
 8007430:	0800505d 	.word	0x0800505d
 8007434:	0800718d 	.word	0x0800718d
 8007438:	08008302 	.word	0x08008302

0800743c <__sflush_r>:
 800743c:	898a      	ldrh	r2, [r1, #12]
 800743e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007442:	4605      	mov	r5, r0
 8007444:	0710      	lsls	r0, r2, #28
 8007446:	460c      	mov	r4, r1
 8007448:	d458      	bmi.n	80074fc <__sflush_r+0xc0>
 800744a:	684b      	ldr	r3, [r1, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	dc05      	bgt.n	800745c <__sflush_r+0x20>
 8007450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	dc02      	bgt.n	800745c <__sflush_r+0x20>
 8007456:	2000      	movs	r0, #0
 8007458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800745c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800745e:	2e00      	cmp	r6, #0
 8007460:	d0f9      	beq.n	8007456 <__sflush_r+0x1a>
 8007462:	2300      	movs	r3, #0
 8007464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007468:	682f      	ldr	r7, [r5, #0]
 800746a:	6a21      	ldr	r1, [r4, #32]
 800746c:	602b      	str	r3, [r5, #0]
 800746e:	d032      	beq.n	80074d6 <__sflush_r+0x9a>
 8007470:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	075a      	lsls	r2, r3, #29
 8007476:	d505      	bpl.n	8007484 <__sflush_r+0x48>
 8007478:	6863      	ldr	r3, [r4, #4]
 800747a:	1ac0      	subs	r0, r0, r3
 800747c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800747e:	b10b      	cbz	r3, 8007484 <__sflush_r+0x48>
 8007480:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007482:	1ac0      	subs	r0, r0, r3
 8007484:	2300      	movs	r3, #0
 8007486:	4602      	mov	r2, r0
 8007488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800748a:	6a21      	ldr	r1, [r4, #32]
 800748c:	4628      	mov	r0, r5
 800748e:	47b0      	blx	r6
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	89a3      	ldrh	r3, [r4, #12]
 8007494:	d106      	bne.n	80074a4 <__sflush_r+0x68>
 8007496:	6829      	ldr	r1, [r5, #0]
 8007498:	291d      	cmp	r1, #29
 800749a:	d82b      	bhi.n	80074f4 <__sflush_r+0xb8>
 800749c:	4a29      	ldr	r2, [pc, #164]	; (8007544 <__sflush_r+0x108>)
 800749e:	410a      	asrs	r2, r1
 80074a0:	07d6      	lsls	r6, r2, #31
 80074a2:	d427      	bmi.n	80074f4 <__sflush_r+0xb8>
 80074a4:	2200      	movs	r2, #0
 80074a6:	6062      	str	r2, [r4, #4]
 80074a8:	04d9      	lsls	r1, r3, #19
 80074aa:	6922      	ldr	r2, [r4, #16]
 80074ac:	6022      	str	r2, [r4, #0]
 80074ae:	d504      	bpl.n	80074ba <__sflush_r+0x7e>
 80074b0:	1c42      	adds	r2, r0, #1
 80074b2:	d101      	bne.n	80074b8 <__sflush_r+0x7c>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b903      	cbnz	r3, 80074ba <__sflush_r+0x7e>
 80074b8:	6560      	str	r0, [r4, #84]	; 0x54
 80074ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074bc:	602f      	str	r7, [r5, #0]
 80074be:	2900      	cmp	r1, #0
 80074c0:	d0c9      	beq.n	8007456 <__sflush_r+0x1a>
 80074c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c6:	4299      	cmp	r1, r3
 80074c8:	d002      	beq.n	80074d0 <__sflush_r+0x94>
 80074ca:	4628      	mov	r0, r5
 80074cc:	f7ff f9e2 	bl	8006894 <_free_r>
 80074d0:	2000      	movs	r0, #0
 80074d2:	6360      	str	r0, [r4, #52]	; 0x34
 80074d4:	e7c0      	b.n	8007458 <__sflush_r+0x1c>
 80074d6:	2301      	movs	r3, #1
 80074d8:	4628      	mov	r0, r5
 80074da:	47b0      	blx	r6
 80074dc:	1c41      	adds	r1, r0, #1
 80074de:	d1c8      	bne.n	8007472 <__sflush_r+0x36>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0c5      	beq.n	8007472 <__sflush_r+0x36>
 80074e6:	2b1d      	cmp	r3, #29
 80074e8:	d001      	beq.n	80074ee <__sflush_r+0xb2>
 80074ea:	2b16      	cmp	r3, #22
 80074ec:	d101      	bne.n	80074f2 <__sflush_r+0xb6>
 80074ee:	602f      	str	r7, [r5, #0]
 80074f0:	e7b1      	b.n	8007456 <__sflush_r+0x1a>
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	e7ad      	b.n	8007458 <__sflush_r+0x1c>
 80074fc:	690f      	ldr	r7, [r1, #16]
 80074fe:	2f00      	cmp	r7, #0
 8007500:	d0a9      	beq.n	8007456 <__sflush_r+0x1a>
 8007502:	0793      	lsls	r3, r2, #30
 8007504:	680e      	ldr	r6, [r1, #0]
 8007506:	bf08      	it	eq
 8007508:	694b      	ldreq	r3, [r1, #20]
 800750a:	600f      	str	r7, [r1, #0]
 800750c:	bf18      	it	ne
 800750e:	2300      	movne	r3, #0
 8007510:	eba6 0807 	sub.w	r8, r6, r7
 8007514:	608b      	str	r3, [r1, #8]
 8007516:	f1b8 0f00 	cmp.w	r8, #0
 800751a:	dd9c      	ble.n	8007456 <__sflush_r+0x1a>
 800751c:	6a21      	ldr	r1, [r4, #32]
 800751e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007520:	4643      	mov	r3, r8
 8007522:	463a      	mov	r2, r7
 8007524:	4628      	mov	r0, r5
 8007526:	47b0      	blx	r6
 8007528:	2800      	cmp	r0, #0
 800752a:	dc06      	bgt.n	800753a <__sflush_r+0xfe>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007532:	81a3      	strh	r3, [r4, #12]
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	e78e      	b.n	8007458 <__sflush_r+0x1c>
 800753a:	4407      	add	r7, r0
 800753c:	eba8 0800 	sub.w	r8, r8, r0
 8007540:	e7e9      	b.n	8007516 <__sflush_r+0xda>
 8007542:	bf00      	nop
 8007544:	dfbffffe 	.word	0xdfbffffe

08007548 <_fflush_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	690b      	ldr	r3, [r1, #16]
 800754c:	4605      	mov	r5, r0
 800754e:	460c      	mov	r4, r1
 8007550:	b913      	cbnz	r3, 8007558 <_fflush_r+0x10>
 8007552:	2500      	movs	r5, #0
 8007554:	4628      	mov	r0, r5
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	b118      	cbz	r0, 8007562 <_fflush_r+0x1a>
 800755a:	6a03      	ldr	r3, [r0, #32]
 800755c:	b90b      	cbnz	r3, 8007562 <_fflush_r+0x1a>
 800755e:	f7fe f9cf 	bl	8005900 <__sinit>
 8007562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0f3      	beq.n	8007552 <_fflush_r+0xa>
 800756a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800756c:	07d0      	lsls	r0, r2, #31
 800756e:	d404      	bmi.n	800757a <_fflush_r+0x32>
 8007570:	0599      	lsls	r1, r3, #22
 8007572:	d402      	bmi.n	800757a <_fflush_r+0x32>
 8007574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007576:	f7fe fb00 	bl	8005b7a <__retarget_lock_acquire_recursive>
 800757a:	4628      	mov	r0, r5
 800757c:	4621      	mov	r1, r4
 800757e:	f7ff ff5d 	bl	800743c <__sflush_r>
 8007582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007584:	07da      	lsls	r2, r3, #31
 8007586:	4605      	mov	r5, r0
 8007588:	d4e4      	bmi.n	8007554 <_fflush_r+0xc>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	059b      	lsls	r3, r3, #22
 800758e:	d4e1      	bmi.n	8007554 <_fflush_r+0xc>
 8007590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007592:	f7fe faf3 	bl	8005b7c <__retarget_lock_release_recursive>
 8007596:	e7dd      	b.n	8007554 <_fflush_r+0xc>

08007598 <memmove>:
 8007598:	4288      	cmp	r0, r1
 800759a:	b510      	push	{r4, lr}
 800759c:	eb01 0402 	add.w	r4, r1, r2
 80075a0:	d902      	bls.n	80075a8 <memmove+0x10>
 80075a2:	4284      	cmp	r4, r0
 80075a4:	4623      	mov	r3, r4
 80075a6:	d807      	bhi.n	80075b8 <memmove+0x20>
 80075a8:	1e43      	subs	r3, r0, #1
 80075aa:	42a1      	cmp	r1, r4
 80075ac:	d008      	beq.n	80075c0 <memmove+0x28>
 80075ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075b6:	e7f8      	b.n	80075aa <memmove+0x12>
 80075b8:	4402      	add	r2, r0
 80075ba:	4601      	mov	r1, r0
 80075bc:	428a      	cmp	r2, r1
 80075be:	d100      	bne.n	80075c2 <memmove+0x2a>
 80075c0:	bd10      	pop	{r4, pc}
 80075c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075ca:	e7f7      	b.n	80075bc <memmove+0x24>

080075cc <_sbrk_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d06      	ldr	r5, [pc, #24]	; (80075e8 <_sbrk_r+0x1c>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	f7fa fee6 	bl	80023a8 <_sbrk>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_sbrk_r+0x1a>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_sbrk_r+0x1a>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20000424 	.word	0x20000424

080075ec <__assert_func>:
 80075ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075ee:	4614      	mov	r4, r2
 80075f0:	461a      	mov	r2, r3
 80075f2:	4b09      	ldr	r3, [pc, #36]	; (8007618 <__assert_func+0x2c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4605      	mov	r5, r0
 80075f8:	68d8      	ldr	r0, [r3, #12]
 80075fa:	b14c      	cbz	r4, 8007610 <__assert_func+0x24>
 80075fc:	4b07      	ldr	r3, [pc, #28]	; (800761c <__assert_func+0x30>)
 80075fe:	9100      	str	r1, [sp, #0]
 8007600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007604:	4906      	ldr	r1, [pc, #24]	; (8007620 <__assert_func+0x34>)
 8007606:	462b      	mov	r3, r5
 8007608:	f000 f872 	bl	80076f0 <fiprintf>
 800760c:	f000 f882 	bl	8007714 <abort>
 8007610:	4b04      	ldr	r3, [pc, #16]	; (8007624 <__assert_func+0x38>)
 8007612:	461c      	mov	r4, r3
 8007614:	e7f3      	b.n	80075fe <__assert_func+0x12>
 8007616:	bf00      	nop
 8007618:	20000064 	.word	0x20000064
 800761c:	08008317 	.word	0x08008317
 8007620:	08008324 	.word	0x08008324
 8007624:	08008352 	.word	0x08008352

08007628 <_calloc_r>:
 8007628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800762a:	fba1 2402 	umull	r2, r4, r1, r2
 800762e:	b94c      	cbnz	r4, 8007644 <_calloc_r+0x1c>
 8007630:	4611      	mov	r1, r2
 8007632:	9201      	str	r2, [sp, #4]
 8007634:	f7ff f9a2 	bl	800697c <_malloc_r>
 8007638:	9a01      	ldr	r2, [sp, #4]
 800763a:	4605      	mov	r5, r0
 800763c:	b930      	cbnz	r0, 800764c <_calloc_r+0x24>
 800763e:	4628      	mov	r0, r5
 8007640:	b003      	add	sp, #12
 8007642:	bd30      	pop	{r4, r5, pc}
 8007644:	220c      	movs	r2, #12
 8007646:	6002      	str	r2, [r0, #0]
 8007648:	2500      	movs	r5, #0
 800764a:	e7f8      	b.n	800763e <_calloc_r+0x16>
 800764c:	4621      	mov	r1, r4
 800764e:	f7fe fa04 	bl	8005a5a <memset>
 8007652:	e7f4      	b.n	800763e <_calloc_r+0x16>

08007654 <__ascii_mbtowc>:
 8007654:	b082      	sub	sp, #8
 8007656:	b901      	cbnz	r1, 800765a <__ascii_mbtowc+0x6>
 8007658:	a901      	add	r1, sp, #4
 800765a:	b142      	cbz	r2, 800766e <__ascii_mbtowc+0x1a>
 800765c:	b14b      	cbz	r3, 8007672 <__ascii_mbtowc+0x1e>
 800765e:	7813      	ldrb	r3, [r2, #0]
 8007660:	600b      	str	r3, [r1, #0]
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	1e10      	subs	r0, r2, #0
 8007666:	bf18      	it	ne
 8007668:	2001      	movne	r0, #1
 800766a:	b002      	add	sp, #8
 800766c:	4770      	bx	lr
 800766e:	4610      	mov	r0, r2
 8007670:	e7fb      	b.n	800766a <__ascii_mbtowc+0x16>
 8007672:	f06f 0001 	mvn.w	r0, #1
 8007676:	e7f8      	b.n	800766a <__ascii_mbtowc+0x16>

08007678 <_realloc_r>:
 8007678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	4680      	mov	r8, r0
 800767e:	4614      	mov	r4, r2
 8007680:	460e      	mov	r6, r1
 8007682:	b921      	cbnz	r1, 800768e <_realloc_r+0x16>
 8007684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007688:	4611      	mov	r1, r2
 800768a:	f7ff b977 	b.w	800697c <_malloc_r>
 800768e:	b92a      	cbnz	r2, 800769c <_realloc_r+0x24>
 8007690:	f7ff f900 	bl	8006894 <_free_r>
 8007694:	4625      	mov	r5, r4
 8007696:	4628      	mov	r0, r5
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	f000 f841 	bl	8007722 <_malloc_usable_size_r>
 80076a0:	4284      	cmp	r4, r0
 80076a2:	4607      	mov	r7, r0
 80076a4:	d802      	bhi.n	80076ac <_realloc_r+0x34>
 80076a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076aa:	d812      	bhi.n	80076d2 <_realloc_r+0x5a>
 80076ac:	4621      	mov	r1, r4
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7ff f964 	bl	800697c <_malloc_r>
 80076b4:	4605      	mov	r5, r0
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d0ed      	beq.n	8007696 <_realloc_r+0x1e>
 80076ba:	42bc      	cmp	r4, r7
 80076bc:	4622      	mov	r2, r4
 80076be:	4631      	mov	r1, r6
 80076c0:	bf28      	it	cs
 80076c2:	463a      	movcs	r2, r7
 80076c4:	f7fe fa5b 	bl	8005b7e <memcpy>
 80076c8:	4631      	mov	r1, r6
 80076ca:	4640      	mov	r0, r8
 80076cc:	f7ff f8e2 	bl	8006894 <_free_r>
 80076d0:	e7e1      	b.n	8007696 <_realloc_r+0x1e>
 80076d2:	4635      	mov	r5, r6
 80076d4:	e7df      	b.n	8007696 <_realloc_r+0x1e>

080076d6 <__ascii_wctomb>:
 80076d6:	b149      	cbz	r1, 80076ec <__ascii_wctomb+0x16>
 80076d8:	2aff      	cmp	r2, #255	; 0xff
 80076da:	bf85      	ittet	hi
 80076dc:	238a      	movhi	r3, #138	; 0x8a
 80076de:	6003      	strhi	r3, [r0, #0]
 80076e0:	700a      	strbls	r2, [r1, #0]
 80076e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80076e6:	bf98      	it	ls
 80076e8:	2001      	movls	r0, #1
 80076ea:	4770      	bx	lr
 80076ec:	4608      	mov	r0, r1
 80076ee:	4770      	bx	lr

080076f0 <fiprintf>:
 80076f0:	b40e      	push	{r1, r2, r3}
 80076f2:	b503      	push	{r0, r1, lr}
 80076f4:	4601      	mov	r1, r0
 80076f6:	ab03      	add	r3, sp, #12
 80076f8:	4805      	ldr	r0, [pc, #20]	; (8007710 <fiprintf+0x20>)
 80076fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80076fe:	6800      	ldr	r0, [r0, #0]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	f000 f83f 	bl	8007784 <_vfiprintf_r>
 8007706:	b002      	add	sp, #8
 8007708:	f85d eb04 	ldr.w	lr, [sp], #4
 800770c:	b003      	add	sp, #12
 800770e:	4770      	bx	lr
 8007710:	20000064 	.word	0x20000064

08007714 <abort>:
 8007714:	b508      	push	{r3, lr}
 8007716:	2006      	movs	r0, #6
 8007718:	f000 fa0c 	bl	8007b34 <raise>
 800771c:	2001      	movs	r0, #1
 800771e:	f7fa fdcc 	bl	80022ba <_exit>

08007722 <_malloc_usable_size_r>:
 8007722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007726:	1f18      	subs	r0, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	bfbc      	itt	lt
 800772c:	580b      	ldrlt	r3, [r1, r0]
 800772e:	18c0      	addlt	r0, r0, r3
 8007730:	4770      	bx	lr

08007732 <__sfputc_r>:
 8007732:	6893      	ldr	r3, [r2, #8]
 8007734:	3b01      	subs	r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	b410      	push	{r4}
 800773a:	6093      	str	r3, [r2, #8]
 800773c:	da08      	bge.n	8007750 <__sfputc_r+0x1e>
 800773e:	6994      	ldr	r4, [r2, #24]
 8007740:	42a3      	cmp	r3, r4
 8007742:	db01      	blt.n	8007748 <__sfputc_r+0x16>
 8007744:	290a      	cmp	r1, #10
 8007746:	d103      	bne.n	8007750 <__sfputc_r+0x1e>
 8007748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800774c:	f000 b934 	b.w	80079b8 <__swbuf_r>
 8007750:	6813      	ldr	r3, [r2, #0]
 8007752:	1c58      	adds	r0, r3, #1
 8007754:	6010      	str	r0, [r2, #0]
 8007756:	7019      	strb	r1, [r3, #0]
 8007758:	4608      	mov	r0, r1
 800775a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800775e:	4770      	bx	lr

08007760 <__sfputs_r>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	4606      	mov	r6, r0
 8007764:	460f      	mov	r7, r1
 8007766:	4614      	mov	r4, r2
 8007768:	18d5      	adds	r5, r2, r3
 800776a:	42ac      	cmp	r4, r5
 800776c:	d101      	bne.n	8007772 <__sfputs_r+0x12>
 800776e:	2000      	movs	r0, #0
 8007770:	e007      	b.n	8007782 <__sfputs_r+0x22>
 8007772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007776:	463a      	mov	r2, r7
 8007778:	4630      	mov	r0, r6
 800777a:	f7ff ffda 	bl	8007732 <__sfputc_r>
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	d1f3      	bne.n	800776a <__sfputs_r+0xa>
 8007782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007784 <_vfiprintf_r>:
 8007784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007788:	460d      	mov	r5, r1
 800778a:	b09d      	sub	sp, #116	; 0x74
 800778c:	4614      	mov	r4, r2
 800778e:	4698      	mov	r8, r3
 8007790:	4606      	mov	r6, r0
 8007792:	b118      	cbz	r0, 800779c <_vfiprintf_r+0x18>
 8007794:	6a03      	ldr	r3, [r0, #32]
 8007796:	b90b      	cbnz	r3, 800779c <_vfiprintf_r+0x18>
 8007798:	f7fe f8b2 	bl	8005900 <__sinit>
 800779c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800779e:	07d9      	lsls	r1, r3, #31
 80077a0:	d405      	bmi.n	80077ae <_vfiprintf_r+0x2a>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	059a      	lsls	r2, r3, #22
 80077a6:	d402      	bmi.n	80077ae <_vfiprintf_r+0x2a>
 80077a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077aa:	f7fe f9e6 	bl	8005b7a <__retarget_lock_acquire_recursive>
 80077ae:	89ab      	ldrh	r3, [r5, #12]
 80077b0:	071b      	lsls	r3, r3, #28
 80077b2:	d501      	bpl.n	80077b8 <_vfiprintf_r+0x34>
 80077b4:	692b      	ldr	r3, [r5, #16]
 80077b6:	b99b      	cbnz	r3, 80077e0 <_vfiprintf_r+0x5c>
 80077b8:	4629      	mov	r1, r5
 80077ba:	4630      	mov	r0, r6
 80077bc:	f000 f93a 	bl	8007a34 <__swsetup_r>
 80077c0:	b170      	cbz	r0, 80077e0 <_vfiprintf_r+0x5c>
 80077c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c4:	07dc      	lsls	r4, r3, #31
 80077c6:	d504      	bpl.n	80077d2 <_vfiprintf_r+0x4e>
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	b01d      	add	sp, #116	; 0x74
 80077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	0598      	lsls	r0, r3, #22
 80077d6:	d4f7      	bmi.n	80077c8 <_vfiprintf_r+0x44>
 80077d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077da:	f7fe f9cf 	bl	8005b7c <__retarget_lock_release_recursive>
 80077de:	e7f3      	b.n	80077c8 <_vfiprintf_r+0x44>
 80077e0:	2300      	movs	r3, #0
 80077e2:	9309      	str	r3, [sp, #36]	; 0x24
 80077e4:	2320      	movs	r3, #32
 80077e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80077ee:	2330      	movs	r3, #48	; 0x30
 80077f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80079a4 <_vfiprintf_r+0x220>
 80077f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077f8:	f04f 0901 	mov.w	r9, #1
 80077fc:	4623      	mov	r3, r4
 80077fe:	469a      	mov	sl, r3
 8007800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007804:	b10a      	cbz	r2, 800780a <_vfiprintf_r+0x86>
 8007806:	2a25      	cmp	r2, #37	; 0x25
 8007808:	d1f9      	bne.n	80077fe <_vfiprintf_r+0x7a>
 800780a:	ebba 0b04 	subs.w	fp, sl, r4
 800780e:	d00b      	beq.n	8007828 <_vfiprintf_r+0xa4>
 8007810:	465b      	mov	r3, fp
 8007812:	4622      	mov	r2, r4
 8007814:	4629      	mov	r1, r5
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff ffa2 	bl	8007760 <__sfputs_r>
 800781c:	3001      	adds	r0, #1
 800781e:	f000 80a9 	beq.w	8007974 <_vfiprintf_r+0x1f0>
 8007822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007824:	445a      	add	r2, fp
 8007826:	9209      	str	r2, [sp, #36]	; 0x24
 8007828:	f89a 3000 	ldrb.w	r3, [sl]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80a1 	beq.w	8007974 <_vfiprintf_r+0x1f0>
 8007832:	2300      	movs	r3, #0
 8007834:	f04f 32ff 	mov.w	r2, #4294967295
 8007838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800783c:	f10a 0a01 	add.w	sl, sl, #1
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	9307      	str	r3, [sp, #28]
 8007844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007848:	931a      	str	r3, [sp, #104]	; 0x68
 800784a:	4654      	mov	r4, sl
 800784c:	2205      	movs	r2, #5
 800784e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007852:	4854      	ldr	r0, [pc, #336]	; (80079a4 <_vfiprintf_r+0x220>)
 8007854:	f7f8 fcbc 	bl	80001d0 <memchr>
 8007858:	9a04      	ldr	r2, [sp, #16]
 800785a:	b9d8      	cbnz	r0, 8007894 <_vfiprintf_r+0x110>
 800785c:	06d1      	lsls	r1, r2, #27
 800785e:	bf44      	itt	mi
 8007860:	2320      	movmi	r3, #32
 8007862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007866:	0713      	lsls	r3, r2, #28
 8007868:	bf44      	itt	mi
 800786a:	232b      	movmi	r3, #43	; 0x2b
 800786c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007870:	f89a 3000 	ldrb.w	r3, [sl]
 8007874:	2b2a      	cmp	r3, #42	; 0x2a
 8007876:	d015      	beq.n	80078a4 <_vfiprintf_r+0x120>
 8007878:	9a07      	ldr	r2, [sp, #28]
 800787a:	4654      	mov	r4, sl
 800787c:	2000      	movs	r0, #0
 800787e:	f04f 0c0a 	mov.w	ip, #10
 8007882:	4621      	mov	r1, r4
 8007884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007888:	3b30      	subs	r3, #48	; 0x30
 800788a:	2b09      	cmp	r3, #9
 800788c:	d94d      	bls.n	800792a <_vfiprintf_r+0x1a6>
 800788e:	b1b0      	cbz	r0, 80078be <_vfiprintf_r+0x13a>
 8007890:	9207      	str	r2, [sp, #28]
 8007892:	e014      	b.n	80078be <_vfiprintf_r+0x13a>
 8007894:	eba0 0308 	sub.w	r3, r0, r8
 8007898:	fa09 f303 	lsl.w	r3, r9, r3
 800789c:	4313      	orrs	r3, r2
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	46a2      	mov	sl, r4
 80078a2:	e7d2      	b.n	800784a <_vfiprintf_r+0xc6>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	1d19      	adds	r1, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	9103      	str	r1, [sp, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bfbb      	ittet	lt
 80078b0:	425b      	neglt	r3, r3
 80078b2:	f042 0202 	orrlt.w	r2, r2, #2
 80078b6:	9307      	strge	r3, [sp, #28]
 80078b8:	9307      	strlt	r3, [sp, #28]
 80078ba:	bfb8      	it	lt
 80078bc:	9204      	strlt	r2, [sp, #16]
 80078be:	7823      	ldrb	r3, [r4, #0]
 80078c0:	2b2e      	cmp	r3, #46	; 0x2e
 80078c2:	d10c      	bne.n	80078de <_vfiprintf_r+0x15a>
 80078c4:	7863      	ldrb	r3, [r4, #1]
 80078c6:	2b2a      	cmp	r3, #42	; 0x2a
 80078c8:	d134      	bne.n	8007934 <_vfiprintf_r+0x1b0>
 80078ca:	9b03      	ldr	r3, [sp, #12]
 80078cc:	1d1a      	adds	r2, r3, #4
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	9203      	str	r2, [sp, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bfb8      	it	lt
 80078d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80078da:	3402      	adds	r4, #2
 80078dc:	9305      	str	r3, [sp, #20]
 80078de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80079b4 <_vfiprintf_r+0x230>
 80078e2:	7821      	ldrb	r1, [r4, #0]
 80078e4:	2203      	movs	r2, #3
 80078e6:	4650      	mov	r0, sl
 80078e8:	f7f8 fc72 	bl	80001d0 <memchr>
 80078ec:	b138      	cbz	r0, 80078fe <_vfiprintf_r+0x17a>
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	eba0 000a 	sub.w	r0, r0, sl
 80078f4:	2240      	movs	r2, #64	; 0x40
 80078f6:	4082      	lsls	r2, r0
 80078f8:	4313      	orrs	r3, r2
 80078fa:	3401      	adds	r4, #1
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007902:	4829      	ldr	r0, [pc, #164]	; (80079a8 <_vfiprintf_r+0x224>)
 8007904:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007908:	2206      	movs	r2, #6
 800790a:	f7f8 fc61 	bl	80001d0 <memchr>
 800790e:	2800      	cmp	r0, #0
 8007910:	d03f      	beq.n	8007992 <_vfiprintf_r+0x20e>
 8007912:	4b26      	ldr	r3, [pc, #152]	; (80079ac <_vfiprintf_r+0x228>)
 8007914:	bb1b      	cbnz	r3, 800795e <_vfiprintf_r+0x1da>
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	3307      	adds	r3, #7
 800791a:	f023 0307 	bic.w	r3, r3, #7
 800791e:	3308      	adds	r3, #8
 8007920:	9303      	str	r3, [sp, #12]
 8007922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007924:	443b      	add	r3, r7
 8007926:	9309      	str	r3, [sp, #36]	; 0x24
 8007928:	e768      	b.n	80077fc <_vfiprintf_r+0x78>
 800792a:	fb0c 3202 	mla	r2, ip, r2, r3
 800792e:	460c      	mov	r4, r1
 8007930:	2001      	movs	r0, #1
 8007932:	e7a6      	b.n	8007882 <_vfiprintf_r+0xfe>
 8007934:	2300      	movs	r3, #0
 8007936:	3401      	adds	r4, #1
 8007938:	9305      	str	r3, [sp, #20]
 800793a:	4619      	mov	r1, r3
 800793c:	f04f 0c0a 	mov.w	ip, #10
 8007940:	4620      	mov	r0, r4
 8007942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007946:	3a30      	subs	r2, #48	; 0x30
 8007948:	2a09      	cmp	r2, #9
 800794a:	d903      	bls.n	8007954 <_vfiprintf_r+0x1d0>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0c6      	beq.n	80078de <_vfiprintf_r+0x15a>
 8007950:	9105      	str	r1, [sp, #20]
 8007952:	e7c4      	b.n	80078de <_vfiprintf_r+0x15a>
 8007954:	fb0c 2101 	mla	r1, ip, r1, r2
 8007958:	4604      	mov	r4, r0
 800795a:	2301      	movs	r3, #1
 800795c:	e7f0      	b.n	8007940 <_vfiprintf_r+0x1bc>
 800795e:	ab03      	add	r3, sp, #12
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	462a      	mov	r2, r5
 8007964:	4b12      	ldr	r3, [pc, #72]	; (80079b0 <_vfiprintf_r+0x22c>)
 8007966:	a904      	add	r1, sp, #16
 8007968:	4630      	mov	r0, r6
 800796a:	f7fd fb77 	bl	800505c <_printf_float>
 800796e:	4607      	mov	r7, r0
 8007970:	1c78      	adds	r0, r7, #1
 8007972:	d1d6      	bne.n	8007922 <_vfiprintf_r+0x19e>
 8007974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007976:	07d9      	lsls	r1, r3, #31
 8007978:	d405      	bmi.n	8007986 <_vfiprintf_r+0x202>
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	059a      	lsls	r2, r3, #22
 800797e:	d402      	bmi.n	8007986 <_vfiprintf_r+0x202>
 8007980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007982:	f7fe f8fb 	bl	8005b7c <__retarget_lock_release_recursive>
 8007986:	89ab      	ldrh	r3, [r5, #12]
 8007988:	065b      	lsls	r3, r3, #25
 800798a:	f53f af1d 	bmi.w	80077c8 <_vfiprintf_r+0x44>
 800798e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007990:	e71c      	b.n	80077cc <_vfiprintf_r+0x48>
 8007992:	ab03      	add	r3, sp, #12
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	462a      	mov	r2, r5
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <_vfiprintf_r+0x22c>)
 800799a:	a904      	add	r1, sp, #16
 800799c:	4630      	mov	r0, r6
 800799e:	f7fd fe01 	bl	80055a4 <_printf_i>
 80079a2:	e7e4      	b.n	800796e <_vfiprintf_r+0x1ea>
 80079a4:	080082fc 	.word	0x080082fc
 80079a8:	08008306 	.word	0x08008306
 80079ac:	0800505d 	.word	0x0800505d
 80079b0:	08007761 	.word	0x08007761
 80079b4:	08008302 	.word	0x08008302

080079b8 <__swbuf_r>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	460e      	mov	r6, r1
 80079bc:	4614      	mov	r4, r2
 80079be:	4605      	mov	r5, r0
 80079c0:	b118      	cbz	r0, 80079ca <__swbuf_r+0x12>
 80079c2:	6a03      	ldr	r3, [r0, #32]
 80079c4:	b90b      	cbnz	r3, 80079ca <__swbuf_r+0x12>
 80079c6:	f7fd ff9b 	bl	8005900 <__sinit>
 80079ca:	69a3      	ldr	r3, [r4, #24]
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	071a      	lsls	r2, r3, #28
 80079d2:	d525      	bpl.n	8007a20 <__swbuf_r+0x68>
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	b31b      	cbz	r3, 8007a20 <__swbuf_r+0x68>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	6922      	ldr	r2, [r4, #16]
 80079dc:	1a98      	subs	r0, r3, r2
 80079de:	6963      	ldr	r3, [r4, #20]
 80079e0:	b2f6      	uxtb	r6, r6
 80079e2:	4283      	cmp	r3, r0
 80079e4:	4637      	mov	r7, r6
 80079e6:	dc04      	bgt.n	80079f2 <__swbuf_r+0x3a>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f7ff fdac 	bl	8007548 <_fflush_r>
 80079f0:	b9e0      	cbnz	r0, 8007a2c <__swbuf_r+0x74>
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	60a3      	str	r3, [r4, #8]
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	6022      	str	r2, [r4, #0]
 80079fe:	701e      	strb	r6, [r3, #0]
 8007a00:	6962      	ldr	r2, [r4, #20]
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d004      	beq.n	8007a12 <__swbuf_r+0x5a>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	07db      	lsls	r3, r3, #31
 8007a0c:	d506      	bpl.n	8007a1c <__swbuf_r+0x64>
 8007a0e:	2e0a      	cmp	r6, #10
 8007a10:	d104      	bne.n	8007a1c <__swbuf_r+0x64>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	f7ff fd97 	bl	8007548 <_fflush_r>
 8007a1a:	b938      	cbnz	r0, 8007a2c <__swbuf_r+0x74>
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a20:	4621      	mov	r1, r4
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 f806 	bl	8007a34 <__swsetup_r>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d0d5      	beq.n	80079d8 <__swbuf_r+0x20>
 8007a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a30:	e7f4      	b.n	8007a1c <__swbuf_r+0x64>
	...

08007a34 <__swsetup_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4b2a      	ldr	r3, [pc, #168]	; (8007ae0 <__swsetup_r+0xac>)
 8007a38:	4605      	mov	r5, r0
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	b118      	cbz	r0, 8007a48 <__swsetup_r+0x14>
 8007a40:	6a03      	ldr	r3, [r0, #32]
 8007a42:	b90b      	cbnz	r3, 8007a48 <__swsetup_r+0x14>
 8007a44:	f7fd ff5c 	bl	8005900 <__sinit>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a4e:	0718      	lsls	r0, r3, #28
 8007a50:	d422      	bmi.n	8007a98 <__swsetup_r+0x64>
 8007a52:	06d9      	lsls	r1, r3, #27
 8007a54:	d407      	bmi.n	8007a66 <__swsetup_r+0x32>
 8007a56:	2309      	movs	r3, #9
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a5e:	81a3      	strh	r3, [r4, #12]
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295
 8007a64:	e034      	b.n	8007ad0 <__swsetup_r+0x9c>
 8007a66:	0758      	lsls	r0, r3, #29
 8007a68:	d512      	bpl.n	8007a90 <__swsetup_r+0x5c>
 8007a6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a6c:	b141      	cbz	r1, 8007a80 <__swsetup_r+0x4c>
 8007a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a72:	4299      	cmp	r1, r3
 8007a74:	d002      	beq.n	8007a7c <__swsetup_r+0x48>
 8007a76:	4628      	mov	r0, r5
 8007a78:	f7fe ff0c 	bl	8006894 <_free_r>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	6363      	str	r3, [r4, #52]	; 0x34
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a86:	81a3      	strh	r3, [r4, #12]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6063      	str	r3, [r4, #4]
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	f043 0308 	orr.w	r3, r3, #8
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	b94b      	cbnz	r3, 8007ab0 <__swsetup_r+0x7c>
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa6:	d003      	beq.n	8007ab0 <__swsetup_r+0x7c>
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 f884 	bl	8007bb8 <__smakebuf_r>
 8007ab0:	89a0      	ldrh	r0, [r4, #12]
 8007ab2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ab6:	f010 0301 	ands.w	r3, r0, #1
 8007aba:	d00a      	beq.n	8007ad2 <__swsetup_r+0x9e>
 8007abc:	2300      	movs	r3, #0
 8007abe:	60a3      	str	r3, [r4, #8]
 8007ac0:	6963      	ldr	r3, [r4, #20]
 8007ac2:	425b      	negs	r3, r3
 8007ac4:	61a3      	str	r3, [r4, #24]
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	b943      	cbnz	r3, 8007adc <__swsetup_r+0xa8>
 8007aca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ace:	d1c4      	bne.n	8007a5a <__swsetup_r+0x26>
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	0781      	lsls	r1, r0, #30
 8007ad4:	bf58      	it	pl
 8007ad6:	6963      	ldrpl	r3, [r4, #20]
 8007ad8:	60a3      	str	r3, [r4, #8]
 8007ada:	e7f4      	b.n	8007ac6 <__swsetup_r+0x92>
 8007adc:	2000      	movs	r0, #0
 8007ade:	e7f7      	b.n	8007ad0 <__swsetup_r+0x9c>
 8007ae0:	20000064 	.word	0x20000064

08007ae4 <_raise_r>:
 8007ae4:	291f      	cmp	r1, #31
 8007ae6:	b538      	push	{r3, r4, r5, lr}
 8007ae8:	4604      	mov	r4, r0
 8007aea:	460d      	mov	r5, r1
 8007aec:	d904      	bls.n	8007af8 <_raise_r+0x14>
 8007aee:	2316      	movs	r3, #22
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	f04f 30ff 	mov.w	r0, #4294967295
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007afa:	b112      	cbz	r2, 8007b02 <_raise_r+0x1e>
 8007afc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b00:	b94b      	cbnz	r3, 8007b16 <_raise_r+0x32>
 8007b02:	4620      	mov	r0, r4
 8007b04:	f000 f830 	bl	8007b68 <_getpid_r>
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b12:	f000 b817 	b.w	8007b44 <_kill_r>
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d00a      	beq.n	8007b30 <_raise_r+0x4c>
 8007b1a:	1c59      	adds	r1, r3, #1
 8007b1c:	d103      	bne.n	8007b26 <_raise_r+0x42>
 8007b1e:	2316      	movs	r3, #22
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7e7      	b.n	8007af6 <_raise_r+0x12>
 8007b26:	2400      	movs	r4, #0
 8007b28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	4798      	blx	r3
 8007b30:	2000      	movs	r0, #0
 8007b32:	e7e0      	b.n	8007af6 <_raise_r+0x12>

08007b34 <raise>:
 8007b34:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <raise+0xc>)
 8007b36:	4601      	mov	r1, r0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f7ff bfd3 	b.w	8007ae4 <_raise_r>
 8007b3e:	bf00      	nop
 8007b40:	20000064 	.word	0x20000064

08007b44 <_kill_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d07      	ldr	r5, [pc, #28]	; (8007b64 <_kill_r+0x20>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	f7fa fba2 	bl	800229a <_kill>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	d102      	bne.n	8007b60 <_kill_r+0x1c>
 8007b5a:	682b      	ldr	r3, [r5, #0]
 8007b5c:	b103      	cbz	r3, 8007b60 <_kill_r+0x1c>
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	bd38      	pop	{r3, r4, r5, pc}
 8007b62:	bf00      	nop
 8007b64:	20000424 	.word	0x20000424

08007b68 <_getpid_r>:
 8007b68:	f7fa bb8f 	b.w	800228a <_getpid>

08007b6c <__swhatbuf_r>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	460c      	mov	r4, r1
 8007b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b74:	2900      	cmp	r1, #0
 8007b76:	b096      	sub	sp, #88	; 0x58
 8007b78:	4615      	mov	r5, r2
 8007b7a:	461e      	mov	r6, r3
 8007b7c:	da0d      	bge.n	8007b9a <__swhatbuf_r+0x2e>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b84:	f04f 0100 	mov.w	r1, #0
 8007b88:	bf0c      	ite	eq
 8007b8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b8e:	2340      	movne	r3, #64	; 0x40
 8007b90:	2000      	movs	r0, #0
 8007b92:	6031      	str	r1, [r6, #0]
 8007b94:	602b      	str	r3, [r5, #0]
 8007b96:	b016      	add	sp, #88	; 0x58
 8007b98:	bd70      	pop	{r4, r5, r6, pc}
 8007b9a:	466a      	mov	r2, sp
 8007b9c:	f000 f848 	bl	8007c30 <_fstat_r>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	dbec      	blt.n	8007b7e <__swhatbuf_r+0x12>
 8007ba4:	9901      	ldr	r1, [sp, #4]
 8007ba6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007baa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007bae:	4259      	negs	r1, r3
 8007bb0:	4159      	adcs	r1, r3
 8007bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bb6:	e7eb      	b.n	8007b90 <__swhatbuf_r+0x24>

08007bb8 <__smakebuf_r>:
 8007bb8:	898b      	ldrh	r3, [r1, #12]
 8007bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bbc:	079d      	lsls	r5, r3, #30
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	d507      	bpl.n	8007bd4 <__smakebuf_r+0x1c>
 8007bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	6123      	str	r3, [r4, #16]
 8007bcc:	2301      	movs	r3, #1
 8007bce:	6163      	str	r3, [r4, #20]
 8007bd0:	b002      	add	sp, #8
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	ab01      	add	r3, sp, #4
 8007bd6:	466a      	mov	r2, sp
 8007bd8:	f7ff ffc8 	bl	8007b6c <__swhatbuf_r>
 8007bdc:	9900      	ldr	r1, [sp, #0]
 8007bde:	4605      	mov	r5, r0
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7fe fecb 	bl	800697c <_malloc_r>
 8007be6:	b948      	cbnz	r0, 8007bfc <__smakebuf_r+0x44>
 8007be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bec:	059a      	lsls	r2, r3, #22
 8007bee:	d4ef      	bmi.n	8007bd0 <__smakebuf_r+0x18>
 8007bf0:	f023 0303 	bic.w	r3, r3, #3
 8007bf4:	f043 0302 	orr.w	r3, r3, #2
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	e7e3      	b.n	8007bc4 <__smakebuf_r+0xc>
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	6020      	str	r0, [r4, #0]
 8007c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	9b00      	ldr	r3, [sp, #0]
 8007c08:	6163      	str	r3, [r4, #20]
 8007c0a:	9b01      	ldr	r3, [sp, #4]
 8007c0c:	6120      	str	r0, [r4, #16]
 8007c0e:	b15b      	cbz	r3, 8007c28 <__smakebuf_r+0x70>
 8007c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c14:	4630      	mov	r0, r6
 8007c16:	f000 f81d 	bl	8007c54 <_isatty_r>
 8007c1a:	b128      	cbz	r0, 8007c28 <__smakebuf_r+0x70>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	f023 0303 	bic.w	r3, r3, #3
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	431d      	orrs	r5, r3
 8007c2c:	81a5      	strh	r5, [r4, #12]
 8007c2e:	e7cf      	b.n	8007bd0 <__smakebuf_r+0x18>

08007c30 <_fstat_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d07      	ldr	r5, [pc, #28]	; (8007c50 <_fstat_r+0x20>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	f7fa fb8b 	bl	8002358 <_fstat>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	d102      	bne.n	8007c4c <_fstat_r+0x1c>
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	b103      	cbz	r3, 8007c4c <_fstat_r+0x1c>
 8007c4a:	6023      	str	r3, [r4, #0]
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000424 	.word	0x20000424

08007c54 <_isatty_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d06      	ldr	r5, [pc, #24]	; (8007c70 <_isatty_r+0x1c>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	f7fa fb8a 	bl	8002378 <_isatty>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_isatty_r+0x1a>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_isatty_r+0x1a>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	20000424 	.word	0x20000424

08007c74 <_init>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr

08007c80 <_fini>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr
