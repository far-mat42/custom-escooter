
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  0800b964  0800b964  0001b964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4ac  0800c4ac  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4ac  0800c4ac  0001c4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4b4  0800c4b4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4b4  0800c4b4  0001c4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4b8  0800c4b8  0001c4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800c4bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200000d0  0800c58c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800c58c  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f4d  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002387  00000000  00000000  00032090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00034418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c05  00000000  00000000  000353b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e9d2  00000000  00000000  00035fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122c2  00000000  00000000  0005498f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a2f  00000000  00000000  00066c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056ac  00000000  00000000  0012d680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  00132d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b94c 	.word	0x0800b94c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800b94c 	.word	0x0800b94c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9bb 	b.w	8001000 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b970 	b.w	8001000 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9e08      	ldr	r6, [sp, #32]
 8000d3e:	460d      	mov	r5, r1
 8000d40:	4604      	mov	r4, r0
 8000d42:	460f      	mov	r7, r1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d14a      	bne.n	8000dde <__udivmoddi4+0xa6>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0xe2>
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	b143      	cbz	r3, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d58:	f1c3 0220 	rsb	r2, r3, #32
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d62:	4317      	orrs	r7, r2
 8000d64:	409c      	lsls	r4, r3
 8000d66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6a:	fa1f f58c 	uxth.w	r5, ip
 8000d6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d72:	0c22      	lsrs	r2, r4, #16
 8000d74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d7c:	fb01 f005 	mul.w	r0, r1, r5
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x62>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d8c:	f080 811c 	bcs.w	8000fc8 <__udivmoddi4+0x290>
 8000d90:	4290      	cmp	r0, r2
 8000d92:	f240 8119 	bls.w	8000fc8 <__udivmoddi4+0x290>
 8000d96:	3902      	subs	r1, #2
 8000d98:	4462      	add	r2, ip
 8000d9a:	1a12      	subs	r2, r2, r0
 8000d9c:	b2a4      	uxth	r4, r4
 8000d9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000da2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000daa:	fb00 f505 	mul.w	r5, r0, r5
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x90>
 8000db2:	eb1c 0404 	adds.w	r4, ip, r4
 8000db6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dba:	f080 8107 	bcs.w	8000fcc <__udivmoddi4+0x294>
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	f240 8104 	bls.w	8000fcc <__udivmoddi4+0x294>
 8000dc4:	4464      	add	r4, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dcc:	1b64      	subs	r4, r4, r5
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11e      	cbz	r6, 8000dda <__udivmoddi4+0xa2>
 8000dd2:	40dc      	lsrs	r4, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0xbc>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f000 80ed 	beq.w	8000fc2 <__udivmoddi4+0x28a>
 8000de8:	2100      	movs	r1, #0
 8000dea:	e9c6 0500 	strd	r0, r5, [r6]
 8000dee:	4608      	mov	r0, r1
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	fab3 f183 	clz	r1, r3
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d149      	bne.n	8000e90 <__udivmoddi4+0x158>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	d302      	bcc.n	8000e06 <__udivmoddi4+0xce>
 8000e00:	4282      	cmp	r2, r0
 8000e02:	f200 80f8 	bhi.w	8000ff6 <__udivmoddi4+0x2be>
 8000e06:	1a84      	subs	r4, r0, r2
 8000e08:	eb65 0203 	sbc.w	r2, r5, r3
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	4617      	mov	r7, r2
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d0e2      	beq.n	8000dda <__udivmoddi4+0xa2>
 8000e14:	e9c6 4700 	strd	r4, r7, [r6]
 8000e18:	e7df      	b.n	8000dda <__udivmoddi4+0xa2>
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xe6>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f382 	clz	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x210>
 8000e28:	1a8a      	subs	r2, r1, r2
 8000e2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2e:	fa1f fe8c 	uxth.w	lr, ip
 8000e32:	2101      	movs	r1, #1
 8000e34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e38:	fb07 2015 	mls	r0, r7, r5, r2
 8000e3c:	0c22      	lsrs	r2, r4, #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb0e f005 	mul.w	r0, lr, r5
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x124>
 8000e4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x122>
 8000e54:	4290      	cmp	r0, r2
 8000e56:	f200 80cb 	bhi.w	8000ff0 <__udivmoddi4+0x2b8>
 8000e5a:	4645      	mov	r5, r8
 8000e5c:	1a12      	subs	r2, r2, r0
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e64:	fb07 2210 	mls	r2, r7, r0, r2
 8000e68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x14e>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e7c:	d202      	bcs.n	8000e84 <__udivmoddi4+0x14c>
 8000e7e:	45a6      	cmp	lr, r4
 8000e80:	f200 80bb 	bhi.w	8000ffa <__udivmoddi4+0x2c2>
 8000e84:	4610      	mov	r0, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8e:	e79f      	b.n	8000dd0 <__udivmoddi4+0x98>
 8000e90:	f1c1 0720 	rsb	r7, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea6:	40fd      	lsrs	r5, r7
 8000ea8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ec0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec4:	42a5      	cmp	r5, r4
 8000ec6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eca:	fa00 f001 	lsl.w	r0, r0, r1
 8000ece:	d90b      	bls.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed8:	f080 8088 	bcs.w	8000fec <__udivmoddi4+0x2b4>
 8000edc:	42a5      	cmp	r5, r4
 8000ede:	f240 8085 	bls.w	8000fec <__udivmoddi4+0x2b4>
 8000ee2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee6:	4464      	add	r4, ip
 8000ee8:	1b64      	subs	r4, r4, r5
 8000eea:	b29d      	uxth	r5, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1da>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f08:	d26c      	bcs.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	d96a      	bls.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	4464      	add	r4, ip
 8000f12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f16:	fba3 9502 	umull	r9, r5, r3, r2
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	42ac      	cmp	r4, r5
 8000f20:	46c8      	mov	r8, r9
 8000f22:	46ae      	mov	lr, r5
 8000f24:	d356      	bcc.n	8000fd4 <__udivmoddi4+0x29c>
 8000f26:	d053      	beq.n	8000fd0 <__udivmoddi4+0x298>
 8000f28:	b156      	cbz	r6, 8000f40 <__udivmoddi4+0x208>
 8000f2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f32:	fa04 f707 	lsl.w	r7, r4, r7
 8000f36:	40ca      	lsrs	r2, r1
 8000f38:	40cc      	lsrs	r4, r1
 8000f3a:	4317      	orrs	r7, r2
 8000f3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	f1c3 0120 	rsb	r1, r3, #32
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	fa20 f201 	lsr.w	r2, r0, r1
 8000f54:	fa25 f101 	lsr.w	r1, r5, r1
 8000f58:	409d      	lsls	r5, r3
 8000f5a:	432a      	orrs	r2, r5
 8000f5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f68:	fb07 1510 	mls	r5, r7, r0, r1
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f72:	fb00 f50e 	mul.w	r5, r0, lr
 8000f76:	428d      	cmp	r5, r1
 8000f78:	fa04 f403 	lsl.w	r4, r4, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x258>
 8000f7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f86:	d22f      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f88:	428d      	cmp	r5, r1
 8000f8a:	d92d      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1b49      	subs	r1, r1, r5
 8000f92:	b292      	uxth	r2, r2
 8000f94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f98:	fb07 1115 	mls	r1, r7, r5, r1
 8000f9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa4:	4291      	cmp	r1, r2
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x282>
 8000fa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fb0:	d216      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb2:	4291      	cmp	r1, r2
 8000fb4:	d914      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb6:	3d02      	subs	r5, #2
 8000fb8:	4462      	add	r2, ip
 8000fba:	1a52      	subs	r2, r2, r1
 8000fbc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fc0:	e738      	b.n	8000e34 <__udivmoddi4+0xfc>
 8000fc2:	4631      	mov	r1, r6
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e708      	b.n	8000dda <__udivmoddi4+0xa2>
 8000fc8:	4639      	mov	r1, r7
 8000fca:	e6e6      	b.n	8000d9a <__udivmoddi4+0x62>
 8000fcc:	4610      	mov	r0, r2
 8000fce:	e6fb      	b.n	8000dc8 <__udivmoddi4+0x90>
 8000fd0:	4548      	cmp	r0, r9
 8000fd2:	d2a9      	bcs.n	8000f28 <__udivmoddi4+0x1f0>
 8000fd4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	e7a3      	b.n	8000f28 <__udivmoddi4+0x1f0>
 8000fe0:	4645      	mov	r5, r8
 8000fe2:	e7ea      	b.n	8000fba <__udivmoddi4+0x282>
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	e794      	b.n	8000f12 <__udivmoddi4+0x1da>
 8000fe8:	4640      	mov	r0, r8
 8000fea:	e7d1      	b.n	8000f90 <__udivmoddi4+0x258>
 8000fec:	46d0      	mov	r8, sl
 8000fee:	e77b      	b.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ff0:	3d02      	subs	r5, #2
 8000ff2:	4462      	add	r2, ip
 8000ff4:	e732      	b.n	8000e5c <__udivmoddi4+0x124>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e70a      	b.n	8000e10 <__udivmoddi4+0xd8>
 8000ffa:	4464      	add	r4, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e742      	b.n	8000e86 <__udivmoddi4+0x14e>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <format_uint16>:
/**
 * Formats an unsigned 16-bit integer into the AFE's data buffer (little-endian byte order)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_uint16(uint8_t *dataArr, uint16_t data) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
	dataArr[0] = ((uint8_t)(data & 0xFF));
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	701a      	strb	r2, [r3, #0]
	dataArr[1] = ((uint8_t)(data >> 8));
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b29a      	uxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <format_int16>:
/**
 * Formats a signed 16-bit integer into the AFE's data buffer (little-endian byte order, 2's complement)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_int16(uint8_t *dataArr, int data) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
	if (data < 0) format_uint16(dataArr, (~(abs(data)) + 1));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da0b      	bge.n	800105a <format_int16+0x28>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	bfb8      	it	lt
 8001048:	425b      	neglt	r3, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	425b      	negs	r3, r3
 800104e:	b29b      	uxth	r3, r3
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffd6 	bl	8001004 <format_uint16>
	else format_uint16(dataArr, data);
}
 8001058:	e005      	b.n	8001066 <format_int16+0x34>
	else format_uint16(dataArr, data);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffcf 	bl	8001004 <format_uint16>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <main>:
bool logDataFlag = 0;
bool logAlertsFlag = 0;
bool shutdownFlag = 0;
bool wakeUpFlag = 0;

int main(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b0c0      	sub	sp, #256	; 0x100
 8001104:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 8001106:	f002 fb6e 	bl	80037e6 <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 800110a:	f000 fa61 	bl	80015d0 <SystemClock_Config>

    // Initialize GPIO, SPI, UART, TIM1, ADC1
    GPIO_Init();
 800110e:	f000 fa97 	bl	8001640 <GPIO_Init>
    SPI1_Init();
 8001112:	f000 fb77 	bl	8001804 <SPI1_Init>
    USART1_Init();
 8001116:	f000 fbbd 	bl	8001894 <USART1_Init>
    TIM1_Init();
 800111a:	f000 fbf5 	bl	8001908 <TIM1_Init>
    TIM2_Init();
 800111e:	f000 fc1d 	bl	800195c <TIM2_Init>
    ADC1_Init();
 8001122:	f000 fc7f 	bl	8001a24 <ADC1_Init>
    RTC_Init();
 8001126:	f000 fce1 	bl	8001aec <RTC_Init>

    // Start the logging timer
    TIM1->CR1 |= TIM_CR1_CEN;
 800112a:	4bbc      	ldr	r3, [pc, #752]	; (800141c <main+0x31c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4abb      	ldr	r2, [pc, #748]	; (800141c <main+0x31c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 8001136:	2200      	movs	r2, #0
 8001138:	2120      	movs	r1, #32
 800113a:	48b9      	ldr	r0, [pc, #740]	; (8001420 <main+0x320>)
 800113c:	f004 f944 	bl	80053c8 <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001146:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	619a      	str	r2, [r3, #24]

    uint16_t ctrlStatus = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
    uint16_t cellVolt = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    uint16_t cellVolts[17] = {0};
 8001166:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800116a:	2222      	movs	r2, #34	; 0x22
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f006 ffc1 	bl	80080f6 <memset>
    int16_t cellGains[16] = {12000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11900};
 8001174:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001178:	2220      	movs	r2, #32
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f006 ffba 	bl	80080f6 <memset>
 8001182:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001186:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800118a:	f642 637c 	movw	r3, #11900	; 0x2e7c
 800118e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    uint32_t MCUTemperature = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int16_t AFETemperature = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    int16_t temperatures[4] = {0};
 800119e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
    int16_t currentRead = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    uint8_t fetStatus = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    uint8_t cmdAddr = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

    uint8_t writeData[32] = {0};
 80011ba:	2300      	movs	r3, #0
 80011bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 80011d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011d6:	2202      	movs	r2, #2
 80011d8:	4619      	mov	r1, r3
 80011da:	2012      	movs	r0, #18
 80011dc:	f000 fd16 	bl	8001c0c <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 80011e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011e4:	2202      	movs	r2, #2
 80011e6:	4619      	mov	r1, r3
 80011e8:	2057      	movs	r0, #87	; 0x57
 80011ea:	f000 fde9 	bl	8001dc0 <SubCmdReadData>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80011ee:	2120      	movs	r1, #32
 80011f0:	488b      	ldr	r0, [pc, #556]	; (8001420 <main+0x320>)
 80011f2:	f004 f901 	bl	80053f8 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80011f6:	20fa      	movs	r0, #250	; 0xfa
 80011f8:	f002 fb6a 	bl	80038d0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80011fc:	2120      	movs	r1, #32
 80011fe:	4888      	ldr	r0, [pc, #544]	; (8001420 <main+0x320>)
 8001200:	f004 f8fa 	bl	80053f8 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 8001204:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001208:	f002 fb62 	bl	80038d0 <HAL_Delay>

	// Disable SLEEP mode and disable FET_TEST mode if already in FET_TEST
	SubCmdNoData(0x009A);
 800120c:	209a      	movs	r0, #154	; 0x9a
 800120e:	f000 fd8f 	bl	8001d30 <SubCmdNoData>
	if (!(readData[0] & (1 << 4))) SubCmdNoData(0x0022);
 8001212:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <main+0x124>
 800121e:	2022      	movs	r0, #34	; 0x22
 8001220:	f000 fd86 	bl	8001d30 <SubCmdNoData>

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 8001224:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001228:	2202      	movs	r2, #2
 800122a:	4619      	mov	r1, r3
 800122c:	2012      	movs	r0, #18
 800122e:	f000 fced 	bl	8001c0c <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 8001232:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001236:	2202      	movs	r2, #2
 8001238:	4619      	mov	r1, r3
 800123a:	2057      	movs	r0, #87	; 0x57
 800123c:	f000 fdc0 	bl	8001dc0 <SubCmdReadData>

	// Enter CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
 8001240:	2090      	movs	r0, #144	; 0x90
 8001242:	f000 fd75 	bl	8001d30 <SubCmdNoData>
	// Wait for Battery Status to confirm transition to CONFIG_UPDATE mode
	do {
		DirectCmdRead(0x12, readData, 2);
 8001246:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800124a:	2202      	movs	r2, #2
 800124c:	4619      	mov	r1, r3
 800124e:	2012      	movs	r0, #18
 8001250:	f000 fcdc 	bl	8001c0c <DirectCmdRead>
	} while (!(readData[0] & 0x01));
 8001254:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f2      	beq.n	8001246 <main+0x146>

	// Program configuration for all AFE registers
	RAMRegisterInit();
 8001260:	f000 fefe 	bl	8002060 <RAMRegisterInit>

	/**
	 * Set calibration gain values for all cell voltages
	 */
	for (int i = 0; i < 16; i++) {
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800126a:	e021      	b.n	80012b0 <main+0x1b0>
		format_int16(writeData, cellGains[i]);
 800126c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001276:	443b      	add	r3, r7
 8001278:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 800127c:	461a      	mov	r2, r3
 800127e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fed4 	bl	8001032 <format_int16>
		RAMRegisterWrite(CAL_GAIN_CL1 + i*2, writeData, 2);
 800128a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800128e:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8001292:	3340      	adds	r3, #64	; 0x40
 8001294:	b29b      	uxth	r3, r3
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	b29b      	uxth	r3, r3
 800129a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800129e:	2202      	movs	r2, #2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fe09 	bl	8001eb8 <RAMRegisterWrite>
	for (int i = 0; i < 16; i++) {
 80012a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012aa:	3301      	adds	r3, #1
 80012ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80012b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	ddd9      	ble.n	800126c <main+0x16c>
	}

	// Exit CONFIG_UPDATE mode, disable SLEEP mode, read manufacturing status register again
	SubCmdNoData(0x0092);
 80012b8:	2092      	movs	r0, #146	; 0x92
 80012ba:	f000 fd39 	bl	8001d30 <SubCmdNoData>
	SubCmdNoData(0x009A);
 80012be:	209a      	movs	r0, #154	; 0x9a
 80012c0:	f000 fd36 	bl	8001d30 <SubCmdNoData>
	SubCmdReadData(0x0057, readData, 2);
 80012c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80012c8:	2202      	movs	r2, #2
 80012ca:	4619      	mov	r1, r3
 80012cc:	2057      	movs	r0, #87	; 0x57
 80012ce:	f000 fd77 	bl	8001dc0 <SubCmdReadData>
	// Read battery status register
	DirectCmdRead(0x12, readData, 2);
 80012d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80012d6:	2202      	movs	r2, #2
 80012d8:	4619      	mov	r1, r3
 80012da:	2012      	movs	r0, #18
 80012dc:	f000 fc96 	bl	8001c0c <DirectCmdRead>

	// Blink status LED a few times to indicate setup is complete
	for (int i = 0; i < 10; i++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80012e6:	e00b      	b.n	8001300 <main+0x200>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80012e8:	2120      	movs	r1, #32
 80012ea:	484d      	ldr	r0, [pc, #308]	; (8001420 <main+0x320>)
 80012ec:	f004 f884 	bl	80053f8 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f002 faed 	bl	80038d0 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 80012f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012fa:	3301      	adds	r3, #1
 80012fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001300:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001304:	2b09      	cmp	r3, #9
 8001306:	ddef      	ble.n	80012e8 <main+0x1e8>
	}

	// Clear bits in the alarm registers
	writeData[0] = 0xFF;
 8001308:	23ff      	movs	r3, #255	; 0xff
 800130a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	writeData[1] = 0xFE;
 800130e:	23fe      	movs	r3, #254	; 0xfe
 8001310:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	DirectCmdWrite(0xE2, writeData, 2);
 8001314:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001318:	2202      	movs	r2, #2
 800131a:	4619      	mov	r1, r3
 800131c:	20e2      	movs	r0, #226	; 0xe2
 800131e:	f000 fcbf 	bl	8001ca0 <DirectCmdWrite>

    while (1) {
    	// Check if flag to shutdown was raised
    	if (shutdownFlag) {
 8001322:	4b40      	ldr	r3, [pc, #256]	; (8001424 <main+0x324>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d018      	beq.n	800135c <main+0x25c>
    		shutdownFlag = false; // Clear the flag
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <main+0x324>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
    		// Blinking LED to indicate it's entering shutdown
    		for (int i = 0; i < 6; i++) {
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001336:	e00b      	b.n	8001350 <main+0x250>
    			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001338:	2120      	movs	r1, #32
 800133a:	4839      	ldr	r0, [pc, #228]	; (8001420 <main+0x320>)
 800133c:	f004 f85c 	bl	80053f8 <HAL_GPIO_TogglePin>
				HAL_Delay(100);
 8001340:	2064      	movs	r0, #100	; 0x64
 8001342:	f002 fac5 	bl	80038d0 <HAL_Delay>
    		for (int i = 0; i < 6; i++) {
 8001346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800134a:	3301      	adds	r3, #1
 800134c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001354:	2b05      	cmp	r3, #5
 8001356:	ddef      	ble.n	8001338 <main+0x238>
    		}

    		EnterShutdown();
 8001358:	f001 fe1a 	bl	8002f90 <EnterShutdown>
    	}

    	// Check if flag to wake up the AFE was raised
    	if (wakeUpFlag) {
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <main+0x328>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d019      	beq.n	8001398 <main+0x298>
    		wakeUpFlag = false; // Clear the flag
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <main+0x328>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
    		// Blinking LED to indicate it's waking up
			for (int i = 0; i < 6; i++) {
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001370:	e00b      	b.n	800138a <main+0x28a>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001372:	2120      	movs	r1, #32
 8001374:	482a      	ldr	r0, [pc, #168]	; (8001420 <main+0x320>)
 8001376:	f004 f83f 	bl	80053f8 <HAL_GPIO_TogglePin>
				HAL_Delay(100);
 800137a:	2064      	movs	r0, #100	; 0x64
 800137c:	f002 faa8 	bl	80038d0 <HAL_Delay>
			for (int i = 0; i < 6; i++) {
 8001380:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001384:	3301      	adds	r3, #1
 8001386:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800138a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800138e:	2b05      	cmp	r3, #5
 8001390:	ddef      	ble.n	8001372 <main+0x272>
			}
			// Waking up the AFE
    		SubCmdNoData(0x000E);
 8001392:	200e      	movs	r0, #14
 8001394:	f000 fccc 	bl	8001d30 <SubCmdNoData>
    	}

    	// Check if flag to log data was raised
    	if (logDataFlag) {
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <main+0x32c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80b5 	beq.w	800150c <main+0x40c>
    		logDataFlag = false; // Clear the flag
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <main+0x32c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
    		//TODO: Only read measurements if FULLSCAN bit of Alarm Status is set, then clear bit after reading measurements
    		// Enable status LED to indicate data being logged
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2120      	movs	r1, #32
 80013ac:	481c      	ldr	r0, [pc, #112]	; (8001420 <main+0x320>)
 80013ae:	f004 f80b 	bl	80053c8 <HAL_GPIO_WritePin>
    		// Read the cell voltage for all 16 cells and then the pack voltage
			for (int i = 0; i < 17; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80013b8:	e028      	b.n	800140c <main+0x30c>
				cmdAddr = 0x14 + 2*i;
 80013ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80013be:	330a      	adds	r3, #10
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
				DirectCmdRead(cmdAddr, readData, 2);
 80013c8:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80013cc:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80013d0:	2202      	movs	r2, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fc1a 	bl	8001c0c <DirectCmdRead>
				// Combine the 2 8-bit cell voltage bytes into a single 16-byte variable
				cellVolt = (readData[0]) + (readData[1] << 8);
 80013d8:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4413      	add	r3, r2
 80013ea:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
				cellVolts[i] = cellVolt;
 80013ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013f8:	443b      	add	r3, r7
 80013fa:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 80013fe:	f823 2c6c 	strh.w	r2, [r3, #-108]
			for (int i = 0; i < 17; i++) {
 8001402:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001406:	3301      	adds	r3, #1
 8001408:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800140c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001410:	2b10      	cmp	r3, #16
 8001412:	ddd2      	ble.n	80013ba <main+0x2ba>
			}

			// Read the AFETemperature measured at TS1-3
			for (int i = 0; i < 3; i++) {
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800141a:	e033      	b.n	8001484 <main+0x384>
 800141c:	40012c00 	.word	0x40012c00
 8001420:	48000400 	.word	0x48000400
 8001424:	2000026a 	.word	0x2000026a
 8001428:	2000026b 	.word	0x2000026b
 800142c:	20000268 	.word	0x20000268
				cmdAddr = 0x70 + 2*i;
 8001430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001434:	3338      	adds	r3, #56	; 0x38
 8001436:	b2db      	uxtb	r3, r3
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
				DirectCmdRead(cmdAddr, readData, 2);
 800143e:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001442:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8001446:	2202      	movs	r2, #2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fbdf 	bl	8001c0c <DirectCmdRead>
				AFETemperature = (readData[0]) + (readData[1] << 8);
 800144e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001452:	b29a      	uxth	r2, r3
 8001454:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8001458:	b29b      	uxth	r3, r3
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	4413      	add	r3, r2
 8001460:	b29b      	uxth	r3, r3
 8001462:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				temperatures[i] = AFETemperature;
 8001466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001470:	443b      	add	r3, r7
 8001472:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 8001476:	f823 2c94 	strh.w	r2, [r3, #-148]
			for (int i = 0; i < 3; i++) {
 800147a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800147e:	3301      	adds	r3, #1
 8001480:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001484:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001488:	2b02      	cmp	r3, #2
 800148a:	ddd1      	ble.n	8001430 <main+0x330>
			}
			// Calculate temperature measured by MCU's ADC
			MCUTemperature = T4_Acquire();
 800148c:	f001 fdd4 	bl	8003038 <T4_Acquire>
 8001490:	4603      	mov	r3, r0
 8001492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			temperatures[3] = MCUTemperature;
 8001496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800149a:	b21b      	sxth	r3, r3
 800149c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

			// Read the CC2 current and FET status
			DirectCmdRead(0x3A, readData, 2);
 80014a0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014a4:	2202      	movs	r2, #2
 80014a6:	4619      	mov	r1, r3
 80014a8:	203a      	movs	r0, #58	; 0x3a
 80014aa:	f000 fbaf 	bl	8001c0c <DirectCmdRead>
			currentRead = (readData[0]) + (readData[1] << 8);
 80014ae:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			DirectCmdRead(0x7F, readData, 1);
 80014c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014ca:	2201      	movs	r2, #1
 80014cc:	4619      	mov	r1, r3
 80014ce:	207f      	movs	r0, #127	; 0x7f
 80014d0:	f000 fb9c 	bl	8001c0c <DirectCmdRead>
			fetStatus = readData[0];
 80014d4:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80014d8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

			// Transmit logging information
			TransmitLogAndTimestamp();
 80014dc:	f001 f810 	bl	8002500 <TransmitLogAndTimestamp>
			TransmitCellPackVoltages(cellVolts, 17);
 80014e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014e4:	2111      	movs	r1, #17
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f8b6 	bl	8002658 <TransmitCellPackVoltages>
			TransmitCurrentReading(currentRead);
 80014ec:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	; 0xdc
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fa8b 	bl	8002a0c <TransmitCurrentReading>
			TransmitTemperatures(temperatures, 4);
 80014f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014fa:	2104      	movs	r1, #4
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fafb 	bl	8002af8 <TransmitTemperatures>

			// Disable status LED to indicate data finished being logged
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2120      	movs	r1, #32
 8001506:	482e      	ldr	r0, [pc, #184]	; (80015c0 <main+0x4c0>)
 8001508:	f003 ff5e 	bl	80053c8 <HAL_GPIO_WritePin>
    	}

    	// Check if AFE Alarm Status indicates one of the safety status bits has been set
    	if (logAlertsFlag) {
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <main+0x4c4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f43f af06 	beq.w	8001322 <main+0x222>
    		logAlertsFlag = false;
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <main+0x4c4>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
			// Read the Alarm Status register to figure out what's causing the alert
    		DirectCmdRead(0x62, readData, 2);
 800151c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001520:	2202      	movs	r2, #2
 8001522:	4619      	mov	r1, r3
 8001524:	2062      	movs	r0, #98	; 0x62
 8001526:	f000 fb71 	bl	8001c0c <DirectCmdRead>
    		writeData[0] = 0x00;
 800152a:	2300      	movs	r3, #0
 800152c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    		writeData[1] = 0x00;
 8001530:	2300      	movs	r3, #0
 8001532:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		// Check each bit and determine where to look for the cause of the alert
    		// Safety status B/C
    		if (readData[1] & (1 << 7)) {
 8001536:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800153a:	b25b      	sxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	da08      	bge.n	8001552 <main+0x452>
    			TransmitSafetyStatusB();
 8001540:	f001 fc7a 	bl	8002e38 <TransmitSafetyStatusB>
    			// No need to check safety status C as no protections there are enabled
    			writeData[1] |= (1 << 7);
 8001544:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		}
    		// Safety status A
    		if (readData[1] & (1 << 6)) {
 8001552:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8001556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <main+0x470>
    			TransmitSafetyStatusA();
 800155e:	f001 fbeb 	bl	8002d38 <TransmitSafetyStatusA>
    			writeData[1] |= (1 << 6);
 8001562:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		}
    		// Permanent failure
    		if (readData[1] & (1 << 5)) {
 8001570:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	2b00      	cmp	r3, #0
 800157a:	d012      	beq.n	80015a2 <main+0x4a2>
    			// If there's a permanent failure, continuously transmit a distress signal
    			uint8_t msg[] = "Permanent failure! All BMS operations halted, requesting attention...";
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <main+0x4c8>)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4611      	mov	r1, r2
 8001582:	2246      	movs	r2, #70	; 0x46
 8001584:	4618      	mov	r0, r3
 8001586:	f008 fa0c 	bl	80099a2 <memcpy>
    			while (1) {
    				HAL_Delay(10000);
 800158a:	f242 7010 	movw	r0, #10000	; 0x2710
 800158e:	f002 f99f 	bl	80038d0 <HAL_Delay>
    				HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001592:	1d39      	adds	r1, r7, #4
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	2245      	movs	r2, #69	; 0x45
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <main+0x4cc>)
 800159c:	f005 ff76 	bl	800748c <HAL_UART_Transmit>
    				HAL_Delay(10000);
 80015a0:	e7f3      	b.n	800158a <main+0x48a>
    			}
    		}
    		// Clear the bits for the received safety statuses, as well as the masked safety alerts
    		writeData[1] |= 0x18;
 80015a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015a6:	f043 0318 	orr.w	r3, r3, #24
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
//    		writeData[0] = 0xFF;
//    		writeData[1] = 0xFE;
    		DirectCmdWrite(0xE2, writeData, 2);
 80015b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015b4:	2202      	movs	r2, #2
 80015b6:	4619      	mov	r1, r3
 80015b8:	20e2      	movs	r0, #226	; 0xe2
 80015ba:	f000 fb71 	bl	8001ca0 <DirectCmdWrite>
    	if (shutdownFlag) {
 80015be:	e6b0      	b.n	8001322 <main+0x222>
 80015c0:	48000400 	.word	0x48000400
 80015c4:	20000269 	.word	0x20000269
 80015c8:	0800b964 	.word	0x0800b964
 80015cc:	20000150 	.word	0x20000150

080015d0 <SystemClock_Config>:
}

/**
 * Configures the clocks for the STM32
 */
void SystemClock_Config(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b096      	sub	sp, #88	; 0x58
 80015d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2244      	movs	r2, #68	; 0x44
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f006 fd89 	bl	80080f6 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015f6:	f003 ff3f 	bl	8005478 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015fa:	2310      	movs	r3, #16
 80015fc:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015fe:	2301      	movs	r3, #1
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001606:	2360      	movs	r3, #96	; 0x60
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800160a:	2300      	movs	r3, #0
 800160c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4618      	mov	r0, r3
 8001614:	f003 ff86 	bl	8005524 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001618:	230f      	movs	r3, #15
 800161a:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800162c:	463b      	mov	r3, r7
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f004 fbd9 	bl	8005de8 <HAL_RCC_ClockConfig>
}
 8001636:	bf00      	nop
 8001638:	3758      	adds	r7, #88	; 0x58
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <GPIO_Init>:

/**
 * Initializes all GPIO pins
 */
void GPIO_Init(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <GPIO_Init+0x164>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a56      	ldr	r2, [pc, #344]	; (80017a4 <GPIO_Init+0x164>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4b54      	ldr	r3, [pc, #336]	; (80017a4 <GPIO_Init+0x164>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b51      	ldr	r3, [pc, #324]	; (80017a4 <GPIO_Init+0x164>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a50      	ldr	r2, [pc, #320]	; (80017a4 <GPIO_Init+0x164>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b4e      	ldr	r3, [pc, #312]	; (80017a4 <GPIO_Init+0x164>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <GPIO_Init+0x164>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	4a4a      	ldr	r2, [pc, #296]	; (80017a4 <GPIO_Init+0x164>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6613      	str	r3, [r2, #96]	; 0x60
 8001682:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <GPIO_Init+0x164>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // Enable power interface clock
 800168e:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <GPIO_Init+0x164>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	4a44      	ldr	r2, [pc, #272]	; (80017a4 <GPIO_Init+0x164>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6593      	str	r3, [r2, #88]	; 0x58

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016aa:	2301      	movs	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016ae:	2311      	movs	r3, #17
 80016b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	4839      	ldr	r0, [pc, #228]	; (80017a8 <GPIO_Init+0x168>)
 80016c2:	f003 fd0f 	bl	80050e4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 80016c6:	2201      	movs	r2, #1
 80016c8:	2101      	movs	r1, #1
 80016ca:	4837      	ldr	r0, [pc, #220]	; (80017a8 <GPIO_Init+0x168>)
 80016cc:	f003 fe7c 	bl	80053c8 <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016d0:	2320      	movs	r3, #32
 80016d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	4830      	ldr	r0, [pc, #192]	; (80017a8 <GPIO_Init+0x168>)
 80016e8:	f003 fcfc 	bl	80050e4 <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80016ec:	23e0      	movs	r3, #224	; 0xe0
 80016ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fc:	2305      	movs	r3, #5
 80016fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f003 fceb 	bl	80050e4 <HAL_GPIO_Init>

    // Configure PB6 (UART_TX), PB7 (UART_RX)
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800170e:	23c0      	movs	r3, #192	; 0xc0
 8001710:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Alternate function for USART1
 800171e:	2307      	movs	r3, #7
 8001720:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	481f      	ldr	r0, [pc, #124]	; (80017a8 <GPIO_Init+0x168>)
 800172a:	f003 fcdb 	bl	80050e4 <HAL_GPIO_Init>
//
//	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
//	HAL_NVIC_EnableIRQ(EXTI4_IRQn);

	// Configure PA1 (T4 pin) as an analog input
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800172e:	2302      	movs	r3, #2
 8001730:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001732:	2303      	movs	r3, #3
 8001734:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f003 fcce 	bl	80050e4 <HAL_GPIO_Init>

	// Configure PA2 as an input with an internal pull-up (SYS WKUP)
	// TODO: Remove internal pull-up (only used for testing purposes, when switch is actually connected
	// 		 to the BMS it will assert the pin's state)
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001748:	2304      	movs	r3, #4
 800174a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f003 fcc1 	bl	80050e4 <HAL_GPIO_Init>

	// Enable EXTI for PA2
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PA; // Map EXTI2 to PA2
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <GPIO_Init+0x16c>)
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <GPIO_Init+0x16c>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	6093      	str	r3, [r2, #8]
	EXTI->IMR1 |= EXTI_IMR1_IM2; // Unmask interrupt
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <GPIO_Init+0x170>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <GPIO_Init+0x170>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6013      	str	r3, [r2, #0]
	EXTI->RTSR1 |= EXTI_RTSR1_RT2; // Enable rising edge trigger
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <GPIO_Init+0x170>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <GPIO_Init+0x170>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6093      	str	r3, [r2, #8]
	EXTI->FTSR1 |= EXTI_FTSR1_FT2; // Enable falling edge trigger
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <GPIO_Init+0x170>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <GPIO_Init+0x170>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	60d3      	str	r3, [r2, #12]

	// Enable EXTI2 interrupt in NVIC
	NVIC_SetPriority(EXTI2_IRQn, 0);
 800178e:	2100      	movs	r1, #0
 8001790:	2008      	movs	r0, #8
 8001792:	f7ff fc8b 	bl	80010ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI2_IRQn);
 8001796:	2008      	movs	r0, #8
 8001798:	f7ff fc6a 	bl	8001070 <__NVIC_EnableIRQ>
}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	48000400 	.word	0x48000400
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40010400 	.word	0x40010400

080017b4 <EXTI2_IRQHandler>:

// EXTI2 interrupt handler
void EXTI2_IRQHandler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
	// Check if EXTI2 triggered
    if (EXTI->PR1 & EXTI_PR1_PIF2) {
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <EXTI2_IRQHandler+0x44>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <EXTI2_IRQHandler+0x38>
        EXTI->PR1 |= EXTI_PR1_PIF2; // Clear interrupt flag
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <EXTI2_IRQHandler+0x44>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <EXTI2_IRQHandler+0x44>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6153      	str	r3, [r2, #20]

        if (GPIOA->IDR & GPIO_IDR_ID2) {
 80017d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <EXTI2_IRQHandler+0x32>
            // PA2 rising edge detected, wake-up handled automatically by EXTI
        	wakeUpFlag = true; // Raise flag to wake up the AFE
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <EXTI2_IRQHandler+0x48>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
        else {
            // PA2 falling edge detected, raise flag to enter shutdown mode
        	shutdownFlag = true;
        }
    }
}
 80017e4:	e002      	b.n	80017ec <EXTI2_IRQHandler+0x38>
        	shutdownFlag = true;
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <EXTI2_IRQHandler+0x4c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40010400 	.word	0x40010400
 80017fc:	2000026b 	.word	0x2000026b
 8001800:	2000026a 	.word	0x2000026a

08001804 <SPI1_Init>:

// Initializes the SPI1 peripheral in master mode
void SPI1_Init(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <SPI1_Init+0x84>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <SPI1_Init+0x84>)
 8001810:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001814:	6613      	str	r3, [r2, #96]	; 0x60
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <SPI1_Init+0x84>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <SPI1_Init+0x88>)
 8001824:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <SPI1_Init+0x8c>)
 8001826:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <SPI1_Init+0x88>)
 800182a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800182e:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <SPI1_Init+0x88>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <SPI1_Init+0x88>)
 8001838:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800183c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <SPI1_Init+0x88>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <SPI1_Init+0x88>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <SPI1_Init+0x88>)
 800184c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001850:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <SPI1_Init+0x88>)
 8001854:	2228      	movs	r2, #40	; 0x28
 8001856:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <SPI1_Init+0x88>)
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <SPI1_Init+0x88>)
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <SPI1_Init+0x88>)
 8001866:	2200      	movs	r2, #0
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <SPI1_Init+0x88>)
 800186c:	2207      	movs	r2, #7
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001870:	4806      	ldr	r0, [pc, #24]	; (800188c <SPI1_Init+0x88>)
 8001872:	f005 f993 	bl	8006b9c <HAL_SPI_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SPI1_Init+0x7c>
    {
        // Initialization error
        Error_Handler();
 800187c:	f001 fd2e 	bl	80032dc <Error_Handler>
    }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	200000ec 	.word	0x200000ec
 8001890:	40013000 	.word	0x40013000

08001894 <USART1_Init>:

/**
 * Initializes the USART1 peripheral in UART TX/RX mode
 */
void USART1_Init(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <USART1_Init+0x68>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <USART1_Init+0x68>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6613      	str	r3, [r2, #96]	; 0x60
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <USART1_Init+0x68>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

	// Configure UART peripheral
	huart1.Instance = USART1;
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <USART1_Init+0x6c>)
 80018b4:	4a13      	ldr	r2, [pc, #76]	; (8001904 <USART1_Init+0x70>)
 80018b6:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <USART1_Init+0x6c>)
 80018ba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018be:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <USART1_Init+0x6c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <USART1_Init+0x6c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <USART1_Init+0x6c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <USART1_Init+0x6c>)
 80018d4:	220c      	movs	r2, #12
 80018d6:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <USART1_Init+0x6c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <USART1_Init+0x6c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e4:	4806      	ldr	r0, [pc, #24]	; (8001900 <USART1_Init+0x6c>)
 80018e6:	f005 fd83 	bl	80073f0 <HAL_UART_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <USART1_Init+0x60>
	{
		// Initialization error
		Error_Handler();
 80018f0:	f001 fcf4 	bl	80032dc <Error_Handler>
	}
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000
 8001900:	20000150 	.word	0x20000150
 8001904:	40013800 	.word	0x40013800

08001908 <TIM1_Init>:

/**
 * Initializes the TIM1 peripheral with interrupts enabled
 */
void TIM1_Init(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Enable TIM1 clock
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <TIM1_Init+0x4c>)
 800190e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001910:	4a10      	ldr	r2, [pc, #64]	; (8001954 <TIM1_Init+0x4c>)
 8001912:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001916:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->PSC = 4000 - 1; // Given 4MHz clock, 4000 cycles for 1ms
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <TIM1_Init+0x50>)
 800191a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 5000 - 1; // Generate interrupt every 5000ms (5s)
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <TIM1_Init+0x50>)
 8001922:	f241 3287 	movw	r2, #4999	; 0x1387
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <TIM1_Init+0x50>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <TIM1_Init+0x50>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1); // Set TIM1 interrupt priority
 8001934:	2101      	movs	r1, #1
 8001936:	2019      	movs	r0, #25
 8001938:	f7ff fbb8 	bl	80010ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); // Enable TIM1 interrupt
 800193c:	2019      	movs	r0, #25
 800193e:	f7ff fb97 	bl	8001070 <__NVIC_EnableIRQ>

	TIM1->CR1 |= TIM_CR1_CEN; // Enable TIM1
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <TIM1_Init+0x50>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <TIM1_Init+0x50>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6013      	str	r3, [r2, #0]
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	40012c00 	.word	0x40012c00

0800195c <TIM2_Init>:

/**
 * Initializes the TIM2 peripheral with interrupts enabled
 */
void TIM2_Init(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // Enable TIM2 clock
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <TIM2_Init+0x58>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <TIM2_Init+0x58>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2->PSC = 4000 - 1; // Given 4MHz clock, 4000 cycles for 1ms
 800196c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001970:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 500 - 1; // Generate interrupt every 500ms (half second)
 8001976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800197a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8001980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM2_IRQn, 0); // Set TIM2 interrupt priority
 8001990:	2100      	movs	r1, #0
 8001992:	201c      	movs	r0, #28
 8001994:	f7ff fb8a 	bl	80010ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable TIM2 interrupt
 8001998:	201c      	movs	r0, #28
 800199a:	f7ff fb69 	bl	8001070 <__NVIC_EnableIRQ>

	TIM2->CR1 |= TIM_CR1_CEN; // Enable TIM2
 800199e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6013      	str	r3, [r2, #0]
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <TIM1_UP_TIM16_IRQHandler>:

/**
 * Defining the ISR for the TIM1 timer
 */
void TIM1_UP_TIM16_IRQHandler(void) {
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
	// Check if UIF flag is set for TIM1
	if (TIM1->SR & TIM_SR_UIF) {
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <TIM1_UP_TIM16_IRQHandler+0x22>
		logDataFlag = true; // Raise a flag to log data from the AFE
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <TIM1_UP_TIM16_IRQHandler+0x30>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~TIM_SR_UIF; // Clear UIF flag
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	6113      	str	r3, [r2, #16]
	}
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40012c00 	.word	0x40012c00
 80019e8:	20000268 	.word	0x20000268

080019ec <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
	// Check if UIF flag is set for TIM2
    if (TIM2->SR & TIM_SR_UIF) {
 80019f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <TIM2_IRQHandler+0x28>
    	logAlertsFlag = true; // Raise a flag to check for safety alerts from the AFE
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <TIM2_IRQHandler+0x34>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8001a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	6113      	str	r3, [r2, #16]
    }
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000269 	.word	0x20000269

08001a24 <ADC1_Init>:

/**
 * Initializes the ADC1 peripheral in 12-bit resolution
 */
void ADC1_Init(void) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	615a      	str	r2, [r3, #20]

    // Enable the clock for ADC1
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <ADC1_Init+0xb8>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	4a26      	ldr	r2, [pc, #152]	; (8001adc <ADC1_Init+0xb8>)
 8001a42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a48:	4b24      	ldr	r3, [pc, #144]	; (8001adc <ADC1_Init+0xb8>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]

    // Configure the ADC peripheral
    hadc1.Instance = ADC1;
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a56:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <ADC1_Init+0xc0>)
 8001a58:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a60:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;  // 12-bit resolution
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;  // Right data alignment
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;  // Single channel
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;  // End of conversion flag after each conversion
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a76:	2204      	movs	r2, #4
 8001a78:	615a      	str	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;  // Single conversion mode
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;  // Single conversion
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;  // Start conversion by software
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <ADC1_Init+0xbc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001aa2:	480f      	ldr	r0, [pc, #60]	; (8001ae0 <ADC1_Init+0xbc>)
 8001aa4:	f002 f97c 	bl	8003da0 <HAL_ADC_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <ADC1_Init+0x8e>
        // Initialization error
        Error_Handler();
 8001aae:	f001 fc15 	bl	80032dc <Error_Handler>
    }

    // Configure the ADC regular channel (PA1 = ADC_CHANNEL_6)
    sConfig.Channel = ADC_CHANNEL_6;
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <ADC1_Init+0xc4>)
 8001ab4:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab6:	2306      	movs	r3, #6
 8001ab8:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;  // Sample time (adjust as necessary)
 8001aba:	2304      	movs	r3, #4
 8001abc:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <ADC1_Init+0xbc>)
 8001ac6:	f002 fc89 	bl	80043dc <HAL_ADC_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <ADC1_Init+0xb0>
        // Channel configuration error
        Error_Handler();
 8001ad0:	f001 fc04 	bl	80032dc <Error_Handler>
    }
}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	200001d8 	.word	0x200001d8
 8001ae4:	50040000 	.word	0x50040000
 8001ae8:	19200040 	.word	0x19200040

08001aec <RTC_Init>:

/**
  * Initializes the RTC peripheral
  */
void RTC_Init(void) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001b00:	2300      	movs	r3, #0
 8001b02:	603b      	str	r3, [r7, #0]

	// Initialize RTC
	hrtc.Instance = RTC;
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <RTC_Init+0xb0>)
 8001b06:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <RTC_Init+0xb4>)
 8001b08:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <RTC_Init+0xb0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <RTC_Init+0xb0>)
 8001b12:	227f      	movs	r2, #127	; 0x7f
 8001b14:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <RTC_Init+0xb0>)
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <RTC_Init+0xb0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <RTC_Init+0xb0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <RTC_Init+0xb0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <RTC_Init+0xb0>)
 8001b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b34:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <RTC_Init+0xb0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001b3c:	4817      	ldr	r0, [pc, #92]	; (8001b9c <RTC_Init+0xb0>)
 8001b3e:	f004 fcfd 	bl	800653c <HAL_RTC_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <RTC_Init+0x60>
		Error_Handler();
 8001b48:	f001 fbc8 	bl	80032dc <Error_Handler>
	}

	// Set initial time
	sTime.Hours = 0x09;
 8001b4c:	2309      	movs	r3, #9
 8001b4e:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x32;
 8001b50:	2332      	movs	r3, #50	; 0x32
 8001b52:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x00;
 8001b54:	2300      	movs	r3, #0
 8001b56:	71bb      	strb	r3, [r7, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480f      	ldr	r0, [pc, #60]	; (8001b9c <RTC_Init+0xb0>)
 8001b60:	f004 fd7c 	bl	800665c <HAL_RTC_SetTime>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <RTC_Init+0x82>
		Error_Handler();
 8001b6a:	f001 fbb7 	bl	80032dc <Error_Handler>
	}

	// Set initial date
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_DECEMBER;
 8001b72:	2312      	movs	r3, #18
 8001b74:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x10;
 8001b76:	2310      	movs	r3, #16
 8001b78:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x24; // Year 2024
 8001b7a:	2324      	movs	r3, #36	; 0x24
 8001b7c:	70fb      	strb	r3, [r7, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2201      	movs	r2, #1
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <RTC_Init+0xb0>)
 8001b86:	f004 fe62 	bl	800684e <HAL_RTC_SetDate>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <RTC_Init+0xa8>
		Error_Handler();
 8001b90:	f001 fba4 	bl	80032dc <Error_Handler>
	}
}
 8001b94:	bf00      	nop
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000023c 	.word	0x2000023c
 8001ba0:	40002800 	.word	0x40002800

08001ba4 <crc8>:
 * Calculates a CRC value according to the polynomial x^8 + x^2 + x + 1
 * @param data Pointer to an array storing the data bytes that will be transmitted
 * @param len Number of bytes that will be transmitted
 * @return The calculated CRC byte
 */
uint8_t crc8(uint8_t *data, size_t len) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
    while (len--) {
 8001bb2:	e01e      	b.n	8001bf2 <crc8+0x4e>
        crc ^= *data++;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	4053      	eors	r3, r2
 8001bc0:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73bb      	strb	r3, [r7, #14]
 8001bc6:	e011      	b.n	8001bec <crc8+0x48>
            if (crc & 0x80) crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 8001bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da07      	bge.n	8001be0 <crc8+0x3c>
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	f083 0307 	eor.w	r3, r3, #7
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e002      	b.n	8001be6 <crc8+0x42>
            else crc <<= 1;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i) {
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	3301      	adds	r3, #1
 8001bea:	73bb      	strb	r3, [r7, #14]
 8001bec:	7bbb      	ldrb	r3, [r7, #14]
 8001bee:	2b07      	cmp	r3, #7
 8001bf0:	d9ea      	bls.n	8001bc8 <crc8+0x24>
    while (len--) {
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	603a      	str	r2, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1db      	bne.n	8001bb4 <crc8+0x10>
        }
    }
    return crc;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <DirectCmdRead>:
 * Sends a direct command to the AFE and reads the data that is output
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <DirectCmdRead+0x90>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	823b      	strh	r3, [r7, #16]
 8001c22:	2300      	movs	r3, #0
 8001c24:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <DirectCmdRead+0x90>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	81bb      	strh	r3, [r7, #12]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	723b      	strb	r3, [r7, #8]
 8001c34:	23ff      	movs	r3, #255	; 0xff
 8001c36:	727b      	strb	r3, [r7, #9]
	uint8_t crcLower = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	74fb      	strb	r3, [r7, #19]
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e023      	b.n	8001c8a <DirectCmdRead+0x7e>
		fullCmd[0] = cmd + i; // Increment the address
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	723b      	strb	r3, [r7, #8]
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	2102      	movs	r1, #2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ffa5 	bl	8001ba4 <crc8>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 8001c5e:	7a3b      	ldrb	r3, [r7, #8]
 8001c60:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 8001c62:	7a7b      	ldrb	r3, [r7, #9]
 8001c64:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 8001c66:	7cfb      	ldrb	r3, [r7, #19]
 8001c68:	73bb      	strb	r3, [r7, #14]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8001c6a:	f107 0110 	add.w	r1, r7, #16
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2203      	movs	r2, #3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fbab 	bl	80023d0 <AFETransmitReadCmd>
		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	7c7a      	ldrb	r2, [r7, #17]
 8001c82:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dbd7      	blt.n	8001c42 <DirectCmdRead+0x36>
	}
}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0800b9ac 	.word	0x0800b9ac

08001ca0 <DirectCmdWrite>:
 * Sends a direct command to the AFE and writes the provided data to it
 * @param cmd The address byte for the command
 * @param writeData Pointer to the 8-bit integer array containing the data to write
 * @param len Number of bytes to write to the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdWrite(uint8_t cmd, uint8_t *writeData, uint8_t len) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <DirectCmdWrite+0x8c>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	823b      	strh	r3, [r7, #16]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <DirectCmdWrite+0x8c>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	81bb      	strh	r3, [r7, #12]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[2] = {0};
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	813b      	strh	r3, [r7, #8]
	uint8_t crcLower = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	74fb      	strb	r3, [r7, #19]

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e023      	b.n	8001d1a <DirectCmdWrite+0x7a>
		fullCmd[0] = cmd + i;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	723b      	strb	r3, [r7, #8]
		fullCmd[1] = writeData[i];
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	727b      	strb	r3, [r7, #9]
		crcLower = crc8(fullCmd, 2);
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2102      	movs	r1, #2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff58 	bl	8001ba4 <crc8>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 8001cf8:	7a3b      	ldrb	r3, [r7, #8]
 8001cfa:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 8001cfc:	7a7b      	ldrb	r3, [r7, #9]
 8001cfe:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 8001d00:	7cfb      	ldrb	r3, [r7, #19]
 8001d02:	73bb      	strb	r3, [r7, #14]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001d04:	f107 0110 	add.w	r1, r7, #16
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fbae 	bl	8002470 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++) {
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3301      	adds	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dbd7      	blt.n	8001cd2 <DirectCmdWrite+0x32>
	}
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0800b9ac 	.word	0x0800b9ac

08001d30 <SubCmdNoData>:

/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <SubCmdNoData+0x8c>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	833b      	strh	r3, [r7, #24]
 8001d40:	2300      	movs	r3, #0
 8001d42:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001d44:	23be      	movs	r3, #190	; 0xbe
 8001d46:	753b      	strb	r3, [r7, #20]
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	2102      	movs	r1, #2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff25 	bl	8001ba4 <crc8>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001d5e:	23bf      	movs	r3, #191	; 0xbf
 8001d60:	743b      	strb	r3, [r7, #16]
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2102      	movs	r1, #2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff16 	bl	8001ba4 <crc8>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	77bb      	strb	r3, [r7, #30]

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001d7c:	7d3b      	ldrb	r3, [r7, #20]
 8001d7e:	733b      	strb	r3, [r7, #12]
 8001d80:	7d7b      	ldrb	r3, [r7, #21]
 8001d82:	737b      	strb	r3, [r7, #13]
 8001d84:	7ffb      	ldrb	r3, [r7, #31]
 8001d86:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001d88:	f107 0118 	add.w	r1, r7, #24
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2203      	movs	r2, #3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fb6c 	bl	8002470 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001d98:	7c3b      	ldrb	r3, [r7, #16]
 8001d9a:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 8001d9c:	7c7b      	ldrb	r3, [r7, #17]
 8001d9e:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 8001da0:	7fbb      	ldrb	r3, [r7, #30]
 8001da2:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001da4:	f107 0118 	add.w	r1, r7, #24
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2203      	movs	r2, #3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fb5e 	bl	8002470 <AFETransmitWriteCmd>
}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	0800b9ac 	.word	0x0800b9ac

08001dc0 <SubCmdReadData>:
 * Sends a sub-command to the AFE and reads the data that is output
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	80fb      	strh	r3, [r7, #6]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001dd0:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <SubCmdReadData+0xf4>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	83bb      	strh	r3, [r7, #28]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	77bb      	strb	r3, [r7, #30]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001dda:	23be      	movs	r3, #190	; 0xbe
 8001ddc:	763b      	strb	r3, [r7, #24]
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	2102      	movs	r1, #2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff feda 	bl	8001ba4 <crc8>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001df6:	23bf      	movs	r3, #191	; 0xbf
 8001df8:	753b      	strb	r3, [r7, #20]
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2102      	movs	r1, #2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff feca 	bl	8001ba4 <crc8>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001e16:	7e3b      	ldrb	r3, [r7, #24]
 8001e18:	743b      	strb	r3, [r7, #16]
 8001e1a:	7e7b      	ldrb	r3, [r7, #25]
 8001e1c:	747b      	strb	r3, [r7, #17]
 8001e1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e22:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001e24:	f107 011c 	add.w	r1, r7, #28
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fb1e 	bl	8002470 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001e34:	7d3b      	ldrb	r3, [r7, #20]
 8001e36:	743b      	strb	r3, [r7, #16]
	txData[1] = commandUpperAddr[1];
 8001e38:	7d7b      	ldrb	r3, [r7, #21]
 8001e3a:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001e3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e40:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001e42:	f107 011c 	add.w	r1, r7, #28
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fb0f 	bl	8002470 <AFETransmitWriteCmd>

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 8001e52:	2300      	movs	r3, #0
 8001e54:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e022      	b.n	8001ea2 <SubCmdReadData+0xe2>
		readData[0] = READ_DATA_BUFF_LSB + i;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3340      	adds	r3, #64	; 0x40
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	733b      	strb	r3, [r7, #12]
		readData[1] = 0xFF;
 8001e66:	23ff      	movs	r3, #255	; 0xff
 8001e68:	737b      	strb	r3, [r7, #13]

		txData[0] = readData[0];
 8001e6a:	7b3b      	ldrb	r3, [r7, #12]
 8001e6c:	743b      	strb	r3, [r7, #16]
		txData[1] = readData[1];
 8001e6e:	7b7b      	ldrb	r3, [r7, #13]
 8001e70:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(readData, 2);
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	2102      	movs	r1, #2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fe93 	bl	8001ba4 <crc8>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	74bb      	strb	r3, [r7, #18]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8001e82:	f107 011c 	add.w	r1, r7, #28
 8001e86:	f107 0310 	add.w	r3, r7, #16
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fa9f 	bl	80023d0 <AFETransmitReadCmd>

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	7f7a      	ldrb	r2, [r7, #29]
 8001e9a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	797b      	ldrb	r3, [r7, #5]
 8001ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	dbd8      	blt.n	8001e5c <SubCmdReadData+0x9c>
	}
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	0800b9ac 	.word	0x0800b9ac

08001eb8 <RAMRegisterWrite>:
 * Writes the given value in one of the AFE's RAM registers
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	; 0x30
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	80fb      	strh	r3, [r7, #6]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001ec8:	4b64      	ldr	r3, [pc, #400]	; (800205c <RAMRegisterWrite+0x1a4>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	83bb      	strh	r3, [r7, #28]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	77bb      	strb	r3, [r7, #30]
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
 8001ed2:	23be      	movs	r3, #190	; 0xbe
 8001ed4:	763b      	strb	r3, [r7, #24]
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(lowerAddr, 2);
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fe5e 	bl	8001ba4 <crc8>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
 8001eee:	23bf      	movs	r3, #191	; 0xbf
 8001ef0:	753b      	strb	r3, [r7, #20]
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(upperAddr, 2);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2102      	movs	r1, #2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fe4e 	bl	8001ba4 <crc8>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
 8001f0e:	7e3b      	ldrb	r3, [r7, #24]
 8001f10:	743b      	strb	r3, [r7, #16]
 8001f12:	7e7b      	ldrb	r3, [r7, #25]
 8001f14:	747b      	strb	r3, [r7, #17]
 8001f16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f1a:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001f1c:	f107 011c 	add.w	r1, r7, #28
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	2203      	movs	r2, #3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 faa2 	bl	8002470 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = upperAddr[0];
 8001f2c:	7d3b      	ldrb	r3, [r7, #20]
 8001f2e:	743b      	strb	r3, [r7, #16]
	txData[1] = upperAddr[1];
 8001f30:	7d7b      	ldrb	r3, [r7, #21]
 8001f32:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001f34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f38:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001f3a:	f107 011c 	add.w	r1, r7, #28
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	2203      	movs	r2, #3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fa93 	bl	8002470 <AFETransmitWriteCmd>

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f52:	e020      	b.n	8001f96 <RAMRegisterWrite+0xde>
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
 8001f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3b40      	subs	r3, #64	; 0x40
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	733b      	strb	r3, [r7, #12]
		writeBytes[1] = writeData[i];
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	737b      	strb	r3, [r7, #13]

		txData[0] = writeBytes[0];
 8001f68:	7b3b      	ldrb	r3, [r7, #12]
 8001f6a:	743b      	strb	r3, [r7, #16]
		txData[1] = writeBytes[1];
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	2102      	movs	r1, #2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fe14 	bl	8001ba4 <crc8>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	74bb      	strb	r3, [r7, #18]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001f80:	f107 011c 	add.w	r1, r7, #28
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fa70 	bl	8002470 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++) {
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	3301      	adds	r3, #1
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f96:	797b      	ldrb	r3, [r7, #5]
 8001f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dbda      	blt.n	8001f54 <RAMRegisterWrite+0x9c>
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa8:	e00b      	b.n	8001fc2 <RAMRegisterWrite+0x10a>
		checkSum += writeData[i];
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	797b      	ldrb	r3, [r7, #5]
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dbef      	blt.n	8001faa <RAMRegisterWrite+0xf2>
	}
	checkSum += lowerAddr[1];
 8001fca:	7e7a      	ldrb	r2, [r7, #25]
 8001fcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum += upperAddr[1];
 8001fd6:	7d7a      	ldrb	r2, [r7, #21]
 8001fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fdc:	4413      	add	r3, r2
 8001fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum = ~(checkSum);
 8001fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
 8001fec:	23e0      	movs	r3, #224	; 0xe0
 8001fee:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = checkSum;
 8001ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ff4:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001ff6:	7b3b      	ldrb	r3, [r7, #12]
 8001ff8:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001ffa:	7b7b      	ldrb	r3, [r7, #13]
 8001ffc:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	2102      	movs	r1, #2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fdcd 	bl	8001ba4 <crc8>
 800200a:	4603      	mov	r3, r0
 800200c:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 800200e:	f107 011c 	add.w	r1, r7, #28
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	2203      	movs	r2, #3
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fa29 	bl	8002470 <AFETransmitWriteCmd>

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
 800201e:	23e1      	movs	r3, #225	; 0xe1
 8002020:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes
 8002022:	797b      	ldrb	r3, [r7, #5]
 8002024:	3304      	adds	r3, #4
 8002026:	b2db      	uxtb	r3, r3
 8002028:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 800202a:	7b3b      	ldrb	r3, [r7, #12]
 800202c:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 800202e:	7b7b      	ldrb	r3, [r7, #13]
 8002030:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	2102      	movs	r1, #2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fdb3 	bl	8001ba4 <crc8>
 800203e:	4603      	mov	r3, r0
 8002040:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8002042:	f107 011c 	add.w	r1, r7, #28
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	2203      	movs	r2, #3
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fa0f 	bl	8002470 <AFETransmitWriteCmd>
}
 8002052:	bf00      	nop
 8002054:	3730      	adds	r7, #48	; 0x30
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	0800b9ac 	.word	0x0800b9ac

08002060 <RAMRegisterInit>:

/**
 * Programs all the relevant AFE registers. To be used whenever BMS powers on or AFE enters SHUTDOWN
 */
void RAMRegisterInit(void) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
	// Initializing buffer for writing data to AFE
	uint8_t writeData[32] = {0};
 8002066:	2300      	movs	r3, #0
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	615a      	str	r2, [r3, #20]
 800207a:	619a      	str	r2, [r3, #24]

	/**
	 * Configuration settings registers
	 */
	// Power configuration
	format_uint16(writeData, 0x2D81);
 800207c:	463b      	mov	r3, r7
 800207e:	f642 5181 	movw	r1, #11649	; 0x2d81
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe ffbe 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_CONF_PWR, writeData, 2); // Keep AFE's LDOs in the same state when entering DEEPSLEEP
 8002088:	463b      	mov	r3, r7
 800208a:	2202      	movs	r2, #2
 800208c:	4619      	mov	r1, r3
 800208e:	f249 2034 	movw	r0, #37428	; 0x9234
 8002092:	f7ff ff11 	bl	8001eb8 <RAMRegisterWrite>
	// Configure TS pins
	writeData[0] = 0x07; // TS1 & TS2: Thermistor temperature, for cell temperature protection
 8002096:	2307      	movs	r3, #7
 8002098:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_TS1_CFG, writeData, 1);
 800209a:	463b      	mov	r3, r7
 800209c:	2201      	movs	r2, #1
 800209e:	4619      	mov	r1, r3
 80020a0:	f249 20fd 	movw	r0, #37629	; 0x92fd
 80020a4:	f7ff ff08 	bl	8001eb8 <RAMRegisterWrite>
	RAMRegisterWrite(SET_CONF_TS2_CFG, writeData, 1);
 80020a8:	463b      	mov	r3, r7
 80020aa:	2201      	movs	r2, #1
 80020ac:	4619      	mov	r1, r3
 80020ae:	f249 20fe 	movw	r0, #37630	; 0x92fe
 80020b2:	f7ff ff01 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x0F; // TS3: Thermistor temperature, for FET temperature protection
 80020b6:	230f      	movs	r3, #15
 80020b8:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_TS3_CFG, writeData, 1);
 80020ba:	463b      	mov	r3, r7
 80020bc:	2201      	movs	r2, #1
 80020be:	4619      	mov	r1, r3
 80020c0:	f249 20ff 	movw	r0, #37631	; 0x92ff
 80020c4:	f7ff fef8 	bl	8001eb8 <RAMRegisterWrite>
	// Configure ALERT pin
	writeData[0] = 0x2A;
 80020c8:	232a      	movs	r3, #42	; 0x2a
 80020ca:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_ALERT_CFG, writeData, 1);
 80020cc:	463b      	mov	r3, r7
 80020ce:	2201      	movs	r2, #1
 80020d0:	4619      	mov	r1, r3
 80020d2:	f249 20fc 	movw	r0, #37628	; 0x92fc
 80020d6:	f7ff feef 	bl	8001eb8 <RAMRegisterWrite>
	// Configure DA
	writeData[0] = 0x06;
 80020da:	2306      	movs	r3, #6
 80020dc:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_DA_CFG, writeData, 1);
 80020de:	463b      	mov	r3, r7
 80020e0:	2201      	movs	r2, #1
 80020e2:	4619      	mov	r1, r3
 80020e4:	f249 3003 	movw	r0, #37635	; 0x9303
 80020e8:	f7ff fee6 	bl	8001eb8 <RAMRegisterWrite>

	/**
	 * Protection settings registers
	 */
	writeData[0] = 0xFC;
 80020ec:	23fc      	movs	r3, #252	; 0xfc
 80020ee:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_ENPROT_A, writeData, 1); // Enables SCD, OCD1, OCC, COV, CUV protection
 80020f0:	463b      	mov	r3, r7
 80020f2:	2201      	movs	r2, #1
 80020f4:	4619      	mov	r1, r3
 80020f6:	f249 2061 	movw	r0, #37473	; 0x9261
 80020fa:	f7ff fedd 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0xF7;
 80020fe:	23f7      	movs	r3, #247	; 0xf7
 8002100:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_ENPROT_B, writeData, 1); // Enables OTF, OTINT, OTD, OTC, and all UT protection
 8002102:	463b      	mov	r3, r7
 8002104:	2201      	movs	r2, #1
 8002106:	4619      	mov	r1, r3
 8002108:	f249 2062 	movw	r0, #37474	; 0x9262
 800210c:	f7ff fed4 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x00;
 8002110:	2300      	movs	r3, #0
 8002112:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_ENPROT_C, writeData, 1); // Disables all special/latch protections
 8002114:	463b      	mov	r3, r7
 8002116:	2201      	movs	r2, #1
 8002118:	4619      	mov	r1, r3
 800211a:	f249 2063 	movw	r0, #37475	; 0x9263
 800211e:	f7ff fecb 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x98;
 8002122:	2398      	movs	r3, #152	; 0x98
 8002124:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_CHGFET_PROT_A, writeData, 1); // SCD, OCC, and COV disable CHG FET
 8002126:	463b      	mov	r3, r7
 8002128:	2201      	movs	r2, #1
 800212a:	4619      	mov	r1, r3
 800212c:	f249 2065 	movw	r0, #37477	; 0x9265
 8002130:	f7ff fec2 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0xD4;
 8002134:	23d4      	movs	r3, #212	; 0xd4
 8002136:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_CHGFET_PROT_B, writeData, 1); // OTF, OTINT, OTC, and UTINT disable CHG FET
 8002138:	463b      	mov	r3, r7
 800213a:	2201      	movs	r2, #1
 800213c:	4619      	mov	r1, r3
 800213e:	f249 2066 	movw	r0, #37478	; 0x9266
 8002142:	f7ff feb9 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x00;
 8002146:	2300      	movs	r3, #0
 8002148:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_CHGFET_PROT_C, writeData, 1); // Type C protections are disabled anyways
 800214a:	463b      	mov	r3, r7
 800214c:	2201      	movs	r2, #1
 800214e:	4619      	mov	r1, r3
 8002150:	f249 2067 	movw	r0, #37479	; 0x9267
 8002154:	f7ff feb0 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0xE4;
 8002158:	23e4      	movs	r3, #228	; 0xe4
 800215a:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_DSGFET_PROT_A, writeData, 1); // SCD, OCD1, OCD2, and CUV disable DSG FET
 800215c:	463b      	mov	r3, r7
 800215e:	2201      	movs	r2, #1
 8002160:	4619      	mov	r1, r3
 8002162:	f249 2069 	movw	r0, #37481	; 0x9269
 8002166:	f7ff fea7 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0xE4;
 800216a:	23e4      	movs	r3, #228	; 0xe4
 800216c:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_DSGFET_PROT_B, writeData, 1); // OTF, OTINT, OTD, and UTINT disable DSG FET
 800216e:	463b      	mov	r3, r7
 8002170:	2201      	movs	r2, #1
 8002172:	4619      	mov	r1, r3
 8002174:	f249 206a 	movw	r0, #37482	; 0x926a
 8002178:	f7ff fe9e 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x00;
 800217c:	2300      	movs	r3, #0
 800217e:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_DSGFET_PROT_C, writeData, 1); // Type C protections are disabled anyways
 8002180:	463b      	mov	r3, r7
 8002182:	2201      	movs	r2, #1
 8002184:	4619      	mov	r1, r3
 8002186:	f249 206b 	movw	r0, #37483	; 0x926b
 800218a:	f7ff fe95 	bl	8001eb8 <RAMRegisterWrite>

	/**
	 * FET settings registers
	 */
	writeData[0] = 0x1E;
 800218e:	231e      	movs	r3, #30
 8002190:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1); // Enable PDSG, disable body diode protection, enable CHG FET in SLEEP
 8002192:	463b      	mov	r3, r7
 8002194:	2201      	movs	r2, #1
 8002196:	4619      	mov	r1, r3
 8002198:	f249 3008 	movw	r0, #37640	; 0x9308
 800219c:	f7ff fe8c 	bl	8001eb8 <RAMRegisterWrite>
	format_uint16(writeData, 0x06A4);
 80021a0:	463b      	mov	r3, r7
 80021a2:	f240 61a4 	movw	r1, #1700	; 0x6a4
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe ff2c 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_FET_PCHG_STRT_V, writeData, 2); // Min. cell voltage below 1700mV activates PCHG mode
 80021ac:	463b      	mov	r3, r7
 80021ae:	2202      	movs	r2, #2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f249 300a 	movw	r0, #37642	; 0x930a
 80021b6:	f7ff fe7f 	bl	8001eb8 <RAMRegisterWrite>
	format_uint16(writeData, 0x06D6);
 80021ba:	463b      	mov	r3, r7
 80021bc:	f240 61d6 	movw	r1, #1750	; 0x6d6
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe ff1f 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_FET_PCHG_STP_V, writeData, 2); // Min. cell voltage above 1750mV deactivates PCHG mode
 80021c6:	463b      	mov	r3, r7
 80021c8:	2202      	movs	r2, #2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f249 300c 	movw	r0, #37644	; 0x930c
 80021d0:	f7ff fe72 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x64;
 80021d4:	2364      	movs	r3, #100	; 0x64
 80021d6:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_PDSG_TO, writeData, 1); // PDSG timeout after 1000ms, enables DSG FET after
 80021d8:	463b      	mov	r3, r7
 80021da:	2201      	movs	r2, #1
 80021dc:	4619      	mov	r1, r3
 80021de:	f249 300e 	movw	r0, #37646	; 0x930e
 80021e2:	f7ff fe69 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x64;
 80021e6:	2364      	movs	r3, #100	; 0x64
 80021e8:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_PDSG_STP_DLT, writeData, 1); // Exit PDSG and enable DSG FET when LD equals VBAT+ minus 1000mV
 80021ea:	463b      	mov	r3, r7
 80021ec:	2201      	movs	r2, #1
 80021ee:	4619      	mov	r1, r3
 80021f0:	f249 300f 	movw	r0, #37647	; 0x930f
 80021f4:	f7ff fe60 	bl	8001eb8 <RAMRegisterWrite>

	/**
	 * Misc. settings
	 */
	// Setting MFG Status Init to disable FET Test commands
	format_uint16(writeData, 0x0050);
 80021f8:	463b      	mov	r3, r7
 80021fa:	2150      	movs	r1, #80	; 0x50
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe ff01 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_MFG_STATUS_INIT, writeData, 2);
 8002202:	463b      	mov	r3, r7
 8002204:	2202      	movs	r2, #2
 8002206:	4619      	mov	r1, r3
 8002208:	f249 3033 	movw	r0, #37683	; 0x9333
 800220c:	f7ff fe54 	bl	8001eb8 <RAMRegisterWrite>
	// Setting DSG threshold to 100mA and CHG threshold to 50mA
	format_uint16(writeData, 0x000A);
 8002210:	463b      	mov	r3, r7
 8002212:	210a      	movs	r1, #10
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fef5 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_CURRTH_DSG_CURRTH, writeData, 2);
 800221a:	463b      	mov	r3, r7
 800221c:	2202      	movs	r2, #2
 800221e:	4619      	mov	r1, r3
 8002220:	f249 3010 	movw	r0, #37648	; 0x9310
 8002224:	f7ff fe48 	bl	8001eb8 <RAMRegisterWrite>
	format_uint16(writeData, 0x0005);
 8002228:	463b      	mov	r3, r7
 800222a:	2105      	movs	r1, #5
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fee9 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_CURRTH_CHG_CURRTH, writeData, 2);
 8002232:	463b      	mov	r3, r7
 8002234:	2202      	movs	r2, #2
 8002236:	4619      	mov	r1, r3
 8002238:	f249 3012 	movw	r0, #37650	; 0x9312
 800223c:	f7ff fe3c 	bl	8001eb8 <RAMRegisterWrite>

	/**
	 * Cell balancing settings registers
	 */
	writeData[0] = 0x0F;
 8002240:	230f      	movs	r3, #15
 8002242:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CLBCFG_CONFIG, writeData, 1); // Exits SLEEP to perform balancing, allow balancing while charging and in relax mode
 8002244:	463b      	mov	r3, r7
 8002246:	2201      	movs	r2, #1
 8002248:	4619      	mov	r1, r3
 800224a:	f249 3035 	movw	r0, #37685	; 0x9335
 800224e:	f7ff fe33 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x0A;
 8002252:	230a      	movs	r3, #10
 8002254:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CLBCFG_CB_INTRVL, writeData, 1); // Recalculates which cells to balance every 10 seconds
 8002256:	463b      	mov	r3, r7
 8002258:	2201      	movs	r2, #1
 800225a:	4619      	mov	r1, r3
 800225c:	f249 3039 	movw	r0, #37689	; 0x9339
 8002260:	f7ff fe2a 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x08;
 8002264:	2308      	movs	r3, #8
 8002266:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CLBCFG_CB_MAX_CLS, writeData, 1); // Allows up to 8 cells to be balanced at once
 8002268:	463b      	mov	r3, r7
 800226a:	2201      	movs	r2, #1
 800226c:	4619      	mov	r1, r3
 800226e:	f249 303a 	movw	r0, #37690	; 0x933a
 8002272:	f7ff fe21 	bl	8001eb8 <RAMRegisterWrite>
	// Min. cell voltage must be at least 2500mV for cell balancing to occur while charging or in relax mode
	format_uint16(writeData, 0x09C4);
 8002276:	463b      	mov	r3, r7
 8002278:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fec1 	bl	8001004 <format_uint16>
	RAMRegisterWrite(SET_CLBCFG_CHG_MIN_V, writeData, 2);
 8002282:	463b      	mov	r3, r7
 8002284:	2202      	movs	r2, #2
 8002286:	4619      	mov	r1, r3
 8002288:	f249 303b 	movw	r0, #37691	; 0x933b
 800228c:	f7ff fe14 	bl	8001eb8 <RAMRegisterWrite>
	RAMRegisterWrite(SET_CLBCFG_RLX_MIN_V, writeData, 2);
 8002290:	463b      	mov	r3, r7
 8002292:	2202      	movs	r2, #2
 8002294:	4619      	mov	r1, r3
 8002296:	f249 303f 	movw	r0, #37695	; 0x933f
 800229a:	f7ff fe0d 	bl	8001eb8 <RAMRegisterWrite>

	/**
	 * Power registers
	 */
	format_uint16(writeData, 0x0960);
 800229e:	463b      	mov	r3, r7
 80022a0:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fead 	bl	8001004 <format_uint16>
	RAMRegisterWrite(PWR_SHDN_BATT_V, writeData, 2); // If pack voltage falls below 24000mV, AFE enters SHUTDOWN mode
 80022aa:	463b      	mov	r3, r7
 80022ac:	2202      	movs	r2, #2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f249 2041 	movw	r0, #37441	; 0x9241
 80022b4:	f7ff fe00 	bl	8001eb8 <RAMRegisterWrite>
	format_uint16(writeData, 0x000A);
 80022b8:	463b      	mov	r3, r7
 80022ba:	210a      	movs	r1, #10
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fea1 	bl	8001004 <format_uint16>
	RAMRegisterWrite(PWR_SLP_CURR, writeData, 2); // Current above 10mA will cause device to exit SLEEP mode
 80022c2:	463b      	mov	r3, r7
 80022c4:	2202      	movs	r2, #2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f249 2048 	movw	r0, #37448	; 0x9248
 80022cc:	f7ff fdf4 	bl	8001eb8 <RAMRegisterWrite>
	format_uint16(writeData, 0x0960);
 80022d0:	463b      	mov	r3, r7
 80022d2:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fe94 	bl	8001004 <format_uint16>
	RAMRegisterWrite(PWR_SLP_CHG_V_THLD, writeData, 2); // If pack voltage falls below 24000mV, SLEEP mode is blocked when charger detected
 80022dc:	463b      	mov	r3, r7
 80022de:	2202      	movs	r2, #2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f249 204e 	movw	r0, #37454	; 0x924e
 80022e6:	f7ff fde7 	bl	8001eb8 <RAMRegisterWrite>
//	RAMRegisterWrite(PROT_COV_THLD, writeData, 1); // COV triggered at 1.771V, cleared below 1.6698V

	/**
	 * Protections registers
	 */
	writeData[0] = 0x23;
 80022ea:	2323      	movs	r3, #35	; 0x23
 80022ec:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_CUV_THLD, writeData, 1); // CUV triggered at 1.771V, cleared above 1.8732V
 80022ee:	463b      	mov	r3, r7
 80022f0:	2201      	movs	r2, #1
 80022f2:	4619      	mov	r1, r3
 80022f4:	f249 2075 	movw	r0, #37493	; 0x9275
 80022f8:	f7ff fdde 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x37;
 80022fc:	2337      	movs	r3, #55	; 0x37
 80022fe:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_COV_THLD, writeData, 1); // COV triggered at 2.783V, cleared below 2.6818V
 8002300:	463b      	mov	r3, r7
 8002302:	2201      	movs	r2, #1
 8002304:	4619      	mov	r1, r3
 8002306:	f249 2078 	movw	r0, #37496	; 0x9278
 800230a:	f7ff fdd5 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x08;
 800230e:	2308      	movs	r3, #8
 8002310:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCC_THLD, writeData, 1); // OCC triggered at 16A
 8002312:	463b      	mov	r3, r7
 8002314:	2201      	movs	r2, #1
 8002316:	4619      	mov	r1, r3
 8002318:	f249 2080 	movw	r0, #37504	; 0x9280
 800231c:	f7ff fdcc 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x15;
 8002320:	2315      	movs	r3, #21
 8002322:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD1_THLD, writeData, 1); // OCD1 triggered at 42A
 8002324:	463b      	mov	r3, r7
 8002326:	2201      	movs	r2, #1
 8002328:	4619      	mov	r1, r3
 800232a:	f249 2082 	movw	r0, #37506	; 0x9282
 800232e:	f7ff fdc3 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x64;
 8002332:	2364      	movs	r3, #100	; 0x64
 8002334:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD1_DLY, writeData, 1); // OCD1 triggered after 340ms delay
 8002336:	463b      	mov	r3, r7
 8002338:	2201      	movs	r2, #1
 800233a:	4619      	mov	r1, r3
 800233c:	f249 2083 	movw	r0, #37507	; 0x9283
 8002340:	f7ff fdba 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x19;
 8002344:	2319      	movs	r3, #25
 8002346:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD2_THLD, writeData, 1); // OCD2 triggered at 50A
 8002348:	463b      	mov	r3, r7
 800234a:	2201      	movs	r2, #1
 800234c:	4619      	mov	r1, r3
 800234e:	f249 2084 	movw	r0, #37508	; 0x9284
 8002352:	f7ff fdb1 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x1C;
 8002356:	231c      	movs	r3, #28
 8002358:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD2_DLY, writeData, 1); // OCD2 triggered after 100ms delay
 800235a:	463b      	mov	r3, r7
 800235c:	2201      	movs	r2, #1
 800235e:	4619      	mov	r1, r3
 8002360:	f249 2085 	movw	r0, #37509	; 0x9285
 8002364:	f7ff fda8 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0x03;
 8002368:	2303      	movs	r3, #3
 800236a:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_SCD_THLD, writeData, 1); // SCD triggered at 60A
 800236c:	463b      	mov	r3, r7
 800236e:	2201      	movs	r2, #1
 8002370:	4619      	mov	r1, r3
 8002372:	f249 2086 	movw	r0, #37510	; 0x9286
 8002376:	f7ff fd9f 	bl	8001eb8 <RAMRegisterWrite>
	RAMRegisterWrite(PROT_SCD_DLY, writeData, 1); // SCD triggered after 30µs delay
 800237a:	463b      	mov	r3, r7
 800237c:	2201      	movs	r2, #1
 800237e:	4619      	mov	r1, r3
 8002380:	f249 2087 	movw	r0, #37511	; 0x9287
 8002384:	f7ff fd98 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0xEC;
 8002388:	23ec      	movs	r3, #236	; 0xec
 800238a:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_UTD_THLD, writeData, 1); // UTD triggered at -20ºC
 800238c:	463b      	mov	r3, r7
 800238e:	2201      	movs	r2, #1
 8002390:	4619      	mov	r1, r3
 8002392:	f249 20a9 	movw	r0, #37545	; 0x92a9
 8002396:	f7ff fd8f 	bl	8001eb8 <RAMRegisterWrite>
	RAMRegisterWrite(PROT_UTC_THLD, writeData, 1); // UTC triggered at -20ºC
 800239a:	463b      	mov	r3, r7
 800239c:	2201      	movs	r2, #1
 800239e:	4619      	mov	r1, r3
 80023a0:	f249 20a6 	movw	r0, #37542	; 0x92a6
 80023a4:	f7ff fd88 	bl	8001eb8 <RAMRegisterWrite>
	writeData[0] = 0xF1;
 80023a8:	23f1      	movs	r3, #241	; 0xf1
 80023aa:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_UTD_RCVR, writeData, 1); // UTD cleared above -15ºC
 80023ac:	463b      	mov	r3, r7
 80023ae:	2201      	movs	r2, #1
 80023b0:	4619      	mov	r1, r3
 80023b2:	f249 20ab 	movw	r0, #37547	; 0x92ab
 80023b6:	f7ff fd7f 	bl	8001eb8 <RAMRegisterWrite>
	RAMRegisterWrite(PROT_UTC_RCVR, writeData, 1); // UTC cleared above -15ºC
 80023ba:	463b      	mov	r3, r7
 80023bc:	2201      	movs	r2, #1
 80023be:	4619      	mov	r1, r3
 80023c0:	f249 20a8 	movw	r0, #37544	; 0x92a8
 80023c4:	f7ff fd78 	bl	8001eb8 <RAMRegisterWrite>
}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <AFETransmitReadCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI read command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	4613      	mov	r3, r2
 80023dc:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]
	uint8_t readBytes[2] = {0};
 80023e2:	2300      	movs	r3, #0
 80023e4:	82bb      	strh	r3, [r7, #20]
	uint8_t crcReceived = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75bb      	strb	r3, [r7, #22]
	while (!commReceived) {
 80023ea:	e032      	b.n	8002452 <AFETransmitReadCmd+0x82>
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2101      	movs	r1, #1
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <AFETransmitReadCmd+0x98>)
 80023f2:	f002 ffe9 	bl	80053c8 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f04f 32ff 	mov.w	r2, #4294967295
 80023fe:	9200      	str	r2, [sp, #0]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	68f9      	ldr	r1, [r7, #12]
 8002404:	4819      	ldr	r0, [pc, #100]	; (800246c <AFETransmitReadCmd+0x9c>)
 8002406:	f004 fc6c 	bl	8006ce2 <HAL_SPI_TransmitReceive>

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		readBytes[0] = rxBytes[0];
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	753b      	strb	r3, [r7, #20]
		readBytes[1] = rxBytes[1];
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	785b      	ldrb	r3, [r3, #1]
 8002414:	757b      	strb	r3, [r7, #21]
		crcReceived = crc8(readBytes, 2);
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	2102      	movs	r1, #2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fbc1 	bl	8001ba4 <crc8>
 8002422:	4603      	mov	r3, r0
 8002424:	75bb      	strb	r3, [r7, #22]
		if (txBytes[0] == rxBytes[0] && crcReceived == rxBytes[2]) commReceived = true;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d107      	bne.n	8002442 <AFETransmitReadCmd+0x72>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	3302      	adds	r3, #2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	7dba      	ldrb	r2, [r7, #22]
 800243a:	429a      	cmp	r2, r3
 800243c:	d101      	bne.n	8002442 <AFETransmitReadCmd+0x72>
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002442:	2201      	movs	r2, #1
 8002444:	2101      	movs	r1, #1
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <AFETransmitReadCmd+0x98>)
 8002448:	f002 ffbe 	bl	80053c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800244c:	2001      	movs	r0, #1
 800244e:	f001 fa3f 	bl	80038d0 <HAL_Delay>
	while (!commReceived) {
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	f083 0301 	eor.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1c6      	bne.n	80023ec <AFETransmitReadCmd+0x1c>
	}

}
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	48000400 	.word	0x48000400
 800246c:	200000ec 	.word	0x200000ec

08002470 <AFETransmitWriteCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI write command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]
	while (!commReceived) {
 8002482:	e02e      	b.n	80024e2 <AFETransmitWriteCmd+0x72>
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	2101      	movs	r1, #1
 8002488:	481b      	ldr	r0, [pc, #108]	; (80024f8 <AFETransmitWriteCmd+0x88>)
 800248a:	f002 ff9d 	bl	80053c8 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	b29b      	uxth	r3, r3
 8002492:	f04f 32ff 	mov.w	r2, #4294967295
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	4817      	ldr	r0, [pc, #92]	; (80024fc <AFETransmitWriteCmd+0x8c>)
 800249e:	f004 fc20 	bl	8006ce2 <HAL_SPI_TransmitReceive>

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e00e      	b.n	80024ca <AFETransmitWriteCmd+0x5a>
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4413      	add	r3, r2
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	440b      	add	r3, r1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <AFETransmitWriteCmd+0x54>
 80024c0:	2300      	movs	r3, #0
 80024c2:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	3301      	adds	r3, #1
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dbec      	blt.n	80024ac <AFETransmitWriteCmd+0x3c>
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80024d2:	2201      	movs	r2, #1
 80024d4:	2101      	movs	r1, #1
 80024d6:	4808      	ldr	r0, [pc, #32]	; (80024f8 <AFETransmitWriteCmd+0x88>)
 80024d8:	f002 ff76 	bl	80053c8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80024dc:	2001      	movs	r0, #1
 80024de:	f001 f9f7 	bl	80038d0 <HAL_Delay>
	while (!commReceived) {
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	f083 0301 	eor.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ca      	bne.n	8002484 <AFETransmitWriteCmd+0x14>
	}
}
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	48000400 	.word	0x48000400
 80024fc:	200000ec 	.word	0x200000ec

08002500 <TransmitLogAndTimestamp>:

/**
 * Helper function to begin transmission of logging information with the current timestamp
 */
void TransmitLogAndTimestamp(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002506:	af00      	add	r7, sp, #0
	char buffer[512] = {0}; // Initialize buffer to store message
 8002508:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800250c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	3304      	adds	r3, #4
 8002516:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f005 fdea 	bl	80080f6 <memset>
	char temp[48]; // Temporary buffer for each line

	// Preparing a heading for the data log
	snprintf(temp, sizeof(temp), "**************************************\n\r");
 8002522:	463b      	mov	r3, r7
 8002524:	4a47      	ldr	r2, [pc, #284]	; (8002644 <TransmitLogAndTimestamp+0x144>)
 8002526:	2130      	movs	r1, #48	; 0x30
 8002528:	4618      	mov	r0, r3
 800252a:	f005 fd6b 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800252e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd fe56 	bl	80001e4 <strlen>
 8002538:	4603      	mov	r3, r0
 800253a:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800253e:	3301      	adds	r3, #1
 8002540:	4639      	mov	r1, r7
 8002542:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002546:	461a      	mov	r2, r3
 8002548:	f005 fddd 	bl	8008106 <strncat>
	snprintf(temp, sizeof(temp), "************ BMS DATA LOG ************\n\r");
 800254c:	463b      	mov	r3, r7
 800254e:	4a3e      	ldr	r2, [pc, #248]	; (8002648 <TransmitLogAndTimestamp+0x148>)
 8002550:	2130      	movs	r1, #48	; 0x30
 8002552:	4618      	mov	r0, r3
 8002554:	f005 fd56 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd fe41 	bl	80001e4 <strlen>
 8002562:	4603      	mov	r3, r0
 8002564:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8002568:	3301      	adds	r3, #1
 800256a:	4639      	mov	r1, r7
 800256c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002570:	461a      	mov	r2, r3
 8002572:	f005 fdc8 	bl	8008106 <strncat>
	snprintf(temp, sizeof(temp), "**************************************\n\r");
 8002576:	463b      	mov	r3, r7
 8002578:	4a32      	ldr	r2, [pc, #200]	; (8002644 <TransmitLogAndTimestamp+0x144>)
 800257a:	2130      	movs	r1, #48	; 0x30
 800257c:	4618      	mov	r0, r3
 800257e:	f005 fd41 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe2c 	bl	80001e4 <strlen>
 800258c:	4603      	mov	r3, r0
 800258e:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8002592:	3301      	adds	r3, #1
 8002594:	4639      	mov	r1, r7
 8002596:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800259a:	461a      	mov	r2, r3
 800259c:	f005 fdb3 	bl	8008106 <strncat>

	// Logging the timestamp
	snprintf(temp, sizeof(temp), "Timestamp: ");
 80025a0:	463b      	mov	r3, r7
 80025a2:	4a2a      	ldr	r2, [pc, #168]	; (800264c <TransmitLogAndTimestamp+0x14c>)
 80025a4:	2130      	movs	r1, #48	; 0x30
 80025a6:	4618      	mov	r0, r3
 80025a8:	f005 fd2c 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80025ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd fe17 	bl	80001e4 <strlen>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 80025bc:	3301      	adds	r3, #1
 80025be:	4639      	mov	r1, r7
 80025c0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80025c4:	461a      	mov	r2, r3
 80025c6:	f005 fd9e 	bl	8008106 <strncat>
	GetDateTime(temp, sizeof(temp)); // Getting the current date and time
 80025ca:	463b      	mov	r3, r7
 80025cc:	2130      	movs	r1, #48	; 0x30
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fe30 	bl	8003234 <GetDateTime>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80025d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd fe03 	bl	80001e4 <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 80025e4:	3301      	adds	r3, #1
 80025e6:	4639      	mov	r1, r7
 80025e8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80025ec:	461a      	mov	r2, r3
 80025ee:	f005 fd8a 	bl	8008106 <strncat>
	snprintf(temp, sizeof(temp), "\n\n\r");
 80025f2:	463b      	mov	r3, r7
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <TransmitLogAndTimestamp+0x150>)
 80025f6:	2130      	movs	r1, #48	; 0x30
 80025f8:	4618      	mov	r0, r3
 80025fa:	f005 fd03 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80025fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd fdee 	bl	80001e4 <strlen>
 8002608:	4603      	mov	r3, r0
 800260a:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800260e:	3301      	adds	r3, #1
 8002610:	4639      	mov	r1, r7
 8002612:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002616:	461a      	mov	r2, r3
 8002618:	f005 fd75 	bl	8008106 <strncat>

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800261c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fddf 	bl	80001e4 <strlen>
 8002626:	4603      	mov	r3, r0
 8002628:	b29a      	uxth	r2, r3
 800262a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	4808      	ldr	r0, [pc, #32]	; (8002654 <TransmitLogAndTimestamp+0x154>)
 8002634:	f004 ff2a 	bl	800748c <HAL_UART_Transmit>
}
 8002638:	bf00      	nop
 800263a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	0800b9b0 	.word	0x0800b9b0
 8002648:	0800b9dc 	.word	0x0800b9dc
 800264c:	0800ba08 	.word	0x0800ba08
 8002650:	0800ba14 	.word	0x0800ba14
 8002654:	20000150 	.word	0x20000150

08002658 <TransmitCellPackVoltages>:
/**
 * Helper function to transmit all the cell voltage readings over UART
 * @param volts Array containing the cell and pack voltage readings
 * @param len Length of the provided array
 */
void TransmitCellPackVoltages(uint16_t *volts, uint8_t len) {
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
 800265e:	af02      	add	r7, sp, #8
 8002660:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002664:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8002668:	6018      	str	r0, [r3, #0]
 800266a:	460a      	mov	r2, r1
 800266c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002670:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8002674:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0}; // Initialize buffer to store message
 8002676:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800267a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	3304      	adds	r3, #4
 8002684:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f005 fd33 	bl	80080f6 <memset>
	char temp[32]; // Temporary buffer for each line

	uint8_t lines = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
	uint8_t entriesPerLine = 5;
 8002696:	2305      	movs	r3, #5
 8002698:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f

	// Preparing a heading for the current reading
	snprintf(temp, sizeof(temp), "******** VOLTAGE ********\n\r");
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	4ad1      	ldr	r2, [pc, #836]	; (80029e8 <TransmitCellPackVoltages+0x390>)
 80026a2:	2120      	movs	r1, #32
 80026a4:	4618      	mov	r0, r3
 80026a6:	f005 fcad 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80026aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd fd98 	bl	80001e4 <strlen>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80026ba:	3303      	adds	r3, #3
 80026bc:	f107 010c 	add.w	r1, r7, #12
 80026c0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80026c4:	461a      	mov	r2, r3
 80026c6:	f005 fd1e 	bl	8008106 <strncat>

	// Calculate how many lines to make based on number of voltage readings (8 readings per line max.)
	if (len % entriesPerLine == 0) lines = len / entriesPerLine;
 80026ca:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80026ce:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 80026d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80026dc:	fb01 f202 	mul.w	r2, r1, r2
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <TransmitCellPackVoltages+0xa8>
 80026e8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80026ec:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
 80026fe:	e00c      	b.n	800271a <TransmitCellPackVoltages+0xc2>
	else lines = len / entriesPerLine + 1;
 8002700:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002704:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f

	for (int i = 0; i < lines; i++) {
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8002720:	e147      	b.n	80029b2 <TransmitCellPackVoltages+0x35a>
		// First write out the cell numbers
		for (int j = 1; j <= entriesPerLine; j++) {
 8002722:	2301      	movs	r3, #1
 8002724:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8002728:	e05b      	b.n	80027e2 <TransmitCellPackVoltages+0x18a>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 800272a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800272e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002732:	fb03 f202 	mul.w	r2, r3, r2
 8002736:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800273a:	441a      	add	r2, r3
 800273c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002740:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	dc52      	bgt.n	80027f0 <TransmitCellPackVoltages+0x198>
			// Different header for the last entry (pack voltage)
			if ((i*entriesPerLine + j) == len) {
 800274a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800274e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002752:	fb03 f202 	mul.w	r2, r3, r2
 8002756:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800275a:	441a      	add	r2, r3
 800275c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002760:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d117      	bne.n	800279a <TransmitCellPackVoltages+0x142>
				snprintf(temp, sizeof(temp), "VBAT\t\t");
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	4a9f      	ldr	r2, [pc, #636]	; (80029ec <TransmitCellPackVoltages+0x394>)
 8002770:	2120      	movs	r1, #32
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fc46 	bl	8008004 <sniprintf>
				strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fd31 	bl	80001e4 <strlen>
 8002782:	4603      	mov	r3, r0
 8002784:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002788:	3303      	adds	r3, #3
 800278a:	f107 010c 	add.w	r1, r7, #12
 800278e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002792:	461a      	mov	r2, r3
 8002794:	f005 fcb7 	bl	8008106 <strncat>
 8002798:	e01e      	b.n	80027d8 <TransmitCellPackVoltages+0x180>
			}
			else {
				snprintf(temp, sizeof(temp), "CV%d\t\t", (i*entriesPerLine + j));
 800279a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800279e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80027a2:	fb03 f202 	mul.w	r2, r3, r2
 80027a6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80027aa:	4413      	add	r3, r2
 80027ac:	f107 000c 	add.w	r0, r7, #12
 80027b0:	4a8f      	ldr	r2, [pc, #572]	; (80029f0 <TransmitCellPackVoltages+0x398>)
 80027b2:	2120      	movs	r1, #32
 80027b4:	f005 fc26 	bl	8008004 <sniprintf>
				strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80027b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fd11 	bl	80001e4 <strlen>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80027c8:	3303      	adds	r3, #3
 80027ca:	f107 010c 	add.w	r1, r7, #12
 80027ce:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80027d2:	461a      	mov	r2, r3
 80027d4:	f005 fc97 	bl	8008106 <strncat>
		for (int j = 1; j <= entriesPerLine; j++) {
 80027d8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80027dc:	3301      	adds	r3, #1
 80027de:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80027e2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80027e6:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80027ea:	429a      	cmp	r2, r3
 80027ec:	dd9d      	ble.n	800272a <TransmitCellPackVoltages+0xd2>
 80027ee:	e000      	b.n	80027f2 <TransmitCellPackVoltages+0x19a>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 80027f0:	bf00      	nop
			}
		}
		snprintf(temp, sizeof(temp), "\n\r");
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	4a7f      	ldr	r2, [pc, #508]	; (80029f4 <TransmitCellPackVoltages+0x39c>)
 80027f8:	2120      	movs	r1, #32
 80027fa:	4618      	mov	r0, r3
 80027fc:	f005 fc02 	bl	8008004 <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fced 	bl	80001e4 <strlen>
 800280a:	4603      	mov	r3, r0
 800280c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002810:	3303      	adds	r3, #3
 8002812:	f107 010c 	add.w	r1, r7, #12
 8002816:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800281a:	461a      	mov	r2, r3
 800281c:	f005 fc73 	bl	8008106 <strncat>
		// On the following line, write out the cell voltage readings
		for (int j = 1; j <= entriesPerLine; j++) {
 8002820:	2301      	movs	r3, #1
 8002822:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8002826:	e09f      	b.n	8002968 <TransmitCellPackVoltages+0x310>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 8002828:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800282c:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002830:	fb03 f202 	mul.w	r2, r3, r2
 8002834:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002838:	441a      	add	r2, r3
 800283a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800283e:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	f300 8097 	bgt.w	8002978 <TransmitCellPackVoltages+0x320>
			// Alternate handling for data for pack voltage to write it in volts instead of mV
			if ((i*entriesPerLine + j) == len) {
 800284a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800284e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002852:	fb03 f202 	mul.w	r2, r3, r2
 8002856:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800285a:	441a      	add	r2, r3
 800285c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002860:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d14f      	bne.n	800290a <TransmitCellPackVoltages+0x2b2>
				snprintf(temp, sizeof(temp), "%d.%dV\t\t", volts[i*entriesPerLine + j - 1] / 100, volts[i*entriesPerLine + j - 1] % 100);
 800286a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800286e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002872:	fb03 f202 	mul.w	r2, r3, r2
 8002876:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800287a:	4413      	add	r3, r2
 800287c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002880:	3b01      	subs	r3, #1
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002888:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	4a59      	ldr	r2, [pc, #356]	; (80029f8 <TransmitCellPackVoltages+0x3a0>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	b29b      	uxth	r3, r3
 800289c:	461c      	mov	r4, r3
 800289e:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80028a2:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80028a6:	fb03 f202 	mul.w	r2, r3, r2
 80028aa:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80028ae:	4413      	add	r3, r2
 80028b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80028b4:	3b01      	subs	r3, #1
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80028bc:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	4a4c      	ldr	r2, [pc, #304]	; (80029f8 <TransmitCellPackVoltages+0x3a0>)
 80028c8:	fba2 1203 	umull	r1, r2, r2, r3
 80028cc:	0952      	lsrs	r2, r2, #5
 80028ce:	2164      	movs	r1, #100	; 0x64
 80028d0:	fb01 f202 	mul.w	r2, r1, r2
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f107 000c 	add.w	r0, r7, #12
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	4623      	mov	r3, r4
 80028e0:	4a46      	ldr	r2, [pc, #280]	; (80029fc <TransmitCellPackVoltages+0x3a4>)
 80028e2:	2120      	movs	r1, #32
 80028e4:	f005 fb8e 	bl	8008004 <sniprintf>
				strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80028e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fc79 	bl	80001e4 <strlen>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80028f8:	3303      	adds	r3, #3
 80028fa:	f107 010c 	add.w	r1, r7, #12
 80028fe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002902:	461a      	mov	r2, r3
 8002904:	f005 fbff 	bl	8008106 <strncat>
 8002908:	e029      	b.n	800295e <TransmitCellPackVoltages+0x306>
			}
			else {
				snprintf(temp, sizeof(temp), "%dmV\t\t", volts[i*entriesPerLine + j - 1]);
 800290a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800290e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002912:	fb03 f202 	mul.w	r2, r3, r2
 8002916:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800291a:	4413      	add	r3, r2
 800291c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002920:	3b01      	subs	r3, #1
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002928:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	4413      	add	r3, r2
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	f107 000c 	add.w	r0, r7, #12
 8002936:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <TransmitCellPackVoltages+0x3a8>)
 8002938:	2120      	movs	r1, #32
 800293a:	f005 fb63 	bl	8008004 <sniprintf>
				strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800293e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc4e 	bl	80001e4 <strlen>
 8002948:	4603      	mov	r3, r0
 800294a:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800294e:	3303      	adds	r3, #3
 8002950:	f107 010c 	add.w	r1, r7, #12
 8002954:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002958:	461a      	mov	r2, r3
 800295a:	f005 fbd4 	bl	8008106 <strncat>
		for (int j = 1; j <= entriesPerLine; j++) {
 800295e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002962:	3301      	adds	r3, #1
 8002964:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8002968:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800296c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8002970:	429a      	cmp	r2, r3
 8002972:	f77f af59 	ble.w	8002828 <TransmitCellPackVoltages+0x1d0>
 8002976:	e000      	b.n	800297a <TransmitCellPackVoltages+0x322>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 8002978:	bf00      	nop
			}
		}
		snprintf(temp, sizeof(temp), "\n\n\r");
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <TransmitCellPackVoltages+0x3ac>)
 8002980:	2120      	movs	r1, #32
 8002982:	4618      	mov	r0, r3
 8002984:	f005 fb3e 	bl	8008004 <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fc29 	bl	80001e4 <strlen>
 8002992:	4603      	mov	r3, r0
 8002994:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002998:	3303      	adds	r3, #3
 800299a:	f107 010c 	add.w	r1, r7, #12
 800299e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80029a2:	461a      	mov	r2, r3
 80029a4:	f005 fbaf 	bl	8008106 <strncat>
	for (int i = 0; i < lines; i++) {
 80029a8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80029ac:	3301      	adds	r3, #1
 80029ae:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80029b2:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 80029b6:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80029ba:	429a      	cmp	r2, r3
 80029bc:	f6ff aeb1 	blt.w	8002722 <TransmitCellPackVoltages+0xca>
	}

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80029c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fc0d 	bl	80001e4 <strlen>
 80029ca:	4603      	mov	r3, r0
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	480c      	ldr	r0, [pc, #48]	; (8002a08 <TransmitCellPackVoltages+0x3b0>)
 80029d8:	f004 fd58 	bl	800748c <HAL_UART_Transmit>
}
 80029dc:	bf00      	nop
 80029de:	f207 4744 	addw	r7, r7, #1092	; 0x444
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	0800ba18 	.word	0x0800ba18
 80029ec:	0800ba34 	.word	0x0800ba34
 80029f0:	0800ba3c 	.word	0x0800ba3c
 80029f4:	0800ba44 	.word	0x0800ba44
 80029f8:	51eb851f 	.word	0x51eb851f
 80029fc:	0800ba48 	.word	0x0800ba48
 8002a00:	0800ba54 	.word	0x0800ba54
 8002a04:	0800ba14 	.word	0x0800ba14
 8002a08:	20000150 	.word	0x20000150

08002a0c <TransmitCurrentReading>:

/**
 * Helper function to transmit the battery current reading over UART
 * @param current CC2 current reading - negative for discharging, positive for charging
 */
void TransmitCurrentReading(int16_t current) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0aa      	sub	sp, #168	; 0xa8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
	char buffer[128] = {0}; // Initialize buffer to store message
 8002a16:	2300      	movs	r3, #0
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a1e:	227c      	movs	r2, #124	; 0x7c
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f005 fb67 	bl	80080f6 <memset>
	char temp[32] = {0}; // Temporary buffer for each line
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	615a      	str	r2, [r3, #20]
 8002a3e:	619a      	str	r2, [r3, #24]

	// Preparing a heading for the current reading
	snprintf(temp, sizeof(temp), "******** CURRENT ********\n\r");
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <TransmitCurrentReading+0xdc>)
 8002a46:	2120      	movs	r1, #32
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f005 fadb 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fbc6 	bl	80001e4 <strlen>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 8002a5e:	f107 0108 	add.w	r1, r7, #8
 8002a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a66:	4618      	mov	r0, r3
 8002a68:	f005 fb4d 	bl	8008106 <strncat>

	// Determine if charging or discharging based on current value
	if (current > 0) {
 8002a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	dd0c      	ble.n	8002a8e <TransmitCurrentReading+0x82>
		snprintf(temp, sizeof(temp), "CC2: Charging at %d mA\n\n\r", current*10);
 8002a74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	f107 0008 	add.w	r0, r7, #8
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <TransmitCurrentReading+0xe0>)
 8002a86:	2120      	movs	r1, #32
 8002a88:	f005 fabc 	bl	8008004 <sniprintf>
 8002a8c:	e00b      	b.n	8002aa6 <TransmitCurrentReading+0x9a>
	}
	else {
		snprintf(temp, sizeof(temp), "CC2: Discharging at %d mA\n\n\r", current*(-10));
 8002a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a92:	f06f 0209 	mvn.w	r2, #9
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	f107 0008 	add.w	r0, r7, #8
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <TransmitCurrentReading+0xe4>)
 8002aa0:	2120      	movs	r1, #32
 8002aa2:	f005 faaf 	bl	8008004 <sniprintf>
	}
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fb9a 	bl	80001e4 <strlen>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 8002ab6:	f107 0108 	add.w	r1, r7, #8
 8002aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f005 fb21 	bl	8008106 <strncat>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fb8b 	bl	80001e4 <strlen>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	4806      	ldr	r0, [pc, #24]	; (8002af4 <TransmitCurrentReading+0xe8>)
 8002adc:	f004 fcd6 	bl	800748c <HAL_UART_Transmit>
}
 8002ae0:	bf00      	nop
 8002ae2:	37a8      	adds	r7, #168	; 0xa8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	0800ba6c 	.word	0x0800ba6c
 8002aec:	0800ba88 	.word	0x0800ba88
 8002af0:	0800baa4 	.word	0x0800baa4
 8002af4:	20000150 	.word	0x20000150

08002af8 <TransmitTemperatures>:
/**
 * Helper function to transmit all the temperature readings over UART
 * @param temps Array containing the temperature readings
 * @param len Length of the provided array
 */
void TransmitTemperatures(int16_t *temps, uint8_t len) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002b04:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002b08:	6018      	str	r0, [r3, #0]
 8002b0a:	460a      	mov	r2, r1
 8002b0c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002b10:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 8002b14:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0}; // Initialize buffer to store message
 8002b16:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002b1a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	3304      	adds	r3, #4
 8002b24:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f005 fae3 	bl	80080f6 <memset>
	char temp[32]; // Temporary buffer for each line

	// Separate variables for integer part and decimal part of temperature reading
	int16_t degC = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
	int16_t deg_int = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428
	int16_t deg_dec = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

	// Preparing a heading for the temperature readings
	snprintf(temp, sizeof(temp), "******** TEMPERATURE ********\n\r");
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <TransmitTemperatures+0x224>)
 8002b48:	2120      	movs	r1, #32
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f005 fa5a 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fb45 	bl	80001e4 <strlen>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002b60:	3303      	adds	r3, #3
 8002b62:	f107 0108 	add.w	r1, r7, #8
 8002b66:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f005 facb 	bl	8008106 <strncat>

	// Tabulating the temperature sensors
	for (int i = 1; i <= len; i++) {
 8002b70:	2301      	movs	r3, #1
 8002b72:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8002b76:	e01c      	b.n	8002bb2 <TransmitTemperatures+0xba>
		snprintf(temp, sizeof(temp), "TS%d\t\t", i);
 8002b78:	f107 0008 	add.w	r0, r7, #8
 8002b7c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002b80:	4a67      	ldr	r2, [pc, #412]	; (8002d20 <TransmitTemperatures+0x228>)
 8002b82:	2120      	movs	r1, #32
 8002b84:	f005 fa3e 	bl	8008004 <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fb29 	bl	80001e4 <strlen>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002b98:	3303      	adds	r3, #3
 8002b9a:	f107 0108 	add.w	r1, r7, #8
 8002b9e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f005 faaf 	bl	8008106 <strncat>
	for (int i = 1; i <= len; i++) {
 8002ba8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002bac:	3301      	adds	r3, #1
 8002bae:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8002bb2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002bb6:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	ddd9      	ble.n	8002b78 <TransmitTemperatures+0x80>
	}

	snprintf(temp, sizeof(temp), "\n\r");
 8002bc4:	f107 0308 	add.w	r3, r7, #8
 8002bc8:	4a56      	ldr	r2, [pc, #344]	; (8002d24 <TransmitTemperatures+0x22c>)
 8002bca:	2120      	movs	r1, #32
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f005 fa19 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fb04 	bl	80001e4 <strlen>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002be2:	3303      	adds	r3, #3
 8002be4:	f107 0108 	add.w	r1, r7, #8
 8002be8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002bec:	461a      	mov	r2, r3
 8002bee:	f005 fa8a 	bl	8008106 <strncat>

	for (int i = 1; i <= len; i++) {
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8002bf8:	e05d      	b.n	8002cb6 <TransmitTemperatures+0x1be>
		// Convert from Kelvin into Celsius
		degC = temps[i-1] - 2731;
 8002bfa:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002bfe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002c02:	3b01      	subs	r3, #1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8002c0a:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	4413      	add	r3, r2
 8002c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
		deg_int = degC / 10;
 8002c22:	f9b7 342a 	ldrsh.w	r3, [r7, #1066]	; 0x42a
 8002c26:	4a40      	ldr	r2, [pc, #256]	; (8002d28 <TransmitTemperatures+0x230>)
 8002c28:	fb82 1203 	smull	r1, r2, r2, r3
 8002c2c:	1092      	asrs	r2, r2, #2
 8002c2e:	17db      	asrs	r3, r3, #31
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428
		deg_dec = degC % 10;
 8002c36:	f9b7 242a 	ldrsh.w	r2, [r7, #1066]	; 0x42a
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <TransmitTemperatures+0x230>)
 8002c3c:	fb83 1302 	smull	r1, r3, r3, r2
 8002c40:	1099      	asrs	r1, r3, #2
 8002c42:	17d3      	asrs	r3, r2, #31
 8002c44:	1ac9      	subs	r1, r1, r3
 8002c46:	460b      	mov	r3, r1
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
		// If temperature is negative, keep the decimal part positive
		if (degC < 0 && deg_dec != 0) deg_dec = abs(deg_dec);
 8002c54:	f9b7 342a 	ldrsh.w	r3, [r7, #1066]	; 0x42a
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	da0b      	bge.n	8002c74 <TransmitTemperatures+0x17c>
 8002c5c:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <TransmitTemperatures+0x17c>
 8002c64:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bfb8      	it	lt
 8002c6c:	425b      	neglt	r3, r3
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

		snprintf(temp, sizeof(temp), "%d.%dºC\t\t", deg_int, deg_dec);
 8002c74:	f9b7 2428 	ldrsh.w	r2, [r7, #1064]	; 0x428
 8002c78:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 8002c7c:	f107 0008 	add.w	r0, r7, #8
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	4613      	mov	r3, r2
 8002c84:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <TransmitTemperatures+0x234>)
 8002c86:	2120      	movs	r1, #32
 8002c88:	f005 f9bc 	bl	8008004 <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd faa7 	bl	80001e4 <strlen>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002c9c:	3303      	adds	r3, #3
 8002c9e:	f107 0108 	add.w	r1, r7, #8
 8002ca2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f005 fa2d 	bl	8008106 <strncat>
	for (int i = 1; i <= len; i++) {
 8002cac:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8002cb6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002cba:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	dd98      	ble.n	8002bfa <TransmitTemperatures+0x102>
	}

	snprintf(temp, sizeof(temp), "\n\n\r");
 8002cc8:	f107 0308 	add.w	r3, r7, #8
 8002ccc:	4a18      	ldr	r2, [pc, #96]	; (8002d30 <TransmitTemperatures+0x238>)
 8002cce:	2120      	movs	r1, #32
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f005 f997 	bl	8008004 <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fa82 	bl	80001e4 <strlen>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002ce6:	3303      	adds	r3, #3
 8002ce8:	f107 0108 	add.w	r1, r7, #8
 8002cec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f005 fa08 	bl	8008106 <strncat>

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd fa72 	bl	80001e4 <strlen>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0c:	4809      	ldr	r0, [pc, #36]	; (8002d34 <TransmitTemperatures+0x23c>)
 8002d0e:	f004 fbbd 	bl	800748c <HAL_UART_Transmit>
}
 8002d12:	bf00      	nop
 8002d14:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	0800bac4 	.word	0x0800bac4
 8002d20:	0800bae4 	.word	0x0800bae4
 8002d24:	0800ba44 	.word	0x0800ba44
 8002d28:	66666667 	.word	0x66666667
 8002d2c:	0800baec 	.word	0x0800baec
 8002d30:	0800ba14 	.word	0x0800ba14
 8002d34:	20000150 	.word	0x20000150

08002d38 <TransmitSafetyStatusA>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status A register
 */
void TransmitSafetyStatusA(void) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b098      	sub	sp, #96	; 0x60
 8002d3c:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status A register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusA[1] = {0};
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x03, statusA, 1);
 8002d44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	2003      	movs	r0, #3
 8002d4e:	f7fe ff5d 	bl	8001c0c <DirectCmdRead>

	// Short Circuit Discharge
	if (statusA[0] & (1 << 7)) {
 8002d52:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da0d      	bge.n	8002d78 <TransmitSafetyStatusA+0x40>
		uint8_t msg[] = "SCD fault triggered! Discharging will be disabled for a moment...\n\r";
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <TransmitSafetyStatusA+0xe8>)
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	4611      	mov	r1, r2
 8002d62:	2244      	movs	r2, #68	; 0x44
 8002d64:	4618      	mov	r0, r3
 8002d66:	f006 fe1c 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002d6a:	1d39      	adds	r1, r7, #4
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	2243      	movs	r2, #67	; 0x43
 8002d72:	482c      	ldr	r0, [pc, #176]	; (8002e24 <TransmitSafetyStatusA+0xec>)
 8002d74:	f004 fb8a 	bl	800748c <HAL_UART_Transmit>
	}
	// Overcurrent in Discharge 1st Tier
	if (statusA[0] & (1 << 5)) {
 8002d78:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00d      	beq.n	8002da0 <TransmitSafetyStatusA+0x68>
		uint8_t msg[] = "OCD1 fault triggered! Discharging will be disabled for a moment...\n\r";
 8002d84:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <TransmitSafetyStatusA+0xf0>)
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	4611      	mov	r1, r2
 8002d8a:	2245      	movs	r2, #69	; 0x45
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f006 fe08 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002d92:	1d39      	adds	r1, r7, #4
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	2244      	movs	r2, #68	; 0x44
 8002d9a:	4822      	ldr	r0, [pc, #136]	; (8002e24 <TransmitSafetyStatusA+0xec>)
 8002d9c:	f004 fb76 	bl	800748c <HAL_UART_Transmit>
	}
	// Overcurrent in Charge
	if (statusA[0] & (1 << 4)) {
 8002da0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <TransmitSafetyStatusA+0x90>
		uint8_t msg[] = "OCC fault triggered! Charging will be disabled for a moment...\n\r";
 8002dac:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <TransmitSafetyStatusA+0xf4>)
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	4611      	mov	r1, r2
 8002db2:	2241      	movs	r2, #65	; 0x41
 8002db4:	4618      	mov	r0, r3
 8002db6:	f006 fdf4 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002dba:	1d39      	adds	r1, r7, #4
 8002dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc0:	2240      	movs	r2, #64	; 0x40
 8002dc2:	4818      	ldr	r0, [pc, #96]	; (8002e24 <TransmitSafetyStatusA+0xec>)
 8002dc4:	f004 fb62 	bl	800748c <HAL_UART_Transmit>
	}
	// Cell Overvoltage
	if (statusA[0] & (1 << 3)) {
 8002dc8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00d      	beq.n	8002df0 <TransmitSafetyStatusA+0xb8>
		uint8_t msg[] = "COV fault triggered! Charging will be disabled until voltage drops sufficiently.\n\r";
 8002dd4:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <TransmitSafetyStatusA+0xf8>)
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	4611      	mov	r1, r2
 8002dda:	2253      	movs	r2, #83	; 0x53
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f006 fde0 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002de2:	1d39      	adds	r1, r7, #4
 8002de4:	f04f 33ff 	mov.w	r3, #4294967295
 8002de8:	2252      	movs	r2, #82	; 0x52
 8002dea:	480e      	ldr	r0, [pc, #56]	; (8002e24 <TransmitSafetyStatusA+0xec>)
 8002dec:	f004 fb4e 	bl	800748c <HAL_UART_Transmit>
	}
	// Cell Undervoltage
	if (statusA[0] & (1 << 2)) {
 8002df0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <TransmitSafetyStatusA+0xe0>
		uint8_t msg[] = "CUV fault triggered! Discharging will be disabled until voltage rises sufficiently.\n\r";
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <TransmitSafetyStatusA+0xfc>)
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	4611      	mov	r1, r2
 8002e02:	2256      	movs	r2, #86	; 0x56
 8002e04:	4618      	mov	r0, r3
 8002e06:	f006 fdcc 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002e0a:	1d39      	adds	r1, r7, #4
 8002e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e10:	2255      	movs	r2, #85	; 0x55
 8002e12:	4804      	ldr	r0, [pc, #16]	; (8002e24 <TransmitSafetyStatusA+0xec>)
 8002e14:	f004 fb3a 	bl	800748c <HAL_UART_Transmit>
	}
}
 8002e18:	bf00      	nop
 8002e1a:	3760      	adds	r7, #96	; 0x60
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	0800baf8 	.word	0x0800baf8
 8002e24:	20000150 	.word	0x20000150
 8002e28:	0800bb3c 	.word	0x0800bb3c
 8002e2c:	0800bb84 	.word	0x0800bb84
 8002e30:	0800bbc8 	.word	0x0800bbc8
 8002e34:	0800bc1c 	.word	0x0800bc1c

08002e38 <TransmitSafetyStatusB>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status B register
 */
void TransmitSafetyStatusB(void) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b098      	sub	sp, #96	; 0x60
 8002e3c:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status B register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusB[1] = {0};
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x05, statusB, 1);
 8002e44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	2005      	movs	r0, #5
 8002e4e:	f7fe fedd 	bl	8001c0c <DirectCmdRead>

	// FET Overtemperature
	if (statusB[0] & (1 << 7)) {
 8002e52:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002e56:	b25b      	sxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da0d      	bge.n	8002e78 <TransmitSafetyStatusB+0x40>
		uint8_t msg[] = "OTF fault triggered! Discharging will be disabled for a moment...\n\r";
 8002e5c:	4a44      	ldr	r2, [pc, #272]	; (8002f70 <TransmitSafetyStatusB+0x138>)
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	4611      	mov	r1, r2
 8002e62:	2244      	movs	r2, #68	; 0x44
 8002e64:	4618      	mov	r0, r3
 8002e66:	f006 fd9c 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002e6a:	1d39      	adds	r1, r7, #4
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	2243      	movs	r2, #67	; 0x43
 8002e72:	4840      	ldr	r0, [pc, #256]	; (8002f74 <TransmitSafetyStatusB+0x13c>)
 8002e74:	f004 fb0a 	bl	800748c <HAL_UART_Transmit>
	}
	// Internal Overtemperature
	if (statusB[0] & (1 << 6)) {
 8002e78:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <TransmitSafetyStatusB+0x68>
		uint8_t msg[] = "OTINT fault triggered! All AFE operations will be disabled for a moment...\n\r";
 8002e84:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <TransmitSafetyStatusB+0x140>)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	4611      	mov	r1, r2
 8002e8a:	224d      	movs	r2, #77	; 0x4d
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f006 fd88 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002e92:	1d39      	adds	r1, r7, #4
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
 8002e98:	224c      	movs	r2, #76	; 0x4c
 8002e9a:	4836      	ldr	r0, [pc, #216]	; (8002f74 <TransmitSafetyStatusB+0x13c>)
 8002e9c:	f004 faf6 	bl	800748c <HAL_UART_Transmit>
	}
	// Overtemperature in Discharge
	if (statusB[0] & (1 << 5)) {
 8002ea0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <TransmitSafetyStatusB+0x90>
		uint8_t msg[] = "OTD fault triggered! Discharging will be disabled for a moment...\n\r";
 8002eac:	4a33      	ldr	r2, [pc, #204]	; (8002f7c <TransmitSafetyStatusB+0x144>)
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	2244      	movs	r2, #68	; 0x44
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f006 fd74 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002eba:	1d39      	adds	r1, r7, #4
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec0:	2243      	movs	r2, #67	; 0x43
 8002ec2:	482c      	ldr	r0, [pc, #176]	; (8002f74 <TransmitSafetyStatusB+0x13c>)
 8002ec4:	f004 fae2 	bl	800748c <HAL_UART_Transmit>
	}
	// Overtemperature in Charge
	if (statusB[0] & (1 << 4)) {
 8002ec8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <TransmitSafetyStatusB+0xb8>
		uint8_t msg[] = "OTC fault triggered! Charging will be disabled for a moment...\n\r";
 8002ed4:	4a2a      	ldr	r2, [pc, #168]	; (8002f80 <TransmitSafetyStatusB+0x148>)
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	4611      	mov	r1, r2
 8002eda:	2241      	movs	r2, #65	; 0x41
 8002edc:	4618      	mov	r0, r3
 8002ede:	f006 fd60 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002ee2:	1d39      	adds	r1, r7, #4
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	2240      	movs	r2, #64	; 0x40
 8002eea:	4822      	ldr	r0, [pc, #136]	; (8002f74 <TransmitSafetyStatusB+0x13c>)
 8002eec:	f004 face 	bl	800748c <HAL_UART_Transmit>
	}
	// Internal Undertemperature
	if (statusB[0] & (1 << 2)) {
 8002ef0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <TransmitSafetyStatusB+0xe0>
		uint8_t msg[] = "UTINT fault triggered! All AFE operations will be disabled for a moment...\n\r";
 8002efc:	4a21      	ldr	r2, [pc, #132]	; (8002f84 <TransmitSafetyStatusB+0x14c>)
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	4611      	mov	r1, r2
 8002f02:	224d      	movs	r2, #77	; 0x4d
 8002f04:	4618      	mov	r0, r3
 8002f06:	f006 fd4c 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002f0a:	1d39      	adds	r1, r7, #4
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f10:	224c      	movs	r2, #76	; 0x4c
 8002f12:	4818      	ldr	r0, [pc, #96]	; (8002f74 <TransmitSafetyStatusB+0x13c>)
 8002f14:	f004 faba 	bl	800748c <HAL_UART_Transmit>
	}
	// Undertemperature in Discharge
	if (statusB[0] & (1 << 1)) {
 8002f18:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <TransmitSafetyStatusB+0x108>
		uint8_t msg[] = "UTD fault triggered! No operational changes, but prolonged operation is not advised.\n\r";
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <TransmitSafetyStatusB+0x150>)
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	4611      	mov	r1, r2
 8002f2a:	2257      	movs	r2, #87	; 0x57
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f006 fd38 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002f32:	1d39      	adds	r1, r7, #4
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	2256      	movs	r2, #86	; 0x56
 8002f3a:	480e      	ldr	r0, [pc, #56]	; (8002f74 <TransmitSafetyStatusB+0x13c>)
 8002f3c:	f004 faa6 	bl	800748c <HAL_UART_Transmit>
	}
	// Undertemperature in Charge
	if (statusB[0] & 0x01) {
 8002f40:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <TransmitSafetyStatusB+0x130>
		uint8_t msg[] = "UTC fault triggered! No operational changes, but prolonged operation is not advised.\n\r";
 8002f4c:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <TransmitSafetyStatusB+0x154>)
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	4611      	mov	r1, r2
 8002f52:	2257      	movs	r2, #87	; 0x57
 8002f54:	4618      	mov	r0, r3
 8002f56:	f006 fd24 	bl	80099a2 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002f5a:	1d39      	adds	r1, r7, #4
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	2256      	movs	r2, #86	; 0x56
 8002f62:	4804      	ldr	r0, [pc, #16]	; (8002f74 <TransmitSafetyStatusB+0x13c>)
 8002f64:	f004 fa92 	bl	800748c <HAL_UART_Transmit>
	}
}
 8002f68:	bf00      	nop
 8002f6a:	3760      	adds	r7, #96	; 0x60
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	0800bc74 	.word	0x0800bc74
 8002f74:	20000150 	.word	0x20000150
 8002f78:	0800bcb8 	.word	0x0800bcb8
 8002f7c:	0800bd08 	.word	0x0800bd08
 8002f80:	0800bd4c 	.word	0x0800bd4c
 8002f84:	0800bd90 	.word	0x0800bd90
 8002f88:	0800bde0 	.word	0x0800bde0
 8002f8c:	0800be38 	.word	0x0800be38

08002f90 <EnterShutdown>:

/**
 * Commands the AFE to enter deep-sleep mode, then enters shutdown mode
 */
void EnterShutdown(void) {
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
	// Sending out a message indicating BMS is shutting down
	uint8_t msg[] = "Shutting down the BMS...\n\n\r";
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <EnterShutdown+0x98>)
 8002f98:	1d3c      	adds	r4, r7, #4
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002fa8:	1d39      	adds	r1, r7, #4
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	221b      	movs	r2, #27
 8002fb0:	481e      	ldr	r0, [pc, #120]	; (800302c <EnterShutdown+0x9c>)
 8002fb2:	f004 fa6b 	bl	800748c <HAL_UART_Transmit>

	// Send AFE the DEEPSLEEP command twice in a row in order to put it in DEEPSLEEP
	SubCmdNoData(0x000F);
 8002fb6:	200f      	movs	r0, #15
 8002fb8:	f7fe feba 	bl	8001d30 <SubCmdNoData>
	SubCmdNoData(0x000F);
 8002fbc:	200f      	movs	r0, #15
 8002fbe:	f7fe feb7 	bl	8001d30 <SubCmdNoData>

	// Process for putting STM32 into shutdown mode
	// Clear Wake-Up Flags
	PWR->SCR |= PWR_SCR_CWUF;
 8002fc2:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <EnterShutdown+0xa0>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <EnterShutdown+0xa0>)
 8002fc8:	f043 031f 	orr.w	r3, r3, #31
 8002fcc:	6193      	str	r3, [r2, #24]

	// Enable pull-down for PB5 (status LED) when in shutdown
	PWR->CR1 |= PWR_CR1_DBP;
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <EnterShutdown+0xa0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a17      	ldr	r2, [pc, #92]	; (8003030 <EnterShutdown+0xa0>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]
	PWR->PDCRB |= PWR_PDCRB_PB5;
 8002fda:	4b15      	ldr	r3, [pc, #84]	; (8003030 <EnterShutdown+0xa0>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	4a14      	ldr	r2, [pc, #80]	; (8003030 <EnterShutdown+0xa0>)
 8002fe0:	f043 0320 	orr.w	r3, r3, #32
 8002fe4:	62d3      	str	r3, [r2, #44]	; 0x2c
	PWR->CR1 &= ~PWR_CR1_DBP;
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <EnterShutdown+0xa0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a11      	ldr	r2, [pc, #68]	; (8003030 <EnterShutdown+0xa0>)
 8002fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

	// Enable Wake-Up Pin for PA2
	PWR->CR3 |= PWR_CR3_EWUP2;
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <EnterShutdown+0xa0>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <EnterShutdown+0xa0>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	6093      	str	r3, [r2, #8]

	// Set SHUTDOWN mode
	PWR->CR1 |= PWR_CR1_LPMS_SHUTDOWN;
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <EnterShutdown+0xa0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <EnterShutdown+0xa0>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	6013      	str	r3, [r2, #0]

	// Enter SHUTDOWN mode
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk; // Set DEEPSLEEP bit
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <EnterShutdown+0xa4>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	4a09      	ldr	r2, [pc, #36]	; (8003034 <EnterShutdown+0xa4>)
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003016:	f3bf 8f4f 	dsb	sy
}
 800301a:	bf00      	nop
	__DSB(); // Data Synchronization Barrier
	__WFI(); // Wait For Interrupt (enters SHUTDOWN mode)
 800301c:	bf30      	wfi
}
 800301e:	bf00      	nop
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bdb0      	pop	{r4, r5, r7, pc}
 8003026:	bf00      	nop
 8003028:	0800be90 	.word	0x0800be90
 800302c:	20000150 	.word	0x20000150
 8003030:	40007000 	.word	0x40007000
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <T4_Acquire>:

/**
 * Measures the thermistor connected to the STM32's ADC and converts the reading to a temperature
 * @return Temperature of the thermistor in degrees Celsius
 */
int16_t T4_Acquire(void) {
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
    float T4_volt = 0.0;
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
    float T4_res = 0.0;
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
    float T4_temp = 0.0;
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	607b      	str	r3, [r7, #4]
    int16_t T4 = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	82fb      	strh	r3, [r7, #22]

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8003058:	485f      	ldr	r0, [pc, #380]	; (80031d8 <T4_Acquire+0x1a0>)
 800305a:	f000 ffeb 	bl	8004034 <HAL_ADC_Start>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <T4_Acquire+0x30>
        // Start error
        Error_Handler();
 8003064:	f000 f93a 	bl	80032dc <Error_Handler>
    }

    // Poll for end of conversion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8003068:	f04f 31ff 	mov.w	r1, #4294967295
 800306c:	485a      	ldr	r0, [pc, #360]	; (80031d8 <T4_Acquire+0x1a0>)
 800306e:	f001 f8cf 	bl	8004210 <HAL_ADC_PollForConversion>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 808a 	bne.w	800318e <T4_Acquire+0x156>
        // Read the ADC conversion result (12-bit resolution)
        adcValue = HAL_ADC_GetValue(&hadc1);
 800307a:	4857      	ldr	r0, [pc, #348]	; (80031d8 <T4_Acquire+0x1a0>)
 800307c:	f001 f9a0 	bl	80043c0 <HAL_ADC_GetValue>
 8003080:	6138      	str	r0, [r7, #16]

        // Convert ADC value to voltage (divide by max. ADC counts, multiply by VREF (3.3V))
        T4_volt = ((float)adcValue / 4095.0) * V_REF;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308c:	ee17 0a90 	vmov	r0, s15
 8003090:	f7fd fa6a 	bl	8000568 <__aeabi_f2d>
 8003094:	a342      	add	r3, pc, #264	; (adr r3, 80031a0 <T4_Acquire+0x168>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f7fd fbe7 	bl	800086c <__aeabi_ddiv>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	a340      	add	r3, pc, #256	; (adr r3, 80031a8 <T4_Acquire+0x170>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd fab4 	bl	8000618 <__aeabi_dmul>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fd fd86 	bl	8000bc8 <__aeabi_d2f>
 80030bc:	4603      	mov	r3, r0
 80030be:	60fb      	str	r3, [r7, #12]
        // Calculate thermistor resistance based on voltage (voltage divider rearranged)
        T4_res = T4_PU_R * (T4_volt / (T4_PU_V - T4_volt));
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7fd fa51 	bl	8000568 <__aeabi_f2d>
 80030c6:	4604      	mov	r4, r0
 80030c8:	460d      	mov	r5, r1
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7fd fa4c 	bl	8000568 <__aeabi_f2d>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	a136      	add	r1, pc, #216	; (adr r1, 80031b0 <T4_Acquire+0x178>)
 80030d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030da:	f7fd f8e5 	bl	80002a8 <__aeabi_dsub>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4620      	mov	r0, r4
 80030e4:	4629      	mov	r1, r5
 80030e6:	f7fd fbc1 	bl	800086c <__aeabi_ddiv>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	a331      	add	r3, pc, #196	; (adr r3, 80031b8 <T4_Acquire+0x180>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f7fd fa8e 	bl	8000618 <__aeabi_dmul>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	f7fd fd60 	bl	8000bc8 <__aeabi_d2f>
 8003108:	4603      	mov	r3, r0
 800310a:	60bb      	str	r3, [r7, #8]
        // Using thermistor's beta value, calculate the temperature
        T4_temp = 1.0 / ((1.0 / 298.15) + (log(T4_res / T4_R0)) / T4_BETA);
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	f7fd fa2b 	bl	8000568 <__aeabi_f2d>
 8003112:	a32b      	add	r3, pc, #172	; (adr r3, 80031c0 <T4_Acquire+0x188>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f7fd fba8 	bl	800086c <__aeabi_ddiv>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	ec43 2b17 	vmov	d7, r2, r3
 8003124:	eeb0 0a47 	vmov.f32	s0, s14
 8003128:	eef0 0a67 	vmov.f32	s1, s15
 800312c:	f008 fa0c 	bl	800b548 <log>
 8003130:	ec51 0b10 	vmov	r0, r1, d0
 8003134:	a324      	add	r3, pc, #144	; (adr r3, 80031c8 <T4_Acquire+0x190>)
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f7fd fb97 	bl	800086c <__aeabi_ddiv>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	a322      	add	r3, pc, #136	; (adr r3, 80031d0 <T4_Acquire+0x198>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f7fd f8ae 	bl	80002ac <__adddf3>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	f04f 0000 	mov.w	r0, #0
 8003158:	4920      	ldr	r1, [pc, #128]	; (80031dc <T4_Acquire+0x1a4>)
 800315a:	f7fd fb87 	bl	800086c <__aeabi_ddiv>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	f7fd fd2f 	bl	8000bc8 <__aeabi_d2f>
 800316a:	4603      	mov	r3, r0
 800316c:	607b      	str	r3, [r7, #4]
        // Convert value in Kelvin to 16-bit integer like the other temperature measurements (units of 0.1K)
        T4 = (int16_t)(T4_temp * 10.0);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd f9fa 	bl	8000568 <__aeabi_f2d>
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <T4_Acquire+0x1a8>)
 800317a:	f7fd fa4d 	bl	8000618 <__aeabi_dmul>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f7fd fcf7 	bl	8000b78 <__aeabi_d2iz>
 800318a:	4603      	mov	r3, r0
 800318c:	82fb      	strh	r3, [r7, #22]
    }

    // Stop the ADC conversion
    HAL_ADC_Stop(&hadc1);
 800318e:	4812      	ldr	r0, [pc, #72]	; (80031d8 <T4_Acquire+0x1a0>)
 8003190:	f001 f80a 	bl	80041a8 <HAL_ADC_Stop>

    return T4;
 8003194:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bdb0      	pop	{r4, r5, r7, pc}
 80031a0:	00000000 	.word	0x00000000
 80031a4:	40affe00 	.word	0x40affe00
 80031a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80031ac:	4000624d 	.word	0x4000624d
 80031b0:	66666666 	.word	0x66666666
 80031b4:	400a6666 	.word	0x400a6666
 80031b8:	00000000 	.word	0x00000000
 80031bc:	40d16200 	.word	0x40d16200
 80031c0:	00000000 	.word	0x00000000
 80031c4:	40c38800 	.word	0x40c38800
 80031c8:	00000000 	.word	0x00000000
 80031cc:	40aad600 	.word	0x40aad600
 80031d0:	dcb5db83 	.word	0xdcb5db83
 80031d4:	3f6b79e1 	.word	0x3f6b79e1
 80031d8:	200001d8 	.word	0x200001d8
 80031dc:	3ff00000 	.word	0x3ff00000
 80031e0:	40240000 	.word	0x40240000

080031e4 <RTCToUnixTimestamp>:

time_t RTCToUnixTimestamp(RTC_DateTypeDef *date, RTC_TimeTypeDef *time) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
	struct tm tm_time;

	// Populate the tm structure
	tm_time.tm_year = date->Year + 100; // Years since 1900
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	78db      	ldrb	r3, [r3, #3]
 80031f2:	3364      	adds	r3, #100	; 0x64
 80031f4:	623b      	str	r3, [r7, #32]
	tm_time.tm_mon  = date->Month - 1;  // Months since January
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
	tm_time.tm_mday = date->Date;       // Day of the month
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	789b      	ldrb	r3, [r3, #2]
 8003202:	61bb      	str	r3, [r7, #24]
	tm_time.tm_hour = time->Hours;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	617b      	str	r3, [r7, #20]
	tm_time.tm_min  = time->Minutes;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	613b      	str	r3, [r7, #16]
	tm_time.tm_sec  = time->Seconds;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	789b      	ldrb	r3, [r3, #2]
 8003214:	60fb      	str	r3, [r7, #12]
	tm_time.tm_isdst = -1;              // No daylight saving time
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Convert to UNIX timestamp
	return mktime(&tm_time);
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	4618      	mov	r0, r3
 8003222:	f005 f96d 	bl	8008500 <mktime>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
}
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	3730      	adds	r7, #48	; 0x30
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <GetDateTime>:
/**
 * Helper function to get the current date and time and format it into a string
 * @param datetimeStr String to store the date & time in
 * @param size Size of the string (char array)
 */
void GetDateTime(char *datetimeStr, size_t size) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
	time_t now;
	struct tm *timeinfo;

	// Get the current time
	time(&now);
 800323e:	f107 0308 	add.w	r3, r7, #8
 8003242:	4618      	mov	r0, r3
 8003244:	f006 f82c 	bl	80092a0 <time>

	// Convert the time to local time structure
	timeinfo = localtime(&now);
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	4618      	mov	r0, r3
 800324e:	f004 ff6d 	bl	800812c <localtime>
 8003252:	6178      	str	r0, [r7, #20]

	// Format the time as a string
	strftime(datetimeStr, size, "%Y-%m-%d %H:%M:%S", timeinfo);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <GetDateTime+0x34>)
 8003258:	6839      	ldr	r1, [r7, #0]
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f006 f81e 	bl	800929c <strftime>
}
 8003260:	bf00      	nop
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	0800beac 	.word	0x0800beac

0800326c <_gettimeofday>:

/**
 * Implementation of _gettimeofday using the STM32's RTC
 */
int _gettimeofday(struct timeval *tv, void *tzvp) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    // Get the current RTC time and date
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK || HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	2200      	movs	r2, #0
 800327c:	4619      	mov	r1, r3
 800327e:	4816      	ldr	r0, [pc, #88]	; (80032d8 <_gettimeofday+0x6c>)
 8003280:	f003 fa89 	bl	8006796 <HAL_RTC_GetTime>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <_gettimeofday+0x32>
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	2200      	movs	r2, #0
 8003290:	4619      	mov	r1, r3
 8003292:	4811      	ldr	r0, [pc, #68]	; (80032d8 <_gettimeofday+0x6c>)
 8003294:	f003 fb62 	bl	800695c <HAL_RTC_GetDate>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <_gettimeofday+0x38>
        return -1; // Error reading RTC
 800329e:	f04f 33ff 	mov.w	r3, #4294967295
 80032a2:	e015      	b.n	80032d0 <_gettimeofday+0x64>
    }

    // Convert to UNIX timestamp
    time_t timestamp = RTCToUnixTimestamp(&sDate, &sTime);
 80032a4:	f107 020c 	add.w	r2, r7, #12
 80032a8:	f107 0308 	add.w	r3, r7, #8
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff98 	bl	80031e4 <RTCToUnixTimestamp>
 80032b4:	e9c7 0108 	strd	r0, r1, [r7, #32]

    // Populate the timeval structure
    if (tv) {
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <_gettimeofday+0x62>
        tv->tv_sec = timestamp; // Seconds since the Unix epoch
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032c4:	e9c1 2300 	strd	r2, r3, [r1]
        tv->tv_usec = 0;       // Microseconds (RTC typically doesn't support this)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
    }

    return 0;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3728      	adds	r7, #40	; 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	2000023c 	.word	0x2000023c

080032dc <Error_Handler>:

/**
 * Error handler if a UART transmission error occurs or error occurs during HAL peripheral initialization
 * TODO: Implement this
 */
void Error_Handler(void) {
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
    // Stay in an infinite loop to allow for debugging
    while (1);
 80032e0:	e7fe      	b.n	80032e0 <Error_Handler+0x4>
	...

080032e4 <HAL_GPIO_EXTI_Callback>:
/**
 * [DISCONTINUED] ALERT pin is no longer implemented in current version
 * Callback function for handling an interrupt from a GPIO pin
 * @param GPIO_Pin The GPIO pin number where an interrupt was received
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
	uint8_t msg[] = "Interrupt! ";
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <HAL_GPIO_EXTI_Callback+0x3c>)
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80032fa:	f107 010c 	add.w	r1, r7, #12
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	220b      	movs	r2, #11
 8003304:	4807      	ldr	r0, [pc, #28]	; (8003324 <HAL_GPIO_EXTI_Callback+0x40>)
 8003306:	f004 f8c1 	bl	800748c <HAL_UART_Transmit>

	switch (GPIO_Pin) {
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	2b10      	cmp	r3, #16
 800330e:	d102      	bne.n	8003316 <HAL_GPIO_EXTI_Callback+0x32>
	case GPIO_PIN_4:
		logAlertsFlag = true;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_GPIO_EXTI_Callback+0x44>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
	}
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	0800bec0 	.word	0x0800bec0
 8003324:	20000150 	.word	0x20000150
 8003328:	20000269 	.word	0x20000269

0800332c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003332:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_MspInit+0x44>)
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <HAL_MspInit+0x44>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6613      	str	r3, [r2, #96]	; 0x60
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <HAL_MspInit+0x44>)
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_MspInit+0x44>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <HAL_MspInit+0x44>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	6593      	str	r3, [r2, #88]	; 0x58
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_MspInit+0x44>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <HAL_ADC_MspInit+0x74>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d124      	bne.n	80033e0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <HAL_ADC_MspInit+0x78>)
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	4a14      	ldr	r2, [pc, #80]	; (80033ec <HAL_ADC_MspInit+0x78>)
 800339c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_ADC_MspInit+0x78>)
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_ADC_MspInit+0x78>)
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <HAL_ADC_MspInit+0x78>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_ADC_MspInit+0x78>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033c6:	2310      	movs	r3, #16
 80033c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80033ca:	230b      	movs	r3, #11
 80033cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4619      	mov	r1, r3
 80033d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033dc:	f001 fe82 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033e0:	bf00      	nop
 80033e2:	3728      	adds	r7, #40	; 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	50040000 	.word	0x50040000
 80033ec:	40021000 	.word	0x40021000

080033f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b090      	sub	sp, #64	; 0x40
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	2234      	movs	r2, #52	; 0x34
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f004 fe78 	bl	80080f6 <memset>
  if(hrtc->Instance==RTC)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <HAL_RTC_MspInit+0x58>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d117      	bne.n	8003440 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003414:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	4618      	mov	r0, r3
 8003422:	f002 ff05 	bl	8006230 <HAL_RCCEx_PeriphCLKConfig>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800342c:	f7ff ff56 	bl	80032dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RTC_MspInit+0x5c>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	4a05      	ldr	r2, [pc, #20]	; (800344c <HAL_RTC_MspInit+0x5c>)
 8003438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003440:	bf00      	nop
 8003442:	3740      	adds	r7, #64	; 0x40
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40002800 	.word	0x40002800
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_SPI_MspInit+0x7c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d128      	bne.n	80034c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800347c:	6613      	str	r3, [r2, #96]	; 0x60
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034a2:	23e0      	movs	r3, #224	; 0xe0
 80034a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034b2:	2305      	movs	r3, #5
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c0:	f001 fe10 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034c4:	bf00      	nop
 80034c6:	3728      	adds	r7, #40	; 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40013000 	.word	0x40013000
 80034d0:	40021000 	.word	0x40021000

080034d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b096      	sub	sp, #88	; 0x58
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034ec:	f107 0310 	add.w	r3, r7, #16
 80034f0:	2234      	movs	r2, #52	; 0x34
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 fdfe 	bl	80080f6 <memset>
  if(huart->Instance==USART1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <HAL_UART_MspInit+0xa4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d135      	bne.n	8003570 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003504:	2301      	movs	r3, #1
 8003506:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	4618      	mov	r0, r3
 8003512:	f002 fe8d 	bl	8006230 <HAL_RCCEx_PeriphCLKConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800351c:	f7ff fede 	bl	80032dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003520:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_UART_MspInit+0xa8>)
 8003522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003524:	4a15      	ldr	r2, [pc, #84]	; (800357c <HAL_UART_MspInit+0xa8>)
 8003526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352a:	6613      	str	r3, [r2, #96]	; 0x60
 800352c:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_UART_MspInit+0xa8>)
 800352e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003538:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_UART_MspInit+0xa8>)
 800353a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353c:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_UART_MspInit+0xa8>)
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003544:	4b0d      	ldr	r3, [pc, #52]	; (800357c <HAL_UART_MspInit+0xa8>)
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003550:	23c0      	movs	r3, #192	; 0xc0
 8003552:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355c:	2303      	movs	r3, #3
 800355e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003560:	2307      	movs	r3, #7
 8003562:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003568:	4619      	mov	r1, r3
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <HAL_UART_MspInit+0xac>)
 800356c:	f001 fdba 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003570:	bf00      	nop
 8003572:	3758      	adds	r7, #88	; 0x58
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40013800 	.word	0x40013800
 800357c:	40021000 	.word	0x40021000
 8003580:	48000400 	.word	0x48000400

08003584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003588:	e7fe      	b.n	8003588 <NMI_Handler+0x4>

0800358a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800358a:	b480      	push	{r7}
 800358c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800358e:	e7fe      	b.n	800358e <HardFault_Handler+0x4>

08003590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003594:	e7fe      	b.n	8003594 <MemManage_Handler+0x4>

08003596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800359a:	e7fe      	b.n	800359a <BusFault_Handler+0x4>

0800359c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035a0:	e7fe      	b.n	80035a0 <UsageFault_Handler+0x4>

080035a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035d0:	f000 f95e 	bl	8003890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80035dc:	2002      	movs	r0, #2
 80035de:	f001 ff25 	bl	800542c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  return 1;
 80035ea:	2301      	movs	r3, #1
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <_kill>:

int _kill(int pid, int sig)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003600:	f006 f998 	bl	8009934 <__errno>
 8003604:	4603      	mov	r3, r0
 8003606:	2216      	movs	r2, #22
 8003608:	601a      	str	r2, [r3, #0]
  return -1;
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_exit>:

void _exit (int status)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800361e:	f04f 31ff 	mov.w	r1, #4294967295
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ffe7 	bl	80035f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003628:	e7fe      	b.n	8003628 <_exit+0x12>

0800362a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	e00a      	b.n	8003652 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800363c:	f3af 8000 	nop.w
 8003640:	4601      	mov	r1, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	60ba      	str	r2, [r7, #8]
 8003648:	b2ca      	uxtb	r2, r1
 800364a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	3301      	adds	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	429a      	cmp	r2, r3
 8003658:	dbf0      	blt.n	800363c <_read+0x12>
  }

  return len;
 800365a:	687b      	ldr	r3, [r7, #4]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e009      	b.n	800368a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	60ba      	str	r2, [r7, #8]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3301      	adds	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	429a      	cmp	r2, r3
 8003690:	dbf1      	blt.n	8003676 <_write+0x12>
  }
  return len;
 8003692:	687b      	ldr	r3, [r7, #4]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_close>:

int _close(int file)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036c4:	605a      	str	r2, [r3, #4]
  return 0;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <_isatty>:

int _isatty(int file)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036dc:	2301      	movs	r3, #1
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <_sbrk+0x5c>)
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <_sbrk+0x60>)
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <_sbrk+0x64>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <_sbrk+0x64>)
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <_sbrk+0x68>)
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <_sbrk+0x64>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	429a      	cmp	r2, r3
 8003732:	d207      	bcs.n	8003744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003734:	f006 f8fe 	bl	8009934 <__errno>
 8003738:	4603      	mov	r3, r0
 800373a:	220c      	movs	r2, #12
 800373c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	e009      	b.n	8003758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <_sbrk+0x64>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <_sbrk+0x64>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	4a05      	ldr	r2, [pc, #20]	; (8003768 <_sbrk+0x64>)
 8003754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	2000a000 	.word	0x2000a000
 8003764:	00000400 	.word	0x00000400
 8003768:	20000270 	.word	0x20000270
 800376c:	200003e8 	.word	0x200003e8

08003770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <SystemInit+0x20>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <SystemInit+0x20>)
 800377c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003798:	f7ff ffea 	bl	8003770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800379c:	480c      	ldr	r0, [pc, #48]	; (80037d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800379e:	490d      	ldr	r1, [pc, #52]	; (80037d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037a0:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <LoopForever+0xe>)
  movs r3, #0
 80037a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037a4:	e002      	b.n	80037ac <LoopCopyDataInit>

080037a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037aa:	3304      	adds	r3, #4

080037ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b0:	d3f9      	bcc.n	80037a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037b2:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80037b4:	4c0a      	ldr	r4, [pc, #40]	; (80037e0 <LoopForever+0x16>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b8:	e001      	b.n	80037be <LoopFillZerobss>

080037ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037bc:	3204      	adds	r2, #4

080037be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c0:	d3fb      	bcc.n	80037ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037c2:	f006 f8bd 	bl	8009940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037c6:	f7fd fc9b 	bl	8001100 <main>

080037ca <LoopForever>:

LoopForever:
    b LoopForever
 80037ca:	e7fe      	b.n	80037ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80037cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80037d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037d4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80037d8:	0800c4bc 	.word	0x0800c4bc
  ldr r2, =_sbss
 80037dc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80037e0:	200003e8 	.word	0x200003e8

080037e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037e4:	e7fe      	b.n	80037e4 <ADC1_2_IRQHandler>

080037e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f0:	2003      	movs	r0, #3
 80037f2:	f001 fc43 	bl	800507c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037f6:	200f      	movs	r0, #15
 80037f8:	f000 f80e 	bl	8003818 <HAL_InitTick>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	71fb      	strb	r3, [r7, #7]
 8003806:	e001      	b.n	800380c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003808:	f7ff fd90 	bl	800332c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800380c:	79fb      	ldrb	r3, [r7, #7]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_InitTick+0x6c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d023      	beq.n	8003874 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800382c:	4b16      	ldr	r3, [pc, #88]	; (8003888 <HAL_InitTick+0x70>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_InitTick+0x6c>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383a:	fbb3 f3f1 	udiv	r3, r3, r1
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fc41 	bl	80050ca <HAL_SYSTICK_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d809      	bhi.n	8003868 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003854:	2200      	movs	r2, #0
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	f001 fc19 	bl	8005092 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <HAL_InitTick+0x74>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e007      	b.n	8003878 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e004      	b.n	8003878 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	e001      	b.n	8003878 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	2000000c 	.word	0x2000000c
 8003888:	20000004 	.word	0x20000004
 800388c:	20000008 	.word	0x20000008

08003890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_IncTick+0x20>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_IncTick+0x24>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4413      	add	r3, r2
 80038a0:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <HAL_IncTick+0x24>)
 80038a2:	6013      	str	r3, [r2, #0]
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c
 80038b4:	20000274 	.word	0x20000274

080038b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return uwTick;
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_GetTick+0x14>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000274 	.word	0x20000274

080038d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038d8:	f7ff ffee 	bl	80038b8 <HAL_GetTick>
 80038dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d005      	beq.n	80038f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <HAL_Delay+0x44>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038f6:	bf00      	nop
 80038f8:	f7ff ffde 	bl	80038b8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	429a      	cmp	r2, r3
 8003906:	d8f7      	bhi.n	80038f8 <HAL_Delay+0x28>
  {
  }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	2000000c 	.word	0x2000000c

08003918 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	609a      	str	r2, [r3, #8]
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3360      	adds	r3, #96	; 0x60
 8003992:	461a      	mov	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <LL_ADC_SetOffset+0x44>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	03fff000 	.word	0x03fff000

080039c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3360      	adds	r3, #96	; 0x60
 80039d6:	461a      	mov	r2, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3360      	adds	r3, #96	; 0x60
 8003a04:	461a      	mov	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	615a      	str	r2, [r3, #20]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b087      	sub	sp, #28
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3330      	adds	r3, #48	; 0x30
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	4413      	add	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	211f      	movs	r1, #31
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0e9b      	lsrs	r3, r3, #26
 8003aae:	f003 011f 	and.w	r1, r3, #31
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	431a      	orrs	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b087      	sub	sp, #28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3314      	adds	r3, #20
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	0e5b      	lsrs	r3, r3, #25
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	0d1b      	lsrs	r3, r3, #20
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2107      	movs	r1, #7
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	401a      	ands	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	0d1b      	lsrs	r3, r3, #20
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	431a      	orrs	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 0318 	and.w	r3, r3, #24
 8003b46:	4908      	ldr	r1, [pc, #32]	; (8003b68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b48:	40d9      	lsrs	r1, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	0007ffff 	.word	0x0007ffff

08003b6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 031f 	and.w	r3, r3, #31
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6093      	str	r3, [r2, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bdc:	d101      	bne.n	8003be2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c2c:	d101      	bne.n	8003c32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c54:	f043 0201 	orr.w	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c7c:	f043 0202 	orr.w	r2, r3, #2
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <LL_ADC_IsEnabled+0x18>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <LL_ADC_IsEnabled+0x1a>
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d101      	bne.n	8003cce <LL_ADC_IsDisableOngoing+0x18>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <LL_ADC_IsDisableOngoing+0x1a>
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cf0:	f043 0204 	orr.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d18:	f043 0210 	orr.w	r2, r3, #16
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d101      	bne.n	8003d44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d101      	bne.n	8003d92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e12b      	b.n	8004012 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fad3 	bl	8003374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fef1 	bl	8003bc8 <LL_ADC_IsDeepPowerDownEnabled>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fed7 	bl	8003ba4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ff0c 	bl	8003c18 <LL_ADC_IsInternalRegulatorEnabled>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d115      	bne.n	8003e32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fef0 	bl	8003bf0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e10:	4b82      	ldr	r3, [pc, #520]	; (800401c <HAL_ADC_Init+0x27c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	4a82      	ldr	r2, [pc, #520]	; (8004020 <HAL_ADC_Init+0x280>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	3301      	adds	r3, #1
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e24:	e002      	b.n	8003e2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f9      	bne.n	8003e26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff feee 	bl	8003c18 <LL_ADC_IsInternalRegulatorEnabled>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	f043 0210 	orr.w	r2, r3, #16
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff62 	bl	8003d2c <LL_ADC_REG_IsConversionOngoing>
 8003e68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 80c4 	bne.w	8004000 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f040 80c0 	bne.w	8004000 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e88:	f043 0202 	orr.w	r2, r3, #2
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fefb 	bl	8003c90 <LL_ADC_IsEnabled>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d110      	bne.n	8003ec2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ea0:	4860      	ldr	r0, [pc, #384]	; (8004024 <HAL_ADC_Init+0x284>)
 8003ea2:	f7ff fef5 	bl	8003c90 <LL_ADC_IsEnabled>
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	485f      	ldr	r0, [pc, #380]	; (8004028 <HAL_ADC_Init+0x288>)
 8003eaa:	f7ff fef1 	bl	8003c90 <LL_ADC_IsEnabled>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4323      	orrs	r3, r4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d105      	bne.n	8003ec2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	485b      	ldr	r0, [pc, #364]	; (800402c <HAL_ADC_Init+0x28c>)
 8003ebe:	f7ff fd2b 	bl	8003918 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7e5b      	ldrb	r3, [r3, #25]
 8003ec6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ecc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ed2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003ed8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d106      	bne.n	8003efe <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	045b      	lsls	r3, r3, #17
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	4b43      	ldr	r3, [pc, #268]	; (8004030 <HAL_ADC_Init+0x290>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	69b9      	ldr	r1, [r7, #24]
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff21 	bl	8003d7a <LL_ADC_INJ_IsConversionOngoing>
 8003f38:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d13d      	bne.n	8003fbc <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d13a      	bne.n	8003fbc <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f4a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f52:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f62:	f023 0302 	bic.w	r3, r3, #2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	69b9      	ldr	r1, [r7, #24]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d118      	bne.n	8003fac <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	611a      	str	r2, [r3, #16]
 8003faa:	e007      	b.n	8003fbc <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d10c      	bne.n	8003fde <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f023 010f 	bic.w	r1, r3, #15
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	1e5a      	subs	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
 8003fdc:	e007      	b.n	8003fee <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 020f 	bic.w	r2, r2, #15
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
 8003ffe:	e007      	b.n	8004010 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f043 0210 	orr.w	r2, r3, #16
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004010:	7ffb      	ldrb	r3, [r7, #31]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3724      	adds	r7, #36	; 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd90      	pop	{r4, r7, pc}
 800401a:	bf00      	nop
 800401c:	20000004 	.word	0x20000004
 8004020:	053e2d63 	.word	0x053e2d63
 8004024:	50040000 	.word	0x50040000
 8004028:	50040100 	.word	0x50040100
 800402c:	50040300 	.word	0x50040300
 8004030:	fff0c007 	.word	0xfff0c007

08004034 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800403c:	4857      	ldr	r0, [pc, #348]	; (800419c <HAL_ADC_Start+0x168>)
 800403e:	f7ff fd95 	bl	8003b6c <LL_ADC_GetMultimode>
 8004042:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fe6f 	bl	8003d2c <LL_ADC_REG_IsConversionOngoing>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	f040 809c 	bne.w	800418e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_ADC_Start+0x30>
 8004060:	2302      	movs	r3, #2
 8004062:	e097      	b.n	8004194 <HAL_ADC_Start+0x160>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fe6d 	bl	8004d4c <ADC_Enable>
 8004072:	4603      	mov	r3, r0
 8004074:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f040 8083 	bne.w	8004184 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a42      	ldr	r2, [pc, #264]	; (80041a0 <HAL_ADC_Start+0x16c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d002      	beq.n	80040a2 <HAL_ADC_Start+0x6e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	e000      	b.n	80040a4 <HAL_ADC_Start+0x70>
 80040a2:	4b40      	ldr	r3, [pc, #256]	; (80041a4 <HAL_ADC_Start+0x170>)
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d002      	beq.n	80040b2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d106      	bne.n	80040da <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f023 0206 	bic.w	r2, r3, #6
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	659a      	str	r2, [r3, #88]	; 0x58
 80040d8:	e002      	b.n	80040e0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	221c      	movs	r2, #28
 80040e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2a      	ldr	r2, [pc, #168]	; (80041a0 <HAL_ADC_Start+0x16c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d002      	beq.n	8004100 <HAL_ADC_Start+0xcc>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	e000      	b.n	8004102 <HAL_ADC_Start+0xce>
 8004100:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <HAL_ADC_Start+0x170>)
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	4293      	cmp	r3, r2
 8004108:	d008      	beq.n	800411c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b05      	cmp	r3, #5
 8004114:	d002      	beq.n	800411c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b09      	cmp	r3, #9
 800411a:	d114      	bne.n	8004146 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fdcc 	bl	8003cdc <LL_ADC_REG_StartConversion>
 8004144:	e025      	b.n	8004192 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <HAL_ADC_Start+0x16c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d002      	beq.n	8004162 <HAL_ADC_Start+0x12e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	e000      	b.n	8004164 <HAL_ADC_Start+0x130>
 8004162:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <HAL_ADC_Start+0x170>)
 8004164:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00f      	beq.n	8004192 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800417a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
 8004182:	e006      	b.n	8004192 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800418c:	e001      	b.n	8004192 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800418e:	2302      	movs	r3, #2
 8004190:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004192:	7dfb      	ldrb	r3, [r7, #23]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	50040300 	.word	0x50040300
 80041a0:	50040100 	.word	0x50040100
 80041a4:	50040000 	.word	0x50040000

080041a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_ADC_Stop+0x16>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e023      	b.n	8004206 <HAL_ADC_Stop+0x5e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80041c6:	2103      	movs	r1, #3
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fd03 	bl	8004bd4 <ADC_ConversionStop>
 80041ce:	4603      	mov	r3, r0
 80041d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d111      	bne.n	80041fc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fe3d 	bl	8004e58 <ADC_Disable>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800421a:	4866      	ldr	r0, [pc, #408]	; (80043b4 <HAL_ADC_PollForConversion+0x1a4>)
 800421c:	f7ff fca6 	bl	8003b6c <LL_ADC_GetMultimode>
 8004220:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d102      	bne.n	8004230 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800422a:	2308      	movs	r3, #8
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e02a      	b.n	8004286 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b05      	cmp	r3, #5
 800423a:	d002      	beq.n	8004242 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b09      	cmp	r3, #9
 8004240:	d111      	bne.n	8004266 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0a4      	b.n	80043aa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004260:	2304      	movs	r3, #4
 8004262:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004264:	e00f      	b.n	8004286 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004266:	4853      	ldr	r0, [pc, #332]	; (80043b4 <HAL_ADC_PollForConversion+0x1a4>)
 8004268:	f7ff fc8e 	bl	8003b88 <LL_ADC_GetMultiDMATransfer>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e093      	b.n	80043aa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004282:	2304      	movs	r3, #4
 8004284:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004286:	f7ff fb17 	bl	80038b8 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800428c:	e021      	b.n	80042d2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d01d      	beq.n	80042d2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004296:	f7ff fb0f 	bl	80038b8 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <HAL_ADC_PollForConversion+0x9c>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d112      	bne.n	80042d2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f043 0204 	orr.w	r2, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e06b      	b.n	80043aa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0d6      	beq.n	800428e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fbad 	bl	8003a50 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01c      	beq.n	8004336 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7e5b      	ldrb	r3, [r3, #25]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d118      	bne.n	8004336 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b08      	cmp	r3, #8
 8004310:	d111      	bne.n	8004336 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d105      	bne.n	8004336 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1f      	ldr	r2, [pc, #124]	; (80043b8 <HAL_ADC_PollForConversion+0x1a8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d002      	beq.n	8004346 <HAL_ADC_PollForConversion+0x136>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	e000      	b.n	8004348 <HAL_ADC_PollForConversion+0x138>
 8004346:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <HAL_ADC_PollForConversion+0x1ac>)
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	4293      	cmp	r3, r2
 800434e:	d008      	beq.n	8004362 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b05      	cmp	r3, #5
 800435a:	d002      	beq.n	8004362 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b09      	cmp	r3, #9
 8004360:	d104      	bne.n	800436c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e00c      	b.n	8004386 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <HAL_ADC_PollForConversion+0x1a8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d002      	beq.n	800437c <HAL_ADC_PollForConversion+0x16c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	e000      	b.n	800437e <HAL_ADC_PollForConversion+0x16e>
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <HAL_ADC_PollForConversion+0x1ac>)
 800437e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d104      	bne.n	8004396 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2208      	movs	r2, #8
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e008      	b.n	80043a8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d103      	bne.n	80043a8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	220c      	movs	r2, #12
 80043a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	50040300 	.word	0x50040300
 80043b8:	50040100 	.word	0x50040100
 80043bc:	50040000 	.word	0x50040000

080043c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0b6      	sub	sp, #216	; 0xd8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x22>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e3d5      	b.n	8004baa <HAL_ADC_ConfigChannel+0x7ce>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fc8e 	bl	8003d2c <LL_ADC_REG_IsConversionOngoing>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 83ba 	bne.w	8004b8c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b05      	cmp	r3, #5
 8004426:	d824      	bhi.n	8004472 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	3b02      	subs	r3, #2
 800442e:	2b03      	cmp	r3, #3
 8004430:	d81b      	bhi.n	800446a <HAL_ADC_ConfigChannel+0x8e>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <HAL_ADC_ConfigChannel+0x5c>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	08004449 	.word	0x08004449
 800443c:	08004451 	.word	0x08004451
 8004440:	08004459 	.word	0x08004459
 8004444:	08004461 	.word	0x08004461
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004448:	230c      	movs	r3, #12
 800444a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800444e:	e010      	b.n	8004472 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004450:	2312      	movs	r3, #18
 8004452:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004456:	e00c      	b.n	8004472 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004458:	2318      	movs	r3, #24
 800445a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800445e:	e008      	b.n	8004472 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004468:	e003      	b.n	8004472 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800446a:	2306      	movs	r3, #6
 800446c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004470:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004480:	f7ff faf9 	bl	8003a76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fc4f 	bl	8003d2c <LL_ADC_REG_IsConversionOngoing>
 800448e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fc6f 	bl	8003d7a <LL_ADC_INJ_IsConversionOngoing>
 800449c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 81bf 	bne.w	8004828 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f040 81ba 	bne.w	8004828 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044bc:	d10f      	bne.n	80044de <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	4619      	mov	r1, r3
 80044ca:	f7ff fb00 	bl	8003ace <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff faa7 	bl	8003a2a <LL_ADC_SetSamplingTimeCommonConfig>
 80044dc:	e00e      	b.n	80044fc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6819      	ldr	r1, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7ff faef 	bl	8003ace <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2100      	movs	r1, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fa97 	bl	8003a2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	08db      	lsrs	r3, r3, #3
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b04      	cmp	r3, #4
 800451c:	d00a      	beq.n	8004534 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6919      	ldr	r1, [r3, #16]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800452e:	f7ff fa27 	bl	8003980 <LL_ADC_SetOffset>
 8004532:	e179      	b.n	8004828 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fa44 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 8004540:	4603      	mov	r3, r0
 8004542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x184>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fa39 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 8004556:	4603      	mov	r3, r0
 8004558:	0e9b      	lsrs	r3, r3, #26
 800455a:	f003 021f 	and.w	r2, r3, #31
 800455e:	e01e      	b.n	800459e <HAL_ADC_ConfigChannel+0x1c2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fa2e 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 800456c:	4603      	mov	r3, r0
 800456e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800457e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004586:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800458e:	2320      	movs	r3, #32
 8004590:	e004      	b.n	800459c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004592:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x1da>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	0e9b      	lsrs	r3, r3, #26
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	e018      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x20c>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80045ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80045d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80045da:	2320      	movs	r3, #32
 80045dc:	e004      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80045de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045e2:	fab3 f383 	clz	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d106      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff f9fd 	bl	80039f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2101      	movs	r1, #1
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff f9e1 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 8004606:	4603      	mov	r3, r0
 8004608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x24a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2101      	movs	r1, #1
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff f9d6 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 800461c:	4603      	mov	r3, r0
 800461e:	0e9b      	lsrs	r3, r3, #26
 8004620:	f003 021f 	and.w	r2, r3, #31
 8004624:	e01e      	b.n	8004664 <HAL_ADC_ConfigChannel+0x288>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2101      	movs	r1, #1
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff f9cb 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 8004632:	4603      	mov	r3, r0
 8004634:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800464c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004654:	2320      	movs	r3, #32
 8004656:	e004      	b.n	8004662 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800465c:	fab3 f383 	clz	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <HAL_ADC_ConfigChannel+0x2a0>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0e9b      	lsrs	r3, r3, #26
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	e018      	b.n	80046ae <HAL_ADC_ConfigChannel+0x2d2>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e004      	b.n	80046ae <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80046a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d106      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	2101      	movs	r1, #1
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff f99a 	bl	80039f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff f97e 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x310>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2102      	movs	r1, #2
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff f973 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 80046e2:	4603      	mov	r3, r0
 80046e4:	0e9b      	lsrs	r3, r3, #26
 80046e6:	f003 021f 	and.w	r2, r3, #31
 80046ea:	e01e      	b.n	800472a <HAL_ADC_ConfigChannel+0x34e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2102      	movs	r1, #2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff f968 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800470a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800470e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800471a:	2320      	movs	r3, #32
 800471c:	e004      	b.n	8004728 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800471e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004732:	2b00      	cmp	r3, #0
 8004734:	d105      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x366>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	0e9b      	lsrs	r3, r3, #26
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	e014      	b.n	800476c <HAL_ADC_ConfigChannel+0x390>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004756:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800475e:	2320      	movs	r3, #32
 8004760:	e004      	b.n	800476c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800476c:	429a      	cmp	r2, r3
 800476e:	d106      	bne.n	800477e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2200      	movs	r2, #0
 8004776:	2102      	movs	r1, #2
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff f93b 	bl	80039f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2103      	movs	r1, #3
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff f91f 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 800478a:	4603      	mov	r3, r0
 800478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x3ce>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2103      	movs	r1, #3
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff f914 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 80047a0:	4603      	mov	r3, r0
 80047a2:	0e9b      	lsrs	r3, r3, #26
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	e017      	b.n	80047da <HAL_ADC_ConfigChannel+0x3fe>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2103      	movs	r1, #3
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff f909 	bl	80039c8 <LL_ADC_GetOffsetChannel>
 80047b6:	4603      	mov	r3, r0
 80047b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80047c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80047cc:	2320      	movs	r3, #32
 80047ce:	e003      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80047d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d2:	fab3 f383 	clz	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d105      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x416>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	0e9b      	lsrs	r3, r3, #26
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	e011      	b.n	8004816 <HAL_ADC_ConfigChannel+0x43a>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004802:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800480a:	2320      	movs	r3, #32
 800480c:	e003      	b.n	8004816 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800480e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004810:	fab3 f383 	clz	r3, r3
 8004814:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004816:	429a      	cmp	r2, r3
 8004818:	d106      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	2103      	movs	r1, #3
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff f8e6 	bl	80039f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fa2f 	bl	8003c90 <LL_ADC_IsEnabled>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f040 813f 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6819      	ldr	r1, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f7ff f96c 	bl	8003b24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a8e      	ldr	r2, [pc, #568]	; (8004a8c <HAL_ADC_ConfigChannel+0x6b0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	f040 8130 	bne.w	8004ab8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x4a4>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	0e9b      	lsrs	r3, r3, #26
 800486e:	3301      	adds	r3, #1
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2b09      	cmp	r3, #9
 8004876:	bf94      	ite	ls
 8004878:	2301      	movls	r3, #1
 800487a:	2300      	movhi	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e019      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x4d8>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800488e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004890:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004898:	2320      	movs	r3, #32
 800489a:	e003      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800489c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2b09      	cmp	r3, #9
 80048ac:	bf94      	ite	ls
 80048ae:	2301      	movls	r3, #1
 80048b0:	2300      	movhi	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d079      	beq.n	80049ac <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d107      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x4f8>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0e9b      	lsrs	r3, r3, #26
 80048ca:	3301      	adds	r3, #1
 80048cc:	069b      	lsls	r3, r3, #26
 80048ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048d2:	e015      	b.n	8004900 <HAL_ADC_ConfigChannel+0x524>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80048e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80048e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80048ec:	2320      	movs	r3, #32
 80048ee:	e003      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80048f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f2:	fab3 f383 	clz	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	3301      	adds	r3, #1
 80048fa:	069b      	lsls	r3, r3, #26
 80048fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x544>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	3301      	adds	r3, #1
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2101      	movs	r1, #1
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	e017      	b.n	8004950 <HAL_ADC_ConfigChannel+0x574>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004938:	2320      	movs	r3, #32
 800493a:	e003      	b.n	8004944 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800493c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	3301      	adds	r3, #1
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	ea42 0103 	orr.w	r1, r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x59a>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	0e9b      	lsrs	r3, r3, #26
 8004966:	3301      	adds	r3, #1
 8004968:	f003 021f 	and.w	r2, r3, #31
 800496c:	4613      	mov	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	051b      	lsls	r3, r3, #20
 8004974:	e018      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x5cc>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800498e:	2320      	movs	r3, #32
 8004990:	e003      	b.n	800499a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	fab3 f383 	clz	r3, r3
 8004998:	b2db      	uxtb	r3, r3
 800499a:	3301      	adds	r3, #1
 800499c:	f003 021f 	and.w	r2, r3, #31
 80049a0:	4613      	mov	r3, r2
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	4413      	add	r3, r2
 80049a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a8:	430b      	orrs	r3, r1
 80049aa:	e080      	b.n	8004aae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d107      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x5ec>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	0e9b      	lsrs	r3, r3, #26
 80049be:	3301      	adds	r3, #1
 80049c0:	069b      	lsls	r3, r3, #26
 80049c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049c6:	e015      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x618>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	fa93 f3a3 	rbit	r3, r3
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e003      	b.n	80049ec <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	069b      	lsls	r3, r3, #26
 80049f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0x638>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0e9b      	lsrs	r3, r3, #26
 8004a06:	3301      	adds	r3, #1
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	e017      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x668>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	61bb      	str	r3, [r7, #24]
  return result;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	e003      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	2101      	movs	r1, #1
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	ea42 0103 	orr.w	r1, r2, r3
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10d      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x694>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	0e9b      	lsrs	r3, r3, #26
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f003 021f 	and.w	r2, r3, #31
 8004a60:	4613      	mov	r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4413      	add	r3, r2
 8004a66:	3b1e      	subs	r3, #30
 8004a68:	051b      	lsls	r3, r3, #20
 8004a6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	e01d      	b.n	8004aac <HAL_ADC_ConfigChannel+0x6d0>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	60fb      	str	r3, [r7, #12]
  return result;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004a88:	2320      	movs	r3, #32
 8004a8a:	e005      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x6bc>
 8004a8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	fab3 f383 	clz	r3, r3
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f003 021f 	and.w	r2, r3, #31
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3b1e      	subs	r3, #30
 8004aa6:	051b      	lsls	r3, r3, #20
 8004aa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f7ff f80b 	bl	8003ace <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d06c      	beq.n	8004b9e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ac4:	483c      	ldr	r0, [pc, #240]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004ac6:	f7fe ff4d 	bl	8003964 <LL_ADC_GetCommonPathInternalCh>
 8004aca:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3a      	ldr	r2, [pc, #232]	; (8004bbc <HAL_ADC_ConfigChannel+0x7e0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d127      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d121      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a35      	ldr	r2, [pc, #212]	; (8004bc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d157      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004af2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004af6:	4619      	mov	r1, r3
 8004af8:	482f      	ldr	r0, [pc, #188]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004afa:	f7fe ff20 	bl	800393e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004afe:	4b31      	ldr	r3, [pc, #196]	; (8004bc4 <HAL_ADC_ConfigChannel+0x7e8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	4a30      	ldr	r2, [pc, #192]	; (8004bc8 <HAL_ADC_ConfigChannel+0x7ec>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	4613      	mov	r3, r2
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004b18:	e002      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f9      	bne.n	8004b1a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b26:	e03a      	b.n	8004b9e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a27      	ldr	r2, [pc, #156]	; (8004bcc <HAL_ADC_ConfigChannel+0x7f0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d113      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10d      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d12a      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b50:	4619      	mov	r1, r3
 8004b52:	4819      	ldr	r0, [pc, #100]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b54:	f7fe fef3 	bl	800393e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b58:	e021      	b.n	8004b9e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <HAL_ADC_ConfigChannel+0x7f4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d11c      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d116      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a12      	ldr	r2, [pc, #72]	; (8004bc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d111      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b82:	4619      	mov	r1, r3
 8004b84:	480c      	ldr	r0, [pc, #48]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b86:	f7fe feda 	bl	800393e <LL_ADC_SetCommonPathInternalCh>
 8004b8a:	e008      	b.n	8004b9e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ba6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	37d8      	adds	r7, #216	; 0xd8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	80080000 	.word	0x80080000
 8004bb8:	50040300 	.word	0x50040300
 8004bbc:	c7520000 	.word	0xc7520000
 8004bc0:	50040000 	.word	0x50040000
 8004bc4:	20000004 	.word	0x20000004
 8004bc8:	053e2d63 	.word	0x053e2d63
 8004bcc:	cb840000 	.word	0xcb840000
 8004bd0:	80000001 	.word	0x80000001

08004bd4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff f89e 	bl	8003d2c <LL_ADC_REG_IsConversionOngoing>
 8004bf0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff f8bf 	bl	8003d7a <LL_ADC_INJ_IsConversionOngoing>
 8004bfc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d103      	bne.n	8004c0c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8098 	beq.w	8004d3c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d02a      	beq.n	8004c70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	7e5b      	ldrb	r3, [r3, #25]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d126      	bne.n	8004c70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	7e1b      	ldrb	r3, [r3, #24]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d122      	bne.n	8004c70 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c2e:	e014      	b.n	8004c5a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4a45      	ldr	r2, [pc, #276]	; (8004d48 <ADC_ConversionStop+0x174>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d90d      	bls.n	8004c54 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3c:	f043 0210 	orr.w	r2, r3, #16
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e074      	b.n	8004d3e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d1e3      	bne.n	8004c30 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2240      	movs	r2, #64	; 0x40
 8004c6e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d014      	beq.n	8004ca0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff f856 	bl	8003d2c <LL_ADC_REG_IsConversionOngoing>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00c      	beq.n	8004ca0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff f813 	bl	8003cb6 <LL_ADC_IsDisableOngoing>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d104      	bne.n	8004ca0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff f832 	bl	8003d04 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d014      	beq.n	8004cd0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f865 	bl	8003d7a <LL_ADC_INJ_IsConversionOngoing>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fffb 	bl	8003cb6 <LL_ADC_IsDisableOngoing>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff f841 	bl	8003d52 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d005      	beq.n	8004ce2 <ADC_ConversionStop+0x10e>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d105      	bne.n	8004ce8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004cdc:	230c      	movs	r3, #12
 8004cde:	617b      	str	r3, [r7, #20]
        break;
 8004ce0:	e005      	b.n	8004cee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	617b      	str	r3, [r7, #20]
        break;
 8004ce6:	e002      	b.n	8004cee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004ce8:	2304      	movs	r3, #4
 8004cea:	617b      	str	r3, [r7, #20]
        break;
 8004cec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004cee:	f7fe fde3 	bl	80038b8 <HAL_GetTick>
 8004cf2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004cf4:	e01b      	b.n	8004d2e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004cf6:	f7fe fddf 	bl	80038b8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d914      	bls.n	8004d2e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00d      	beq.n	8004d2e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	f043 0210 	orr.w	r2, r3, #16
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	f043 0201 	orr.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e007      	b.n	8004d3e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1dc      	bne.n	8004cf6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	a33fffff 	.word	0xa33fffff

08004d4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe ff97 	bl	8003c90 <LL_ADC_IsEnabled>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d169      	bne.n	8004e3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <ADC_Enable+0xfc>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	f043 0210 	orr.w	r2, r3, #16
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d86:	f043 0201 	orr.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e055      	b.n	8004e3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe ff52 	bl	8003c40 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d9c:	482b      	ldr	r0, [pc, #172]	; (8004e4c <ADC_Enable+0x100>)
 8004d9e:	f7fe fde1 	bl	8003964 <LL_ADC_GetCommonPathInternalCh>
 8004da2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d013      	beq.n	8004dd4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dac:	4b28      	ldr	r3, [pc, #160]	; (8004e50 <ADC_Enable+0x104>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	099b      	lsrs	r3, r3, #6
 8004db2:	4a28      	ldr	r2, [pc, #160]	; (8004e54 <ADC_Enable+0x108>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	099b      	lsrs	r3, r3, #6
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dc6:	e002      	b.n	8004dce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f9      	bne.n	8004dc8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004dd4:	f7fe fd70 	bl	80038b8 <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dda:	e028      	b.n	8004e2e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe ff55 	bl	8003c90 <LL_ADC_IsEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fe ff25 	bl	8003c40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004df6:	f7fe fd5f 	bl	80038b8 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d914      	bls.n	8004e2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d00d      	beq.n	8004e2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0210 	orr.w	r2, r3, #16
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	f043 0201 	orr.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e007      	b.n	8004e3e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d1cf      	bne.n	8004ddc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	8000003f 	.word	0x8000003f
 8004e4c:	50040300 	.word	0x50040300
 8004e50:	20000004 	.word	0x20000004
 8004e54:	053e2d63 	.word	0x053e2d63

08004e58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe ff26 	bl	8003cb6 <LL_ADC_IsDisableOngoing>
 8004e6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe ff0d 	bl	8003c90 <LL_ADC_IsEnabled>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d047      	beq.n	8004f0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d144      	bne.n	8004f0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 030d 	and.w	r3, r3, #13
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d10c      	bne.n	8004eaa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe fee7 	bl	8003c68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ea2:	f7fe fd09 	bl	80038b8 <HAL_GetTick>
 8004ea6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ea8:	e029      	b.n	8004efe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	f043 0210 	orr.w	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	f043 0201 	orr.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e023      	b.n	8004f0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ec6:	f7fe fcf7 	bl	80038b8 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d914      	bls.n	8004efe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	f043 0210 	orr.w	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e007      	b.n	8004f0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1dc      	bne.n	8004ec6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <__NVIC_SetPriorityGrouping>:
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f34:	4013      	ands	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f4a:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	60d3      	str	r3, [r2, #12]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <__NVIC_GetPriorityGrouping>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <__NVIC_GetPriorityGrouping+0x18>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	f003 0307 	and.w	r3, r3, #7
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <__NVIC_SetPriority>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	db0a      	blt.n	8004fa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	490c      	ldr	r1, [pc, #48]	; (8004fc8 <__NVIC_SetPriority+0x4c>)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	0112      	lsls	r2, r2, #4
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004fa4:	e00a      	b.n	8004fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	4908      	ldr	r1, [pc, #32]	; (8004fcc <__NVIC_SetPriority+0x50>)
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	3b04      	subs	r3, #4
 8004fb4:	0112      	lsls	r2, r2, #4
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	440b      	add	r3, r1
 8004fba:	761a      	strb	r2, [r3, #24]
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	e000e100 	.word	0xe000e100
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f1c3 0307 	rsb	r3, r3, #7
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	bf28      	it	cs
 8004fee:	2304      	movcs	r3, #4
 8004ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	2b06      	cmp	r3, #6
 8004ff8:	d902      	bls.n	8005000 <NVIC_EncodePriority+0x30>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3b03      	subs	r3, #3
 8004ffe:	e000      	b.n	8005002 <NVIC_EncodePriority+0x32>
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005004:	f04f 32ff 	mov.w	r2, #4294967295
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43da      	mvns	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	401a      	ands	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005018:	f04f 31ff 	mov.w	r1, #4294967295
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	fa01 f303 	lsl.w	r3, r1, r3
 8005022:	43d9      	mvns	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005028:	4313      	orrs	r3, r2
         );
}
 800502a:	4618      	mov	r0, r3
 800502c:	3724      	adds	r7, #36	; 0x24
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3b01      	subs	r3, #1
 8005044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005048:	d301      	bcc.n	800504e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800504a:	2301      	movs	r3, #1
 800504c:	e00f      	b.n	800506e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800504e:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <SysTick_Config+0x40>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3b01      	subs	r3, #1
 8005054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005056:	210f      	movs	r1, #15
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	f7ff ff8e 	bl	8004f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <SysTick_Config+0x40>)
 8005062:	2200      	movs	r2, #0
 8005064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005066:	4b04      	ldr	r3, [pc, #16]	; (8005078 <SysTick_Config+0x40>)
 8005068:	2207      	movs	r2, #7
 800506a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	e000e010 	.word	0xe000e010

0800507c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff47 	bl	8004f18 <__NVIC_SetPriorityGrouping>
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b086      	sub	sp, #24
 8005096:	af00      	add	r7, sp, #0
 8005098:	4603      	mov	r3, r0
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
 800509e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050a4:	f7ff ff5c 	bl	8004f60 <__NVIC_GetPriorityGrouping>
 80050a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7ff ff8e 	bl	8004fd0 <NVIC_EncodePriority>
 80050b4:	4602      	mov	r2, r0
 80050b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff5d 	bl	8004f7c <__NVIC_SetPriority>
}
 80050c2:	bf00      	nop
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff ffb0 	bl	8005038 <SysTick_Config>
 80050d8:	4603      	mov	r3, r0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050f2:	e14e      	b.n	8005392 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	2101      	movs	r1, #1
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	4013      	ands	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8140 	beq.w	800538c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d005      	beq.n	8005124 <HAL_GPIO_Init+0x40>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d130      	bne.n	8005186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	2203      	movs	r2, #3
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4013      	ands	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800515a:	2201      	movs	r2, #1
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4013      	ands	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 0201 	and.w	r2, r3, #1
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b03      	cmp	r3, #3
 8005190:	d017      	beq.n	80051c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	2203      	movs	r2, #3
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d123      	bne.n	8005216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	08da      	lsrs	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3208      	adds	r2, #8
 80051d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	220f      	movs	r2, #15
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	08da      	lsrs	r2, r3, #3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3208      	adds	r2, #8
 8005210:	6939      	ldr	r1, [r7, #16]
 8005212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	2203      	movs	r2, #3
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4013      	ands	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0203 	and.w	r2, r3, #3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 809a 	beq.w	800538c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005258:	4b55      	ldr	r3, [pc, #340]	; (80053b0 <HAL_GPIO_Init+0x2cc>)
 800525a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525c:	4a54      	ldr	r2, [pc, #336]	; (80053b0 <HAL_GPIO_Init+0x2cc>)
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	6613      	str	r3, [r2, #96]	; 0x60
 8005264:	4b52      	ldr	r3, [pc, #328]	; (80053b0 <HAL_GPIO_Init+0x2cc>)
 8005266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005270:	4a50      	ldr	r2, [pc, #320]	; (80053b4 <HAL_GPIO_Init+0x2d0>)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	089b      	lsrs	r3, r3, #2
 8005276:	3302      	adds	r3, #2
 8005278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	220f      	movs	r2, #15
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	43db      	mvns	r3, r3
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4013      	ands	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800529a:	d013      	beq.n	80052c4 <HAL_GPIO_Init+0x1e0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a46      	ldr	r2, [pc, #280]	; (80053b8 <HAL_GPIO_Init+0x2d4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00d      	beq.n	80052c0 <HAL_GPIO_Init+0x1dc>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a45      	ldr	r2, [pc, #276]	; (80053bc <HAL_GPIO_Init+0x2d8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <HAL_GPIO_Init+0x1d8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a44      	ldr	r2, [pc, #272]	; (80053c0 <HAL_GPIO_Init+0x2dc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d101      	bne.n	80052b8 <HAL_GPIO_Init+0x1d4>
 80052b4:	2303      	movs	r3, #3
 80052b6:	e006      	b.n	80052c6 <HAL_GPIO_Init+0x1e2>
 80052b8:	2307      	movs	r3, #7
 80052ba:	e004      	b.n	80052c6 <HAL_GPIO_Init+0x1e2>
 80052bc:	2302      	movs	r3, #2
 80052be:	e002      	b.n	80052c6 <HAL_GPIO_Init+0x1e2>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <HAL_GPIO_Init+0x1e2>
 80052c4:	2300      	movs	r3, #0
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	f002 0203 	and.w	r2, r2, #3
 80052cc:	0092      	lsls	r2, r2, #2
 80052ce:	4093      	lsls	r3, r2
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052d6:	4937      	ldr	r1, [pc, #220]	; (80053b4 <HAL_GPIO_Init+0x2d0>)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	3302      	adds	r3, #2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052e4:	4b37      	ldr	r3, [pc, #220]	; (80053c4 <HAL_GPIO_Init+0x2e0>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4013      	ands	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005308:	4a2e      	ldr	r2, [pc, #184]	; (80053c4 <HAL_GPIO_Init+0x2e0>)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800530e:	4b2d      	ldr	r3, [pc, #180]	; (80053c4 <HAL_GPIO_Init+0x2e0>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	43db      	mvns	r3, r3
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4013      	ands	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005332:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <HAL_GPIO_Init+0x2e0>)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005338:	4b22      	ldr	r3, [pc, #136]	; (80053c4 <HAL_GPIO_Init+0x2e0>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	43db      	mvns	r3, r3
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4013      	ands	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800535c:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <HAL_GPIO_Init+0x2e0>)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005362:	4b18      	ldr	r3, [pc, #96]	; (80053c4 <HAL_GPIO_Init+0x2e0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	43db      	mvns	r3, r3
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005386:	4a0f      	ldr	r2, [pc, #60]	; (80053c4 <HAL_GPIO_Init+0x2e0>)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	3301      	adds	r3, #1
 8005390:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	f47f aea9 	bne.w	80050f4 <HAL_GPIO_Init+0x10>
  }
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40010000 	.word	0x40010000
 80053b8:	48000400 	.word	0x48000400
 80053bc:	48000800 	.word	0x48000800
 80053c0:	48000c00 	.word	0x48000c00
 80053c4:	40010400 	.word	0x40010400

080053c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]
 80053d4:	4613      	mov	r3, r2
 80053d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053d8:	787b      	ldrb	r3, [r7, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053e4:	e002      	b.n	80053ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053e6:	887a      	ldrh	r2, [r7, #2]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800540a:	887a      	ldrh	r2, [r7, #2]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4013      	ands	r3, r2
 8005410:	041a      	lsls	r2, r3, #16
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	43d9      	mvns	r1, r3
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	400b      	ands	r3, r1
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	619a      	str	r2, [r3, #24]
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005436:	4b08      	ldr	r3, [pc, #32]	; (8005458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d006      	beq.n	8005450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005442:	4a05      	ldr	r2, [pc, #20]	; (8005458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fd ff4a 	bl	80032e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40010400 	.word	0x40010400

0800545c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005460:	4b04      	ldr	r3, [pc, #16]	; (8005474 <HAL_PWREx_GetVoltageRange+0x18>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40007000 	.word	0x40007000

08005478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005486:	d130      	bne.n	80054ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005488:	4b23      	ldr	r3, [pc, #140]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005494:	d038      	beq.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800549e:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054a6:	4b1d      	ldr	r3, [pc, #116]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2232      	movs	r2, #50	; 0x32
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0c9b      	lsrs	r3, r3, #18
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054bc:	e002      	b.n	80054c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c4:	4b14      	ldr	r3, [pc, #80]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d0:	d102      	bne.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f2      	bne.n	80054be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e4:	d110      	bne.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e00f      	b.n	800550a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ea:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f6:	d007      	beq.n	8005508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005500:	4a05      	ldr	r2, [pc, #20]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005506:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40007000 	.word	0x40007000
 800551c:	20000004 	.word	0x20000004
 8005520:	431bde83 	.word	0x431bde83

08005524 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	; 0x28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f000 bc4f 	b.w	8005dd6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005538:	4b97      	ldr	r3, [pc, #604]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 030c 	and.w	r3, r3, #12
 8005540:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005542:	4b95      	ldr	r3, [pc, #596]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80e6 	beq.w	8005726 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <HAL_RCC_OscConfig+0x4c>
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	2b0c      	cmp	r3, #12
 8005564:	f040 808d 	bne.w	8005682 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b01      	cmp	r3, #1
 800556c:	f040 8089 	bne.w	8005682 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005570:	4b89      	ldr	r3, [pc, #548]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d006      	beq.n	800558a <HAL_RCC_OscConfig+0x66>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f000 bc26 	b.w	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800558e:	4b82      	ldr	r3, [pc, #520]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <HAL_RCC_OscConfig+0x80>
 800559a:	4b7f      	ldr	r3, [pc, #508]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055a2:	e005      	b.n	80055b0 <HAL_RCC_OscConfig+0x8c>
 80055a4:	4b7c      	ldr	r3, [pc, #496]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80055a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d224      	bcs.n	80055fe <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fdd9 	bl	8006170 <RCC_SetFlashLatencyFromMSIRange>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f000 bc06 	b.w	8005dd6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055ca:	4b73      	ldr	r3, [pc, #460]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a72      	ldr	r2, [pc, #456]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80055d0:	f043 0308 	orr.w	r3, r3, #8
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	4b70      	ldr	r3, [pc, #448]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	496d      	ldr	r1, [pc, #436]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055e8:	4b6b      	ldr	r3, [pc, #428]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	4968      	ldr	r1, [pc, #416]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	604b      	str	r3, [r1, #4]
 80055fc:	e025      	b.n	800564a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055fe:	4b66      	ldr	r3, [pc, #408]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a65      	ldr	r2, [pc, #404]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005604:	f043 0308 	orr.w	r3, r3, #8
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	4b63      	ldr	r3, [pc, #396]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	4960      	ldr	r1, [pc, #384]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800561c:	4b5e      	ldr	r3, [pc, #376]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	495b      	ldr	r1, [pc, #364]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 800562c:	4313      	orrs	r3, r2
 800562e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fd98 	bl	8006170 <RCC_SetFlashLatencyFromMSIRange>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e3c5      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800564a:	f000 fccd 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 800564e:	4602      	mov	r2, r0
 8005650:	4b51      	ldr	r3, [pc, #324]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	4950      	ldr	r1, [pc, #320]	; (800579c <HAL_RCC_OscConfig+0x278>)
 800565c:	5ccb      	ldrb	r3, [r1, r3]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	fa22 f303 	lsr.w	r3, r2, r3
 8005666:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005668:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800566a:	4b4e      	ldr	r3, [pc, #312]	; (80057a4 <HAL_RCC_OscConfig+0x280>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe f8d2 	bl	8003818 <HAL_InitTick>
 8005674:	4603      	mov	r3, r0
 8005676:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d052      	beq.n	8005724 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	e3a9      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d032      	beq.n	80056f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800568a:	4b43      	ldr	r3, [pc, #268]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a42      	ldr	r2, [pc, #264]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005696:	f7fe f90f 	bl	80038b8 <HAL_GetTick>
 800569a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800569e:	f7fe f90b 	bl	80038b8 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e392      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056b0:	4b39      	ldr	r3, [pc, #228]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056bc:	4b36      	ldr	r3, [pc, #216]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a35      	ldr	r2, [pc, #212]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80056c2:	f043 0308 	orr.w	r3, r3, #8
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	4b33      	ldr	r3, [pc, #204]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	4930      	ldr	r1, [pc, #192]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056da:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	492b      	ldr	r1, [pc, #172]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	604b      	str	r3, [r1, #4]
 80056ee:	e01a      	b.n	8005726 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056f0:	4b29      	ldr	r3, [pc, #164]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a28      	ldr	r2, [pc, #160]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056fc:	f7fe f8dc 	bl	80038b8 <HAL_GetTick>
 8005700:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005704:	f7fe f8d8 	bl	80038b8 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e35f      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005716:	4b20      	ldr	r3, [pc, #128]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x1e0>
 8005722:	e000      	b.n	8005726 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005724:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d073      	beq.n	800581a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d005      	beq.n	8005744 <HAL_RCC_OscConfig+0x220>
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d10e      	bne.n	800575c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d10b      	bne.n	800575c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d063      	beq.n	8005818 <HAL_RCC_OscConfig+0x2f4>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d15f      	bne.n	8005818 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e33c      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005764:	d106      	bne.n	8005774 <HAL_RCC_OscConfig+0x250>
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 800576c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e025      	b.n	80057c0 <HAL_RCC_OscConfig+0x29c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800577c:	d114      	bne.n	80057a8 <HAL_RCC_OscConfig+0x284>
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4b03      	ldr	r3, [pc, #12]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a02      	ldr	r2, [pc, #8]	; (8005798 <HAL_RCC_OscConfig+0x274>)
 8005790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e013      	b.n	80057c0 <HAL_RCC_OscConfig+0x29c>
 8005798:	40021000 	.word	0x40021000
 800579c:	0800bed8 	.word	0x0800bed8
 80057a0:	20000004 	.word	0x20000004
 80057a4:	20000008 	.word	0x20000008
 80057a8:	4b8f      	ldr	r3, [pc, #572]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a8e      	ldr	r2, [pc, #568]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	4b8c      	ldr	r3, [pc, #560]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a8b      	ldr	r2, [pc, #556]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80057ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d013      	beq.n	80057f0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fe f876 	bl	80038b8 <HAL_GetTick>
 80057cc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057d0:	f7fe f872 	bl	80038b8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e2f9      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057e2:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x2ac>
 80057ee:	e014      	b.n	800581a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f0:	f7fe f862 	bl	80038b8 <HAL_GetTick>
 80057f4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f8:	f7fe f85e 	bl	80038b8 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b64      	cmp	r3, #100	; 0x64
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e2e5      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800580a:	4b77      	ldr	r3, [pc, #476]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0x2d4>
 8005816:	e000      	b.n	800581a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d060      	beq.n	80058e8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d005      	beq.n	8005838 <HAL_RCC_OscConfig+0x314>
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	2b0c      	cmp	r3, #12
 8005830:	d119      	bne.n	8005866 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d116      	bne.n	8005866 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005838:	4b6b      	ldr	r3, [pc, #428]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_RCC_OscConfig+0x32c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e2c2      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005850:	4b65      	ldr	r3, [pc, #404]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	4962      	ldr	r1, [pc, #392]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005860:	4313      	orrs	r3, r2
 8005862:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005864:	e040      	b.n	80058e8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d023      	beq.n	80058b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800586e:	4b5e      	ldr	r3, [pc, #376]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a5d      	ldr	r2, [pc, #372]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587a:	f7fe f81d 	bl	80038b8 <HAL_GetTick>
 800587e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005882:	f7fe f819 	bl	80038b8 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e2a0      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005894:	4b54      	ldr	r3, [pc, #336]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a0:	4b51      	ldr	r3, [pc, #324]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	061b      	lsls	r3, r3, #24
 80058ae:	494e      	ldr	r1, [pc, #312]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	604b      	str	r3, [r1, #4]
 80058b4:	e018      	b.n	80058e8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b6:	4b4c      	ldr	r3, [pc, #304]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4b      	ldr	r2, [pc, #300]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80058bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f7fd fff9 	bl	80038b8 <HAL_GetTick>
 80058c6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ca:	f7fd fff5 	bl	80038b8 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e27c      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058dc:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 8082 	beq.w	80059fa <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d05f      	beq.n	80059be <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80058fe:	4b3a      	ldr	r3, [pc, #232]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005904:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	429a      	cmp	r2, r3
 8005912:	d037      	beq.n	8005984 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d006      	beq.n	800592c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e254      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01b      	beq.n	800596e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8005936:	4b2c      	ldr	r3, [pc, #176]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800593c:	4a2a      	ldr	r2, [pc, #168]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005946:	f7fd ffb7 	bl	80038b8 <HAL_GetTick>
 800594a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800594e:	f7fd ffb3 	bl	80038b8 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b11      	cmp	r3, #17
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e23a      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005960:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1ef      	bne.n	800594e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800596e:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005974:	f023 0210 	bic.w	r2, r3, #16
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	491a      	ldr	r1, [pc, #104]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005984:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 8005986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005994:	f7fd ff90 	bl	80038b8 <HAL_GetTick>
 8005998:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800599c:	f7fd ff8c 	bl	80038b8 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b11      	cmp	r3, #17
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e213      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059ae:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80059b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0ef      	beq.n	800599c <HAL_RCC_OscConfig+0x478>
 80059bc:	e01d      	b.n	80059fa <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059be:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80059c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c4:	4a08      	ldr	r2, [pc, #32]	; (80059e8 <HAL_RCC_OscConfig+0x4c4>)
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ce:	f7fd ff73 	bl	80038b8 <HAL_GetTick>
 80059d2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d6:	f7fd ff6f 	bl	80038b8 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b11      	cmp	r3, #17
 80059e2:	d903      	bls.n	80059ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e1f6      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
 80059e8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059ec:	4ba9      	ldr	r3, [pc, #676]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 80059ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1ed      	bne.n	80059d6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80bd 	beq.w	8005b82 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a0e:	4ba1      	ldr	r3, [pc, #644]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10e      	bne.n	8005a38 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a1a:	4b9e      	ldr	r3, [pc, #632]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1e:	4a9d      	ldr	r2, [pc, #628]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6593      	str	r3, [r2, #88]	; 0x58
 8005a26:	4b9b      	ldr	r3, [pc, #620]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a38:	4b97      	ldr	r3, [pc, #604]	; (8005c98 <HAL_RCC_OscConfig+0x774>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d118      	bne.n	8005a76 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a44:	4b94      	ldr	r3, [pc, #592]	; (8005c98 <HAL_RCC_OscConfig+0x774>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a93      	ldr	r2, [pc, #588]	; (8005c98 <HAL_RCC_OscConfig+0x774>)
 8005a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a50:	f7fd ff32 	bl	80038b8 <HAL_GetTick>
 8005a54:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a58:	f7fd ff2e 	bl	80038b8 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e1b5      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a6a:	4b8b      	ldr	r3, [pc, #556]	; (8005c98 <HAL_RCC_OscConfig+0x774>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d02c      	beq.n	8005adc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005a82:	4b84      	ldr	r3, [pc, #528]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	497f      	ldr	r1, [pc, #508]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d010      	beq.n	8005aca <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005aa8:	4b7a      	ldr	r3, [pc, #488]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aae:	4a79      	ldr	r2, [pc, #484]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005ab0:	f043 0304 	orr.w	r3, r3, #4
 8005ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ab8:	4b76      	ldr	r3, [pc, #472]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abe:	4a75      	ldr	r2, [pc, #468]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ac8:	e018      	b.n	8005afc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005aca:	4b72      	ldr	r3, [pc, #456]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	4a70      	ldr	r2, [pc, #448]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ada:	e00f      	b.n	8005afc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005adc:	4b6d      	ldr	r3, [pc, #436]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	4a6c      	ldr	r2, [pc, #432]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005aec:	4b69      	ldr	r3, [pc, #420]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af2:	4a68      	ldr	r2, [pc, #416]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d016      	beq.n	8005b32 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fd fed8 	bl	80038b8 <HAL_GetTick>
 8005b08:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0c:	f7fd fed4 	bl	80038b8 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e159      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b22:	4b5c      	ldr	r3, [pc, #368]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0ed      	beq.n	8005b0c <HAL_RCC_OscConfig+0x5e8>
 8005b30:	e01d      	b.n	8005b6e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b32:	f7fd fec1 	bl	80038b8 <HAL_GetTick>
 8005b36:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b38:	e00a      	b.n	8005b50 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b3a:	f7fd febd 	bl	80038b8 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e142      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b50:	4b50      	ldr	r3, [pc, #320]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1ed      	bne.n	8005b3a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005b5e:	4b4d      	ldr	r3, [pc, #308]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b64:	4a4b      	ldr	r2, [pc, #300]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d105      	bne.n	8005b82 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b76:	4b47      	ldr	r3, [pc, #284]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	4a46      	ldr	r2, [pc, #280]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d03c      	beq.n	8005c08 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01c      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b96:	4b3f      	ldr	r3, [pc, #252]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b9c:	4a3d      	ldr	r2, [pc, #244]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba6:	f7fd fe87 	bl	80038b8 <HAL_GetTick>
 8005baa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bae:	f7fd fe83 	bl	80038b8 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e10a      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bc0:	4b34      	ldr	r3, [pc, #208]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0ef      	beq.n	8005bae <HAL_RCC_OscConfig+0x68a>
 8005bce:	e01b      	b.n	8005c08 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bd0:	4b30      	ldr	r3, [pc, #192]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bd6:	4a2f      	ldr	r2, [pc, #188]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be0:	f7fd fe6a 	bl	80038b8 <HAL_GetTick>
 8005be4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005be8:	f7fd fe66 	bl	80038b8 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e0ed      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bfa:	4b26      	ldr	r3, [pc, #152]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1ef      	bne.n	8005be8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80e1 	beq.w	8005dd4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	f040 80b5 	bne.w	8005d86 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c1c:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	f003 0203 	and.w	r2, r3, #3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d124      	bne.n	8005c7a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d11b      	bne.n	8005c7a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d113      	bne.n	8005c7a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d109      	bne.n	8005c7a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	3b01      	subs	r3, #1
 8005c74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d05f      	beq.n	8005d3a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d05a      	beq.n	8005d36 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c80:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a03      	ldr	r2, [pc, #12]	; (8005c94 <HAL_RCC_OscConfig+0x770>)
 8005c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c8c:	f7fd fe14 	bl	80038b8 <HAL_GetTick>
 8005c90:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c92:	e00c      	b.n	8005cae <HAL_RCC_OscConfig+0x78a>
 8005c94:	40021000 	.word	0x40021000
 8005c98:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9c:	f7fd fe0c 	bl	80038b8 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e093      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cae:	4b4c      	ldr	r3, [pc, #304]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f0      	bne.n	8005c9c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cba:	4b49      	ldr	r3, [pc, #292]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	4b49      	ldr	r3, [pc, #292]	; (8005de4 <HAL_RCC_OscConfig+0x8c0>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cca:	3a01      	subs	r2, #1
 8005ccc:	0112      	lsls	r2, r2, #4
 8005cce:	4311      	orrs	r1, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cd4:	0212      	lsls	r2, r2, #8
 8005cd6:	4311      	orrs	r1, r2
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005cdc:	0852      	lsrs	r2, r2, #1
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	0552      	lsls	r2, r2, #21
 8005ce2:	4311      	orrs	r1, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ce8:	0852      	lsrs	r2, r2, #1
 8005cea:	3a01      	subs	r2, #1
 8005cec:	0652      	lsls	r2, r2, #25
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	493b      	ldr	r1, [pc, #236]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005cf6:	4b3a      	ldr	r3, [pc, #232]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a39      	ldr	r2, [pc, #228]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d00:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d02:	4b37      	ldr	r3, [pc, #220]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	4a36      	ldr	r2, [pc, #216]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d0c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d0e:	f7fd fdd3 	bl	80038b8 <HAL_GetTick>
 8005d12:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d16:	f7fd fdcf 	bl	80038b8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e056      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d28:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d34:	e04e      	b.n	8005dd4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e04d      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d3a:	4b29      	ldr	r3, [pc, #164]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d146      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d46:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d50:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d52:	4b23      	ldr	r3, [pc, #140]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d5c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d5e:	f7fd fdab 	bl	80038b8 <HAL_GetTick>
 8005d62:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d66:	f7fd fda7 	bl	80038b8 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e02e      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d78:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f0      	beq.n	8005d66 <HAL_RCC_OscConfig+0x842>
 8005d84:	e026      	b.n	8005dd4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	2b0c      	cmp	r3, #12
 8005d8a:	d021      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8c:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fd fd8e 	bl	80038b8 <HAL_GetTick>
 8005d9c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fd fd8a 	bl	80038b8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e011      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	4a07      	ldr	r2, [pc, #28]	; (8005de0 <HAL_RCC_OscConfig+0x8bc>)
 8005dc4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005dc8:	f023 0303 	bic.w	r3, r3, #3
 8005dcc:	60d3      	str	r3, [r2, #12]
 8005dce:	e001      	b.n	8005dd4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3728      	adds	r7, #40	; 0x28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40021000 	.word	0x40021000
 8005de4:	f99f808c 	.word	0xf99f808c

08005de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0e7      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b75      	ldr	r3, [pc, #468]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d910      	bls.n	8005e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b72      	ldr	r3, [pc, #456]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 0207 	bic.w	r2, r3, #7
 8005e12:	4970      	ldr	r1, [pc, #448]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b6e      	ldr	r3, [pc, #440]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0cf      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d010      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	4b66      	ldr	r3, [pc, #408]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d908      	bls.n	8005e5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e48:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4960      	ldr	r1, [pc, #384]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d04c      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e6e:	4b5a      	ldr	r3, [pc, #360]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d121      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e0a6      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d107      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e86:	4b54      	ldr	r3, [pc, #336]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d115      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e09a      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d107      	bne.n	8005eae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e9e:	4b4e      	ldr	r3, [pc, #312]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e08e      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eae:	4b4a      	ldr	r3, [pc, #296]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e086      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ebe:	4b46      	ldr	r3, [pc, #280]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f023 0203 	bic.w	r2, r3, #3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4943      	ldr	r1, [pc, #268]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed0:	f7fd fcf2 	bl	80038b8 <HAL_GetTick>
 8005ed4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed6:	e00a      	b.n	8005eee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed8:	f7fd fcee 	bl	80038b8 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e06e      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eee:	4b3a      	ldr	r3, [pc, #232]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 020c 	and.w	r2, r3, #12
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d1eb      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d010      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d208      	bcs.n	8005f2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f1c:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	492b      	ldr	r1, [pc, #172]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f2e:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d210      	bcs.n	8005f5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3c:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f023 0207 	bic.w	r2, r3, #7
 8005f44:	4923      	ldr	r1, [pc, #140]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4c:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e036      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	4918      	ldr	r1, [pc, #96]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f88:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	4910      	ldr	r1, [pc, #64]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f9c:	f000 f824 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	091b      	lsrs	r3, r3, #4
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	490b      	ldr	r1, [pc, #44]	; (8005fdc <HAL_RCC_ClockConfig+0x1f4>)
 8005fae:	5ccb      	ldrb	r3, [r1, r3]
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005fbc:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <HAL_RCC_ClockConfig+0x1fc>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fd fc29 	bl	8003818 <HAL_InitTick>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40022000 	.word	0x40022000
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	0800bed8 	.word	0x0800bed8
 8005fe0:	20000004 	.word	0x20000004
 8005fe4:	20000008 	.word	0x20000008

08005fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b089      	sub	sp, #36	; 0x24
 8005fec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006000:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x34>
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b0c      	cmp	r3, #12
 8006014:	d121      	bne.n	800605a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d11e      	bne.n	800605a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800601c:	4b34      	ldr	r3, [pc, #208]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006028:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800602a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	e005      	b.n	8006044 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006038:	4b2d      	ldr	r3, [pc, #180]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	091b      	lsrs	r3, r3, #4
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006044:	4a2b      	ldr	r2, [pc, #172]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10d      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b04      	cmp	r3, #4
 800605e:	d102      	bne.n	8006066 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	e004      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d101      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800606c:	4b23      	ldr	r3, [pc, #140]	; (80060fc <HAL_RCC_GetSysClockFreq+0x114>)
 800606e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b0c      	cmp	r3, #12
 8006074:	d134      	bne.n	80060e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006076:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d003      	beq.n	800608e <HAL_RCC_GetSysClockFreq+0xa6>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d003      	beq.n	8006094 <HAL_RCC_GetSysClockFreq+0xac>
 800608c:	e005      	b.n	800609a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800608e:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006090:	617b      	str	r3, [r7, #20]
      break;
 8006092:	e005      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006094:	4b19      	ldr	r3, [pc, #100]	; (80060fc <HAL_RCC_GetSysClockFreq+0x114>)
 8006096:	617b      	str	r3, [r7, #20]
      break;
 8006098:	e002      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	617b      	str	r3, [r7, #20]
      break;
 800609e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060a0:	4b13      	ldr	r3, [pc, #76]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	3301      	adds	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	fb03 f202 	mul.w	r2, r3, r2
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	0e5b      	lsrs	r3, r3, #25
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	3301      	adds	r3, #1
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80060e0:	69bb      	ldr	r3, [r7, #24]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3724      	adds	r7, #36	; 0x24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000
 80060f4:	0800bef0 	.word	0x0800bef0
 80060f8:	00f42400 	.word	0x00f42400
 80060fc:	007a1200 	.word	0x007a1200

08006100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006104:	4b03      	ldr	r3, [pc, #12]	; (8006114 <HAL_RCC_GetHCLKFreq+0x14>)
 8006106:	681b      	ldr	r3, [r3, #0]
}
 8006108:	4618      	mov	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000004 	.word	0x20000004

08006118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800611c:	f7ff fff0 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006120:	4602      	mov	r2, r0
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	0a1b      	lsrs	r3, r3, #8
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	4904      	ldr	r1, [pc, #16]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800612e:	5ccb      	ldrb	r3, [r1, r3]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40021000 	.word	0x40021000
 8006140:	0800bee8 	.word	0x0800bee8

08006144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006148:	f7ff ffda 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 800614c:	4602      	mov	r2, r0
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	0adb      	lsrs	r3, r3, #11
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	4904      	ldr	r1, [pc, #16]	; (800616c <HAL_RCC_GetPCLK2Freq+0x28>)
 800615a:	5ccb      	ldrb	r3, [r1, r3]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006164:	4618      	mov	r0, r3
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40021000 	.word	0x40021000
 800616c:	0800bee8 	.word	0x0800bee8

08006170 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006178:	2300      	movs	r3, #0
 800617a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800617c:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006188:	f7ff f968 	bl	800545c <HAL_PWREx_GetVoltageRange>
 800618c:	6178      	str	r0, [r7, #20]
 800618e:	e014      	b.n	80061ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006190:	4b25      	ldr	r3, [pc, #148]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006194:	4a24      	ldr	r2, [pc, #144]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619a:	6593      	str	r3, [r2, #88]	; 0x58
 800619c:	4b22      	ldr	r3, [pc, #136]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800619e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80061a8:	f7ff f958 	bl	800545c <HAL_PWREx_GetVoltageRange>
 80061ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80061ae:	4b1e      	ldr	r3, [pc, #120]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c0:	d10b      	bne.n	80061da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b80      	cmp	r3, #128	; 0x80
 80061c6:	d919      	bls.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2ba0      	cmp	r3, #160	; 0xa0
 80061cc:	d902      	bls.n	80061d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061ce:	2302      	movs	r3, #2
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	e013      	b.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061d4:	2301      	movs	r3, #1
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	e010      	b.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b80      	cmp	r3, #128	; 0x80
 80061de:	d902      	bls.n	80061e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80061e0:	2303      	movs	r3, #3
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	e00a      	b.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b80      	cmp	r3, #128	; 0x80
 80061ea:	d102      	bne.n	80061f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061ec:	2302      	movs	r3, #2
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	e004      	b.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b70      	cmp	r3, #112	; 0x70
 80061f6:	d101      	bne.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061f8:	2301      	movs	r3, #1
 80061fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061fc:	4b0b      	ldr	r3, [pc, #44]	; (800622c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f023 0207 	bic.w	r2, r3, #7
 8006204:	4909      	ldr	r1, [pc, #36]	; (800622c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	429a      	cmp	r2, r3
 8006218:	d001      	beq.n	800621e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40021000 	.word	0x40021000
 800622c:	40022000 	.word	0x40022000

08006230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006238:	2300      	movs	r3, #0
 800623a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800623c:	2300      	movs	r3, #0
 800623e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 809e 	beq.w	800638a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006252:	4b46      	ldr	r3, [pc, #280]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00d      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006268:	4b40      	ldr	r3, [pc, #256]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800626a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626c:	4a3f      	ldr	r2, [pc, #252]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800626e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006272:	6593      	str	r3, [r2, #88]	; 0x58
 8006274:	4b3d      	ldr	r3, [pc, #244]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006280:	2301      	movs	r3, #1
 8006282:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006284:	4b3a      	ldr	r3, [pc, #232]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a39      	ldr	r2, [pc, #228]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800628a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800628e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006290:	f7fd fb12 	bl	80038b8 <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006296:	e009      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006298:	f7fd fb0e 	bl	80038b8 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d902      	bls.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	74fb      	strb	r3, [r7, #19]
        break;
 80062aa:	e005      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ac:	4b30      	ldr	r3, [pc, #192]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ef      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d15a      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062be:	4b2b      	ldr	r3, [pc, #172]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01e      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d019      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062da:	4b24      	ldr	r3, [pc, #144]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062e6:	4b21      	ldr	r3, [pc, #132]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80062e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ec:	4a1f      	ldr	r2, [pc, #124]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80062ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062f6:	4b1d      	ldr	r3, [pc, #116]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	4a1b      	ldr	r2, [pc, #108]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80062fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006306:	4a19      	ldr	r2, [pc, #100]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d016      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fd face 	bl	80038b8 <HAL_GetTick>
 800631c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800631e:	e00b      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f7fd faca 	bl	80038b8 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f241 3288 	movw	r2, #5000	; 0x1388
 800632e:	4293      	cmp	r3, r2
 8006330:	d902      	bls.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	74fb      	strb	r3, [r7, #19]
            break;
 8006336:	e006      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0ec      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006346:	7cfb      	ldrb	r3, [r7, #19]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	4904      	ldr	r1, [pc, #16]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006362:	e009      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006364:	7cfb      	ldrb	r3, [r7, #19]
 8006366:	74bb      	strb	r3, [r7, #18]
 8006368:	e006      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800636a:	bf00      	nop
 800636c:	40021000 	.word	0x40021000
 8006370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006374:	7cfb      	ldrb	r3, [r7, #19]
 8006376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006378:	7c7b      	ldrb	r3, [r7, #17]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d105      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637e:	4b6e      	ldr	r3, [pc, #440]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006382:	4a6d      	ldr	r2, [pc, #436]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006388:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006396:	4b68      	ldr	r3, [pc, #416]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f023 0203 	bic.w	r2, r3, #3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4964      	ldr	r1, [pc, #400]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063b8:	4b5f      	ldr	r3, [pc, #380]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f023 020c 	bic.w	r2, r3, #12
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	495c      	ldr	r1, [pc, #368]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063da:	4b57      	ldr	r3, [pc, #348]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4953      	ldr	r1, [pc, #332]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063fc:	4b4e      	ldr	r3, [pc, #312]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	494b      	ldr	r1, [pc, #300]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800641e:	4b46      	ldr	r3, [pc, #280]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	4942      	ldr	r1, [pc, #264]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006440:	4b3d      	ldr	r3, [pc, #244]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	493a      	ldr	r1, [pc, #232]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006462:	4b35      	ldr	r3, [pc, #212]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	4931      	ldr	r1, [pc, #196]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006484:	4b2c      	ldr	r3, [pc, #176]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	4929      	ldr	r1, [pc, #164]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064a6:	4b24      	ldr	r3, [pc, #144]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	4920      	ldr	r1, [pc, #128]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d015      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064c8:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	4918      	ldr	r1, [pc, #96]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e6:	d105      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e8:	4b13      	ldr	r3, [pc, #76]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a12      	ldr	r2, [pc, #72]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80064ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d015      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650e:	490a      	ldr	r1, [pc, #40]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006510:	4313      	orrs	r3, r2
 8006512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800651e:	d105      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	4a04      	ldr	r2, [pc, #16]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800652a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800652c:	7cbb      	ldrb	r3, [r7, #18]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000

0800653c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d07f      	beq.n	800664e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fc ff44 	bl	80033f0 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800656e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006578:	4b37      	ldr	r3, [pc, #220]	; (8006658 <HAL_RTC_Init+0x11c>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b10      	cmp	r3, #16
 8006582:	d05b      	beq.n	800663c <HAL_RTC_Init+0x100>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	22ca      	movs	r2, #202	; 0xca
 800658a:	625a      	str	r2, [r3, #36]	; 0x24
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2253      	movs	r2, #83	; 0x53
 8006592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fa53 	bl	8006a40 <RTC_EnterInitMode>
 800659a:	4603      	mov	r3, r0
 800659c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d127      	bne.n	80065f4 <HAL_RTC_Init+0xb8>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80065b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b6:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6999      	ldr	r1, [r3, #24]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6912      	ldr	r2, [r2, #16]
 80065de:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6919      	ldr	r1, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	041a      	lsls	r2, r3, #16
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fa59 	bl	8006aac <RTC_ExitInitMode>
 80065fa:	4603      	mov	r3, r0
 80065fc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d116      	bne.n	8006632 <HAL_RTC_Init+0xf6>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006612:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6999      	ldr	r1, [r3, #24]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	22ff      	movs	r2, #255	; 0xff
 8006638:	625a      	str	r2, [r3, #36]	; 0x24
 800663a:	e001      	b.n	8006640 <HAL_RTC_Init+0x104>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <HAL_RTC_Init+0x112>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
  }

  return status;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40002800 	.word	0x40002800

0800665c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_RTC_SetTime+0x1a>
 8006672:	2302      	movs	r3, #2
 8006674:	e08b      	b.n	800678e <HAL_RTC_SetTime+0x132>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2202      	movs	r2, #2
 8006682:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	22ca      	movs	r2, #202	; 0xca
 800668c:	625a      	str	r2, [r3, #36]	; 0x24
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2253      	movs	r2, #83	; 0x53
 8006694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 f9d2 	bl	8006a40 <RTC_EnterInitMode>
 800669c:	4603      	mov	r3, r0
 800669e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80066a0:	7cfb      	ldrb	r3, [r7, #19]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d163      	bne.n	800676e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d126      	bne.n	80066fa <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2200      	movs	r2, #0
 80066be:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fa2f 	bl	8006b28 <RTC_ByteToBcd2>
 80066ca:	4603      	mov	r3, r0
 80066cc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fa28 	bl	8006b28 <RTC_ByteToBcd2>
 80066d8:	4603      	mov	r3, r0
 80066da:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066dc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	789b      	ldrb	r3, [r3, #2]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fa20 	bl	8006b28 <RTC_ByteToBcd2>
 80066e8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066ea:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	78db      	ldrb	r3, [r3, #3]
 80066f2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e018      	b.n	800672c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2200      	movs	r2, #0
 800670c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800671a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006720:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	78db      	ldrb	r3, [r3, #3]
 8006726:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006736:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800673a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800674a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6999      	ldr	r1, [r3, #24]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	431a      	orrs	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f9a1 	bl	8006aac <RTC_ExitInitMode>
 800676a:	4603      	mov	r3, r0
 800676c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	22ff      	movs	r2, #255	; 0xff
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006776:	7cfb      	ldrb	r3, [r7, #19]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 800678c:	7cfb      	ldrb	r3, [r7, #19]
}
 800678e:	4618      	mov	r0, r3
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	bd90      	pop	{r4, r7, pc}

08006796 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80067c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80067c8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	0a1b      	lsrs	r3, r3, #8
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	0d9b      	lsrs	r3, r3, #22
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	b2da      	uxtb	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11a      	bne.n	8006844 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f000 f9a8 	bl	8006b68 <RTC_Bcd2ToByte>
 8006818:	4603      	mov	r3, r0
 800681a:	461a      	mov	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 f99f 	bl	8006b68 <RTC_Bcd2ToByte>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	789b      	ldrb	r3, [r3, #2]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 f996 	bl	8006b68 <RTC_Bcd2ToByte>
 800683c:	4603      	mov	r3, r0
 800683e:	461a      	mov	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800684e:	b590      	push	{r4, r7, lr}
 8006850:	b087      	sub	sp, #28
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_RTC_SetDate+0x1a>
 8006864:	2302      	movs	r3, #2
 8006866:	e075      	b.n	8006954 <HAL_RTC_SetDate+0x106>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10e      	bne.n	800689c <HAL_RTC_SetDate+0x4e>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b00      	cmp	r3, #0
 8006888:	d008      	beq.n	800689c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	785b      	ldrb	r3, [r3, #1]
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	b2db      	uxtb	r3, r3
 8006894:	330a      	adds	r3, #10
 8006896:	b2da      	uxtb	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d11c      	bne.n	80068dc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	78db      	ldrb	r3, [r3, #3]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f93e 	bl	8006b28 <RTC_ByteToBcd2>
 80068ac:	4603      	mov	r3, r0
 80068ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 f937 	bl	8006b28 <RTC_ByteToBcd2>
 80068ba:	4603      	mov	r3, r0
 80068bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80068be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	789b      	ldrb	r3, [r3, #2]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 f92f 	bl	8006b28 <RTC_ByteToBcd2>
 80068ca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068cc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e00e      	b.n	80068fa <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	78db      	ldrb	r3, [r3, #3]
 80068e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068e8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80068ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	22ca      	movs	r2, #202	; 0xca
 8006900:	625a      	str	r2, [r3, #36]	; 0x24
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2253      	movs	r2, #83	; 0x53
 8006908:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f898 	bl	8006a40 <RTC_EnterInitMode>
 8006910:	4603      	mov	r3, r0
 8006912:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006914:	7cfb      	ldrb	r3, [r7, #19]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10c      	bne.n	8006934 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006924:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006928:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 f8be 	bl	8006aac <RTC_ExitInitMode>
 8006930:	4603      	mov	r3, r0
 8006932:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	22ff      	movs	r2, #255	; 0xff
 800693a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800693c:	7cfb      	ldrb	r3, [r7, #19]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d103      	bne.n	800694a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8006952:	7cfb      	ldrb	r3, [r7, #19]
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	bd90      	pop	{r4, r7, pc}

0800695c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006972:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006976:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	0c1b      	lsrs	r3, r3, #16
 800697c:	b2da      	uxtb	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	b2da      	uxtb	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800699a:	b2da      	uxtb	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	0b5b      	lsrs	r3, r3, #13
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11a      	bne.n	80069ec <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	78db      	ldrb	r3, [r3, #3]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f8d4 	bl	8006b68 <RTC_Bcd2ToByte>
 80069c0:	4603      	mov	r3, r0
 80069c2:	461a      	mov	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 f8cb 	bl	8006b68 <RTC_Bcd2ToByte>
 80069d2:	4603      	mov	r3, r0
 80069d4:	461a      	mov	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	789b      	ldrb	r3, [r3, #2]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f8c2 	bl	8006b68 <RTC_Bcd2ToByte>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <HAL_RTC_WaitForSynchro+0x44>)
 8006a06:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 8006a08:	f7fc ff56 	bl	80038b8 <HAL_GetTick>
 8006a0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006a0e:	e009      	b.n	8006a24 <HAL_RTC_WaitForSynchro+0x2c>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a10:	f7fc ff52 	bl	80038b8 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a1e:	d901      	bls.n	8006a24 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e007      	b.n	8006a34 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0ee      	beq.n	8006a10 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	0001005c 	.word	0x0001005c

08006a40 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d123      	bne.n	8006aa2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a68:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a6a:	f7fc ff25 	bl	80038b8 <HAL_GetTick>
 8006a6e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a70:	e00d      	b.n	8006a8e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a72:	f7fc ff21 	bl	80038b8 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a80:	d905      	bls.n	8006a8e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d102      	bne.n	8006aa2 <RTC_EnterInitMode+0x62>
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d1e7      	bne.n	8006a72 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006ab8:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <RTC_ExitInitMode+0x78>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <RTC_ExitInitMode+0x78>)
 8006abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac2:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006ac4:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <RTC_ExitInitMode+0x78>)
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10c      	bne.n	8006aea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff ff91 	bl	80069f8 <HAL_RTC_WaitForSynchro>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01e      	beq.n	8006b1a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2203      	movs	r2, #3
 8006ae0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	73fb      	strb	r3, [r7, #15]
 8006ae8:	e017      	b.n	8006b1a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006aea:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <RTC_ExitInitMode+0x78>)
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	4a0d      	ldr	r2, [pc, #52]	; (8006b24 <RTC_ExitInitMode+0x78>)
 8006af0:	f023 0320 	bic.w	r3, r3, #32
 8006af4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff ff7e 	bl	80069f8 <HAL_RTC_WaitForSynchro>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2203      	movs	r2, #3
 8006b06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b0e:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <RTC_ExitInitMode+0x78>)
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	4a04      	ldr	r2, [pc, #16]	; (8006b24 <RTC_ExitInitMode+0x78>)
 8006b14:	f043 0320 	orr.w	r3, r3, #32
 8006b18:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40002800 	.word	0x40002800

08006b28 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006b3a:	e005      	b.n	8006b48 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	3b0a      	subs	r3, #10
 8006b46:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006b48:	7afb      	ldrb	r3, [r7, #11]
 8006b4a:	2b09      	cmp	r3, #9
 8006b4c:	d8f6      	bhi.n	8006b3c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	7afb      	ldrb	r3, [r7, #11]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	b2db      	uxtb	r3, r3
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	091b      	lsrs	r3, r3, #4
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	0092      	lsls	r2, r2, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006b82:	79fb      	ldrb	r3, [r7, #7]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	b2db      	uxtb	r3, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e095      	b.n	8006cda <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d108      	bne.n	8006bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bbe:	d009      	beq.n	8006bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	61da      	str	r2, [r3, #28]
 8006bc6:	e005      	b.n	8006bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fc fc2e 	bl	8003450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c14:	d902      	bls.n	8006c1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	e002      	b.n	8006c22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c2a:	d007      	beq.n	8006c3c <HAL_SPI_Init+0xa0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c34:	d002      	beq.n	8006c3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7e:	ea42 0103 	orr.w	r1, r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	0c1b      	lsrs	r3, r3, #16
 8006c98:	f003 0204 	and.w	r2, r3, #4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cb8:	ea42 0103 	orr.w	r1, r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b08a      	sub	sp, #40	; 0x28
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_SPI_TransmitReceive+0x26>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e20a      	b.n	800711e <HAL_SPI_TransmitReceive+0x43c>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d10:	f7fc fdd2 	bl	80038b8 <HAL_GetTick>
 8006d14:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d1c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d24:	887b      	ldrh	r3, [r7, #2]
 8006d26:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d28:	887b      	ldrh	r3, [r7, #2]
 8006d2a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d2c:	7efb      	ldrb	r3, [r7, #27]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d00e      	beq.n	8006d50 <HAL_SPI_TransmitReceive+0x6e>
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d38:	d106      	bne.n	8006d48 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <HAL_SPI_TransmitReceive+0x66>
 8006d42:	7efb      	ldrb	r3, [r7, #27]
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d003      	beq.n	8006d50 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d4e:	e1e0      	b.n	8007112 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_SPI_TransmitReceive+0x80>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_SPI_TransmitReceive+0x80>
 8006d5c:	887b      	ldrh	r3, [r7, #2]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d103      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d68:	e1d3      	b.n	8007112 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d003      	beq.n	8006d7e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2205      	movs	r2, #5
 8006d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	887a      	ldrh	r2, [r7, #2]
 8006d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	887a      	ldrh	r2, [r7, #2]
 8006d96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	887a      	ldrh	r2, [r7, #2]
 8006da4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	887a      	ldrh	r2, [r7, #2]
 8006daa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dc0:	d802      	bhi.n	8006dc8 <HAL_SPI_TransmitReceive+0xe6>
 8006dc2:	8a3b      	ldrh	r3, [r7, #16]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d908      	bls.n	8006dda <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dd6:	605a      	str	r2, [r3, #4]
 8006dd8:	e007      	b.n	8006dea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006de8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d007      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e10:	f240 8081 	bls.w	8006f16 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_SPI_TransmitReceive+0x140>
 8006e1c:	8a7b      	ldrh	r3, [r7, #18]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d16d      	bne.n	8006efe <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	881a      	ldrh	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	1c9a      	adds	r2, r3, #2
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e46:	e05a      	b.n	8006efe <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d11b      	bne.n	8006e8e <HAL_SPI_TransmitReceive+0x1ac>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d016      	beq.n	8006e8e <HAL_SPI_TransmitReceive+0x1ac>
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d113      	bne.n	8006e8e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	881a      	ldrh	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	1c9a      	adds	r2, r3, #2
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d11c      	bne.n	8006ed6 <HAL_SPI_TransmitReceive+0x1f4>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d016      	beq.n	8006ed6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	b292      	uxth	r2, r2
 8006eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	1c9a      	adds	r2, r3, #2
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ed6:	f7fc fcef 	bl	80038b8 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d80b      	bhi.n	8006efe <HAL_SPI_TransmitReceive+0x21c>
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d007      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006efc:	e109      	b.n	8007112 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d19f      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x166>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d199      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x166>
 8006f14:	e0e3      	b.n	80070de <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_SPI_TransmitReceive+0x244>
 8006f1e:	8a7b      	ldrh	r3, [r7, #18]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	f040 80cf 	bne.w	80070c4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d912      	bls.n	8006f56 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	881a      	ldrh	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	1c9a      	adds	r2, r3, #2
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	3b02      	subs	r3, #2
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f54:	e0b6      	b.n	80070c4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	330c      	adds	r3, #12
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f7c:	e0a2      	b.n	80070c4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d134      	bne.n	8006ff6 <HAL_SPI_TransmitReceive+0x314>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d02f      	beq.n	8006ff6 <HAL_SPI_TransmitReceive+0x314>
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d12c      	bne.n	8006ff6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d912      	bls.n	8006fcc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	881a      	ldrh	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	1c9a      	adds	r2, r3, #2
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	3b02      	subs	r3, #2
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fca:	e012      	b.n	8006ff2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	330c      	adds	r3, #12
 8006fd6:	7812      	ldrb	r2, [r2, #0]
 8006fd8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b01      	cmp	r3, #1
 8007002:	d148      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x3b4>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d042      	beq.n	8007096 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d923      	bls.n	8007064 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	b292      	uxth	r2, r2
 8007028:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	1c9a      	adds	r2, r3, #2
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b02      	subs	r3, #2
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b01      	cmp	r3, #1
 8007050:	d81f      	bhi.n	8007092 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007060:	605a      	str	r2, [r3, #4]
 8007062:	e016      	b.n	8007092 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f103 020c 	add.w	r2, r3, #12
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	7812      	ldrb	r2, [r2, #0]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007092:	2301      	movs	r3, #1
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007096:	f7fc fc0f 	bl	80038b8 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d803      	bhi.n	80070ae <HAL_SPI_TransmitReceive+0x3cc>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ac:	d102      	bne.n	80070b4 <HAL_SPI_TransmitReceive+0x3d2>
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d107      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80070c2:	e026      	b.n	8007112 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f47f af57 	bne.w	8006f7e <HAL_SPI_TransmitReceive+0x29c>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f47f af50 	bne.w	8006f7e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f93e 	bl	8007364 <SPI_EndRxTxTransaction>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007108:	e003      	b.n	8007112 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800711a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800711e:	4618      	mov	r0, r3
 8007120:	3728      	adds	r7, #40	; 0x28
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	4613      	mov	r3, r2
 8007136:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007138:	f7fc fbbe 	bl	80038b8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4413      	add	r3, r2
 8007146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007148:	f7fc fbb6 	bl	80038b8 <HAL_GetTick>
 800714c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800714e:	4b39      	ldr	r3, [pc, #228]	; (8007234 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	015b      	lsls	r3, r3, #5
 8007154:	0d1b      	lsrs	r3, r3, #20
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800715e:	e054      	b.n	800720a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007166:	d050      	beq.n	800720a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007168:	f7fc fba6 	bl	80038b8 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	429a      	cmp	r2, r3
 8007176:	d902      	bls.n	800717e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d13d      	bne.n	80071fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800718c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007196:	d111      	bne.n	80071bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a0:	d004      	beq.n	80071ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071aa:	d107      	bne.n	80071bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c4:	d10f      	bne.n	80071e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e017      	b.n	800722a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3b01      	subs	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4013      	ands	r3, r2
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	429a      	cmp	r2, r3
 8007218:	bf0c      	ite	eq
 800721a:	2301      	moveq	r3, #1
 800721c:	2300      	movne	r3, #0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	429a      	cmp	r2, r3
 8007226:	d19b      	bne.n	8007160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000004 	.word	0x20000004

08007238 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08a      	sub	sp, #40	; 0x28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800724a:	f7fc fb35 	bl	80038b8 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	4413      	add	r3, r2
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800725a:	f7fc fb2d 	bl	80038b8 <HAL_GetTick>
 800725e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	330c      	adds	r3, #12
 8007266:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007268:	4b3d      	ldr	r3, [pc, #244]	; (8007360 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	00da      	lsls	r2, r3, #3
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	0d1b      	lsrs	r3, r3, #20
 8007278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007280:	e060      	b.n	8007344 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007288:	d107      	bne.n	800729a <SPI_WaitFifoStateUntilTimeout+0x62>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d104      	bne.n	800729a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007298:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d050      	beq.n	8007344 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072a2:	f7fc fb09 	bl	80038b8 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d902      	bls.n	80072b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d13d      	bne.n	8007334 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072d0:	d111      	bne.n	80072f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072da:	d004      	beq.n	80072e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e4:	d107      	bne.n	80072f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fe:	d10f      	bne.n	8007320 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800731e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e010      	b.n	8007356 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	3b01      	subs	r3, #1
 8007342:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	4013      	ands	r3, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	429a      	cmp	r2, r3
 8007352:	d196      	bne.n	8007282 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3728      	adds	r7, #40	; 0x28
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000004 	.word	0x20000004

08007364 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2200      	movs	r2, #0
 8007378:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff ff5b 	bl	8007238 <SPI_WaitFifoStateUntilTimeout>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d007      	beq.n	8007398 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738c:	f043 0220 	orr.w	r2, r3, #32
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e027      	b.n	80073e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2200      	movs	r2, #0
 80073a0:	2180      	movs	r1, #128	; 0x80
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f7ff fec0 	bl	8007128 <SPI_WaitFlagStateUntilTimeout>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b2:	f043 0220 	orr.w	r2, r3, #32
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e014      	b.n	80073e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7ff ff34 	bl	8007238 <SPI_WaitFifoStateUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073da:	f043 0220 	orr.w	r2, r3, #32
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e000      	b.n	80073e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e040      	b.n	8007484 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fc f85e 	bl	80034d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2224      	movs	r2, #36	; 0x24
 800741c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0201 	bic.w	r2, r2, #1
 800742c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fb0c 	bl	8007a54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f8af 	bl	80075a0 <UART_SetConfig>
 8007442:	4603      	mov	r3, r0
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e01b      	b.n	8007484 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800745a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800746a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb8b 	bl	8007b98 <UART_CheckIdleState>
 8007482:	4603      	mov	r3, r0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	; 0x28
 8007490:	af02      	add	r7, sp, #8
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	4613      	mov	r3, r2
 800749a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	d178      	bne.n	8007596 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <HAL_UART_Transmit+0x24>
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e071      	b.n	8007598 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2221      	movs	r2, #33	; 0x21
 80074c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074c2:	f7fc f9f9 	bl	80038b8 <HAL_GetTick>
 80074c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e0:	d108      	bne.n	80074f4 <HAL_UART_Transmit+0x68>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d104      	bne.n	80074f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	e003      	b.n	80074fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074fc:	e030      	b.n	8007560 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2200      	movs	r2, #0
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fbed 	bl	8007ce8 <UART_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e03c      	b.n	8007598 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10b      	bne.n	800753c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	881a      	ldrh	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007530:	b292      	uxth	r2, r2
 8007532:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	3302      	adds	r3, #2
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	e008      	b.n	800754e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	781a      	ldrb	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	b292      	uxth	r2, r2
 8007546:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	3301      	adds	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007566:	b29b      	uxth	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1c8      	bne.n	80074fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2200      	movs	r2, #0
 8007574:	2140      	movs	r1, #64	; 0x40
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 fbb6 	bl	8007ce8 <UART_WaitOnFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e005      	b.n	8007598 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2220      	movs	r2, #32
 8007590:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	e000      	b.n	8007598 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007596:	2302      	movs	r3, #2
  }
}
 8007598:	4618      	mov	r0, r3
 800759a:	3720      	adds	r7, #32
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075a4:	b08a      	sub	sp, #40	; 0x28
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	431a      	orrs	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	431a      	orrs	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	4b9e      	ldr	r3, [pc, #632]	; (8007848 <UART_SetConfig+0x2a8>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	6812      	ldr	r2, [r2, #0]
 80075d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075d8:	430b      	orrs	r3, r1
 80075da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a93      	ldr	r2, [pc, #588]	; (800784c <UART_SetConfig+0x2ac>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007608:	4313      	orrs	r3, r2
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761c:	430a      	orrs	r2, r1
 800761e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a8a      	ldr	r2, [pc, #552]	; (8007850 <UART_SetConfig+0x2b0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d126      	bne.n	8007678 <UART_SetConfig+0xd8>
 800762a:	4b8a      	ldr	r3, [pc, #552]	; (8007854 <UART_SetConfig+0x2b4>)
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	2b03      	cmp	r3, #3
 8007636:	d81b      	bhi.n	8007670 <UART_SetConfig+0xd0>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <UART_SetConfig+0xa0>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007651 	.word	0x08007651
 8007644:	08007661 	.word	0x08007661
 8007648:	08007659 	.word	0x08007659
 800764c:	08007669 	.word	0x08007669
 8007650:	2301      	movs	r3, #1
 8007652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007656:	e0ab      	b.n	80077b0 <UART_SetConfig+0x210>
 8007658:	2302      	movs	r3, #2
 800765a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765e:	e0a7      	b.n	80077b0 <UART_SetConfig+0x210>
 8007660:	2304      	movs	r3, #4
 8007662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007666:	e0a3      	b.n	80077b0 <UART_SetConfig+0x210>
 8007668:	2308      	movs	r3, #8
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800766e:	e09f      	b.n	80077b0 <UART_SetConfig+0x210>
 8007670:	2310      	movs	r3, #16
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007676:	e09b      	b.n	80077b0 <UART_SetConfig+0x210>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a76      	ldr	r2, [pc, #472]	; (8007858 <UART_SetConfig+0x2b8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d138      	bne.n	80076f4 <UART_SetConfig+0x154>
 8007682:	4b74      	ldr	r3, [pc, #464]	; (8007854 <UART_SetConfig+0x2b4>)
 8007684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007688:	f003 030c 	and.w	r3, r3, #12
 800768c:	2b0c      	cmp	r3, #12
 800768e:	d82d      	bhi.n	80076ec <UART_SetConfig+0x14c>
 8007690:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <UART_SetConfig+0xf8>)
 8007692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007696:	bf00      	nop
 8007698:	080076cd 	.word	0x080076cd
 800769c:	080076ed 	.word	0x080076ed
 80076a0:	080076ed 	.word	0x080076ed
 80076a4:	080076ed 	.word	0x080076ed
 80076a8:	080076dd 	.word	0x080076dd
 80076ac:	080076ed 	.word	0x080076ed
 80076b0:	080076ed 	.word	0x080076ed
 80076b4:	080076ed 	.word	0x080076ed
 80076b8:	080076d5 	.word	0x080076d5
 80076bc:	080076ed 	.word	0x080076ed
 80076c0:	080076ed 	.word	0x080076ed
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	080076e5 	.word	0x080076e5
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d2:	e06d      	b.n	80077b0 <UART_SetConfig+0x210>
 80076d4:	2302      	movs	r3, #2
 80076d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076da:	e069      	b.n	80077b0 <UART_SetConfig+0x210>
 80076dc:	2304      	movs	r3, #4
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e2:	e065      	b.n	80077b0 <UART_SetConfig+0x210>
 80076e4:	2308      	movs	r3, #8
 80076e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ea:	e061      	b.n	80077b0 <UART_SetConfig+0x210>
 80076ec:	2310      	movs	r3, #16
 80076ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076f2:	e05d      	b.n	80077b0 <UART_SetConfig+0x210>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a58      	ldr	r2, [pc, #352]	; (800785c <UART_SetConfig+0x2bc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d125      	bne.n	800774a <UART_SetConfig+0x1aa>
 80076fe:	4b55      	ldr	r3, [pc, #340]	; (8007854 <UART_SetConfig+0x2b4>)
 8007700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007704:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007708:	2b30      	cmp	r3, #48	; 0x30
 800770a:	d016      	beq.n	800773a <UART_SetConfig+0x19a>
 800770c:	2b30      	cmp	r3, #48	; 0x30
 800770e:	d818      	bhi.n	8007742 <UART_SetConfig+0x1a2>
 8007710:	2b20      	cmp	r3, #32
 8007712:	d00a      	beq.n	800772a <UART_SetConfig+0x18a>
 8007714:	2b20      	cmp	r3, #32
 8007716:	d814      	bhi.n	8007742 <UART_SetConfig+0x1a2>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <UART_SetConfig+0x182>
 800771c:	2b10      	cmp	r3, #16
 800771e:	d008      	beq.n	8007732 <UART_SetConfig+0x192>
 8007720:	e00f      	b.n	8007742 <UART_SetConfig+0x1a2>
 8007722:	2300      	movs	r3, #0
 8007724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007728:	e042      	b.n	80077b0 <UART_SetConfig+0x210>
 800772a:	2302      	movs	r3, #2
 800772c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007730:	e03e      	b.n	80077b0 <UART_SetConfig+0x210>
 8007732:	2304      	movs	r3, #4
 8007734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007738:	e03a      	b.n	80077b0 <UART_SetConfig+0x210>
 800773a:	2308      	movs	r3, #8
 800773c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007740:	e036      	b.n	80077b0 <UART_SetConfig+0x210>
 8007742:	2310      	movs	r3, #16
 8007744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007748:	e032      	b.n	80077b0 <UART_SetConfig+0x210>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a3f      	ldr	r2, [pc, #252]	; (800784c <UART_SetConfig+0x2ac>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d12a      	bne.n	80077aa <UART_SetConfig+0x20a>
 8007754:	4b3f      	ldr	r3, [pc, #252]	; (8007854 <UART_SetConfig+0x2b4>)
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800775e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007762:	d01a      	beq.n	800779a <UART_SetConfig+0x1fa>
 8007764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007768:	d81b      	bhi.n	80077a2 <UART_SetConfig+0x202>
 800776a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800776e:	d00c      	beq.n	800778a <UART_SetConfig+0x1ea>
 8007770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007774:	d815      	bhi.n	80077a2 <UART_SetConfig+0x202>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <UART_SetConfig+0x1e2>
 800777a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777e:	d008      	beq.n	8007792 <UART_SetConfig+0x1f2>
 8007780:	e00f      	b.n	80077a2 <UART_SetConfig+0x202>
 8007782:	2300      	movs	r3, #0
 8007784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007788:	e012      	b.n	80077b0 <UART_SetConfig+0x210>
 800778a:	2302      	movs	r3, #2
 800778c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007790:	e00e      	b.n	80077b0 <UART_SetConfig+0x210>
 8007792:	2304      	movs	r3, #4
 8007794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007798:	e00a      	b.n	80077b0 <UART_SetConfig+0x210>
 800779a:	2308      	movs	r3, #8
 800779c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a0:	e006      	b.n	80077b0 <UART_SetConfig+0x210>
 80077a2:	2310      	movs	r3, #16
 80077a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a8:	e002      	b.n	80077b0 <UART_SetConfig+0x210>
 80077aa:	2310      	movs	r3, #16
 80077ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a25      	ldr	r2, [pc, #148]	; (800784c <UART_SetConfig+0x2ac>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	f040 808a 	bne.w	80078d0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d824      	bhi.n	800780e <UART_SetConfig+0x26e>
 80077c4:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <UART_SetConfig+0x22c>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	080077f1 	.word	0x080077f1
 80077d0:	0800780f 	.word	0x0800780f
 80077d4:	080077f9 	.word	0x080077f9
 80077d8:	0800780f 	.word	0x0800780f
 80077dc:	080077ff 	.word	0x080077ff
 80077e0:	0800780f 	.word	0x0800780f
 80077e4:	0800780f 	.word	0x0800780f
 80077e8:	0800780f 	.word	0x0800780f
 80077ec:	08007807 	.word	0x08007807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f0:	f7fe fc92 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 80077f4:	61f8      	str	r0, [r7, #28]
        break;
 80077f6:	e010      	b.n	800781a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f8:	4b19      	ldr	r3, [pc, #100]	; (8007860 <UART_SetConfig+0x2c0>)
 80077fa:	61fb      	str	r3, [r7, #28]
        break;
 80077fc:	e00d      	b.n	800781a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077fe:	f7fe fbf3 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8007802:	61f8      	str	r0, [r7, #28]
        break;
 8007804:	e009      	b.n	800781a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800780a:	61fb      	str	r3, [r7, #28]
        break;
 800780c:	e005      	b.n	800781a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 8109 	beq.w	8007a34 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4413      	add	r3, r2
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	429a      	cmp	r2, r3
 8007830:	d305      	bcc.n	800783e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	429a      	cmp	r2, r3
 800783c:	d912      	bls.n	8007864 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007844:	e0f6      	b.n	8007a34 <UART_SetConfig+0x494>
 8007846:	bf00      	nop
 8007848:	efff69f3 	.word	0xefff69f3
 800784c:	40008000 	.word	0x40008000
 8007850:	40013800 	.word	0x40013800
 8007854:	40021000 	.word	0x40021000
 8007858:	40004400 	.word	0x40004400
 800785c:	40004800 	.word	0x40004800
 8007860:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2200      	movs	r2, #0
 8007868:	461c      	mov	r4, r3
 800786a:	4615      	mov	r5, r2
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	022b      	lsls	r3, r5, #8
 8007876:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800787a:	0222      	lsls	r2, r4, #8
 800787c:	68f9      	ldr	r1, [r7, #12]
 800787e:	6849      	ldr	r1, [r1, #4]
 8007880:	0849      	lsrs	r1, r1, #1
 8007882:	2000      	movs	r0, #0
 8007884:	4688      	mov	r8, r1
 8007886:	4681      	mov	r9, r0
 8007888:	eb12 0a08 	adds.w	sl, r2, r8
 800788c:	eb43 0b09 	adc.w	fp, r3, r9
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	603b      	str	r3, [r7, #0]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789e:	4650      	mov	r0, sl
 80078a0:	4659      	mov	r1, fp
 80078a2:	f7f9 fa31 	bl	8000d08 <__aeabi_uldivmod>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4613      	mov	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078b4:	d308      	bcc.n	80078c8 <UART_SetConfig+0x328>
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078bc:	d204      	bcs.n	80078c8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	60da      	str	r2, [r3, #12]
 80078c6:	e0b5      	b.n	8007a34 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078ce:	e0b1      	b.n	8007a34 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d8:	d15d      	bne.n	8007996 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80078da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d827      	bhi.n	8007932 <UART_SetConfig+0x392>
 80078e2:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <UART_SetConfig+0x348>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	0800790d 	.word	0x0800790d
 80078ec:	08007915 	.word	0x08007915
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	08007933 	.word	0x08007933
 80078f8:	08007923 	.word	0x08007923
 80078fc:	08007933 	.word	0x08007933
 8007900:	08007933 	.word	0x08007933
 8007904:	08007933 	.word	0x08007933
 8007908:	0800792b 	.word	0x0800792b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800790c:	f7fe fc04 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8007910:	61f8      	str	r0, [r7, #28]
        break;
 8007912:	e014      	b.n	800793e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007914:	f7fe fc16 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8007918:	61f8      	str	r0, [r7, #28]
        break;
 800791a:	e010      	b.n	800793e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800791c:	4b4c      	ldr	r3, [pc, #304]	; (8007a50 <UART_SetConfig+0x4b0>)
 800791e:	61fb      	str	r3, [r7, #28]
        break;
 8007920:	e00d      	b.n	800793e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007922:	f7fe fb61 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8007926:	61f8      	str	r0, [r7, #28]
        break;
 8007928:	e009      	b.n	800793e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792e:	61fb      	str	r3, [r7, #28]
        break;
 8007930:	e005      	b.n	800793e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800793c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d077      	beq.n	8007a34 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	005a      	lsls	r2, r3, #1
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	441a      	add	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	fbb2 f3f3 	udiv	r3, r2, r3
 8007958:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b0f      	cmp	r3, #15
 800795e:	d916      	bls.n	800798e <UART_SetConfig+0x3ee>
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007966:	d212      	bcs.n	800798e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	b29b      	uxth	r3, r3
 800796c:	f023 030f 	bic.w	r3, r3, #15
 8007970:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	085b      	lsrs	r3, r3, #1
 8007976:	b29b      	uxth	r3, r3
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	b29a      	uxth	r2, r3
 800797e:	8afb      	ldrh	r3, [r7, #22]
 8007980:	4313      	orrs	r3, r2
 8007982:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	8afa      	ldrh	r2, [r7, #22]
 800798a:	60da      	str	r2, [r3, #12]
 800798c:	e052      	b.n	8007a34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007994:	e04e      	b.n	8007a34 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800799a:	2b08      	cmp	r3, #8
 800799c:	d827      	bhi.n	80079ee <UART_SetConfig+0x44e>
 800799e:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <UART_SetConfig+0x404>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079c9 	.word	0x080079c9
 80079a8:	080079d1 	.word	0x080079d1
 80079ac:	080079d9 	.word	0x080079d9
 80079b0:	080079ef 	.word	0x080079ef
 80079b4:	080079df 	.word	0x080079df
 80079b8:	080079ef 	.word	0x080079ef
 80079bc:	080079ef 	.word	0x080079ef
 80079c0:	080079ef 	.word	0x080079ef
 80079c4:	080079e7 	.word	0x080079e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c8:	f7fe fba6 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 80079cc:	61f8      	str	r0, [r7, #28]
        break;
 80079ce:	e014      	b.n	80079fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079d0:	f7fe fbb8 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 80079d4:	61f8      	str	r0, [r7, #28]
        break;
 80079d6:	e010      	b.n	80079fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079d8:	4b1d      	ldr	r3, [pc, #116]	; (8007a50 <UART_SetConfig+0x4b0>)
 80079da:	61fb      	str	r3, [r7, #28]
        break;
 80079dc:	e00d      	b.n	80079fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079de:	f7fe fb03 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 80079e2:	61f8      	str	r0, [r7, #28]
        break;
 80079e4:	e009      	b.n	80079fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ea:	61fb      	str	r3, [r7, #28]
        break;
 80079ec:	e005      	b.n	80079fa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079f8:	bf00      	nop
    }

    if (pclk != 0U)
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d019      	beq.n	8007a34 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	085a      	lsrs	r2, r3, #1
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	441a      	add	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b0f      	cmp	r3, #15
 8007a18:	d909      	bls.n	8007a2e <UART_SetConfig+0x48e>
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a20:	d205      	bcs.n	8007a2e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60da      	str	r2, [r3, #12]
 8007a2c:	e002      	b.n	8007a34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3728      	adds	r7, #40	; 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a4e:	bf00      	nop
 8007a50:	00f42400 	.word	0x00f42400

08007a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	f003 0308 	and.w	r3, r3, #8
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	f003 0304 	and.w	r3, r3, #4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	f003 0310 	and.w	r3, r3, #16
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01a      	beq.n	8007b6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b52:	d10a      	bne.n	8007b6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b098      	sub	sp, #96	; 0x60
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ba8:	f7fb fe86 	bl	80038b8 <HAL_GetTick>
 8007bac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d12e      	bne.n	8007c1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f88c 	bl	8007ce8 <UART_WaitOnFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d021      	beq.n	8007c1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bea:	653b      	str	r3, [r7, #80]	; 0x50
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e6      	bne.n	8007bd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e062      	b.n	8007ce0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d149      	bne.n	8007cbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c30:	2200      	movs	r2, #0
 8007c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f856 	bl	8007ce8 <UART_WaitOnFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d03c      	beq.n	8007cbc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c60:	633b      	str	r3, [r7, #48]	; 0x30
 8007c62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e6      	bne.n	8007c42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c94:	61fa      	str	r2, [r7, #28]
 8007c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	69b9      	ldr	r1, [r7, #24]
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e5      	bne.n	8007c74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e011      	b.n	8007ce0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3758      	adds	r7, #88	; 0x58
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf8:	e049      	b.n	8007d8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d00:	d045      	beq.n	8007d8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d02:	f7fb fdd9 	bl	80038b8 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d302      	bcc.n	8007d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e048      	b.n	8007dae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d031      	beq.n	8007d8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69db      	ldr	r3, [r3, #28]
 8007d30:	f003 0308 	and.w	r3, r3, #8
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d110      	bne.n	8007d5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f838 	bl	8007db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2208      	movs	r2, #8
 8007d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e029      	b.n	8007dae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d68:	d111      	bne.n	8007d8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f81e 	bl	8007db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e00f      	b.n	8007dae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69da      	ldr	r2, [r3, #28]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	4013      	ands	r3, r2
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	bf0c      	ite	eq
 8007d9e:	2301      	moveq	r3, #1
 8007da0:	2300      	movne	r3, #0
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	461a      	mov	r2, r3
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d0a6      	beq.n	8007cfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b095      	sub	sp, #84	; 0x54
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8007dde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e6      	bne.n	8007dbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e5      	bne.n	8007df0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d118      	bne.n	8007e5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f023 0310 	bic.w	r3, r3, #16
 8007e40:	647b      	str	r3, [r7, #68]	; 0x44
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6979      	ldr	r1, [r7, #20]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e6      	bne.n	8007e2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e72:	bf00      	nop
 8007e74:	3754      	adds	r7, #84	; 0x54
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <std>:
 8007e80:	2300      	movs	r3, #0
 8007e82:	b510      	push	{r4, lr}
 8007e84:	4604      	mov	r4, r0
 8007e86:	e9c0 3300 	strd	r3, r3, [r0]
 8007e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e8e:	6083      	str	r3, [r0, #8]
 8007e90:	8181      	strh	r1, [r0, #12]
 8007e92:	6643      	str	r3, [r0, #100]	; 0x64
 8007e94:	81c2      	strh	r2, [r0, #14]
 8007e96:	6183      	str	r3, [r0, #24]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	305c      	adds	r0, #92	; 0x5c
 8007e9e:	f000 f92a 	bl	80080f6 <memset>
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <std+0x58>)
 8007ea4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	; (8007edc <std+0x5c>)
 8007ea8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <std+0x60>)
 8007eac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eae:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <std+0x64>)
 8007eb0:	6323      	str	r3, [r4, #48]	; 0x30
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <std+0x68>)
 8007eb4:	6224      	str	r4, [r4, #32]
 8007eb6:	429c      	cmp	r4, r3
 8007eb8:	d006      	beq.n	8007ec8 <std+0x48>
 8007eba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ebe:	4294      	cmp	r4, r2
 8007ec0:	d002      	beq.n	8007ec8 <std+0x48>
 8007ec2:	33d0      	adds	r3, #208	; 0xd0
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	d105      	bne.n	8007ed4 <std+0x54>
 8007ec8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed0:	f001 bd5a 	b.w	8009988 <__retarget_lock_init_recursive>
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	bf00      	nop
 8007ed8:	0800806d 	.word	0x0800806d
 8007edc:	08008093 	.word	0x08008093
 8007ee0:	080080cb 	.word	0x080080cb
 8007ee4:	080080ef 	.word	0x080080ef
 8007ee8:	20000278 	.word	0x20000278

08007eec <stdio_exit_handler>:
 8007eec:	4a02      	ldr	r2, [pc, #8]	; (8007ef8 <stdio_exit_handler+0xc>)
 8007eee:	4903      	ldr	r1, [pc, #12]	; (8007efc <stdio_exit_handler+0x10>)
 8007ef0:	4803      	ldr	r0, [pc, #12]	; (8007f00 <stdio_exit_handler+0x14>)
 8007ef2:	f000 b869 	b.w	8007fc8 <_fwalk_sglue>
 8007ef6:	bf00      	nop
 8007ef8:	20000010 	.word	0x20000010
 8007efc:	0800a4a5 	.word	0x0800a4a5
 8007f00:	20000024 	.word	0x20000024

08007f04 <cleanup_stdio>:
 8007f04:	6841      	ldr	r1, [r0, #4]
 8007f06:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <cleanup_stdio+0x34>)
 8007f08:	4299      	cmp	r1, r3
 8007f0a:	b510      	push	{r4, lr}
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	d001      	beq.n	8007f14 <cleanup_stdio+0x10>
 8007f10:	f002 fac8 	bl	800a4a4 <_fflush_r>
 8007f14:	68a1      	ldr	r1, [r4, #8]
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <cleanup_stdio+0x38>)
 8007f18:	4299      	cmp	r1, r3
 8007f1a:	d002      	beq.n	8007f22 <cleanup_stdio+0x1e>
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f002 fac1 	bl	800a4a4 <_fflush_r>
 8007f22:	68e1      	ldr	r1, [r4, #12]
 8007f24:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <cleanup_stdio+0x3c>)
 8007f26:	4299      	cmp	r1, r3
 8007f28:	d004      	beq.n	8007f34 <cleanup_stdio+0x30>
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f30:	f002 bab8 	b.w	800a4a4 <_fflush_r>
 8007f34:	bd10      	pop	{r4, pc}
 8007f36:	bf00      	nop
 8007f38:	20000278 	.word	0x20000278
 8007f3c:	200002e0 	.word	0x200002e0
 8007f40:	20000348 	.word	0x20000348

08007f44 <global_stdio_init.part.0>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <global_stdio_init.part.0+0x30>)
 8007f48:	4c0b      	ldr	r4, [pc, #44]	; (8007f78 <global_stdio_init.part.0+0x34>)
 8007f4a:	4a0c      	ldr	r2, [pc, #48]	; (8007f7c <global_stdio_init.part.0+0x38>)
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	2200      	movs	r2, #0
 8007f52:	2104      	movs	r1, #4
 8007f54:	f7ff ff94 	bl	8007e80 <std>
 8007f58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	2109      	movs	r1, #9
 8007f60:	f7ff ff8e 	bl	8007e80 <std>
 8007f64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f68:	2202      	movs	r2, #2
 8007f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f6e:	2112      	movs	r1, #18
 8007f70:	f7ff bf86 	b.w	8007e80 <std>
 8007f74:	200003b0 	.word	0x200003b0
 8007f78:	20000278 	.word	0x20000278
 8007f7c:	08007eed 	.word	0x08007eed

08007f80 <__sfp_lock_acquire>:
 8007f80:	4801      	ldr	r0, [pc, #4]	; (8007f88 <__sfp_lock_acquire+0x8>)
 8007f82:	f001 bd03 	b.w	800998c <__retarget_lock_acquire_recursive>
 8007f86:	bf00      	nop
 8007f88:	200003de 	.word	0x200003de

08007f8c <__sfp_lock_release>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__sfp_lock_release+0x8>)
 8007f8e:	f001 bcff 	b.w	8009990 <__retarget_lock_release_recursive>
 8007f92:	bf00      	nop
 8007f94:	200003de 	.word	0x200003de

08007f98 <__sinit>:
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	f7ff fff0 	bl	8007f80 <__sfp_lock_acquire>
 8007fa0:	6a23      	ldr	r3, [r4, #32]
 8007fa2:	b11b      	cbz	r3, 8007fac <__sinit+0x14>
 8007fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa8:	f7ff bff0 	b.w	8007f8c <__sfp_lock_release>
 8007fac:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <__sinit+0x28>)
 8007fae:	6223      	str	r3, [r4, #32]
 8007fb0:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <__sinit+0x2c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1f5      	bne.n	8007fa4 <__sinit+0xc>
 8007fb8:	f7ff ffc4 	bl	8007f44 <global_stdio_init.part.0>
 8007fbc:	e7f2      	b.n	8007fa4 <__sinit+0xc>
 8007fbe:	bf00      	nop
 8007fc0:	08007f05 	.word	0x08007f05
 8007fc4:	200003b0 	.word	0x200003b0

08007fc8 <_fwalk_sglue>:
 8007fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	4607      	mov	r7, r0
 8007fce:	4688      	mov	r8, r1
 8007fd0:	4614      	mov	r4, r2
 8007fd2:	2600      	movs	r6, #0
 8007fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8007fdc:	d505      	bpl.n	8007fea <_fwalk_sglue+0x22>
 8007fde:	6824      	ldr	r4, [r4, #0]
 8007fe0:	2c00      	cmp	r4, #0
 8007fe2:	d1f7      	bne.n	8007fd4 <_fwalk_sglue+0xc>
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d907      	bls.n	8008000 <_fwalk_sglue+0x38>
 8007ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	d003      	beq.n	8008000 <_fwalk_sglue+0x38>
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	47c0      	blx	r8
 8007ffe:	4306      	orrs	r6, r0
 8008000:	3568      	adds	r5, #104	; 0x68
 8008002:	e7e9      	b.n	8007fd8 <_fwalk_sglue+0x10>

08008004 <sniprintf>:
 8008004:	b40c      	push	{r2, r3}
 8008006:	b530      	push	{r4, r5, lr}
 8008008:	4b17      	ldr	r3, [pc, #92]	; (8008068 <sniprintf+0x64>)
 800800a:	1e0c      	subs	r4, r1, #0
 800800c:	681d      	ldr	r5, [r3, #0]
 800800e:	b09d      	sub	sp, #116	; 0x74
 8008010:	da08      	bge.n	8008024 <sniprintf+0x20>
 8008012:	238b      	movs	r3, #139	; 0x8b
 8008014:	602b      	str	r3, [r5, #0]
 8008016:	f04f 30ff 	mov.w	r0, #4294967295
 800801a:	b01d      	add	sp, #116	; 0x74
 800801c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008020:	b002      	add	sp, #8
 8008022:	4770      	bx	lr
 8008024:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008028:	f8ad 3014 	strh.w	r3, [sp, #20]
 800802c:	bf14      	ite	ne
 800802e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008032:	4623      	moveq	r3, r4
 8008034:	9304      	str	r3, [sp, #16]
 8008036:	9307      	str	r3, [sp, #28]
 8008038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800803c:	9002      	str	r0, [sp, #8]
 800803e:	9006      	str	r0, [sp, #24]
 8008040:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008044:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008046:	ab21      	add	r3, sp, #132	; 0x84
 8008048:	a902      	add	r1, sp, #8
 800804a:	4628      	mov	r0, r5
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	f001 ff15 	bl	8009e7c <_svfiprintf_r>
 8008052:	1c43      	adds	r3, r0, #1
 8008054:	bfbc      	itt	lt
 8008056:	238b      	movlt	r3, #139	; 0x8b
 8008058:	602b      	strlt	r3, [r5, #0]
 800805a:	2c00      	cmp	r4, #0
 800805c:	d0dd      	beq.n	800801a <sniprintf+0x16>
 800805e:	9b02      	ldr	r3, [sp, #8]
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	e7d9      	b.n	800801a <sniprintf+0x16>
 8008066:	bf00      	nop
 8008068:	20000070 	.word	0x20000070

0800806c <__sread>:
 800806c:	b510      	push	{r4, lr}
 800806e:	460c      	mov	r4, r1
 8008070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008074:	f001 fc3a 	bl	80098ec <_read_r>
 8008078:	2800      	cmp	r0, #0
 800807a:	bfab      	itete	ge
 800807c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800807e:	89a3      	ldrhlt	r3, [r4, #12]
 8008080:	181b      	addge	r3, r3, r0
 8008082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008086:	bfac      	ite	ge
 8008088:	6563      	strge	r3, [r4, #84]	; 0x54
 800808a:	81a3      	strhlt	r3, [r4, #12]
 800808c:	bd10      	pop	{r4, pc}

0800808e <__seofread>:
 800808e:	2000      	movs	r0, #0
 8008090:	4770      	bx	lr

08008092 <__swrite>:
 8008092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008096:	461f      	mov	r7, r3
 8008098:	898b      	ldrh	r3, [r1, #12]
 800809a:	05db      	lsls	r3, r3, #23
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	4616      	mov	r6, r2
 80080a2:	d505      	bpl.n	80080b0 <__swrite+0x1e>
 80080a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a8:	2302      	movs	r3, #2
 80080aa:	2200      	movs	r2, #0
 80080ac:	f001 fc0c 	bl	80098c8 <_lseek_r>
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	4632      	mov	r2, r6
 80080be:	463b      	mov	r3, r7
 80080c0:	4628      	mov	r0, r5
 80080c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080c6:	f001 bc23 	b.w	8009910 <_write_r>

080080ca <__sseek>:
 80080ca:	b510      	push	{r4, lr}
 80080cc:	460c      	mov	r4, r1
 80080ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d2:	f001 fbf9 	bl	80098c8 <_lseek_r>
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	bf15      	itete	ne
 80080dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80080de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080e6:	81a3      	strheq	r3, [r4, #12]
 80080e8:	bf18      	it	ne
 80080ea:	81a3      	strhne	r3, [r4, #12]
 80080ec:	bd10      	pop	{r4, pc}

080080ee <__sclose>:
 80080ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f2:	f001 bbc7 	b.w	8009884 <_close_r>

080080f6 <memset>:
 80080f6:	4402      	add	r2, r0
 80080f8:	4603      	mov	r3, r0
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d100      	bne.n	8008100 <memset+0xa>
 80080fe:	4770      	bx	lr
 8008100:	f803 1b01 	strb.w	r1, [r3], #1
 8008104:	e7f9      	b.n	80080fa <memset+0x4>

08008106 <strncat>:
 8008106:	b530      	push	{r4, r5, lr}
 8008108:	4604      	mov	r4, r0
 800810a:	7825      	ldrb	r5, [r4, #0]
 800810c:	4623      	mov	r3, r4
 800810e:	3401      	adds	r4, #1
 8008110:	2d00      	cmp	r5, #0
 8008112:	d1fa      	bne.n	800810a <strncat+0x4>
 8008114:	3a01      	subs	r2, #1
 8008116:	d304      	bcc.n	8008122 <strncat+0x1c>
 8008118:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811c:	f803 4b01 	strb.w	r4, [r3], #1
 8008120:	b904      	cbnz	r4, 8008124 <strncat+0x1e>
 8008122:	bd30      	pop	{r4, r5, pc}
 8008124:	2a00      	cmp	r2, #0
 8008126:	d1f5      	bne.n	8008114 <strncat+0xe>
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	e7f3      	b.n	8008114 <strncat+0xe>

0800812c <localtime>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <localtime+0x30>)
 8008130:	681d      	ldr	r5, [r3, #0]
 8008132:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008134:	4604      	mov	r4, r0
 8008136:	b953      	cbnz	r3, 800814e <localtime+0x22>
 8008138:	2024      	movs	r0, #36	; 0x24
 800813a:	f001 fd0b 	bl	8009b54 <malloc>
 800813e:	4602      	mov	r2, r0
 8008140:	6368      	str	r0, [r5, #52]	; 0x34
 8008142:	b920      	cbnz	r0, 800814e <localtime+0x22>
 8008144:	4b06      	ldr	r3, [pc, #24]	; (8008160 <localtime+0x34>)
 8008146:	4807      	ldr	r0, [pc, #28]	; (8008164 <localtime+0x38>)
 8008148:	2132      	movs	r1, #50	; 0x32
 800814a:	f001 fc3d 	bl	80099c8 <__assert_func>
 800814e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8008150:	4620      	mov	r0, r4
 8008152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008156:	f000 b807 	b.w	8008168 <localtime_r>
 800815a:	bf00      	nop
 800815c:	20000070 	.word	0x20000070
 8008160:	0800bf20 	.word	0x0800bf20
 8008164:	0800bf37 	.word	0x0800bf37

08008168 <localtime_r>:
 8008168:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800816c:	4680      	mov	r8, r0
 800816e:	9101      	str	r1, [sp, #4]
 8008170:	f002 fa2a 	bl	800a5c8 <__gettzinfo>
 8008174:	9901      	ldr	r1, [sp, #4]
 8008176:	4605      	mov	r5, r0
 8008178:	4640      	mov	r0, r8
 800817a:	f002 fa29 	bl	800a5d0 <gmtime_r>
 800817e:	6943      	ldr	r3, [r0, #20]
 8008180:	0799      	lsls	r1, r3, #30
 8008182:	4604      	mov	r4, r0
 8008184:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8008188:	d105      	bne.n	8008196 <localtime_r+0x2e>
 800818a:	2264      	movs	r2, #100	; 0x64
 800818c:	fb97 f3f2 	sdiv	r3, r7, r2
 8008190:	fb02 7313 	mls	r3, r2, r3, r7
 8008194:	bb7b      	cbnz	r3, 80081f6 <localtime_r+0x8e>
 8008196:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800819a:	fb97 f3f2 	sdiv	r3, r7, r2
 800819e:	fb02 7313 	mls	r3, r2, r3, r7
 80081a2:	fab3 f383 	clz	r3, r3
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	4e68      	ldr	r6, [pc, #416]	; (800834c <localtime_r+0x1e4>)
 80081aa:	2230      	movs	r2, #48	; 0x30
 80081ac:	fb02 6603 	mla	r6, r2, r3, r6
 80081b0:	f001 f936 	bl	8009420 <__tz_lock>
 80081b4:	f001 f940 	bl	8009438 <_tzset_unlocked>
 80081b8:	4b65      	ldr	r3, [pc, #404]	; (8008350 <localtime_r+0x1e8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	b353      	cbz	r3, 8008214 <localtime_r+0xac>
 80081be:	686b      	ldr	r3, [r5, #4]
 80081c0:	42bb      	cmp	r3, r7
 80081c2:	d11a      	bne.n	80081fa <localtime_r+0x92>
 80081c4:	682f      	ldr	r7, [r5, #0]
 80081c6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80081ca:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80081ce:	b9e7      	cbnz	r7, 800820a <localtime_r+0xa2>
 80081d0:	4282      	cmp	r2, r0
 80081d2:	eb73 0101 	sbcs.w	r1, r3, r1
 80081d6:	da25      	bge.n	8008224 <localtime_r+0xbc>
 80081d8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80081dc:	4282      	cmp	r2, r0
 80081de:	eb73 0701 	sbcs.w	r7, r3, r1
 80081e2:	bfb4      	ite	lt
 80081e4:	2701      	movlt	r7, #1
 80081e6:	2700      	movge	r7, #0
 80081e8:	4282      	cmp	r2, r0
 80081ea:	eb73 0101 	sbcs.w	r1, r3, r1
 80081ee:	6227      	str	r7, [r4, #32]
 80081f0:	db1a      	blt.n	8008228 <localtime_r+0xc0>
 80081f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80081f4:	e019      	b.n	800822a <localtime_r+0xc2>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e7d6      	b.n	80081a8 <localtime_r+0x40>
 80081fa:	4638      	mov	r0, r7
 80081fc:	f001 f86a 	bl	80092d4 <__tzcalc_limits>
 8008200:	2800      	cmp	r0, #0
 8008202:	d1df      	bne.n	80081c4 <localtime_r+0x5c>
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
 8008208:	e004      	b.n	8008214 <localtime_r+0xac>
 800820a:	4282      	cmp	r2, r0
 800820c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008210:	da02      	bge.n	8008218 <localtime_r+0xb0>
 8008212:	2300      	movs	r3, #0
 8008214:	6223      	str	r3, [r4, #32]
 8008216:	e7ec      	b.n	80081f2 <localtime_r+0x8a>
 8008218:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800821c:	4282      	cmp	r2, r0
 800821e:	eb73 0101 	sbcs.w	r1, r3, r1
 8008222:	daf6      	bge.n	8008212 <localtime_r+0xaa>
 8008224:	2301      	movs	r3, #1
 8008226:	6223      	str	r3, [r4, #32]
 8008228:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800822a:	6861      	ldr	r1, [r4, #4]
 800822c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8008230:	fb93 f0f2 	sdiv	r0, r3, r2
 8008234:	fb02 3310 	mls	r3, r2, r0, r3
 8008238:	223c      	movs	r2, #60	; 0x3c
 800823a:	fb93 f5f2 	sdiv	r5, r3, r2
 800823e:	fb02 3215 	mls	r2, r2, r5, r3
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	68a2      	ldr	r2, [r4, #8]
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	1b49      	subs	r1, r1, r5
 800824c:	1a12      	subs	r2, r2, r0
 800824e:	2b3b      	cmp	r3, #59	; 0x3b
 8008250:	6061      	str	r1, [r4, #4]
 8008252:	60a2      	str	r2, [r4, #8]
 8008254:	dd35      	ble.n	80082c2 <localtime_r+0x15a>
 8008256:	3101      	adds	r1, #1
 8008258:	6061      	str	r1, [r4, #4]
 800825a:	3b3c      	subs	r3, #60	; 0x3c
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	6863      	ldr	r3, [r4, #4]
 8008260:	2b3b      	cmp	r3, #59	; 0x3b
 8008262:	dd34      	ble.n	80082ce <localtime_r+0x166>
 8008264:	3201      	adds	r2, #1
 8008266:	60a2      	str	r2, [r4, #8]
 8008268:	3b3c      	subs	r3, #60	; 0x3c
 800826a:	6063      	str	r3, [r4, #4]
 800826c:	68a3      	ldr	r3, [r4, #8]
 800826e:	2b17      	cmp	r3, #23
 8008270:	dd33      	ble.n	80082da <localtime_r+0x172>
 8008272:	69e2      	ldr	r2, [r4, #28]
 8008274:	3201      	adds	r2, #1
 8008276:	61e2      	str	r2, [r4, #28]
 8008278:	69a2      	ldr	r2, [r4, #24]
 800827a:	3201      	adds	r2, #1
 800827c:	2a07      	cmp	r2, #7
 800827e:	bfa8      	it	ge
 8008280:	2200      	movge	r2, #0
 8008282:	61a2      	str	r2, [r4, #24]
 8008284:	68e2      	ldr	r2, [r4, #12]
 8008286:	3b18      	subs	r3, #24
 8008288:	3201      	adds	r2, #1
 800828a:	60a3      	str	r3, [r4, #8]
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	60e2      	str	r2, [r4, #12]
 8008290:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008294:	428a      	cmp	r2, r1
 8008296:	dd0e      	ble.n	80082b6 <localtime_r+0x14e>
 8008298:	2b0b      	cmp	r3, #11
 800829a:	eba2 0201 	sub.w	r2, r2, r1
 800829e:	60e2      	str	r2, [r4, #12]
 80082a0:	f103 0201 	add.w	r2, r3, #1
 80082a4:	bf09      	itett	eq
 80082a6:	6963      	ldreq	r3, [r4, #20]
 80082a8:	6122      	strne	r2, [r4, #16]
 80082aa:	2200      	moveq	r2, #0
 80082ac:	3301      	addeq	r3, #1
 80082ae:	bf02      	ittt	eq
 80082b0:	6122      	streq	r2, [r4, #16]
 80082b2:	6163      	streq	r3, [r4, #20]
 80082b4:	61e2      	streq	r2, [r4, #28]
 80082b6:	f001 f8b9 	bl	800942c <__tz_unlock>
 80082ba:	4620      	mov	r0, r4
 80082bc:	b002      	add	sp, #8
 80082be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dacb      	bge.n	800825e <localtime_r+0xf6>
 80082c6:	3901      	subs	r1, #1
 80082c8:	6061      	str	r1, [r4, #4]
 80082ca:	333c      	adds	r3, #60	; 0x3c
 80082cc:	e7c6      	b.n	800825c <localtime_r+0xf4>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dacc      	bge.n	800826c <localtime_r+0x104>
 80082d2:	3a01      	subs	r2, #1
 80082d4:	60a2      	str	r2, [r4, #8]
 80082d6:	333c      	adds	r3, #60	; 0x3c
 80082d8:	e7c7      	b.n	800826a <localtime_r+0x102>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	daeb      	bge.n	80082b6 <localtime_r+0x14e>
 80082de:	69e2      	ldr	r2, [r4, #28]
 80082e0:	3a01      	subs	r2, #1
 80082e2:	61e2      	str	r2, [r4, #28]
 80082e4:	69a2      	ldr	r2, [r4, #24]
 80082e6:	3a01      	subs	r2, #1
 80082e8:	bf48      	it	mi
 80082ea:	2206      	movmi	r2, #6
 80082ec:	61a2      	str	r2, [r4, #24]
 80082ee:	68e2      	ldr	r2, [r4, #12]
 80082f0:	3318      	adds	r3, #24
 80082f2:	3a01      	subs	r2, #1
 80082f4:	60e2      	str	r2, [r4, #12]
 80082f6:	60a3      	str	r3, [r4, #8]
 80082f8:	2a00      	cmp	r2, #0
 80082fa:	d1dc      	bne.n	80082b6 <localtime_r+0x14e>
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	3b01      	subs	r3, #1
 8008300:	d405      	bmi.n	800830e <localtime_r+0x1a6>
 8008302:	6123      	str	r3, [r4, #16]
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800830a:	60e3      	str	r3, [r4, #12]
 800830c:	e7d3      	b.n	80082b6 <localtime_r+0x14e>
 800830e:	230b      	movs	r3, #11
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	6963      	ldr	r3, [r4, #20]
 8008314:	1e5a      	subs	r2, r3, #1
 8008316:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800831a:	6162      	str	r2, [r4, #20]
 800831c:	079a      	lsls	r2, r3, #30
 800831e:	d105      	bne.n	800832c <localtime_r+0x1c4>
 8008320:	2164      	movs	r1, #100	; 0x64
 8008322:	fb93 f2f1 	sdiv	r2, r3, r1
 8008326:	fb01 3212 	mls	r2, r1, r2, r3
 800832a:	b962      	cbnz	r2, 8008346 <localtime_r+0x1de>
 800832c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008330:	fb93 f1f2 	sdiv	r1, r3, r2
 8008334:	fb02 3311 	mls	r3, r2, r1, r3
 8008338:	fab3 f383 	clz	r3, r3
 800833c:	095b      	lsrs	r3, r3, #5
 800833e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008342:	61e3      	str	r3, [r4, #28]
 8008344:	e7de      	b.n	8008304 <localtime_r+0x19c>
 8008346:	2301      	movs	r3, #1
 8008348:	e7f9      	b.n	800833e <localtime_r+0x1d6>
 800834a:	bf00      	nop
 800834c:	0800bff0 	.word	0x0800bff0
 8008350:	200003d0 	.word	0x200003d0

08008354 <validate_structure>:
 8008354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008356:	6801      	ldr	r1, [r0, #0]
 8008358:	293b      	cmp	r1, #59	; 0x3b
 800835a:	4604      	mov	r4, r0
 800835c:	d911      	bls.n	8008382 <validate_structure+0x2e>
 800835e:	223c      	movs	r2, #60	; 0x3c
 8008360:	4668      	mov	r0, sp
 8008362:	f001 fb4f 	bl	8009a04 <div>
 8008366:	9a01      	ldr	r2, [sp, #4]
 8008368:	6863      	ldr	r3, [r4, #4]
 800836a:	9900      	ldr	r1, [sp, #0]
 800836c:	2a00      	cmp	r2, #0
 800836e:	440b      	add	r3, r1
 8008370:	6063      	str	r3, [r4, #4]
 8008372:	bfbb      	ittet	lt
 8008374:	323c      	addlt	r2, #60	; 0x3c
 8008376:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800837a:	6022      	strge	r2, [r4, #0]
 800837c:	6022      	strlt	r2, [r4, #0]
 800837e:	bfb8      	it	lt
 8008380:	6063      	strlt	r3, [r4, #4]
 8008382:	6861      	ldr	r1, [r4, #4]
 8008384:	293b      	cmp	r1, #59	; 0x3b
 8008386:	d911      	bls.n	80083ac <validate_structure+0x58>
 8008388:	223c      	movs	r2, #60	; 0x3c
 800838a:	4668      	mov	r0, sp
 800838c:	f001 fb3a 	bl	8009a04 <div>
 8008390:	9a01      	ldr	r2, [sp, #4]
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	9900      	ldr	r1, [sp, #0]
 8008396:	2a00      	cmp	r2, #0
 8008398:	440b      	add	r3, r1
 800839a:	60a3      	str	r3, [r4, #8]
 800839c:	bfbb      	ittet	lt
 800839e:	323c      	addlt	r2, #60	; 0x3c
 80083a0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80083a4:	6062      	strge	r2, [r4, #4]
 80083a6:	6062      	strlt	r2, [r4, #4]
 80083a8:	bfb8      	it	lt
 80083aa:	60a3      	strlt	r3, [r4, #8]
 80083ac:	68a1      	ldr	r1, [r4, #8]
 80083ae:	2917      	cmp	r1, #23
 80083b0:	d911      	bls.n	80083d6 <validate_structure+0x82>
 80083b2:	2218      	movs	r2, #24
 80083b4:	4668      	mov	r0, sp
 80083b6:	f001 fb25 	bl	8009a04 <div>
 80083ba:	9a01      	ldr	r2, [sp, #4]
 80083bc:	68e3      	ldr	r3, [r4, #12]
 80083be:	9900      	ldr	r1, [sp, #0]
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	440b      	add	r3, r1
 80083c4:	60e3      	str	r3, [r4, #12]
 80083c6:	bfbb      	ittet	lt
 80083c8:	3218      	addlt	r2, #24
 80083ca:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80083ce:	60a2      	strge	r2, [r4, #8]
 80083d0:	60a2      	strlt	r2, [r4, #8]
 80083d2:	bfb8      	it	lt
 80083d4:	60e3      	strlt	r3, [r4, #12]
 80083d6:	6921      	ldr	r1, [r4, #16]
 80083d8:	290b      	cmp	r1, #11
 80083da:	d911      	bls.n	8008400 <validate_structure+0xac>
 80083dc:	220c      	movs	r2, #12
 80083de:	4668      	mov	r0, sp
 80083e0:	f001 fb10 	bl	8009a04 <div>
 80083e4:	9a01      	ldr	r2, [sp, #4]
 80083e6:	6963      	ldr	r3, [r4, #20]
 80083e8:	9900      	ldr	r1, [sp, #0]
 80083ea:	2a00      	cmp	r2, #0
 80083ec:	440b      	add	r3, r1
 80083ee:	6163      	str	r3, [r4, #20]
 80083f0:	bfbb      	ittet	lt
 80083f2:	320c      	addlt	r2, #12
 80083f4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80083f8:	6122      	strge	r2, [r4, #16]
 80083fa:	6122      	strlt	r2, [r4, #16]
 80083fc:	bfb8      	it	lt
 80083fe:	6163      	strlt	r3, [r4, #20]
 8008400:	6963      	ldr	r3, [r4, #20]
 8008402:	079a      	lsls	r2, r3, #30
 8008404:	d11e      	bne.n	8008444 <validate_structure+0xf0>
 8008406:	2164      	movs	r1, #100	; 0x64
 8008408:	fb93 f2f1 	sdiv	r2, r3, r1
 800840c:	fb01 3212 	mls	r2, r1, r2, r3
 8008410:	b9d2      	cbnz	r2, 8008448 <validate_structure+0xf4>
 8008412:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8008416:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800841a:	fb93 f1f2 	sdiv	r1, r3, r2
 800841e:	fb02 3311 	mls	r3, r2, r1, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	bf14      	ite	ne
 8008426:	231c      	movne	r3, #28
 8008428:	231d      	moveq	r3, #29
 800842a:	68e2      	ldr	r2, [r4, #12]
 800842c:	2a00      	cmp	r2, #0
 800842e:	dc0d      	bgt.n	800844c <validate_structure+0xf8>
 8008430:	4e32      	ldr	r6, [pc, #200]	; (80084fc <validate_structure+0x1a8>)
 8008432:	250b      	movs	r5, #11
 8008434:	2164      	movs	r1, #100	; 0x64
 8008436:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800843a:	68e7      	ldr	r7, [r4, #12]
 800843c:	2f00      	cmp	r7, #0
 800843e:	dd31      	ble.n	80084a4 <validate_structure+0x150>
 8008440:	b003      	add	sp, #12
 8008442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008444:	231c      	movs	r3, #28
 8008446:	e7f0      	b.n	800842a <validate_structure+0xd6>
 8008448:	231d      	movs	r3, #29
 800844a:	e7ee      	b.n	800842a <validate_structure+0xd6>
 800844c:	4e2b      	ldr	r6, [pc, #172]	; (80084fc <validate_structure+0x1a8>)
 800844e:	2700      	movs	r7, #0
 8008450:	2064      	movs	r0, #100	; 0x64
 8008452:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008456:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800845a:	2a01      	cmp	r2, #1
 800845c:	bf14      	ite	ne
 800845e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8008462:	469c      	moveq	ip, r3
 8008464:	4561      	cmp	r1, ip
 8008466:	ddeb      	ble.n	8008440 <validate_structure+0xec>
 8008468:	3201      	adds	r2, #1
 800846a:	eba1 010c 	sub.w	r1, r1, ip
 800846e:	2a0c      	cmp	r2, #12
 8008470:	60e1      	str	r1, [r4, #12]
 8008472:	6122      	str	r2, [r4, #16]
 8008474:	d1ef      	bne.n	8008456 <validate_structure+0x102>
 8008476:	6963      	ldr	r3, [r4, #20]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	0791      	lsls	r1, r2, #30
 800847c:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8008480:	d138      	bne.n	80084f4 <validate_structure+0x1a0>
 8008482:	fb92 f1f0 	sdiv	r1, r2, r0
 8008486:	fb00 2211 	mls	r2, r0, r1, r2
 800848a:	2a00      	cmp	r2, #0
 800848c:	d134      	bne.n	80084f8 <validate_structure+0x1a4>
 800848e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8008492:	fb93 f2f5 	sdiv	r2, r3, r5
 8008496:	fb05 3312 	mls	r3, r5, r2, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	bf14      	ite	ne
 800849e:	231c      	movne	r3, #28
 80084a0:	231d      	moveq	r3, #29
 80084a2:	e7d8      	b.n	8008456 <validate_structure+0x102>
 80084a4:	6922      	ldr	r2, [r4, #16]
 80084a6:	3a01      	subs	r2, #1
 80084a8:	6122      	str	r2, [r4, #16]
 80084aa:	3201      	adds	r2, #1
 80084ac:	d115      	bne.n	80084da <validate_structure+0x186>
 80084ae:	6963      	ldr	r3, [r4, #20]
 80084b0:	1e5a      	subs	r2, r3, #1
 80084b2:	f012 0f03 	tst.w	r2, #3
 80084b6:	e9c4 5204 	strd	r5, r2, [r4, #16]
 80084ba:	d117      	bne.n	80084ec <validate_structure+0x198>
 80084bc:	fb92 fcf1 	sdiv	ip, r2, r1
 80084c0:	fb01 221c 	mls	r2, r1, ip, r2
 80084c4:	b9a2      	cbnz	r2, 80084f0 <validate_structure+0x19c>
 80084c6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80084ca:	fb93 f2f0 	sdiv	r2, r3, r0
 80084ce:	fb00 3312 	mls	r3, r0, r2, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	bf14      	ite	ne
 80084d6:	231c      	movne	r3, #28
 80084d8:	231d      	moveq	r3, #29
 80084da:	6922      	ldr	r2, [r4, #16]
 80084dc:	2a01      	cmp	r2, #1
 80084de:	bf14      	ite	ne
 80084e0:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 80084e4:	461a      	moveq	r2, r3
 80084e6:	443a      	add	r2, r7
 80084e8:	60e2      	str	r2, [r4, #12]
 80084ea:	e7a6      	b.n	800843a <validate_structure+0xe6>
 80084ec:	231c      	movs	r3, #28
 80084ee:	e7f4      	b.n	80084da <validate_structure+0x186>
 80084f0:	231d      	movs	r3, #29
 80084f2:	e7f2      	b.n	80084da <validate_structure+0x186>
 80084f4:	231c      	movs	r3, #28
 80084f6:	e7ae      	b.n	8008456 <validate_structure+0x102>
 80084f8:	231d      	movs	r3, #29
 80084fa:	e7ac      	b.n	8008456 <validate_structure+0x102>
 80084fc:	0800bf90 	.word	0x0800bf90

08008500 <mktime>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	b085      	sub	sp, #20
 8008506:	4607      	mov	r7, r0
 8008508:	f002 f85e 	bl	800a5c8 <__gettzinfo>
 800850c:	4681      	mov	r9, r0
 800850e:	4638      	mov	r0, r7
 8008510:	f7ff ff20 	bl	8008354 <validate_structure>
 8008514:	e9d7 4300 	ldrd	r4, r3, [r7]
 8008518:	223c      	movs	r2, #60	; 0x3c
 800851a:	fb02 4403 	mla	r4, r2, r3, r4
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	697e      	ldr	r6, [r7, #20]
 8008522:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8008526:	fb02 4403 	mla	r4, r2, r3, r4
 800852a:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800852e:	4abb      	ldr	r2, [pc, #748]	; (800881c <mktime+0x31c>)
 8008530:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008534:	3d01      	subs	r5, #1
 8008536:	2b01      	cmp	r3, #1
 8008538:	4415      	add	r5, r2
 800853a:	dd11      	ble.n	8008560 <mktime+0x60>
 800853c:	07b1      	lsls	r1, r6, #30
 800853e:	d10f      	bne.n	8008560 <mktime+0x60>
 8008540:	2264      	movs	r2, #100	; 0x64
 8008542:	fb96 f3f2 	sdiv	r3, r6, r2
 8008546:	fb02 6313 	mls	r3, r2, r3, r6
 800854a:	b943      	cbnz	r3, 800855e <mktime+0x5e>
 800854c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008550:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008554:	fb93 f1f2 	sdiv	r1, r3, r2
 8008558:	fb02 3311 	mls	r3, r2, r1, r3
 800855c:	b903      	cbnz	r3, 8008560 <mktime+0x60>
 800855e:	3501      	adds	r5, #1
 8008560:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8008564:	3310      	adds	r3, #16
 8008566:	f644 6220 	movw	r2, #20000	; 0x4e20
 800856a:	4293      	cmp	r3, r2
 800856c:	61fd      	str	r5, [r7, #28]
 800856e:	f200 815e 	bhi.w	800882e <mktime+0x32e>
 8008572:	2e46      	cmp	r6, #70	; 0x46
 8008574:	dd72      	ble.n	800865c <mktime+0x15c>
 8008576:	2346      	movs	r3, #70	; 0x46
 8008578:	f240 1c6d 	movw	ip, #365	; 0x16d
 800857c:	2164      	movs	r1, #100	; 0x64
 800857e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008582:	079a      	lsls	r2, r3, #30
 8008584:	d164      	bne.n	8008650 <mktime+0x150>
 8008586:	fb93 f2f1 	sdiv	r2, r3, r1
 800858a:	fb01 3212 	mls	r2, r1, r2, r3
 800858e:	2a00      	cmp	r2, #0
 8008590:	d161      	bne.n	8008656 <mktime+0x156>
 8008592:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8008596:	fb92 fef0 	sdiv	lr, r2, r0
 800859a:	fb00 221e 	mls	r2, r0, lr, r2
 800859e:	2a00      	cmp	r2, #0
 80085a0:	bf14      	ite	ne
 80085a2:	4662      	movne	r2, ip
 80085a4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80085a8:	3301      	adds	r3, #1
 80085aa:	429e      	cmp	r6, r3
 80085ac:	4415      	add	r5, r2
 80085ae:	d1e8      	bne.n	8008582 <mktime+0x82>
 80085b0:	4b9b      	ldr	r3, [pc, #620]	; (8008820 <mktime+0x320>)
 80085b2:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80085b6:	fbc5 4803 	smlal	r4, r8, r5, r3
 80085ba:	f000 ff31 	bl	8009420 <__tz_lock>
 80085be:	f000 ff3b 	bl	8009438 <_tzset_unlocked>
 80085c2:	4b98      	ldr	r3, [pc, #608]	; (8008824 <mktime+0x324>)
 80085c4:	f8d3 b000 	ldr.w	fp, [r3]
 80085c8:	f1bb 0f00 	cmp.w	fp, #0
 80085cc:	d03a      	beq.n	8008644 <mktime+0x144>
 80085ce:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80085d2:	6978      	ldr	r0, [r7, #20]
 80085d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80085d8:	f1bb 0f01 	cmp.w	fp, #1
 80085dc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80085e0:	46da      	mov	sl, fp
 80085e2:	bfa8      	it	ge
 80085e4:	f04f 0a01 	movge.w	sl, #1
 80085e8:	4283      	cmp	r3, r0
 80085ea:	d179      	bne.n	80086e0 <mktime+0x1e0>
 80085ec:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 80085f0:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 80085f4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	; 0x4c
 80085f8:	1a13      	subs	r3, r2, r0
 80085fa:	9302      	str	r3, [sp, #8]
 80085fc:	eb61 73e0 	sbc.w	r3, r1, r0, asr #31
 8008600:	9303      	str	r3, [sp, #12]
 8008602:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	9a01      	ldr	r2, [sp, #4]
 800860a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800860e:	ebb2 0e03 	subs.w	lr, r2, r3
 8008612:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8008616:	4574      	cmp	r4, lr
 8008618:	eb78 0201 	sbcs.w	r2, r8, r1
 800861c:	da66      	bge.n	80086ec <mktime+0x1ec>
 800861e:	f8d9 2000 	ldr.w	r2, [r9]
 8008622:	2a00      	cmp	r2, #0
 8008624:	d06f      	beq.n	8008706 <mktime+0x206>
 8008626:	9a02      	ldr	r2, [sp, #8]
 8008628:	4294      	cmp	r4, r2
 800862a:	9a03      	ldr	r2, [sp, #12]
 800862c:	eb78 0202 	sbcs.w	r2, r8, r2
 8008630:	db03      	blt.n	800863a <mktime+0x13a>
 8008632:	4574      	cmp	r4, lr
 8008634:	eb78 0101 	sbcs.w	r1, r8, r1
 8008638:	db6b      	blt.n	8008712 <mktime+0x212>
 800863a:	f1bb 0f00 	cmp.w	fp, #0
 800863e:	f04f 0b00 	mov.w	fp, #0
 8008642:	da6b      	bge.n	800871c <mktime+0x21c>
 8008644:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8008648:	191c      	adds	r4, r3, r4
 800864a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800864e:	e0a9      	b.n	80087a4 <mktime+0x2a4>
 8008650:	f240 126d 	movw	r2, #365	; 0x16d
 8008654:	e7a8      	b.n	80085a8 <mktime+0xa8>
 8008656:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800865a:	e7a5      	b.n	80085a8 <mktime+0xa8>
 800865c:	d0a8      	beq.n	80085b0 <mktime+0xb0>
 800865e:	2345      	movs	r3, #69	; 0x45
 8008660:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008664:	2164      	movs	r1, #100	; 0x64
 8008666:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800866a:	e012      	b.n	8008692 <mktime+0x192>
 800866c:	bb62      	cbnz	r2, 80086c8 <mktime+0x1c8>
 800866e:	fb93 f2f1 	sdiv	r2, r3, r1
 8008672:	fb01 3212 	mls	r2, r1, r2, r3
 8008676:	bb52      	cbnz	r2, 80086ce <mktime+0x1ce>
 8008678:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800867c:	fb92 fef0 	sdiv	lr, r2, r0
 8008680:	fb00 221e 	mls	r2, r0, lr, r2
 8008684:	2a00      	cmp	r2, #0
 8008686:	bf14      	ite	ne
 8008688:	4662      	movne	r2, ip
 800868a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800868e:	1aad      	subs	r5, r5, r2
 8008690:	3b01      	subs	r3, #1
 8008692:	429e      	cmp	r6, r3
 8008694:	f003 0203 	and.w	r2, r3, #3
 8008698:	dbe8      	blt.n	800866c <mktime+0x16c>
 800869a:	b9da      	cbnz	r2, 80086d4 <mktime+0x1d4>
 800869c:	2264      	movs	r2, #100	; 0x64
 800869e:	fb96 f3f2 	sdiv	r3, r6, r2
 80086a2:	fb02 6313 	mls	r3, r2, r3, r6
 80086a6:	b9c3      	cbnz	r3, 80086da <mktime+0x1da>
 80086a8:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80086ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80086b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80086b4:	fb02 3311 	mls	r3, r2, r1, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f240 136d 	movw	r3, #365	; 0x16d
 80086be:	bf08      	it	eq
 80086c0:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80086c4:	1aed      	subs	r5, r5, r3
 80086c6:	e773      	b.n	80085b0 <mktime+0xb0>
 80086c8:	f240 126d 	movw	r2, #365	; 0x16d
 80086cc:	e7df      	b.n	800868e <mktime+0x18e>
 80086ce:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80086d2:	e7dc      	b.n	800868e <mktime+0x18e>
 80086d4:	f240 136d 	movw	r3, #365	; 0x16d
 80086d8:	e7f4      	b.n	80086c4 <mktime+0x1c4>
 80086da:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80086de:	e7f1      	b.n	80086c4 <mktime+0x1c4>
 80086e0:	f000 fdf8 	bl	80092d4 <__tzcalc_limits>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d181      	bne.n	80085ec <mktime+0xec>
 80086e8:	46d3      	mov	fp, sl
 80086ea:	e050      	b.n	800878e <mktime+0x28e>
 80086ec:	9a01      	ldr	r2, [sp, #4]
 80086ee:	1a12      	subs	r2, r2, r0
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	ea4f 72e0 	mov.w	r2, r0, asr #31
 80086f6:	eb6c 0c02 	sbc.w	ip, ip, r2
 80086fa:	9a01      	ldr	r2, [sp, #4]
 80086fc:	4294      	cmp	r4, r2
 80086fe:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8008702:	dbf1      	blt.n	80086e8 <mktime+0x1e8>
 8008704:	e78b      	b.n	800861e <mktime+0x11e>
 8008706:	9a02      	ldr	r2, [sp, #8]
 8008708:	4294      	cmp	r4, r2
 800870a:	9a03      	ldr	r2, [sp, #12]
 800870c:	eb78 0202 	sbcs.w	r2, r8, r2
 8008710:	db8f      	blt.n	8008632 <mktime+0x132>
 8008712:	f1bb 0f00 	cmp.w	fp, #0
 8008716:	db3e      	blt.n	8008796 <mktime+0x296>
 8008718:	f04f 0b01 	mov.w	fp, #1
 800871c:	ea8a 0a0b 	eor.w	sl, sl, fp
 8008720:	f1ba 0f01 	cmp.w	sl, #1
 8008724:	d133      	bne.n	800878e <mktime+0x28e>
 8008726:	f1bb 0f00 	cmp.w	fp, #0
 800872a:	d04e      	beq.n	80087ca <mktime+0x2ca>
 800872c:	1a1b      	subs	r3, r3, r0
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8008734:	441a      	add	r2, r3
 8008736:	191c      	adds	r4, r3, r4
 8008738:	603a      	str	r2, [r7, #0]
 800873a:	4638      	mov	r0, r7
 800873c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008740:	f7ff fe08 	bl	8008354 <validate_structure>
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	ebb2 020a 	subs.w	r2, r2, sl
 800874a:	d020      	beq.n	800878e <mktime+0x28e>
 800874c:	2a01      	cmp	r2, #1
 800874e:	dc3e      	bgt.n	80087ce <mktime+0x2ce>
 8008750:	1c91      	adds	r1, r2, #2
 8008752:	bfd8      	it	le
 8008754:	2201      	movle	r2, #1
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	4415      	add	r5, r2
 800875a:	18d2      	adds	r2, r2, r3
 800875c:	d540      	bpl.n	80087e0 <mktime+0x2e0>
 800875e:	1e73      	subs	r3, r6, #1
 8008760:	079a      	lsls	r2, r3, #30
 8008762:	d137      	bne.n	80087d4 <mktime+0x2d4>
 8008764:	2264      	movs	r2, #100	; 0x64
 8008766:	fb93 f1f2 	sdiv	r1, r3, r2
 800876a:	fb02 3311 	mls	r3, r2, r1, r3
 800876e:	bba3      	cbnz	r3, 80087da <mktime+0x2da>
 8008770:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008774:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8008778:	fb96 f2f3 	sdiv	r2, r6, r3
 800877c:	fb03 6612 	mls	r6, r3, r2, r6
 8008780:	2e00      	cmp	r6, #0
 8008782:	f240 136d 	movw	r3, #365	; 0x16d
 8008786:	bf18      	it	ne
 8008788:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800878c:	61fb      	str	r3, [r7, #28]
 800878e:	f1bb 0f01 	cmp.w	fp, #1
 8008792:	f47f af57 	bne.w	8008644 <mktime+0x144>
 8008796:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 800879a:	191c      	adds	r4, r3, r4
 800879c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80087a0:	f04f 0b01 	mov.w	fp, #1
 80087a4:	f000 fe42 	bl	800942c <__tz_unlock>
 80087a8:	3504      	adds	r5, #4
 80087aa:	2307      	movs	r3, #7
 80087ac:	fb95 f3f3 	sdiv	r3, r5, r3
 80087b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80087b4:	1aed      	subs	r5, r5, r3
 80087b6:	bf48      	it	mi
 80087b8:	3507      	addmi	r5, #7
 80087ba:	f8c7 b020 	str.w	fp, [r7, #32]
 80087be:	61bd      	str	r5, [r7, #24]
 80087c0:	4620      	mov	r0, r4
 80087c2:	4641      	mov	r1, r8
 80087c4:	b005      	add	sp, #20
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	1ac3      	subs	r3, r0, r3
 80087cc:	e7af      	b.n	800872e <mktime+0x22e>
 80087ce:	f04f 32ff 	mov.w	r2, #4294967295
 80087d2:	e7c0      	b.n	8008756 <mktime+0x256>
 80087d4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80087d8:	e7d8      	b.n	800878c <mktime+0x28c>
 80087da:	f240 136d 	movw	r3, #365	; 0x16d
 80087de:	e7d5      	b.n	800878c <mktime+0x28c>
 80087e0:	07b3      	lsls	r3, r6, #30
 80087e2:	d118      	bne.n	8008816 <mktime+0x316>
 80087e4:	2164      	movs	r1, #100	; 0x64
 80087e6:	fb96 f3f1 	sdiv	r3, r6, r1
 80087ea:	fb01 6313 	mls	r3, r1, r3, r6
 80087ee:	b9db      	cbnz	r3, 8008828 <mktime+0x328>
 80087f0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80087f4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80087f8:	fb96 f1f3 	sdiv	r1, r6, r3
 80087fc:	fb03 6611 	mls	r6, r3, r1, r6
 8008800:	2e00      	cmp	r6, #0
 8008802:	f240 136d 	movw	r3, #365	; 0x16d
 8008806:	bf08      	it	eq
 8008808:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800880c:	429a      	cmp	r2, r3
 800880e:	bfa8      	it	ge
 8008810:	1ad2      	subge	r2, r2, r3
 8008812:	61fa      	str	r2, [r7, #28]
 8008814:	e7bb      	b.n	800878e <mktime+0x28e>
 8008816:	f240 136d 	movw	r3, #365	; 0x16d
 800881a:	e7f7      	b.n	800880c <mktime+0x30c>
 800881c:	0800bfc0 	.word	0x0800bfc0
 8008820:	00015180 	.word	0x00015180
 8008824:	200003d0 	.word	0x200003d0
 8008828:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800882c:	e7ee      	b.n	800880c <mktime+0x30c>
 800882e:	f04f 34ff 	mov.w	r4, #4294967295
 8008832:	46a0      	mov	r8, r4
 8008834:	e7c4      	b.n	80087c0 <mktime+0x2c0>
 8008836:	bf00      	nop

08008838 <iso_year_adjust>:
 8008838:	6942      	ldr	r2, [r0, #20]
 800883a:	2a00      	cmp	r2, #0
 800883c:	f240 736c 	movw	r3, #1900	; 0x76c
 8008840:	bfa8      	it	ge
 8008842:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8008846:	4413      	add	r3, r2
 8008848:	0792      	lsls	r2, r2, #30
 800884a:	d105      	bne.n	8008858 <iso_year_adjust+0x20>
 800884c:	2164      	movs	r1, #100	; 0x64
 800884e:	fb93 f2f1 	sdiv	r2, r3, r1
 8008852:	fb01 3212 	mls	r2, r1, r2, r3
 8008856:	b9ca      	cbnz	r2, 800888c <iso_year_adjust+0x54>
 8008858:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800885c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008860:	fb02 3311 	mls	r3, r2, r1, r3
 8008864:	fab3 f383 	clz	r3, r3
 8008868:	095b      	lsrs	r3, r3, #5
 800886a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800886e:	0040      	lsls	r0, r0, #1
 8008870:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8008874:	4418      	add	r0, r3
 8008876:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800887a:	4298      	cmp	r0, r3
 800887c:	d027      	beq.n	80088ce <iso_year_adjust+0x96>
 800887e:	dc11      	bgt.n	80088a4 <iso_year_adjust+0x6c>
 8008880:	2801      	cmp	r0, #1
 8008882:	dc0a      	bgt.n	800889a <iso_year_adjust+0x62>
 8008884:	43c0      	mvns	r0, r0
 8008886:	0fc0      	lsrs	r0, r0, #31
 8008888:	4240      	negs	r0, r0
 800888a:	4770      	bx	lr
 800888c:	2301      	movs	r3, #1
 800888e:	e7ec      	b.n	800886a <iso_year_adjust+0x32>
 8008890:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <iso_year_adjust+0x9c>)
 8008892:	40c3      	lsrs	r3, r0
 8008894:	f343 0000 	sbfx	r0, r3, #0, #1
 8008898:	4770      	bx	lr
 800889a:	380a      	subs	r0, #10
 800889c:	2817      	cmp	r0, #23
 800889e:	d9f7      	bls.n	8008890 <iso_year_adjust+0x58>
 80088a0:	2000      	movs	r0, #0
 80088a2:	4770      	bx	lr
 80088a4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80088a8:	4298      	cmp	r0, r3
 80088aa:	dc06      	bgt.n	80088ba <iso_year_adjust+0x82>
 80088ac:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80088b0:	4298      	cmp	r0, r3
 80088b2:	bfd4      	ite	le
 80088b4:	2000      	movle	r0, #0
 80088b6:	2001      	movgt	r0, #1
 80088b8:	4770      	bx	lr
 80088ba:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80088be:	3802      	subs	r0, #2
 80088c0:	2815      	cmp	r0, #21
 80088c2:	d8ed      	bhi.n	80088a0 <iso_year_adjust+0x68>
 80088c4:	4b04      	ldr	r3, [pc, #16]	; (80088d8 <iso_year_adjust+0xa0>)
 80088c6:	40c3      	lsrs	r3, r0
 80088c8:	f003 0001 	and.w	r0, r3, #1
 80088cc:	4770      	bx	lr
 80088ce:	2001      	movs	r0, #1
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	00cc00cf 	.word	0x00cc00cf
 80088d8:	002a001f 	.word	0x002a001f

080088dc <__strftime.isra.0>:
 80088dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	b08f      	sub	sp, #60	; 0x3c
 80088e2:	461e      	mov	r6, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	4607      	mov	r7, r0
 80088e8:	460d      	mov	r5, r1
 80088ea:	9302      	str	r3, [sp, #8]
 80088ec:	461c      	mov	r4, r3
 80088ee:	7813      	ldrb	r3, [r2, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 84bf 	beq.w	8009274 <__strftime.isra.0+0x998>
 80088f6:	2b25      	cmp	r3, #37	; 0x25
 80088f8:	d11f      	bne.n	800893a <__strftime.isra.0+0x5e>
 80088fa:	f892 b001 	ldrb.w	fp, [r2, #1]
 80088fe:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8008902:	d024      	beq.n	800894e <__strftime.isra.0+0x72>
 8008904:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8008908:	d021      	beq.n	800894e <__strftime.isra.0+0x72>
 800890a:	f102 0801 	add.w	r8, r2, #1
 800890e:	f04f 0b00 	mov.w	fp, #0
 8008912:	f898 2000 	ldrb.w	r2, [r8]
 8008916:	3a31      	subs	r2, #49	; 0x31
 8008918:	2a08      	cmp	r2, #8
 800891a:	d81b      	bhi.n	8008954 <__strftime.isra.0+0x78>
 800891c:	4640      	mov	r0, r8
 800891e:	220a      	movs	r2, #10
 8008920:	a906      	add	r1, sp, #24
 8008922:	f001 fa47 	bl	8009db4 <strtoul>
 8008926:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800892a:	4681      	mov	r9, r0
 800892c:	f898 2000 	ldrb.w	r2, [r8]
 8008930:	2a45      	cmp	r2, #69	; 0x45
 8008932:	d112      	bne.n	800895a <__strftime.isra.0+0x7e>
 8008934:	f108 0801 	add.w	r8, r8, #1
 8008938:	e011      	b.n	800895e <__strftime.isra.0+0x82>
 800893a:	1e69      	subs	r1, r5, #1
 800893c:	42a1      	cmp	r1, r4
 800893e:	d802      	bhi.n	8008946 <__strftime.isra.0+0x6a>
 8008940:	2400      	movs	r4, #0
 8008942:	f000 bc9a 	b.w	800927a <__strftime.isra.0+0x99e>
 8008946:	553b      	strb	r3, [r7, r4]
 8008948:	3201      	adds	r2, #1
 800894a:	3401      	adds	r4, #1
 800894c:	e7cf      	b.n	80088ee <__strftime.isra.0+0x12>
 800894e:	f102 0802 	add.w	r8, r2, #2
 8008952:	e7de      	b.n	8008912 <__strftime.isra.0+0x36>
 8008954:	f04f 0900 	mov.w	r9, #0
 8008958:	e7e8      	b.n	800892c <__strftime.isra.0+0x50>
 800895a:	2a4f      	cmp	r2, #79	; 0x4f
 800895c:	d0ea      	beq.n	8008934 <__strftime.isra.0+0x58>
 800895e:	f898 0000 	ldrb.w	r0, [r8]
 8008962:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8008966:	2a55      	cmp	r2, #85	; 0x55
 8008968:	d8ea      	bhi.n	8008940 <__strftime.isra.0+0x64>
 800896a:	a101      	add	r1, pc, #4	; (adr r1, 8008970 <__strftime.isra.0+0x94>)
 800896c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008970:	08009269 	.word	0x08009269
 8008974:	08008941 	.word	0x08008941
 8008978:	08008941 	.word	0x08008941
 800897c:	08008941 	.word	0x08008941
 8008980:	08008941 	.word	0x08008941
 8008984:	08008941 	.word	0x08008941
 8008988:	08008941 	.word	0x08008941
 800898c:	08008941 	.word	0x08008941
 8008990:	08008941 	.word	0x08008941
 8008994:	08008941 	.word	0x08008941
 8008998:	08008941 	.word	0x08008941
 800899c:	08008941 	.word	0x08008941
 80089a0:	08008941 	.word	0x08008941
 80089a4:	08008941 	.word	0x08008941
 80089a8:	08008941 	.word	0x08008941
 80089ac:	08008941 	.word	0x08008941
 80089b0:	08008941 	.word	0x08008941
 80089b4:	08008941 	.word	0x08008941
 80089b8:	08008941 	.word	0x08008941
 80089bc:	08008941 	.word	0x08008941
 80089c0:	08008941 	.word	0x08008941
 80089c4:	08008941 	.word	0x08008941
 80089c8:	08008941 	.word	0x08008941
 80089cc:	08008941 	.word	0x08008941
 80089d0:	08008941 	.word	0x08008941
 80089d4:	08008941 	.word	0x08008941
 80089d8:	08008941 	.word	0x08008941
 80089dc:	08008941 	.word	0x08008941
 80089e0:	08008b05 	.word	0x08008b05
 80089e4:	08008b5d 	.word	0x08008b5d
 80089e8:	08008bcb 	.word	0x08008bcb
 80089ec:	08008c69 	.word	0x08008c69
 80089f0:	08008941 	.word	0x08008941
 80089f4:	08008cb5 	.word	0x08008cb5
 80089f8:	08008da1 	.word	0x08008da1
 80089fc:	08008e95 	.word	0x08008e95
 8008a00:	08008ea3 	.word	0x08008ea3
 8008a04:	08008941 	.word	0x08008941
 8008a08:	08008941 	.word	0x08008941
 8008a0c:	08008941 	.word	0x08008941
 8008a10:	08008ed3 	.word	0x08008ed3
 8008a14:	08008941 	.word	0x08008941
 8008a18:	08008941 	.word	0x08008941
 8008a1c:	08008ee7 	.word	0x08008ee7
 8008a20:	08008941 	.word	0x08008941
 8008a24:	08008f39 	.word	0x08008f39
 8008a28:	08009047 	.word	0x08009047
 8008a2c:	08009057 	.word	0x08009057
 8008a30:	0800907f 	.word	0x0800907f
 8008a34:	080090bd 	.word	0x080090bd
 8008a38:	0800912f 	.word	0x0800912f
 8008a3c:	08008bc3 	.word	0x08008bc3
 8008a40:	0800915b 	.word	0x0800915b
 8008a44:	08009217 	.word	0x08009217
 8008a48:	08008941 	.word	0x08008941
 8008a4c:	08008941 	.word	0x08008941
 8008a50:	08008941 	.word	0x08008941
 8008a54:	08008941 	.word	0x08008941
 8008a58:	08008941 	.word	0x08008941
 8008a5c:	08008941 	.word	0x08008941
 8008a60:	08008ac9 	.word	0x08008ac9
 8008a64:	08008b33 	.word	0x08008b33
 8008a68:	08008b89 	.word	0x08008b89
 8008a6c:	08008c45 	.word	0x08008c45
 8008a70:	08008c45 	.word	0x08008c45
 8008a74:	08008941 	.word	0x08008941
 8008a78:	08008d07 	.word	0x08008d07
 8008a7c:	08008b33 	.word	0x08008b33
 8008a80:	08008941 	.word	0x08008941
 8008a84:	08008ec5 	.word	0x08008ec5
 8008a88:	08008e95 	.word	0x08008e95
 8008a8c:	08008ea3 	.word	0x08008ea3
 8008a90:	08008ecd 	.word	0x08008ecd
 8008a94:	08008ed7 	.word	0x08008ed7
 8008a98:	08008941 	.word	0x08008941
 8008a9c:	08008ee7 	.word	0x08008ee7
 8008aa0:	08008941 	.word	0x08008941
 8008aa4:	08008bb3 	.word	0x08008bb3
 8008aa8:	08008f4b 	.word	0x08008f4b
 8008aac:	0800904b 	.word	0x0800904b
 8008ab0:	08009065 	.word	0x08009065
 8008ab4:	08008941 	.word	0x08008941
 8008ab8:	08009121 	.word	0x08009121
 8008abc:	08008bbb 	.word	0x08008bbb
 8008ac0:	0800913f 	.word	0x0800913f
 8008ac4:	080091a1 	.word	0x080091a1
 8008ac8:	69b3      	ldr	r3, [r6, #24]
 8008aca:	4aa9      	ldr	r2, [pc, #676]	; (8008d70 <__strftime.isra.0+0x494>)
 8008acc:	3318      	adds	r3, #24
 8008ace:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8008ad2:	4648      	mov	r0, r9
 8008ad4:	f7f7 fb86 	bl	80001e4 <strlen>
 8008ad8:	f109 39ff 	add.w	r9, r9, #4294967295
 8008adc:	4420      	add	r0, r4
 8008ade:	1e6b      	subs	r3, r5, #1
 8008ae0:	42a0      	cmp	r0, r4
 8008ae2:	d107      	bne.n	8008af4 <__strftime.isra.0+0x218>
 8008ae4:	f898 3000 	ldrb.w	r3, [r8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 83c3 	beq.w	8009274 <__strftime.isra.0+0x998>
 8008aee:	f108 0201 	add.w	r2, r8, #1
 8008af2:	e6fc      	b.n	80088ee <__strftime.isra.0+0x12>
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	f67f af23 	bls.w	8008940 <__strftime.isra.0+0x64>
 8008afa:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8008afe:	553a      	strb	r2, [r7, r4]
 8008b00:	3401      	adds	r4, #1
 8008b02:	e7ed      	b.n	8008ae0 <__strftime.isra.0+0x204>
 8008b04:	69b2      	ldr	r2, [r6, #24]
 8008b06:	4b9a      	ldr	r3, [pc, #616]	; (8008d70 <__strftime.isra.0+0x494>)
 8008b08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008b0c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8008b10:	4648      	mov	r0, r9
 8008b12:	f7f7 fb67 	bl	80001e4 <strlen>
 8008b16:	f109 39ff 	add.w	r9, r9, #4294967295
 8008b1a:	4420      	add	r0, r4
 8008b1c:	1e6b      	subs	r3, r5, #1
 8008b1e:	4284      	cmp	r4, r0
 8008b20:	d0e0      	beq.n	8008ae4 <__strftime.isra.0+0x208>
 8008b22:	42a3      	cmp	r3, r4
 8008b24:	f67f af0c 	bls.w	8008940 <__strftime.isra.0+0x64>
 8008b28:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8008b2c:	553a      	strb	r2, [r7, r4]
 8008b2e:	3401      	adds	r4, #1
 8008b30:	e7f5      	b.n	8008b1e <__strftime.isra.0+0x242>
 8008b32:	4b8f      	ldr	r3, [pc, #572]	; (8008d70 <__strftime.isra.0+0x494>)
 8008b34:	6932      	ldr	r2, [r6, #16]
 8008b36:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8008b3a:	4648      	mov	r0, r9
 8008b3c:	f7f7 fb52 	bl	80001e4 <strlen>
 8008b40:	f109 39ff 	add.w	r9, r9, #4294967295
 8008b44:	4420      	add	r0, r4
 8008b46:	1e6b      	subs	r3, r5, #1
 8008b48:	42a0      	cmp	r0, r4
 8008b4a:	d0cb      	beq.n	8008ae4 <__strftime.isra.0+0x208>
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	f67f aef7 	bls.w	8008940 <__strftime.isra.0+0x64>
 8008b52:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8008b56:	553a      	strb	r2, [r7, r4]
 8008b58:	3401      	adds	r4, #1
 8008b5a:	e7f5      	b.n	8008b48 <__strftime.isra.0+0x26c>
 8008b5c:	6933      	ldr	r3, [r6, #16]
 8008b5e:	4a84      	ldr	r2, [pc, #528]	; (8008d70 <__strftime.isra.0+0x494>)
 8008b60:	330c      	adds	r3, #12
 8008b62:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8008b66:	4648      	mov	r0, r9
 8008b68:	f7f7 fb3c 	bl	80001e4 <strlen>
 8008b6c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008b70:	4420      	add	r0, r4
 8008b72:	1e6b      	subs	r3, r5, #1
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d0b5      	beq.n	8008ae4 <__strftime.isra.0+0x208>
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	f67f aee1 	bls.w	8008940 <__strftime.isra.0+0x64>
 8008b7e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8008b82:	553a      	strb	r2, [r7, r4]
 8008b84:	3401      	adds	r4, #1
 8008b86:	e7f5      	b.n	8008b74 <__strftime.isra.0+0x298>
 8008b88:	4b79      	ldr	r3, [pc, #484]	; (8008d70 <__strftime.isra.0+0x494>)
 8008b8a:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8008b8e:	4648      	mov	r0, r9
 8008b90:	f7f7 fb28 	bl	80001e4 <strlen>
 8008b94:	f899 3000 	ldrb.w	r3, [r9]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0a3      	beq.n	8008ae4 <__strftime.isra.0+0x208>
 8008b9c:	4633      	mov	r3, r6
 8008b9e:	464a      	mov	r2, r9
 8008ba0:	1b29      	subs	r1, r5, r4
 8008ba2:	1938      	adds	r0, r7, r4
 8008ba4:	f7ff fe9a 	bl	80088dc <__strftime.isra.0>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	f77f aec9 	ble.w	8008940 <__strftime.isra.0+0x64>
 8008bae:	4404      	add	r4, r0
 8008bb0:	e798      	b.n	8008ae4 <__strftime.isra.0+0x208>
 8008bb2:	4b6f      	ldr	r3, [pc, #444]	; (8008d70 <__strftime.isra.0+0x494>)
 8008bb4:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8008bb8:	e7e9      	b.n	8008b8e <__strftime.isra.0+0x2b2>
 8008bba:	4b6d      	ldr	r3, [pc, #436]	; (8008d70 <__strftime.isra.0+0x494>)
 8008bbc:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8008bc0:	e7e5      	b.n	8008b8e <__strftime.isra.0+0x2b2>
 8008bc2:	4b6b      	ldr	r3, [pc, #428]	; (8008d70 <__strftime.isra.0+0x494>)
 8008bc4:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8008bc8:	e7e1      	b.n	8008b8e <__strftime.isra.0+0x2b2>
 8008bca:	496a      	ldr	r1, [pc, #424]	; (8008d74 <__strftime.isra.0+0x498>)
 8008bcc:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8008bd0:	458a      	cmp	sl, r1
 8008bd2:	bfac      	ite	ge
 8008bd4:	2100      	movge	r1, #0
 8008bd6:	2101      	movlt	r1, #1
 8008bd8:	f1ba 0f00 	cmp.w	sl, #0
 8008bdc:	db11      	blt.n	8008c02 <__strftime.isra.0+0x326>
 8008bde:	2064      	movs	r0, #100	; 0x64
 8008be0:	fb9a f0f0 	sdiv	r0, sl, r0
 8008be4:	3013      	adds	r0, #19
 8008be6:	f1bb 0f00 	cmp.w	fp, #0
 8008bea:	d014      	beq.n	8008c16 <__strftime.isra.0+0x33a>
 8008bec:	2863      	cmp	r0, #99	; 0x63
 8008bee:	dd27      	ble.n	8008c40 <__strftime.isra.0+0x364>
 8008bf0:	4b61      	ldr	r3, [pc, #388]	; (8008d78 <__strftime.isra.0+0x49c>)
 8008bf2:	4a62      	ldr	r2, [pc, #392]	; (8008d7c <__strftime.isra.0+0x4a0>)
 8008bf4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8008bf8:	bf18      	it	ne
 8008bfa:	461a      	movne	r2, r3
 8008bfc:	f8df c198 	ldr.w	ip, [pc, #408]	; 8008d98 <__strftime.isra.0+0x4bc>
 8008c00:	e00c      	b.n	8008c1c <__strftime.isra.0+0x340>
 8008c02:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8008c06:	9103      	str	r1, [sp, #12]
 8008c08:	f000 fed9 	bl	80099be <abs>
 8008c0c:	2264      	movs	r2, #100	; 0x64
 8008c0e:	9903      	ldr	r1, [sp, #12]
 8008c10:	fb90 f0f2 	sdiv	r0, r0, r2
 8008c14:	e7e7      	b.n	8008be6 <__strftime.isra.0+0x30a>
 8008c16:	4a58      	ldr	r2, [pc, #352]	; (8008d78 <__strftime.isra.0+0x49c>)
 8008c18:	f8df c180 	ldr.w	ip, [pc, #384]	; 8008d9c <__strftime.isra.0+0x4c0>
 8008c1c:	4b58      	ldr	r3, [pc, #352]	; (8008d80 <__strftime.isra.0+0x4a4>)
 8008c1e:	9001      	str	r0, [sp, #4]
 8008c20:	f1b9 0f02 	cmp.w	r9, #2
 8008c24:	bf2c      	ite	cs
 8008c26:	ebc1 0109 	rsbcs	r1, r1, r9
 8008c2a:	f1c1 0102 	rsbcc	r1, r1, #2
 8008c2e:	9100      	str	r1, [sp, #0]
 8008c30:	4950      	ldr	r1, [pc, #320]	; (8008d74 <__strftime.isra.0+0x498>)
 8008c32:	458a      	cmp	sl, r1
 8008c34:	bfa8      	it	ge
 8008c36:	4613      	movge	r3, r2
 8008c38:	4662      	mov	r2, ip
 8008c3a:	1b29      	subs	r1, r5, r4
 8008c3c:	1938      	adds	r0, r7, r4
 8008c3e:	e028      	b.n	8008c92 <__strftime.isra.0+0x3b6>
 8008c40:	4a4d      	ldr	r2, [pc, #308]	; (8008d78 <__strftime.isra.0+0x49c>)
 8008c42:	e7db      	b.n	8008bfc <__strftime.isra.0+0x320>
 8008c44:	494f      	ldr	r1, [pc, #316]	; (8008d84 <__strftime.isra.0+0x4a8>)
 8008c46:	4a50      	ldr	r2, [pc, #320]	; (8008d88 <__strftime.isra.0+0x4ac>)
 8008c48:	68f3      	ldr	r3, [r6, #12]
 8008c4a:	2864      	cmp	r0, #100	; 0x64
 8008c4c:	bf08      	it	eq
 8008c4e:	460a      	moveq	r2, r1
 8008c50:	1b29      	subs	r1, r5, r4
 8008c52:	1938      	adds	r0, r7, r4
 8008c54:	f7ff f9d6 	bl	8008004 <sniprintf>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	f6ff ae71 	blt.w	8008940 <__strftime.isra.0+0x64>
 8008c5e:	4404      	add	r4, r0
 8008c60:	42a5      	cmp	r5, r4
 8008c62:	f63f af3f 	bhi.w	8008ae4 <__strftime.isra.0+0x208>
 8008c66:	e66b      	b.n	8008940 <__strftime.isra.0+0x64>
 8008c68:	6970      	ldr	r0, [r6, #20]
 8008c6a:	6933      	ldr	r3, [r6, #16]
 8008c6c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8008c70:	2800      	cmp	r0, #0
 8008c72:	eb07 0904 	add.w	r9, r7, r4
 8008c76:	eba5 0104 	sub.w	r1, r5, r4
 8008c7a:	f103 0301 	add.w	r3, r3, #1
 8008c7e:	db0b      	blt.n	8008c98 <__strftime.isra.0+0x3bc>
 8008c80:	2264      	movs	r2, #100	; 0x64
 8008c82:	fb90 fcf2 	sdiv	ip, r0, r2
 8008c86:	fb02 001c 	mls	r0, r2, ip, r0
 8008c8a:	4a40      	ldr	r2, [pc, #256]	; (8008d8c <__strftime.isra.0+0x4b0>)
 8008c8c:	e9cd a000 	strd	sl, r0, [sp]
 8008c90:	4648      	mov	r0, r9
 8008c92:	f7ff f9b7 	bl	8008004 <sniprintf>
 8008c96:	e7df      	b.n	8008c58 <__strftime.isra.0+0x37c>
 8008c98:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008c9c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8008ca0:	f000 fe8d 	bl	80099be <abs>
 8008ca4:	2264      	movs	r2, #100	; 0x64
 8008ca6:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8008caa:	fb90 fcf2 	sdiv	ip, r0, r2
 8008cae:	fb0c 0012 	mls	r0, ip, r2, r0
 8008cb2:	e7ea      	b.n	8008c8a <__strftime.isra.0+0x3ae>
 8008cb4:	2225      	movs	r2, #37	; 0x25
 8008cb6:	f88d 2018 	strb.w	r2, [sp, #24]
 8008cba:	f1bb 0f00 	cmp.w	fp, #0
 8008cbe:	d011      	beq.n	8008ce4 <__strftime.isra.0+0x408>
 8008cc0:	f1b9 0f06 	cmp.w	r9, #6
 8008cc4:	bf38      	it	cc
 8008cc6:	f04f 0906 	movcc.w	r9, #6
 8008cca:	f1b9 0306 	subs.w	r3, r9, #6
 8008cce:	f88d b019 	strb.w	fp, [sp, #25]
 8008cd2:	d10c      	bne.n	8008cee <__strftime.isra.0+0x412>
 8008cd4:	f10d 001a 	add.w	r0, sp, #26
 8008cd8:	492d      	ldr	r1, [pc, #180]	; (8008d90 <__strftime.isra.0+0x4b4>)
 8008cda:	f000 fe5a 	bl	8009992 <strcpy>
 8008cde:	4633      	mov	r3, r6
 8008ce0:	aa06      	add	r2, sp, #24
 8008ce2:	e75d      	b.n	8008ba0 <__strftime.isra.0+0x2c4>
 8008ce4:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8008ce8:	f04f 090a 	mov.w	r9, #10
 8008cec:	e7ed      	b.n	8008cca <__strftime.isra.0+0x3ee>
 8008cee:	4a29      	ldr	r2, [pc, #164]	; (8008d94 <__strftime.isra.0+0x4b8>)
 8008cf0:	211e      	movs	r1, #30
 8008cf2:	f10d 001a 	add.w	r0, sp, #26
 8008cf6:	f7ff f985 	bl	8008004 <sniprintf>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	ddea      	ble.n	8008cd4 <__strftime.isra.0+0x3f8>
 8008cfe:	f10d 031a 	add.w	r3, sp, #26
 8008d02:	4418      	add	r0, r3
 8008d04:	e7e8      	b.n	8008cd8 <__strftime.isra.0+0x3fc>
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff fd96 	bl	8008838 <iso_year_adjust>
 8008d0c:	4681      	mov	r9, r0
 8008d0e:	6970      	ldr	r0, [r6, #20]
 8008d10:	2800      	cmp	r0, #0
 8008d12:	db11      	blt.n	8008d38 <__strftime.isra.0+0x45c>
 8008d14:	2364      	movs	r3, #100	; 0x64
 8008d16:	fb90 f2f3 	sdiv	r2, r0, r3
 8008d1a:	fb03 0012 	mls	r0, r3, r2, r0
 8008d1e:	2364      	movs	r3, #100	; 0x64
 8008d20:	4481      	add	r9, r0
 8008d22:	fb99 f2f3 	sdiv	r2, r9, r3
 8008d26:	fb03 9912 	mls	r9, r3, r2, r9
 8008d2a:	4499      	add	r9, r3
 8008d2c:	fbb9 f2f3 	udiv	r2, r9, r3
 8008d30:	fb03 9312 	mls	r3, r3, r2, r9
 8008d34:	4a13      	ldr	r2, [pc, #76]	; (8008d84 <__strftime.isra.0+0x4a8>)
 8008d36:	e78b      	b.n	8008c50 <__strftime.isra.0+0x374>
 8008d38:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008d3c:	f000 fe3f 	bl	80099be <abs>
 8008d40:	2364      	movs	r3, #100	; 0x64
 8008d42:	f1b9 0f00 	cmp.w	r9, #0
 8008d46:	fb90 f2f3 	sdiv	r2, r0, r3
 8008d4a:	fb02 0013 	mls	r0, r2, r3, r0
 8008d4e:	da07      	bge.n	8008d60 <__strftime.isra.0+0x484>
 8008d50:	6972      	ldr	r2, [r6, #20]
 8008d52:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8008d56:	429a      	cmp	r2, r3
 8008d58:	bfb8      	it	lt
 8008d5a:	f04f 0901 	movlt.w	r9, #1
 8008d5e:	e7de      	b.n	8008d1e <__strftime.isra.0+0x442>
 8008d60:	d0dd      	beq.n	8008d1e <__strftime.isra.0+0x442>
 8008d62:	6972      	ldr	r2, [r6, #20]
 8008d64:	4b03      	ldr	r3, [pc, #12]	; (8008d74 <__strftime.isra.0+0x498>)
 8008d66:	429a      	cmp	r2, r3
 8008d68:	bfb8      	it	lt
 8008d6a:	f04f 39ff 	movlt.w	r9, #4294967295
 8008d6e:	e7d6      	b.n	8008d1e <__strftime.isra.0+0x442>
 8008d70:	0800c224 	.word	0x0800c224
 8008d74:	fffff894 	.word	0xfffff894
 8008d78:	0800c35b 	.word	0x0800c35b
 8008d7c:	0800c057 	.word	0x0800c057
 8008d80:	0800c4a3 	.word	0x0800c4a3
 8008d84:	0800c06f 	.word	0x0800c06f
 8008d88:	0800c061 	.word	0x0800c061
 8008d8c:	0800c065 	.word	0x0800c065
 8008d90:	0800c078 	.word	0x0800c078
 8008d94:	0800c074 	.word	0x0800c074
 8008d98:	0800c059 	.word	0x0800c059
 8008d9c:	0800c050 	.word	0x0800c050
 8008da0:	6971      	ldr	r1, [r6, #20]
 8008da2:	4abb      	ldr	r2, [pc, #748]	; (8009090 <__strftime.isra.0+0x7b4>)
 8008da4:	4291      	cmp	r1, r2
 8008da6:	bfac      	ite	ge
 8008da8:	2300      	movge	r3, #0
 8008daa:	2301      	movlt	r3, #1
 8008dac:	4630      	mov	r0, r6
 8008dae:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8008db2:	f7ff fd41 	bl	8008838 <iso_year_adjust>
 8008db6:	9904      	ldr	r1, [sp, #16]
 8008db8:	2900      	cmp	r1, #0
 8008dba:	4682      	mov	sl, r0
 8008dbc:	db39      	blt.n	8008e32 <__strftime.isra.0+0x556>
 8008dbe:	2264      	movs	r2, #100	; 0x64
 8008dc0:	fb91 f2f2 	sdiv	r2, r1, r2
 8008dc4:	3213      	adds	r2, #19
 8008dc6:	6970      	ldr	r0, [r6, #20]
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	db3d      	blt.n	8008e48 <__strftime.isra.0+0x56c>
 8008dcc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8008dd0:	fb90 fefc 	sdiv	lr, r0, ip
 8008dd4:	fb0c 001e 	mls	r0, ip, lr, r0
 8008dd8:	f1ba 0f00 	cmp.w	sl, #0
 8008ddc:	da43      	bge.n	8008e66 <__strftime.isra.0+0x58a>
 8008dde:	6971      	ldr	r1, [r6, #20]
 8008de0:	4bac      	ldr	r3, [pc, #688]	; (8009094 <__strftime.isra.0+0x7b8>)
 8008de2:	4299      	cmp	r1, r3
 8008de4:	db4a      	blt.n	8008e7c <__strftime.isra.0+0x5a0>
 8008de6:	4482      	add	sl, r0
 8008de8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008dec:	d14b      	bne.n	8008e86 <__strftime.isra.0+0x5aa>
 8008dee:	3a01      	subs	r2, #1
 8008df0:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8008df4:	9b03      	ldr	r3, [sp, #12]
 8008df6:	2164      	movs	r1, #100	; 0x64
 8008df8:	fb01 aa02 	mla	sl, r1, r2, sl
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f040 8240 	bne.w	8009282 <__strftime.isra.0+0x9a6>
 8008e02:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8008e06:	d104      	bne.n	8008e12 <__strftime.isra.0+0x536>
 8008e08:	f242 720f 	movw	r2, #9999	; 0x270f
 8008e0c:	4592      	cmp	sl, r2
 8008e0e:	f200 823c 	bhi.w	800928a <__strftime.isra.0+0x9ae>
 8008e12:	aa06      	add	r2, sp, #24
 8008e14:	2125      	movs	r1, #37	; 0x25
 8008e16:	7011      	strb	r1, [r2, #0]
 8008e18:	f1bb 0f00 	cmp.w	fp, #0
 8008e1c:	f040 81bc 	bne.w	8009198 <__strftime.isra.0+0x8bc>
 8008e20:	1c50      	adds	r0, r2, #1
 8008e22:	499d      	ldr	r1, [pc, #628]	; (8009098 <__strftime.isra.0+0x7bc>)
 8008e24:	f000 fdb5 	bl	8009992 <strcpy>
 8008e28:	f8cd a000 	str.w	sl, [sp]
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	aa06      	add	r2, sp, #24
 8008e30:	e086      	b.n	8008f40 <__strftime.isra.0+0x664>
 8008e32:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8008e36:	9104      	str	r1, [sp, #16]
 8008e38:	f000 fdc1 	bl	80099be <abs>
 8008e3c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8008e40:	9904      	ldr	r1, [sp, #16]
 8008e42:	fb90 f2fc 	sdiv	r2, r0, ip
 8008e46:	e7be      	b.n	8008dc6 <__strftime.isra.0+0x4ea>
 8008e48:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008e4c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8008e50:	f000 fdb5 	bl	80099be <abs>
 8008e54:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8008e58:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008e5c:	fb90 fefc 	sdiv	lr, r0, ip
 8008e60:	fb0e 001c 	mls	r0, lr, ip, r0
 8008e64:	e7b8      	b.n	8008dd8 <__strftime.isra.0+0x4fc>
 8008e66:	d0be      	beq.n	8008de6 <__strftime.isra.0+0x50a>
 8008e68:	4b89      	ldr	r3, [pc, #548]	; (8009090 <__strftime.isra.0+0x7b4>)
 8008e6a:	4299      	cmp	r1, r3
 8008e6c:	bfb4      	ite	lt
 8008e6e:	2301      	movlt	r3, #1
 8008e70:	2300      	movge	r3, #0
 8008e72:	9303      	str	r3, [sp, #12]
 8008e74:	bfb8      	it	lt
 8008e76:	f04f 3aff 	movlt.w	sl, #4294967295
 8008e7a:	e7b4      	b.n	8008de6 <__strftime.isra.0+0x50a>
 8008e7c:	f04f 0a01 	mov.w	sl, #1
 8008e80:	f8cd a00c 	str.w	sl, [sp, #12]
 8008e84:	e7af      	b.n	8008de6 <__strftime.isra.0+0x50a>
 8008e86:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8008e8a:	bf04      	itt	eq
 8008e8c:	3201      	addeq	r2, #1
 8008e8e:	f04f 0a00 	moveq.w	sl, #0
 8008e92:	e7af      	b.n	8008df4 <__strftime.isra.0+0x518>
 8008e94:	4981      	ldr	r1, [pc, #516]	; (800909c <__strftime.isra.0+0x7c0>)
 8008e96:	4a82      	ldr	r2, [pc, #520]	; (80090a0 <__strftime.isra.0+0x7c4>)
 8008e98:	68b3      	ldr	r3, [r6, #8]
 8008e9a:	286b      	cmp	r0, #107	; 0x6b
 8008e9c:	bf08      	it	eq
 8008e9e:	460a      	moveq	r2, r1
 8008ea0:	e6d6      	b.n	8008c50 <__strftime.isra.0+0x374>
 8008ea2:	68b3      	ldr	r3, [r6, #8]
 8008ea4:	b163      	cbz	r3, 8008ec0 <__strftime.isra.0+0x5e4>
 8008ea6:	2b0c      	cmp	r3, #12
 8008ea8:	d004      	beq.n	8008eb4 <__strftime.isra.0+0x5d8>
 8008eaa:	210c      	movs	r1, #12
 8008eac:	fb93 f2f1 	sdiv	r2, r3, r1
 8008eb0:	fb01 3312 	mls	r3, r1, r2, r3
 8008eb4:	497a      	ldr	r1, [pc, #488]	; (80090a0 <__strftime.isra.0+0x7c4>)
 8008eb6:	4a79      	ldr	r2, [pc, #484]	; (800909c <__strftime.isra.0+0x7c0>)
 8008eb8:	2849      	cmp	r0, #73	; 0x49
 8008eba:	bf08      	it	eq
 8008ebc:	460a      	moveq	r2, r1
 8008ebe:	e6c7      	b.n	8008c50 <__strftime.isra.0+0x374>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	e7f7      	b.n	8008eb4 <__strftime.isra.0+0x5d8>
 8008ec4:	69f3      	ldr	r3, [r6, #28]
 8008ec6:	4a77      	ldr	r2, [pc, #476]	; (80090a4 <__strftime.isra.0+0x7c8>)
 8008ec8:	3301      	adds	r3, #1
 8008eca:	e6c1      	b.n	8008c50 <__strftime.isra.0+0x374>
 8008ecc:	6933      	ldr	r3, [r6, #16]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	e730      	b.n	8008d34 <__strftime.isra.0+0x458>
 8008ed2:	6873      	ldr	r3, [r6, #4]
 8008ed4:	e72e      	b.n	8008d34 <__strftime.isra.0+0x458>
 8008ed6:	1e6b      	subs	r3, r5, #1
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	f4bf ad31 	bcs.w	8008940 <__strftime.isra.0+0x64>
 8008ede:	230a      	movs	r3, #10
 8008ee0:	553b      	strb	r3, [r7, r4]
 8008ee2:	3401      	adds	r4, #1
 8008ee4:	e5fe      	b.n	8008ae4 <__strftime.isra.0+0x208>
 8008ee6:	68b3      	ldr	r3, [r6, #8]
 8008ee8:	2b0b      	cmp	r3, #11
 8008eea:	4b6f      	ldr	r3, [pc, #444]	; (80090a8 <__strftime.isra.0+0x7cc>)
 8008eec:	bfd4      	ite	le
 8008eee:	2200      	movle	r2, #0
 8008ef0:	2201      	movgt	r2, #1
 8008ef2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008ef6:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8008efa:	4648      	mov	r0, r9
 8008efc:	f7f7 f972 	bl	80001e4 <strlen>
 8008f00:	f109 32ff 	add.w	r2, r9, #4294967295
 8008f04:	4420      	add	r0, r4
 8008f06:	f105 3cff 	add.w	ip, r5, #4294967295
 8008f0a:	42a0      	cmp	r0, r4
 8008f0c:	f43f adea 	beq.w	8008ae4 <__strftime.isra.0+0x208>
 8008f10:	45a4      	cmp	ip, r4
 8008f12:	f67f ad15 	bls.w	8008940 <__strftime.isra.0+0x64>
 8008f16:	f898 1000 	ldrb.w	r1, [r8]
 8008f1a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008f1e:	2950      	cmp	r1, #80	; 0x50
 8008f20:	d107      	bne.n	8008f32 <__strftime.isra.0+0x656>
 8008f22:	4962      	ldr	r1, [pc, #392]	; (80090ac <__strftime.isra.0+0x7d0>)
 8008f24:	5cc9      	ldrb	r1, [r1, r3]
 8008f26:	f001 0103 	and.w	r1, r1, #3
 8008f2a:	2901      	cmp	r1, #1
 8008f2c:	bf08      	it	eq
 8008f2e:	3320      	addeq	r3, #32
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	553b      	strb	r3, [r7, r4]
 8008f34:	3401      	adds	r4, #1
 8008f36:	e7e8      	b.n	8008f0a <__strftime.isra.0+0x62e>
 8008f38:	6873      	ldr	r3, [r6, #4]
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	4a5c      	ldr	r2, [pc, #368]	; (80090b0 <__strftime.isra.0+0x7d4>)
 8008f3e:	68b3      	ldr	r3, [r6, #8]
 8008f40:	1b29      	subs	r1, r5, r4
 8008f42:	1938      	adds	r0, r7, r4
 8008f44:	f7ff f85e 	bl	8008004 <sniprintf>
 8008f48:	e686      	b.n	8008c58 <__strftime.isra.0+0x37c>
 8008f4a:	6a33      	ldr	r3, [r6, #32]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	db77      	blt.n	8009040 <__strftime.isra.0+0x764>
 8008f50:	f000 fa66 	bl	8009420 <__tz_lock>
 8008f54:	9b02      	ldr	r3, [sp, #8]
 8008f56:	b90b      	cbnz	r3, 8008f5c <__strftime.isra.0+0x680>
 8008f58:	f000 fa6e 	bl	8009438 <_tzset_unlocked>
 8008f5c:	f001 fb34 	bl	800a5c8 <__gettzinfo>
 8008f60:	6a33      	ldr	r3, [r6, #32]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	bfd4      	ite	le
 8008f66:	2200      	movle	r2, #0
 8008f68:	2201      	movgt	r2, #1
 8008f6a:	2328      	movs	r3, #40	; 0x28
 8008f6c:	fb02 3303 	mla	r3, r2, r3, r3
 8008f70:	58c3      	ldr	r3, [r0, r3]
 8008f72:	f1c3 0900 	rsb	r9, r3, #0
 8008f76:	f000 fa59 	bl	800942c <__tz_unlock>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	9302      	str	r3, [sp, #8]
 8008f7e:	6972      	ldr	r2, [r6, #20]
 8008f80:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8008f84:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8008f88:	f16c 0c00 	sbc.w	ip, ip, #0
 8008f8c:	f1bc 0f00 	cmp.w	ip, #0
 8008f90:	eba5 0104 	sub.w	r1, r5, r4
 8008f94:	eb07 0004 	add.w	r0, r7, r4
 8008f98:	da02      	bge.n	8008fa0 <__strftime.isra.0+0x6c4>
 8008f9a:	3303      	adds	r3, #3
 8008f9c:	f14c 0c00 	adc.w	ip, ip, #0
 8008fa0:	089b      	lsrs	r3, r3, #2
 8008fa2:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8008fa6:	f102 3aff 	add.w	sl, r2, #4294967295
 8008faa:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8008fae:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8008fb2:	fb9a fefe 	sdiv	lr, sl, lr
 8008fb6:	ebb3 030e 	subs.w	r3, r3, lr
 8008fba:	eb6c 7eee 	sbc.w	lr, ip, lr, asr #31
 8008fbe:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8008fc2:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8008fc6:	fb9a fcfc 	sdiv	ip, sl, ip
 8008fca:	eb13 030c 	adds.w	r3, r3, ip
 8008fce:	eb4e 7cec 	adc.w	ip, lr, ip, asr #31
 8008fd2:	3a46      	subs	r2, #70	; 0x46
 8008fd4:	f240 1e6d 	movw	lr, #365	; 0x16d
 8008fd8:	fb0e f202 	mul.w	r2, lr, r2
 8008fdc:	189b      	adds	r3, r3, r2
 8008fde:	eb4c 72e2 	adc.w	r2, ip, r2, asr #31
 8008fe2:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 8008fe6:	f04f 0a18 	mov.w	sl, #24
 8008fea:	eb13 030c 	adds.w	r3, r3, ip
 8008fee:	eb42 72ec 	adc.w	r2, r2, ip, asr #31
 8008ff2:	fba3 c30a 	umull	ip, r3, r3, sl
 8008ff6:	fb0a 3e02 	mla	lr, sl, r2, r3
 8008ffa:	68b3      	ldr	r3, [r6, #8]
 8008ffc:	eb1c 0203 	adds.w	r2, ip, r3
 8009000:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8009004:	eb4e 7ee3 	adc.w	lr, lr, r3, asr #31
 8009008:	fba2 320c 	umull	r3, r2, r2, ip
 800900c:	fb0c 220e 	mla	r2, ip, lr, r2
 8009010:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8009014:	eb13 030e 	adds.w	r3, r3, lr
 8009018:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800901c:	fba3 3e0c 	umull	r3, lr, r3, ip
 8009020:	fb0c ee02 	mla	lr, ip, r2, lr
 8009024:	6832      	ldr	r2, [r6, #0]
 8009026:	189b      	adds	r3, r3, r2
 8009028:	eb4e 7ee2 	adc.w	lr, lr, r2, asr #31
 800902c:	ebb3 0309 	subs.w	r3, r3, r9
 8009030:	eb6e 72e9 	sbc.w	r2, lr, r9, asr #31
 8009034:	e9cd 3200 	strd	r3, r2, [sp]
 8009038:	4a1e      	ldr	r2, [pc, #120]	; (80090b4 <__strftime.isra.0+0x7d8>)
 800903a:	f7fe ffe3 	bl	8008004 <sniprintf>
 800903e:	e60b      	b.n	8008c58 <__strftime.isra.0+0x37c>
 8009040:	f04f 0900 	mov.w	r9, #0
 8009044:	e79b      	b.n	8008f7e <__strftime.isra.0+0x6a2>
 8009046:	6833      	ldr	r3, [r6, #0]
 8009048:	e674      	b.n	8008d34 <__strftime.isra.0+0x458>
 800904a:	1e6b      	subs	r3, r5, #1
 800904c:	429c      	cmp	r4, r3
 800904e:	f4bf ac77 	bcs.w	8008940 <__strftime.isra.0+0x64>
 8009052:	2309      	movs	r3, #9
 8009054:	e744      	b.n	8008ee0 <__strftime.isra.0+0x604>
 8009056:	6833      	ldr	r3, [r6, #0]
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	6873      	ldr	r3, [r6, #4]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	4a16      	ldr	r2, [pc, #88]	; (80090b8 <__strftime.isra.0+0x7dc>)
 8009060:	68b3      	ldr	r3, [r6, #8]
 8009062:	e5ea      	b.n	8008c3a <__strftime.isra.0+0x35e>
 8009064:	1e6b      	subs	r3, r5, #1
 8009066:	429c      	cmp	r4, r3
 8009068:	f4bf ac6a 	bcs.w	8008940 <__strftime.isra.0+0x64>
 800906c:	69b3      	ldr	r3, [r6, #24]
 800906e:	1c62      	adds	r2, r4, #1
 8009070:	b91b      	cbnz	r3, 800907a <__strftime.isra.0+0x79e>
 8009072:	2337      	movs	r3, #55	; 0x37
 8009074:	553b      	strb	r3, [r7, r4]
 8009076:	4614      	mov	r4, r2
 8009078:	e534      	b.n	8008ae4 <__strftime.isra.0+0x208>
 800907a:	3330      	adds	r3, #48	; 0x30
 800907c:	e7fa      	b.n	8009074 <__strftime.isra.0+0x798>
 800907e:	69f3      	ldr	r3, [r6, #28]
 8009080:	69b2      	ldr	r2, [r6, #24]
 8009082:	3307      	adds	r3, #7
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	2207      	movs	r2, #7
 8009088:	fb93 f3f2 	sdiv	r3, r3, r2
 800908c:	e652      	b.n	8008d34 <__strftime.isra.0+0x458>
 800908e:	bf00      	nop
 8009090:	fffff894 	.word	0xfffff894
 8009094:	fffff895 	.word	0xfffff895
 8009098:	0800c080 	.word	0x0800c080
 800909c:	0800c061 	.word	0x0800c061
 80090a0:	0800c06f 	.word	0x0800c06f
 80090a4:	0800c084 	.word	0x0800c084
 80090a8:	0800c224 	.word	0x0800c224
 80090ac:	0800c35d 	.word	0x0800c35d
 80090b0:	0800c093 	.word	0x0800c093
 80090b4:	0800c089 	.word	0x0800c089
 80090b8:	0800c08e 	.word	0x0800c08e
 80090bc:	4630      	mov	r0, r6
 80090be:	f7ff fbbb 	bl	8008838 <iso_year_adjust>
 80090c2:	69b2      	ldr	r2, [r6, #24]
 80090c4:	b132      	cbz	r2, 80090d4 <__strftime.isra.0+0x7f8>
 80090c6:	3a01      	subs	r2, #1
 80090c8:	2800      	cmp	r0, #0
 80090ca:	69f3      	ldr	r3, [r6, #28]
 80090cc:	dc26      	bgt.n	800911c <__strftime.isra.0+0x840>
 80090ce:	d103      	bne.n	80090d8 <__strftime.isra.0+0x7fc>
 80090d0:	330a      	adds	r3, #10
 80090d2:	e7d7      	b.n	8009084 <__strftime.isra.0+0x7a8>
 80090d4:	2206      	movs	r2, #6
 80090d6:	e7f7      	b.n	80090c8 <__strftime.isra.0+0x7ec>
 80090d8:	1ad2      	subs	r2, r2, r3
 80090da:	6973      	ldr	r3, [r6, #20]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f240 716b 	movw	r1, #1899	; 0x76b
 80090e2:	bfa8      	it	ge
 80090e4:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 80090e8:	440b      	add	r3, r1
 80090ea:	0799      	lsls	r1, r3, #30
 80090ec:	d105      	bne.n	80090fa <__strftime.isra.0+0x81e>
 80090ee:	2064      	movs	r0, #100	; 0x64
 80090f0:	fb93 f1f0 	sdiv	r1, r3, r0
 80090f4:	fb00 3111 	mls	r1, r0, r1, r3
 80090f8:	b971      	cbnz	r1, 8009118 <__strftime.isra.0+0x83c>
 80090fa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80090fe:	fb93 f0f1 	sdiv	r0, r3, r1
 8009102:	fb01 3310 	mls	r3, r1, r0, r3
 8009106:	fab3 f383 	clz	r3, r3
 800910a:	095b      	lsrs	r3, r3, #5
 800910c:	1ad2      	subs	r2, r2, r3
 800910e:	2a05      	cmp	r2, #5
 8009110:	bfb4      	ite	lt
 8009112:	2335      	movlt	r3, #53	; 0x35
 8009114:	2334      	movge	r3, #52	; 0x34
 8009116:	e60d      	b.n	8008d34 <__strftime.isra.0+0x458>
 8009118:	2301      	movs	r3, #1
 800911a:	e7f7      	b.n	800910c <__strftime.isra.0+0x830>
 800911c:	2301      	movs	r3, #1
 800911e:	e609      	b.n	8008d34 <__strftime.isra.0+0x458>
 8009120:	1e6b      	subs	r3, r5, #1
 8009122:	429c      	cmp	r4, r3
 8009124:	f4bf ac0c 	bcs.w	8008940 <__strftime.isra.0+0x64>
 8009128:	69b3      	ldr	r3, [r6, #24]
 800912a:	3330      	adds	r3, #48	; 0x30
 800912c:	e6d8      	b.n	8008ee0 <__strftime.isra.0+0x604>
 800912e:	69b2      	ldr	r2, [r6, #24]
 8009130:	b11a      	cbz	r2, 800913a <__strftime.isra.0+0x85e>
 8009132:	3a01      	subs	r2, #1
 8009134:	69f3      	ldr	r3, [r6, #28]
 8009136:	3307      	adds	r3, #7
 8009138:	e7a4      	b.n	8009084 <__strftime.isra.0+0x7a8>
 800913a:	2206      	movs	r2, #6
 800913c:	e7fa      	b.n	8009134 <__strftime.isra.0+0x858>
 800913e:	6970      	ldr	r0, [r6, #20]
 8009140:	2800      	cmp	r0, #0
 8009142:	db05      	blt.n	8009150 <__strftime.isra.0+0x874>
 8009144:	2364      	movs	r3, #100	; 0x64
 8009146:	fb90 f2f3 	sdiv	r2, r0, r3
 800914a:	fb02 0313 	mls	r3, r2, r3, r0
 800914e:	e5f1      	b.n	8008d34 <__strftime.isra.0+0x458>
 8009150:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009154:	f000 fc33 	bl	80099be <abs>
 8009158:	e7f4      	b.n	8009144 <__strftime.isra.0+0x868>
 800915a:	6972      	ldr	r2, [r6, #20]
 800915c:	494c      	ldr	r1, [pc, #304]	; (8009290 <__strftime.isra.0+0x9b4>)
 800915e:	428a      	cmp	r2, r1
 8009160:	da0c      	bge.n	800917c <__strftime.isra.0+0x8a0>
 8009162:	202d      	movs	r0, #45	; 0x2d
 8009164:	f88d 0018 	strb.w	r0, [sp, #24]
 8009168:	eba1 0a02 	sub.w	sl, r1, r2
 800916c:	f1b9 0f00 	cmp.w	r9, #0
 8009170:	d001      	beq.n	8009176 <__strftime.isra.0+0x89a>
 8009172:	f109 39ff 	add.w	r9, r9, #4294967295
 8009176:	f10d 0219 	add.w	r2, sp, #25
 800917a:	e64b      	b.n	8008e14 <__strftime.isra.0+0x538>
 800917c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8009180:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8009184:	f47f ae45 	bne.w	8008e12 <__strftime.isra.0+0x536>
 8009188:	f242 720f 	movw	r2, #9999	; 0x270f
 800918c:	4592      	cmp	sl, r2
 800918e:	f67f ae40 	bls.w	8008e12 <__strftime.isra.0+0x536>
 8009192:	f88d b018 	strb.w	fp, [sp, #24]
 8009196:	e7e9      	b.n	800916c <__strftime.isra.0+0x890>
 8009198:	2330      	movs	r3, #48	; 0x30
 800919a:	1c90      	adds	r0, r2, #2
 800919c:	7053      	strb	r3, [r2, #1]
 800919e:	e640      	b.n	8008e22 <__strftime.isra.0+0x546>
 80091a0:	6a33      	ldr	r3, [r6, #32]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f6ff ac9e 	blt.w	8008ae4 <__strftime.isra.0+0x208>
 80091a8:	f000 f93a 	bl	8009420 <__tz_lock>
 80091ac:	9b02      	ldr	r3, [sp, #8]
 80091ae:	b90b      	cbnz	r3, 80091b4 <__strftime.isra.0+0x8d8>
 80091b0:	f000 f942 	bl	8009438 <_tzset_unlocked>
 80091b4:	f001 fa08 	bl	800a5c8 <__gettzinfo>
 80091b8:	6a33      	ldr	r3, [r6, #32]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bfd4      	ite	le
 80091be:	2200      	movle	r2, #0
 80091c0:	2201      	movgt	r2, #1
 80091c2:	2328      	movs	r3, #40	; 0x28
 80091c4:	fb02 3303 	mla	r3, r2, r3, r3
 80091c8:	eb07 0a04 	add.w	sl, r7, r4
 80091cc:	58c3      	ldr	r3, [r0, r3]
 80091ce:	f1c3 0900 	rsb	r9, r3, #0
 80091d2:	f000 f92b 	bl	800942c <__tz_unlock>
 80091d6:	233c      	movs	r3, #60	; 0x3c
 80091d8:	fb99 f0f3 	sdiv	r0, r9, r3
 80091dc:	f000 fcb5 	bl	8009b4a <labs>
 80091e0:	233c      	movs	r3, #60	; 0x3c
 80091e2:	eba5 0b04 	sub.w	fp, r5, r4
 80091e6:	fb90 f2f3 	sdiv	r2, r0, r3
 80091ea:	fb02 0013 	mls	r0, r2, r3, r0
 80091ee:	9000      	str	r0, [sp, #0]
 80091f0:	4a28      	ldr	r2, [pc, #160]	; (8009294 <__strftime.isra.0+0x9b8>)
 80091f2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80091f6:	4659      	mov	r1, fp
 80091f8:	4650      	mov	r0, sl
 80091fa:	fb99 f3f3 	sdiv	r3, r9, r3
 80091fe:	f7fe ff01 	bl	8008004 <sniprintf>
 8009202:	2800      	cmp	r0, #0
 8009204:	f6ff ab9c 	blt.w	8008940 <__strftime.isra.0+0x64>
 8009208:	4404      	add	r4, r0
 800920a:	42a5      	cmp	r5, r4
 800920c:	f67f ab98 	bls.w	8008940 <__strftime.isra.0+0x64>
 8009210:	2301      	movs	r3, #1
 8009212:	9302      	str	r3, [sp, #8]
 8009214:	e466      	b.n	8008ae4 <__strftime.isra.0+0x208>
 8009216:	6a33      	ldr	r3, [r6, #32]
 8009218:	2b00      	cmp	r3, #0
 800921a:	f6ff ac63 	blt.w	8008ae4 <__strftime.isra.0+0x208>
 800921e:	f000 f8ff 	bl	8009420 <__tz_lock>
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	b90b      	cbnz	r3, 800922a <__strftime.isra.0+0x94e>
 8009226:	f000 f907 	bl	8009438 <_tzset_unlocked>
 800922a:	6a33      	ldr	r3, [r6, #32]
 800922c:	4a1a      	ldr	r2, [pc, #104]	; (8009298 <__strftime.isra.0+0x9bc>)
 800922e:	2b00      	cmp	r3, #0
 8009230:	bfd4      	ite	le
 8009232:	2300      	movle	r3, #0
 8009234:	2301      	movgt	r3, #1
 8009236:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800923a:	4648      	mov	r0, r9
 800923c:	f7f6 ffd2 	bl	80001e4 <strlen>
 8009240:	f109 39ff 	add.w	r9, r9, #4294967295
 8009244:	4420      	add	r0, r4
 8009246:	1e6b      	subs	r3, r5, #1
 8009248:	42a0      	cmp	r0, r4
 800924a:	d102      	bne.n	8009252 <__strftime.isra.0+0x976>
 800924c:	f000 f8ee 	bl	800942c <__tz_unlock>
 8009250:	e7de      	b.n	8009210 <__strftime.isra.0+0x934>
 8009252:	42a3      	cmp	r3, r4
 8009254:	d904      	bls.n	8009260 <__strftime.isra.0+0x984>
 8009256:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800925a:	553a      	strb	r2, [r7, r4]
 800925c:	3401      	adds	r4, #1
 800925e:	e7f3      	b.n	8009248 <__strftime.isra.0+0x96c>
 8009260:	f000 f8e4 	bl	800942c <__tz_unlock>
 8009264:	f7ff bb6c 	b.w	8008940 <__strftime.isra.0+0x64>
 8009268:	1e6b      	subs	r3, r5, #1
 800926a:	429c      	cmp	r4, r3
 800926c:	f4bf ab68 	bcs.w	8008940 <__strftime.isra.0+0x64>
 8009270:	2325      	movs	r3, #37	; 0x25
 8009272:	e635      	b.n	8008ee0 <__strftime.isra.0+0x604>
 8009274:	b10d      	cbz	r5, 800927a <__strftime.isra.0+0x99e>
 8009276:	2300      	movs	r3, #0
 8009278:	553b      	strb	r3, [r7, r4]
 800927a:	4620      	mov	r0, r4
 800927c:	b00f      	add	sp, #60	; 0x3c
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009282:	222d      	movs	r2, #45	; 0x2d
 8009284:	f88d 2018 	strb.w	r2, [sp, #24]
 8009288:	e770      	b.n	800916c <__strftime.isra.0+0x890>
 800928a:	465a      	mov	r2, fp
 800928c:	e7fa      	b.n	8009284 <__strftime.isra.0+0x9a8>
 800928e:	bf00      	nop
 8009290:	fffff894 	.word	0xfffff894
 8009294:	0800c09d 	.word	0x0800c09d
 8009298:	2000001c 	.word	0x2000001c

0800929c <strftime>:
 800929c:	f7ff bb1e 	b.w	80088dc <__strftime.isra.0>

080092a0 <time>:
 80092a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092a2:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <time+0x30>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	4669      	mov	r1, sp
 80092a8:	4604      	mov	r4, r0
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	f000 fafa 	bl	80098a4 <_gettimeofday_r>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	bfbe      	ittt	lt
 80092b4:	f04f 32ff 	movlt.w	r2, #4294967295
 80092b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80092bc:	e9cd 2300 	strdlt	r2, r3, [sp]
 80092c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092c4:	b10c      	cbz	r4, 80092ca <time+0x2a>
 80092c6:	e9c4 0100 	strd	r0, r1, [r4]
 80092ca:	b004      	add	sp, #16
 80092cc:	bd10      	pop	{r4, pc}
 80092ce:	bf00      	nop
 80092d0:	20000070 	.word	0x20000070

080092d4 <__tzcalc_limits>:
 80092d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	4605      	mov	r5, r0
 80092da:	f001 f975 	bl	800a5c8 <__gettzinfo>
 80092de:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80092e2:	429d      	cmp	r5, r3
 80092e4:	f340 8095 	ble.w	8009412 <__tzcalc_limits+0x13e>
 80092e8:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80092ec:	18ac      	adds	r4, r5, r2
 80092ee:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80092f2:	f240 126d 	movw	r2, #365	; 0x16d
 80092f6:	10a4      	asrs	r4, r4, #2
 80092f8:	fb02 4403 	mla	r4, r2, r3, r4
 80092fc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009300:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8009304:	fb93 f3f2 	sdiv	r3, r3, r2
 8009308:	441c      	add	r4, r3
 800930a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800930e:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8009312:	fb95 fcf3 	sdiv	ip, r5, r3
 8009316:	fb03 5c1c 	mls	ip, r3, ip, r5
 800931a:	186a      	adds	r2, r5, r1
 800931c:	fabc f68c 	clz	r6, ip
 8009320:	fbb2 f2f3 	udiv	r2, r2, r3
 8009324:	f005 0303 	and.w	r3, r5, #3
 8009328:	4414      	add	r4, r2
 800932a:	2264      	movs	r2, #100	; 0x64
 800932c:	6045      	str	r5, [r0, #4]
 800932e:	fb95 f7f2 	sdiv	r7, r5, r2
 8009332:	0976      	lsrs	r6, r6, #5
 8009334:	fb02 5717 	mls	r7, r2, r7, r5
 8009338:	4601      	mov	r1, r0
 800933a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	f04f 0a07 	mov.w	sl, #7
 8009344:	7a0d      	ldrb	r5, [r1, #8]
 8009346:	694b      	ldr	r3, [r1, #20]
 8009348:	2d4a      	cmp	r5, #74	; 0x4a
 800934a:	d12b      	bne.n	80093a4 <__tzcalc_limits+0xd0>
 800934c:	9a00      	ldr	r2, [sp, #0]
 800934e:	18e5      	adds	r5, r4, r3
 8009350:	b902      	cbnz	r2, 8009354 <__tzcalc_limits+0x80>
 8009352:	b917      	cbnz	r7, 800935a <__tzcalc_limits+0x86>
 8009354:	f1bc 0f00 	cmp.w	ip, #0
 8009358:	d122      	bne.n	80093a0 <__tzcalc_limits+0xcc>
 800935a:	2b3b      	cmp	r3, #59	; 0x3b
 800935c:	bfd4      	ite	le
 800935e:	2300      	movle	r3, #0
 8009360:	2301      	movgt	r3, #1
 8009362:	442b      	add	r3, r5
 8009364:	3b01      	subs	r3, #1
 8009366:	698d      	ldr	r5, [r1, #24]
 8009368:	4a2b      	ldr	r2, [pc, #172]	; (8009418 <__tzcalc_limits+0x144>)
 800936a:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800936e:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8009372:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009374:	18ed      	adds	r5, r5, r3
 8009376:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800937a:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800937e:	3128      	adds	r1, #40	; 0x28
 8009380:	458b      	cmp	fp, r1
 8009382:	d1df      	bne.n	8009344 <__tzcalc_limits+0x70>
 8009384:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8009388:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 800938c:	428c      	cmp	r4, r1
 800938e:	4193      	sbcs	r3, r2
 8009390:	bfb4      	ite	lt
 8009392:	2301      	movlt	r3, #1
 8009394:	2300      	movge	r3, #0
 8009396:	6003      	str	r3, [r0, #0]
 8009398:	2001      	movs	r0, #1
 800939a:	b003      	add	sp, #12
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a0:	2300      	movs	r3, #0
 80093a2:	e7de      	b.n	8009362 <__tzcalc_limits+0x8e>
 80093a4:	2d44      	cmp	r5, #68	; 0x44
 80093a6:	d101      	bne.n	80093ac <__tzcalc_limits+0xd8>
 80093a8:	4423      	add	r3, r4
 80093aa:	e7dc      	b.n	8009366 <__tzcalc_limits+0x92>
 80093ac:	9a00      	ldr	r2, [sp, #0]
 80093ae:	bb52      	cbnz	r2, 8009406 <__tzcalc_limits+0x132>
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	bf0c      	ite	eq
 80093b4:	4635      	moveq	r5, r6
 80093b6:	2501      	movne	r5, #1
 80093b8:	68ca      	ldr	r2, [r1, #12]
 80093ba:	9201      	str	r2, [sp, #4]
 80093bc:	4a17      	ldr	r2, [pc, #92]	; (800941c <__tzcalc_limits+0x148>)
 80093be:	f04f 0930 	mov.w	r9, #48	; 0x30
 80093c2:	fb09 2505 	mla	r5, r9, r5, r2
 80093c6:	46a6      	mov	lr, r4
 80093c8:	f04f 0800 	mov.w	r8, #0
 80093cc:	3d04      	subs	r5, #4
 80093ce:	9a01      	ldr	r2, [sp, #4]
 80093d0:	f108 0801 	add.w	r8, r8, #1
 80093d4:	4542      	cmp	r2, r8
 80093d6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80093da:	dc16      	bgt.n	800940a <__tzcalc_limits+0x136>
 80093dc:	f10e 0504 	add.w	r5, lr, #4
 80093e0:	fb95 f8fa 	sdiv	r8, r5, sl
 80093e4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80093e8:	eba5 0508 	sub.w	r5, r5, r8
 80093ec:	1b5d      	subs	r5, r3, r5
 80093ee:	690b      	ldr	r3, [r1, #16]
 80093f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80093f4:	bf48      	it	mi
 80093f6:	3507      	addmi	r5, #7
 80093f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80093fc:	442b      	add	r3, r5
 80093fe:	454b      	cmp	r3, r9
 8009400:	da05      	bge.n	800940e <__tzcalc_limits+0x13a>
 8009402:	4473      	add	r3, lr
 8009404:	e7af      	b.n	8009366 <__tzcalc_limits+0x92>
 8009406:	4635      	mov	r5, r6
 8009408:	e7d6      	b.n	80093b8 <__tzcalc_limits+0xe4>
 800940a:	44ce      	add	lr, r9
 800940c:	e7df      	b.n	80093ce <__tzcalc_limits+0xfa>
 800940e:	3b07      	subs	r3, #7
 8009410:	e7f5      	b.n	80093fe <__tzcalc_limits+0x12a>
 8009412:	2000      	movs	r0, #0
 8009414:	e7c1      	b.n	800939a <__tzcalc_limits+0xc6>
 8009416:	bf00      	nop
 8009418:	00015180 	.word	0x00015180
 800941c:	0800bff0 	.word	0x0800bff0

08009420 <__tz_lock>:
 8009420:	4801      	ldr	r0, [pc, #4]	; (8009428 <__tz_lock+0x8>)
 8009422:	f000 bab2 	b.w	800998a <__retarget_lock_acquire>
 8009426:	bf00      	nop
 8009428:	200003df 	.word	0x200003df

0800942c <__tz_unlock>:
 800942c:	4801      	ldr	r0, [pc, #4]	; (8009434 <__tz_unlock+0x8>)
 800942e:	f000 baae 	b.w	800998e <__retarget_lock_release>
 8009432:	bf00      	nop
 8009434:	200003df 	.word	0x200003df

08009438 <_tzset_unlocked>:
 8009438:	4b01      	ldr	r3, [pc, #4]	; (8009440 <_tzset_unlocked+0x8>)
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	f000 b802 	b.w	8009444 <_tzset_unlocked_r>
 8009440:	20000070 	.word	0x20000070

08009444 <_tzset_unlocked_r>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	b08d      	sub	sp, #52	; 0x34
 800944a:	4607      	mov	r7, r0
 800944c:	f001 f8bc 	bl	800a5c8 <__gettzinfo>
 8009450:	49bb      	ldr	r1, [pc, #748]	; (8009740 <_tzset_unlocked_r+0x2fc>)
 8009452:	4dbc      	ldr	r5, [pc, #752]	; (8009744 <_tzset_unlocked_r+0x300>)
 8009454:	4604      	mov	r4, r0
 8009456:	4638      	mov	r0, r7
 8009458:	f000 fb70 	bl	8009b3c <_getenv_r>
 800945c:	4606      	mov	r6, r0
 800945e:	bb10      	cbnz	r0, 80094a6 <_tzset_unlocked_r+0x62>
 8009460:	4bb9      	ldr	r3, [pc, #740]	; (8009748 <_tzset_unlocked_r+0x304>)
 8009462:	4aba      	ldr	r2, [pc, #744]	; (800974c <_tzset_unlocked_r+0x308>)
 8009464:	6018      	str	r0, [r3, #0]
 8009466:	4bba      	ldr	r3, [pc, #744]	; (8009750 <_tzset_unlocked_r+0x30c>)
 8009468:	62a0      	str	r0, [r4, #40]	; 0x28
 800946a:	6018      	str	r0, [r3, #0]
 800946c:	4bb9      	ldr	r3, [pc, #740]	; (8009754 <_tzset_unlocked_r+0x310>)
 800946e:	6520      	str	r0, [r4, #80]	; 0x50
 8009470:	e9c3 2200 	strd	r2, r2, [r3]
 8009474:	214a      	movs	r1, #74	; 0x4a
 8009476:	2200      	movs	r2, #0
 8009478:	2300      	movs	r3, #0
 800947a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800947e:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8009482:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 8009486:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800948a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800948e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009492:	6828      	ldr	r0, [r5, #0]
 8009494:	7221      	strb	r1, [r4, #8]
 8009496:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800949a:	f000 fb63 	bl	8009b64 <free>
 800949e:	602e      	str	r6, [r5, #0]
 80094a0:	b00d      	add	sp, #52	; 0x34
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	6829      	ldr	r1, [r5, #0]
 80094a8:	2900      	cmp	r1, #0
 80094aa:	f040 808e 	bne.w	80095ca <_tzset_unlocked_r+0x186>
 80094ae:	6828      	ldr	r0, [r5, #0]
 80094b0:	f000 fb58 	bl	8009b64 <free>
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7f6 fe95 	bl	80001e4 <strlen>
 80094ba:	1c41      	adds	r1, r0, #1
 80094bc:	4638      	mov	r0, r7
 80094be:	f000 fb79 	bl	8009bb4 <_malloc_r>
 80094c2:	6028      	str	r0, [r5, #0]
 80094c4:	2800      	cmp	r0, #0
 80094c6:	f040 8086 	bne.w	80095d6 <_tzset_unlocked_r+0x192>
 80094ca:	4aa1      	ldr	r2, [pc, #644]	; (8009750 <_tzset_unlocked_r+0x30c>)
 80094cc:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8009754 <_tzset_unlocked_r+0x310>
 80094d0:	f8df a274 	ldr.w	sl, [pc, #628]	; 8009748 <_tzset_unlocked_r+0x304>
 80094d4:	2300      	movs	r3, #0
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	4a9f      	ldr	r2, [pc, #636]	; (8009758 <_tzset_unlocked_r+0x314>)
 80094da:	f8ca 3000 	str.w	r3, [sl]
 80094de:	2000      	movs	r0, #0
 80094e0:	2100      	movs	r1, #0
 80094e2:	e9c8 2200 	strd	r2, r2, [r8]
 80094e6:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80094ea:	e9c4 3305 	strd	r3, r3, [r4, #20]
 80094ee:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80094f2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80094f6:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 80094fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80094fe:	224a      	movs	r2, #74	; 0x4a
 8009500:	7222      	strb	r2, [r4, #8]
 8009502:	62a3      	str	r3, [r4, #40]	; 0x28
 8009504:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8009508:	6523      	str	r3, [r4, #80]	; 0x50
 800950a:	7833      	ldrb	r3, [r6, #0]
 800950c:	2b3a      	cmp	r3, #58	; 0x3a
 800950e:	bf08      	it	eq
 8009510:	3601      	addeq	r6, #1
 8009512:	7833      	ldrb	r3, [r6, #0]
 8009514:	2b3c      	cmp	r3, #60	; 0x3c
 8009516:	d162      	bne.n	80095de <_tzset_unlocked_r+0x19a>
 8009518:	1c75      	adds	r5, r6, #1
 800951a:	4a90      	ldr	r2, [pc, #576]	; (800975c <_tzset_unlocked_r+0x318>)
 800951c:	4990      	ldr	r1, [pc, #576]	; (8009760 <_tzset_unlocked_r+0x31c>)
 800951e:	ab0a      	add	r3, sp, #40	; 0x28
 8009520:	4628      	mov	r0, r5
 8009522:	f000 fff9 	bl	800a518 <siscanf>
 8009526:	2800      	cmp	r0, #0
 8009528:	ddba      	ble.n	80094a0 <_tzset_unlocked_r+0x5c>
 800952a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800952c:	1eda      	subs	r2, r3, #3
 800952e:	2a07      	cmp	r2, #7
 8009530:	d8b6      	bhi.n	80094a0 <_tzset_unlocked_r+0x5c>
 8009532:	5ceb      	ldrb	r3, [r5, r3]
 8009534:	2b3e      	cmp	r3, #62	; 0x3e
 8009536:	d1b3      	bne.n	80094a0 <_tzset_unlocked_r+0x5c>
 8009538:	3602      	adds	r6, #2
 800953a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800953c:	18f5      	adds	r5, r6, r3
 800953e:	5cf3      	ldrb	r3, [r6, r3]
 8009540:	2b2d      	cmp	r3, #45	; 0x2d
 8009542:	d15a      	bne.n	80095fa <_tzset_unlocked_r+0x1b6>
 8009544:	3501      	adds	r5, #1
 8009546:	f04f 39ff 	mov.w	r9, #4294967295
 800954a:	2300      	movs	r3, #0
 800954c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009550:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009554:	af08      	add	r7, sp, #32
 8009556:	ab0a      	add	r3, sp, #40	; 0x28
 8009558:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800955c:	9303      	str	r3, [sp, #12]
 800955e:	f10d 031e 	add.w	r3, sp, #30
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	497f      	ldr	r1, [pc, #508]	; (8009764 <_tzset_unlocked_r+0x320>)
 8009566:	ab0a      	add	r3, sp, #40	; 0x28
 8009568:	aa07      	add	r2, sp, #28
 800956a:	4628      	mov	r0, r5
 800956c:	f000 ffd4 	bl	800a518 <siscanf>
 8009570:	2800      	cmp	r0, #0
 8009572:	dd95      	ble.n	80094a0 <_tzset_unlocked_r+0x5c>
 8009574:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009578:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800957c:	223c      	movs	r2, #60	; 0x3c
 800957e:	fb02 6603 	mla	r6, r2, r3, r6
 8009582:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009586:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800958a:	fb02 6603 	mla	r6, r2, r3, r6
 800958e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009590:	fb09 f606 	mul.w	r6, r9, r6
 8009594:	eb05 0903 	add.w	r9, r5, r3
 8009598:	5ceb      	ldrb	r3, [r5, r3]
 800959a:	2b3c      	cmp	r3, #60	; 0x3c
 800959c:	f040 80ec 	bne.w	8009778 <_tzset_unlocked_r+0x334>
 80095a0:	f109 0501 	add.w	r5, r9, #1
 80095a4:	4a70      	ldr	r2, [pc, #448]	; (8009768 <_tzset_unlocked_r+0x324>)
 80095a6:	496e      	ldr	r1, [pc, #440]	; (8009760 <_tzset_unlocked_r+0x31c>)
 80095a8:	ab0a      	add	r3, sp, #40	; 0x28
 80095aa:	4628      	mov	r0, r5
 80095ac:	f000 ffb4 	bl	800a518 <siscanf>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	dc28      	bgt.n	8009606 <_tzset_unlocked_r+0x1c2>
 80095b4:	f899 3001 	ldrb.w	r3, [r9, #1]
 80095b8:	2b3e      	cmp	r3, #62	; 0x3e
 80095ba:	d124      	bne.n	8009606 <_tzset_unlocked_r+0x1c2>
 80095bc:	4b67      	ldr	r3, [pc, #412]	; (800975c <_tzset_unlocked_r+0x318>)
 80095be:	62a6      	str	r6, [r4, #40]	; 0x28
 80095c0:	e9c8 3300 	strd	r3, r3, [r8]
 80095c4:	f8ca 6000 	str.w	r6, [sl]
 80095c8:	e76a      	b.n	80094a0 <_tzset_unlocked_r+0x5c>
 80095ca:	f7f6 fe01 	bl	80001d0 <strcmp>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f47f af6d 	bne.w	80094ae <_tzset_unlocked_r+0x6a>
 80095d4:	e764      	b.n	80094a0 <_tzset_unlocked_r+0x5c>
 80095d6:	4631      	mov	r1, r6
 80095d8:	f000 f9db 	bl	8009992 <strcpy>
 80095dc:	e775      	b.n	80094ca <_tzset_unlocked_r+0x86>
 80095de:	4a5f      	ldr	r2, [pc, #380]	; (800975c <_tzset_unlocked_r+0x318>)
 80095e0:	4962      	ldr	r1, [pc, #392]	; (800976c <_tzset_unlocked_r+0x328>)
 80095e2:	ab0a      	add	r3, sp, #40	; 0x28
 80095e4:	4630      	mov	r0, r6
 80095e6:	f000 ff97 	bl	800a518 <siscanf>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	f77f af58 	ble.w	80094a0 <_tzset_unlocked_r+0x5c>
 80095f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f2:	3b03      	subs	r3, #3
 80095f4:	2b07      	cmp	r3, #7
 80095f6:	d9a0      	bls.n	800953a <_tzset_unlocked_r+0xf6>
 80095f8:	e752      	b.n	80094a0 <_tzset_unlocked_r+0x5c>
 80095fa:	2b2b      	cmp	r3, #43	; 0x2b
 80095fc:	bf08      	it	eq
 80095fe:	3501      	addeq	r5, #1
 8009600:	f04f 0901 	mov.w	r9, #1
 8009604:	e7a1      	b.n	800954a <_tzset_unlocked_r+0x106>
 8009606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009608:	1eda      	subs	r2, r3, #3
 800960a:	2a07      	cmp	r2, #7
 800960c:	f63f af48 	bhi.w	80094a0 <_tzset_unlocked_r+0x5c>
 8009610:	5ceb      	ldrb	r3, [r5, r3]
 8009612:	2b3e      	cmp	r3, #62	; 0x3e
 8009614:	f47f af44 	bne.w	80094a0 <_tzset_unlocked_r+0x5c>
 8009618:	f109 0902 	add.w	r9, r9, #2
 800961c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800961e:	eb09 0503 	add.w	r5, r9, r3
 8009622:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009626:	2b2d      	cmp	r3, #45	; 0x2d
 8009628:	f040 80b5 	bne.w	8009796 <_tzset_unlocked_r+0x352>
 800962c:	3501      	adds	r5, #1
 800962e:	f04f 39ff 	mov.w	r9, #4294967295
 8009632:	2300      	movs	r3, #0
 8009634:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009638:	f8ad 301e 	strh.w	r3, [sp, #30]
 800963c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009640:	930a      	str	r3, [sp, #40]	; 0x28
 8009642:	ab0a      	add	r3, sp, #40	; 0x28
 8009644:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	f10d 031e 	add.w	r3, sp, #30
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	4944      	ldr	r1, [pc, #272]	; (8009764 <_tzset_unlocked_r+0x320>)
 8009652:	ab0a      	add	r3, sp, #40	; 0x28
 8009654:	aa07      	add	r2, sp, #28
 8009656:	4628      	mov	r0, r5
 8009658:	f000 ff5e 	bl	800a518 <siscanf>
 800965c:	2800      	cmp	r0, #0
 800965e:	f300 80a0 	bgt.w	80097a2 <_tzset_unlocked_r+0x35e>
 8009662:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 8009666:	9304      	str	r3, [sp, #16]
 8009668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800966a:	4627      	mov	r7, r4
 800966c:	441d      	add	r5, r3
 800966e:	f04f 0b00 	mov.w	fp, #0
 8009672:	782b      	ldrb	r3, [r5, #0]
 8009674:	2b2c      	cmp	r3, #44	; 0x2c
 8009676:	bf08      	it	eq
 8009678:	3501      	addeq	r5, #1
 800967a:	f895 9000 	ldrb.w	r9, [r5]
 800967e:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 8009682:	f040 80a1 	bne.w	80097c8 <_tzset_unlocked_r+0x384>
 8009686:	ab0a      	add	r3, sp, #40	; 0x28
 8009688:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800968c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009690:	aa09      	add	r2, sp, #36	; 0x24
 8009692:	9200      	str	r2, [sp, #0]
 8009694:	4936      	ldr	r1, [pc, #216]	; (8009770 <_tzset_unlocked_r+0x32c>)
 8009696:	9303      	str	r3, [sp, #12]
 8009698:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800969c:	4628      	mov	r0, r5
 800969e:	f000 ff3b 	bl	800a518 <siscanf>
 80096a2:	2803      	cmp	r0, #3
 80096a4:	f47f aefc 	bne.w	80094a0 <_tzset_unlocked_r+0x5c>
 80096a8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80096ac:	1e4b      	subs	r3, r1, #1
 80096ae:	2b0b      	cmp	r3, #11
 80096b0:	f63f aef6 	bhi.w	80094a0 <_tzset_unlocked_r+0x5c>
 80096b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80096b8:	1e53      	subs	r3, r2, #1
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	f63f aef0 	bhi.w	80094a0 <_tzset_unlocked_r+0x5c>
 80096c0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80096c4:	2b06      	cmp	r3, #6
 80096c6:	f63f aeeb 	bhi.w	80094a0 <_tzset_unlocked_r+0x5c>
 80096ca:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80096ce:	f887 9008 	strb.w	r9, [r7, #8]
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d6:	eb05 0903 	add.w	r9, r5, r3
 80096da:	2500      	movs	r5, #0
 80096dc:	2302      	movs	r3, #2
 80096de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80096e2:	f8ad 501e 	strh.w	r5, [sp, #30]
 80096e6:	f8ad 5020 	strh.w	r5, [sp, #32]
 80096ea:	950a      	str	r5, [sp, #40]	; 0x28
 80096ec:	f899 3000 	ldrb.w	r3, [r9]
 80096f0:	2b2f      	cmp	r3, #47	; 0x2f
 80096f2:	f040 8095 	bne.w	8009820 <_tzset_unlocked_r+0x3dc>
 80096f6:	ab0a      	add	r3, sp, #40	; 0x28
 80096f8:	aa08      	add	r2, sp, #32
 80096fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80096fe:	f10d 021e 	add.w	r2, sp, #30
 8009702:	9200      	str	r2, [sp, #0]
 8009704:	491b      	ldr	r1, [pc, #108]	; (8009774 <_tzset_unlocked_r+0x330>)
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	aa07      	add	r2, sp, #28
 800970a:	4648      	mov	r0, r9
 800970c:	f000 ff04 	bl	800a518 <siscanf>
 8009710:	42a8      	cmp	r0, r5
 8009712:	f300 8085 	bgt.w	8009820 <_tzset_unlocked_r+0x3dc>
 8009716:	214a      	movs	r1, #74	; 0x4a
 8009718:	2200      	movs	r2, #0
 800971a:	2300      	movs	r3, #0
 800971c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8009720:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009724:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800972c:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 8009730:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009734:	7221      	strb	r1, [r4, #8]
 8009736:	62a5      	str	r5, [r4, #40]	; 0x28
 8009738:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800973c:	6525      	str	r5, [r4, #80]	; 0x50
 800973e:	e6af      	b.n	80094a0 <_tzset_unlocked_r+0x5c>
 8009740:	0800c0a9 	.word	0x0800c0a9
 8009744:	200003cc 	.word	0x200003cc
 8009748:	200003d4 	.word	0x200003d4
 800974c:	0800c0ac 	.word	0x0800c0ac
 8009750:	200003d0 	.word	0x200003d0
 8009754:	2000001c 	.word	0x2000001c
 8009758:	0800c35b 	.word	0x0800c35b
 800975c:	200003c0 	.word	0x200003c0
 8009760:	0800c0b0 	.word	0x0800c0b0
 8009764:	0800c0e5 	.word	0x0800c0e5
 8009768:	200003b4 	.word	0x200003b4
 800976c:	0800c0c3 	.word	0x0800c0c3
 8009770:	0800c0d1 	.word	0x0800c0d1
 8009774:	0800c0e4 	.word	0x0800c0e4
 8009778:	4a3e      	ldr	r2, [pc, #248]	; (8009874 <_tzset_unlocked_r+0x430>)
 800977a:	493f      	ldr	r1, [pc, #252]	; (8009878 <_tzset_unlocked_r+0x434>)
 800977c:	ab0a      	add	r3, sp, #40	; 0x28
 800977e:	4648      	mov	r0, r9
 8009780:	f000 feca 	bl	800a518 <siscanf>
 8009784:	2800      	cmp	r0, #0
 8009786:	f77f af19 	ble.w	80095bc <_tzset_unlocked_r+0x178>
 800978a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800978c:	3b03      	subs	r3, #3
 800978e:	2b07      	cmp	r3, #7
 8009790:	f67f af44 	bls.w	800961c <_tzset_unlocked_r+0x1d8>
 8009794:	e684      	b.n	80094a0 <_tzset_unlocked_r+0x5c>
 8009796:	2b2b      	cmp	r3, #43	; 0x2b
 8009798:	bf08      	it	eq
 800979a:	3501      	addeq	r5, #1
 800979c:	f04f 0901 	mov.w	r9, #1
 80097a0:	e747      	b.n	8009632 <_tzset_unlocked_r+0x1ee>
 80097a2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80097a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80097aa:	213c      	movs	r1, #60	; 0x3c
 80097ac:	fb01 3302 	mla	r3, r1, r2, r3
 80097b0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80097b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80097b8:	fb01 3302 	mla	r3, r1, r2, r3
 80097bc:	fb09 f303 	mul.w	r3, r9, r3
 80097c0:	e751      	b.n	8009666 <_tzset_unlocked_r+0x222>
 80097c2:	f04f 0b01 	mov.w	fp, #1
 80097c6:	e754      	b.n	8009672 <_tzset_unlocked_r+0x22e>
 80097c8:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 80097cc:	bf06      	itte	eq
 80097ce:	3501      	addeq	r5, #1
 80097d0:	464b      	moveq	r3, r9
 80097d2:	2344      	movne	r3, #68	; 0x44
 80097d4:	220a      	movs	r2, #10
 80097d6:	a90b      	add	r1, sp, #44	; 0x2c
 80097d8:	4628      	mov	r0, r5
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	f000 faea 	bl	8009db4 <strtoul>
 80097e0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80097e4:	9b05      	ldr	r3, [sp, #20]
 80097e6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80097ea:	45a9      	cmp	r9, r5
 80097ec:	d114      	bne.n	8009818 <_tzset_unlocked_r+0x3d4>
 80097ee:	234d      	movs	r3, #77	; 0x4d
 80097f0:	f1bb 0f00 	cmp.w	fp, #0
 80097f4:	d107      	bne.n	8009806 <_tzset_unlocked_r+0x3c2>
 80097f6:	7223      	strb	r3, [r4, #8]
 80097f8:	2103      	movs	r1, #3
 80097fa:	2302      	movs	r3, #2
 80097fc:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8009800:	f8c4 b014 	str.w	fp, [r4, #20]
 8009804:	e769      	b.n	80096da <_tzset_unlocked_r+0x296>
 8009806:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800980a:	220b      	movs	r2, #11
 800980c:	2301      	movs	r3, #1
 800980e:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 8009812:	2300      	movs	r3, #0
 8009814:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009816:	e760      	b.n	80096da <_tzset_unlocked_r+0x296>
 8009818:	b280      	uxth	r0, r0
 800981a:	723b      	strb	r3, [r7, #8]
 800981c:	6178      	str	r0, [r7, #20]
 800981e:	e75c      	b.n	80096da <_tzset_unlocked_r+0x296>
 8009820:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009824:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009828:	213c      	movs	r1, #60	; 0x3c
 800982a:	fb01 3302 	mla	r3, r1, r2, r3
 800982e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009832:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009836:	fb01 3302 	mla	r3, r1, r2, r3
 800983a:	61bb      	str	r3, [r7, #24]
 800983c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800983e:	3728      	adds	r7, #40	; 0x28
 8009840:	444d      	add	r5, r9
 8009842:	f1bb 0f00 	cmp.w	fp, #0
 8009846:	d0bc      	beq.n	80097c2 <_tzset_unlocked_r+0x37e>
 8009848:	9b04      	ldr	r3, [sp, #16]
 800984a:	6523      	str	r3, [r4, #80]	; 0x50
 800984c:	4b0b      	ldr	r3, [pc, #44]	; (800987c <_tzset_unlocked_r+0x438>)
 800984e:	f8c8 3000 	str.w	r3, [r8]
 8009852:	6860      	ldr	r0, [r4, #4]
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <_tzset_unlocked_r+0x430>)
 8009856:	62a6      	str	r6, [r4, #40]	; 0x28
 8009858:	f8c8 3004 	str.w	r3, [r8, #4]
 800985c:	f7ff fd3a 	bl	80092d4 <__tzcalc_limits>
 8009860:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009862:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009864:	f8ca 2000 	str.w	r2, [sl]
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	4a05      	ldr	r2, [pc, #20]	; (8009880 <_tzset_unlocked_r+0x43c>)
 800986c:	bf18      	it	ne
 800986e:	2301      	movne	r3, #1
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	e615      	b.n	80094a0 <_tzset_unlocked_r+0x5c>
 8009874:	200003b4 	.word	0x200003b4
 8009878:	0800c0c3 	.word	0x0800c0c3
 800987c:	200003c0 	.word	0x200003c0
 8009880:	200003d0 	.word	0x200003d0

08009884 <_close_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4d06      	ldr	r5, [pc, #24]	; (80098a0 <_close_r+0x1c>)
 8009888:	2300      	movs	r3, #0
 800988a:	4604      	mov	r4, r0
 800988c:	4608      	mov	r0, r1
 800988e:	602b      	str	r3, [r5, #0]
 8009890:	f7f9 ff04 	bl	800369c <_close>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_close_r+0x1a>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_close_r+0x1a>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	200003d8 	.word	0x200003d8

080098a4 <_gettimeofday_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4d07      	ldr	r5, [pc, #28]	; (80098c4 <_gettimeofday_r+0x20>)
 80098a8:	2300      	movs	r3, #0
 80098aa:	4604      	mov	r4, r0
 80098ac:	4608      	mov	r0, r1
 80098ae:	4611      	mov	r1, r2
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	f7f9 fcdb 	bl	800326c <_gettimeofday>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	d102      	bne.n	80098c0 <_gettimeofday_r+0x1c>
 80098ba:	682b      	ldr	r3, [r5, #0]
 80098bc:	b103      	cbz	r3, 80098c0 <_gettimeofday_r+0x1c>
 80098be:	6023      	str	r3, [r4, #0]
 80098c0:	bd38      	pop	{r3, r4, r5, pc}
 80098c2:	bf00      	nop
 80098c4:	200003d8 	.word	0x200003d8

080098c8 <_lseek_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4d07      	ldr	r5, [pc, #28]	; (80098e8 <_lseek_r+0x20>)
 80098cc:	4604      	mov	r4, r0
 80098ce:	4608      	mov	r0, r1
 80098d0:	4611      	mov	r1, r2
 80098d2:	2200      	movs	r2, #0
 80098d4:	602a      	str	r2, [r5, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	f7f9 ff07 	bl	80036ea <_lseek>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_lseek_r+0x1e>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_lseek_r+0x1e>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	200003d8 	.word	0x200003d8

080098ec <_read_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d07      	ldr	r5, [pc, #28]	; (800990c <_read_r+0x20>)
 80098f0:	4604      	mov	r4, r0
 80098f2:	4608      	mov	r0, r1
 80098f4:	4611      	mov	r1, r2
 80098f6:	2200      	movs	r2, #0
 80098f8:	602a      	str	r2, [r5, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	f7f9 fe95 	bl	800362a <_read>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_read_r+0x1e>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b103      	cbz	r3, 800990a <_read_r+0x1e>
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	200003d8 	.word	0x200003d8

08009910 <_write_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	; (8009930 <_write_r+0x20>)
 8009914:	4604      	mov	r4, r0
 8009916:	4608      	mov	r0, r1
 8009918:	4611      	mov	r1, r2
 800991a:	2200      	movs	r2, #0
 800991c:	602a      	str	r2, [r5, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	f7f9 fea0 	bl	8003664 <_write>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d102      	bne.n	800992e <_write_r+0x1e>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	b103      	cbz	r3, 800992e <_write_r+0x1e>
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	200003d8 	.word	0x200003d8

08009934 <__errno>:
 8009934:	4b01      	ldr	r3, [pc, #4]	; (800993c <__errno+0x8>)
 8009936:	6818      	ldr	r0, [r3, #0]
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	20000070 	.word	0x20000070

08009940 <__libc_init_array>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	4d0d      	ldr	r5, [pc, #52]	; (8009978 <__libc_init_array+0x38>)
 8009944:	4c0d      	ldr	r4, [pc, #52]	; (800997c <__libc_init_array+0x3c>)
 8009946:	1b64      	subs	r4, r4, r5
 8009948:	10a4      	asrs	r4, r4, #2
 800994a:	2600      	movs	r6, #0
 800994c:	42a6      	cmp	r6, r4
 800994e:	d109      	bne.n	8009964 <__libc_init_array+0x24>
 8009950:	4d0b      	ldr	r5, [pc, #44]	; (8009980 <__libc_init_array+0x40>)
 8009952:	4c0c      	ldr	r4, [pc, #48]	; (8009984 <__libc_init_array+0x44>)
 8009954:	f001 fffa 	bl	800b94c <_init>
 8009958:	1b64      	subs	r4, r4, r5
 800995a:	10a4      	asrs	r4, r4, #2
 800995c:	2600      	movs	r6, #0
 800995e:	42a6      	cmp	r6, r4
 8009960:	d105      	bne.n	800996e <__libc_init_array+0x2e>
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	f855 3b04 	ldr.w	r3, [r5], #4
 8009968:	4798      	blx	r3
 800996a:	3601      	adds	r6, #1
 800996c:	e7ee      	b.n	800994c <__libc_init_array+0xc>
 800996e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009972:	4798      	blx	r3
 8009974:	3601      	adds	r6, #1
 8009976:	e7f2      	b.n	800995e <__libc_init_array+0x1e>
 8009978:	0800c4b4 	.word	0x0800c4b4
 800997c:	0800c4b4 	.word	0x0800c4b4
 8009980:	0800c4b4 	.word	0x0800c4b4
 8009984:	0800c4b8 	.word	0x0800c4b8

08009988 <__retarget_lock_init_recursive>:
 8009988:	4770      	bx	lr

0800998a <__retarget_lock_acquire>:
 800998a:	4770      	bx	lr

0800998c <__retarget_lock_acquire_recursive>:
 800998c:	4770      	bx	lr

0800998e <__retarget_lock_release>:
 800998e:	4770      	bx	lr

08009990 <__retarget_lock_release_recursive>:
 8009990:	4770      	bx	lr

08009992 <strcpy>:
 8009992:	4603      	mov	r3, r0
 8009994:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009998:	f803 2b01 	strb.w	r2, [r3], #1
 800999c:	2a00      	cmp	r2, #0
 800999e:	d1f9      	bne.n	8009994 <strcpy+0x2>
 80099a0:	4770      	bx	lr

080099a2 <memcpy>:
 80099a2:	440a      	add	r2, r1
 80099a4:	4291      	cmp	r1, r2
 80099a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80099aa:	d100      	bne.n	80099ae <memcpy+0xc>
 80099ac:	4770      	bx	lr
 80099ae:	b510      	push	{r4, lr}
 80099b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099b8:	4291      	cmp	r1, r2
 80099ba:	d1f9      	bne.n	80099b0 <memcpy+0xe>
 80099bc:	bd10      	pop	{r4, pc}

080099be <abs>:
 80099be:	2800      	cmp	r0, #0
 80099c0:	bfb8      	it	lt
 80099c2:	4240      	neglt	r0, r0
 80099c4:	4770      	bx	lr
	...

080099c8 <__assert_func>:
 80099c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ca:	4614      	mov	r4, r2
 80099cc:	461a      	mov	r2, r3
 80099ce:	4b09      	ldr	r3, [pc, #36]	; (80099f4 <__assert_func+0x2c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4605      	mov	r5, r0
 80099d4:	68d8      	ldr	r0, [r3, #12]
 80099d6:	b14c      	cbz	r4, 80099ec <__assert_func+0x24>
 80099d8:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <__assert_func+0x30>)
 80099da:	9100      	str	r1, [sp, #0]
 80099dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099e0:	4906      	ldr	r1, [pc, #24]	; (80099fc <__assert_func+0x34>)
 80099e2:	462b      	mov	r3, r5
 80099e4:	f000 fd86 	bl	800a4f4 <fiprintf>
 80099e8:	f000 fea8 	bl	800a73c <abort>
 80099ec:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <__assert_func+0x38>)
 80099ee:	461c      	mov	r4, r3
 80099f0:	e7f3      	b.n	80099da <__assert_func+0x12>
 80099f2:	bf00      	nop
 80099f4:	20000070 	.word	0x20000070
 80099f8:	0800c320 	.word	0x0800c320
 80099fc:	0800c32d 	.word	0x0800c32d
 8009a00:	0800c35b 	.word	0x0800c35b

08009a04 <div>:
 8009a04:	2900      	cmp	r1, #0
 8009a06:	b510      	push	{r4, lr}
 8009a08:	fb91 f4f2 	sdiv	r4, r1, r2
 8009a0c:	fb02 1314 	mls	r3, r2, r4, r1
 8009a10:	db06      	blt.n	8009a20 <div+0x1c>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	da01      	bge.n	8009a1a <div+0x16>
 8009a16:	3401      	adds	r4, #1
 8009a18:	1a9b      	subs	r3, r3, r2
 8009a1a:	e9c0 4300 	strd	r4, r3, [r0]
 8009a1e:	bd10      	pop	{r4, pc}
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bfc4      	itt	gt
 8009a24:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8009a28:	189b      	addgt	r3, r3, r2
 8009a2a:	e7f6      	b.n	8009a1a <div+0x16>

08009a2c <_free_r>:
 8009a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a2e:	2900      	cmp	r1, #0
 8009a30:	d044      	beq.n	8009abc <_free_r+0x90>
 8009a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a36:	9001      	str	r0, [sp, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a3e:	bfb8      	it	lt
 8009a40:	18e4      	addlt	r4, r4, r3
 8009a42:	f000 f937 	bl	8009cb4 <__malloc_lock>
 8009a46:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <_free_r+0x94>)
 8009a48:	9801      	ldr	r0, [sp, #4]
 8009a4a:	6813      	ldr	r3, [r2, #0]
 8009a4c:	b933      	cbnz	r3, 8009a5c <_free_r+0x30>
 8009a4e:	6063      	str	r3, [r4, #4]
 8009a50:	6014      	str	r4, [r2, #0]
 8009a52:	b003      	add	sp, #12
 8009a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a58:	f000 b932 	b.w	8009cc0 <__malloc_unlock>
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	d908      	bls.n	8009a72 <_free_r+0x46>
 8009a60:	6825      	ldr	r5, [r4, #0]
 8009a62:	1961      	adds	r1, r4, r5
 8009a64:	428b      	cmp	r3, r1
 8009a66:	bf01      	itttt	eq
 8009a68:	6819      	ldreq	r1, [r3, #0]
 8009a6a:	685b      	ldreq	r3, [r3, #4]
 8009a6c:	1949      	addeq	r1, r1, r5
 8009a6e:	6021      	streq	r1, [r4, #0]
 8009a70:	e7ed      	b.n	8009a4e <_free_r+0x22>
 8009a72:	461a      	mov	r2, r3
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	b10b      	cbz	r3, 8009a7c <_free_r+0x50>
 8009a78:	42a3      	cmp	r3, r4
 8009a7a:	d9fa      	bls.n	8009a72 <_free_r+0x46>
 8009a7c:	6811      	ldr	r1, [r2, #0]
 8009a7e:	1855      	adds	r5, r2, r1
 8009a80:	42a5      	cmp	r5, r4
 8009a82:	d10b      	bne.n	8009a9c <_free_r+0x70>
 8009a84:	6824      	ldr	r4, [r4, #0]
 8009a86:	4421      	add	r1, r4
 8009a88:	1854      	adds	r4, r2, r1
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	6011      	str	r1, [r2, #0]
 8009a8e:	d1e0      	bne.n	8009a52 <_free_r+0x26>
 8009a90:	681c      	ldr	r4, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	6053      	str	r3, [r2, #4]
 8009a96:	440c      	add	r4, r1
 8009a98:	6014      	str	r4, [r2, #0]
 8009a9a:	e7da      	b.n	8009a52 <_free_r+0x26>
 8009a9c:	d902      	bls.n	8009aa4 <_free_r+0x78>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	6003      	str	r3, [r0, #0]
 8009aa2:	e7d6      	b.n	8009a52 <_free_r+0x26>
 8009aa4:	6825      	ldr	r5, [r4, #0]
 8009aa6:	1961      	adds	r1, r4, r5
 8009aa8:	428b      	cmp	r3, r1
 8009aaa:	bf04      	itt	eq
 8009aac:	6819      	ldreq	r1, [r3, #0]
 8009aae:	685b      	ldreq	r3, [r3, #4]
 8009ab0:	6063      	str	r3, [r4, #4]
 8009ab2:	bf04      	itt	eq
 8009ab4:	1949      	addeq	r1, r1, r5
 8009ab6:	6021      	streq	r1, [r4, #0]
 8009ab8:	6054      	str	r4, [r2, #4]
 8009aba:	e7ca      	b.n	8009a52 <_free_r+0x26>
 8009abc:	b003      	add	sp, #12
 8009abe:	bd30      	pop	{r4, r5, pc}
 8009ac0:	200003e0 	.word	0x200003e0

08009ac4 <_findenv_r>:
 8009ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8009b38 <_findenv_r+0x74>
 8009acc:	4607      	mov	r7, r0
 8009ace:	4689      	mov	r9, r1
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	f000 fe3b 	bl	800a74c <__env_lock>
 8009ad6:	f8da 4000 	ldr.w	r4, [sl]
 8009ada:	b134      	cbz	r4, 8009aea <_findenv_r+0x26>
 8009adc:	464b      	mov	r3, r9
 8009ade:	4698      	mov	r8, r3
 8009ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae4:	b13a      	cbz	r2, 8009af6 <_findenv_r+0x32>
 8009ae6:	2a3d      	cmp	r2, #61	; 0x3d
 8009ae8:	d1f9      	bne.n	8009ade <_findenv_r+0x1a>
 8009aea:	4638      	mov	r0, r7
 8009aec:	f000 fe34 	bl	800a758 <__env_unlock>
 8009af0:	2000      	movs	r0, #0
 8009af2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af6:	eba8 0809 	sub.w	r8, r8, r9
 8009afa:	46a3      	mov	fp, r4
 8009afc:	f854 0b04 	ldr.w	r0, [r4], #4
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d0f2      	beq.n	8009aea <_findenv_r+0x26>
 8009b04:	4642      	mov	r2, r8
 8009b06:	4649      	mov	r1, r9
 8009b08:	f000 fd4c 	bl	800a5a4 <strncmp>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d1f4      	bne.n	8009afa <_findenv_r+0x36>
 8009b10:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009b14:	eb03 0508 	add.w	r5, r3, r8
 8009b18:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009b1c:	2b3d      	cmp	r3, #61	; 0x3d
 8009b1e:	d1ec      	bne.n	8009afa <_findenv_r+0x36>
 8009b20:	f8da 3000 	ldr.w	r3, [sl]
 8009b24:	ebab 0303 	sub.w	r3, fp, r3
 8009b28:	109b      	asrs	r3, r3, #2
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	6033      	str	r3, [r6, #0]
 8009b2e:	f000 fe13 	bl	800a758 <__env_unlock>
 8009b32:	1c68      	adds	r0, r5, #1
 8009b34:	e7dd      	b.n	8009af2 <_findenv_r+0x2e>
 8009b36:	bf00      	nop
 8009b38:	20000000 	.word	0x20000000

08009b3c <_getenv_r>:
 8009b3c:	b507      	push	{r0, r1, r2, lr}
 8009b3e:	aa01      	add	r2, sp, #4
 8009b40:	f7ff ffc0 	bl	8009ac4 <_findenv_r>
 8009b44:	b003      	add	sp, #12
 8009b46:	f85d fb04 	ldr.w	pc, [sp], #4

08009b4a <labs>:
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	bfb8      	it	lt
 8009b4e:	4240      	neglt	r0, r0
 8009b50:	4770      	bx	lr
	...

08009b54 <malloc>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <malloc+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f000 b82b 	b.w	8009bb4 <_malloc_r>
 8009b5e:	bf00      	nop
 8009b60:	20000070 	.word	0x20000070

08009b64 <free>:
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <free+0xc>)
 8009b66:	4601      	mov	r1, r0
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	f7ff bf5f 	b.w	8009a2c <_free_r>
 8009b6e:	bf00      	nop
 8009b70:	20000070 	.word	0x20000070

08009b74 <sbrk_aligned>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4e0e      	ldr	r6, [pc, #56]	; (8009bb0 <sbrk_aligned+0x3c>)
 8009b78:	460c      	mov	r4, r1
 8009b7a:	6831      	ldr	r1, [r6, #0]
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	b911      	cbnz	r1, 8009b86 <sbrk_aligned+0x12>
 8009b80:	f000 fdcc 	bl	800a71c <_sbrk_r>
 8009b84:	6030      	str	r0, [r6, #0]
 8009b86:	4621      	mov	r1, r4
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 fdc7 	bl	800a71c <_sbrk_r>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	d00a      	beq.n	8009ba8 <sbrk_aligned+0x34>
 8009b92:	1cc4      	adds	r4, r0, #3
 8009b94:	f024 0403 	bic.w	r4, r4, #3
 8009b98:	42a0      	cmp	r0, r4
 8009b9a:	d007      	beq.n	8009bac <sbrk_aligned+0x38>
 8009b9c:	1a21      	subs	r1, r4, r0
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 fdbc 	bl	800a71c <_sbrk_r>
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d101      	bne.n	8009bac <sbrk_aligned+0x38>
 8009ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8009bac:	4620      	mov	r0, r4
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	200003e4 	.word	0x200003e4

08009bb4 <_malloc_r>:
 8009bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb8:	1ccd      	adds	r5, r1, #3
 8009bba:	f025 0503 	bic.w	r5, r5, #3
 8009bbe:	3508      	adds	r5, #8
 8009bc0:	2d0c      	cmp	r5, #12
 8009bc2:	bf38      	it	cc
 8009bc4:	250c      	movcc	r5, #12
 8009bc6:	2d00      	cmp	r5, #0
 8009bc8:	4607      	mov	r7, r0
 8009bca:	db01      	blt.n	8009bd0 <_malloc_r+0x1c>
 8009bcc:	42a9      	cmp	r1, r5
 8009bce:	d905      	bls.n	8009bdc <_malloc_r+0x28>
 8009bd0:	230c      	movs	r3, #12
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009cb0 <_malloc_r+0xfc>
 8009be0:	f000 f868 	bl	8009cb4 <__malloc_lock>
 8009be4:	f8d8 3000 	ldr.w	r3, [r8]
 8009be8:	461c      	mov	r4, r3
 8009bea:	bb5c      	cbnz	r4, 8009c44 <_malloc_r+0x90>
 8009bec:	4629      	mov	r1, r5
 8009bee:	4638      	mov	r0, r7
 8009bf0:	f7ff ffc0 	bl	8009b74 <sbrk_aligned>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	d155      	bne.n	8009ca6 <_malloc_r+0xf2>
 8009bfa:	f8d8 4000 	ldr.w	r4, [r8]
 8009bfe:	4626      	mov	r6, r4
 8009c00:	2e00      	cmp	r6, #0
 8009c02:	d145      	bne.n	8009c90 <_malloc_r+0xdc>
 8009c04:	2c00      	cmp	r4, #0
 8009c06:	d048      	beq.n	8009c9a <_malloc_r+0xe6>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	eb04 0903 	add.w	r9, r4, r3
 8009c12:	f000 fd83 	bl	800a71c <_sbrk_r>
 8009c16:	4581      	cmp	r9, r0
 8009c18:	d13f      	bne.n	8009c9a <_malloc_r+0xe6>
 8009c1a:	6821      	ldr	r1, [r4, #0]
 8009c1c:	1a6d      	subs	r5, r5, r1
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7ff ffa7 	bl	8009b74 <sbrk_aligned>
 8009c26:	3001      	adds	r0, #1
 8009c28:	d037      	beq.n	8009c9a <_malloc_r+0xe6>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	442b      	add	r3, r5
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	f8d8 3000 	ldr.w	r3, [r8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d038      	beq.n	8009caa <_malloc_r+0xf6>
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	42a2      	cmp	r2, r4
 8009c3c:	d12b      	bne.n	8009c96 <_malloc_r+0xe2>
 8009c3e:	2200      	movs	r2, #0
 8009c40:	605a      	str	r2, [r3, #4]
 8009c42:	e00f      	b.n	8009c64 <_malloc_r+0xb0>
 8009c44:	6822      	ldr	r2, [r4, #0]
 8009c46:	1b52      	subs	r2, r2, r5
 8009c48:	d41f      	bmi.n	8009c8a <_malloc_r+0xd6>
 8009c4a:	2a0b      	cmp	r2, #11
 8009c4c:	d917      	bls.n	8009c7e <_malloc_r+0xca>
 8009c4e:	1961      	adds	r1, r4, r5
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	6025      	str	r5, [r4, #0]
 8009c54:	bf18      	it	ne
 8009c56:	6059      	strne	r1, [r3, #4]
 8009c58:	6863      	ldr	r3, [r4, #4]
 8009c5a:	bf08      	it	eq
 8009c5c:	f8c8 1000 	streq.w	r1, [r8]
 8009c60:	5162      	str	r2, [r4, r5]
 8009c62:	604b      	str	r3, [r1, #4]
 8009c64:	4638      	mov	r0, r7
 8009c66:	f104 060b 	add.w	r6, r4, #11
 8009c6a:	f000 f829 	bl	8009cc0 <__malloc_unlock>
 8009c6e:	f026 0607 	bic.w	r6, r6, #7
 8009c72:	1d23      	adds	r3, r4, #4
 8009c74:	1af2      	subs	r2, r6, r3
 8009c76:	d0ae      	beq.n	8009bd6 <_malloc_r+0x22>
 8009c78:	1b9b      	subs	r3, r3, r6
 8009c7a:	50a3      	str	r3, [r4, r2]
 8009c7c:	e7ab      	b.n	8009bd6 <_malloc_r+0x22>
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	6862      	ldr	r2, [r4, #4]
 8009c82:	d1dd      	bne.n	8009c40 <_malloc_r+0x8c>
 8009c84:	f8c8 2000 	str.w	r2, [r8]
 8009c88:	e7ec      	b.n	8009c64 <_malloc_r+0xb0>
 8009c8a:	4623      	mov	r3, r4
 8009c8c:	6864      	ldr	r4, [r4, #4]
 8009c8e:	e7ac      	b.n	8009bea <_malloc_r+0x36>
 8009c90:	4634      	mov	r4, r6
 8009c92:	6876      	ldr	r6, [r6, #4]
 8009c94:	e7b4      	b.n	8009c00 <_malloc_r+0x4c>
 8009c96:	4613      	mov	r3, r2
 8009c98:	e7cc      	b.n	8009c34 <_malloc_r+0x80>
 8009c9a:	230c      	movs	r3, #12
 8009c9c:	603b      	str	r3, [r7, #0]
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f000 f80e 	bl	8009cc0 <__malloc_unlock>
 8009ca4:	e797      	b.n	8009bd6 <_malloc_r+0x22>
 8009ca6:	6025      	str	r5, [r4, #0]
 8009ca8:	e7dc      	b.n	8009c64 <_malloc_r+0xb0>
 8009caa:	605b      	str	r3, [r3, #4]
 8009cac:	deff      	udf	#255	; 0xff
 8009cae:	bf00      	nop
 8009cb0:	200003e0 	.word	0x200003e0

08009cb4 <__malloc_lock>:
 8009cb4:	4801      	ldr	r0, [pc, #4]	; (8009cbc <__malloc_lock+0x8>)
 8009cb6:	f7ff be69 	b.w	800998c <__retarget_lock_acquire_recursive>
 8009cba:	bf00      	nop
 8009cbc:	200003dd 	.word	0x200003dd

08009cc0 <__malloc_unlock>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	; (8009cc8 <__malloc_unlock+0x8>)
 8009cc2:	f7ff be65 	b.w	8009990 <__retarget_lock_release_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	200003dd 	.word	0x200003dd

08009ccc <_strtoul_l.constprop.0>:
 8009ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cd0:	4f36      	ldr	r7, [pc, #216]	; (8009dac <_strtoul_l.constprop.0+0xe0>)
 8009cd2:	4686      	mov	lr, r0
 8009cd4:	460d      	mov	r5, r1
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cdc:	5d3e      	ldrb	r6, [r7, r4]
 8009cde:	f016 0608 	ands.w	r6, r6, #8
 8009ce2:	d1f8      	bne.n	8009cd6 <_strtoul_l.constprop.0+0xa>
 8009ce4:	2c2d      	cmp	r4, #45	; 0x2d
 8009ce6:	d130      	bne.n	8009d4a <_strtoul_l.constprop.0+0x7e>
 8009ce8:	782c      	ldrb	r4, [r5, #0]
 8009cea:	2601      	movs	r6, #1
 8009cec:	1c85      	adds	r5, r0, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d057      	beq.n	8009da2 <_strtoul_l.constprop.0+0xd6>
 8009cf2:	2b10      	cmp	r3, #16
 8009cf4:	d109      	bne.n	8009d0a <_strtoul_l.constprop.0+0x3e>
 8009cf6:	2c30      	cmp	r4, #48	; 0x30
 8009cf8:	d107      	bne.n	8009d0a <_strtoul_l.constprop.0+0x3e>
 8009cfa:	7828      	ldrb	r0, [r5, #0]
 8009cfc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009d00:	2858      	cmp	r0, #88	; 0x58
 8009d02:	d149      	bne.n	8009d98 <_strtoul_l.constprop.0+0xcc>
 8009d04:	786c      	ldrb	r4, [r5, #1]
 8009d06:	2310      	movs	r3, #16
 8009d08:	3502      	adds	r5, #2
 8009d0a:	f04f 38ff 	mov.w	r8, #4294967295
 8009d0e:	2700      	movs	r7, #0
 8009d10:	fbb8 f8f3 	udiv	r8, r8, r3
 8009d14:	fb03 f908 	mul.w	r9, r3, r8
 8009d18:	ea6f 0909 	mvn.w	r9, r9
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d22:	f1bc 0f09 	cmp.w	ip, #9
 8009d26:	d815      	bhi.n	8009d54 <_strtoul_l.constprop.0+0x88>
 8009d28:	4664      	mov	r4, ip
 8009d2a:	42a3      	cmp	r3, r4
 8009d2c:	dd23      	ble.n	8009d76 <_strtoul_l.constprop.0+0xaa>
 8009d2e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009d32:	d007      	beq.n	8009d44 <_strtoul_l.constprop.0+0x78>
 8009d34:	4580      	cmp	r8, r0
 8009d36:	d31b      	bcc.n	8009d70 <_strtoul_l.constprop.0+0xa4>
 8009d38:	d101      	bne.n	8009d3e <_strtoul_l.constprop.0+0x72>
 8009d3a:	45a1      	cmp	r9, r4
 8009d3c:	db18      	blt.n	8009d70 <_strtoul_l.constprop.0+0xa4>
 8009d3e:	fb00 4003 	mla	r0, r0, r3, r4
 8009d42:	2701      	movs	r7, #1
 8009d44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d48:	e7e9      	b.n	8009d1e <_strtoul_l.constprop.0+0x52>
 8009d4a:	2c2b      	cmp	r4, #43	; 0x2b
 8009d4c:	bf04      	itt	eq
 8009d4e:	782c      	ldrbeq	r4, [r5, #0]
 8009d50:	1c85      	addeq	r5, r0, #2
 8009d52:	e7cc      	b.n	8009cee <_strtoul_l.constprop.0+0x22>
 8009d54:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009d58:	f1bc 0f19 	cmp.w	ip, #25
 8009d5c:	d801      	bhi.n	8009d62 <_strtoul_l.constprop.0+0x96>
 8009d5e:	3c37      	subs	r4, #55	; 0x37
 8009d60:	e7e3      	b.n	8009d2a <_strtoul_l.constprop.0+0x5e>
 8009d62:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009d66:	f1bc 0f19 	cmp.w	ip, #25
 8009d6a:	d804      	bhi.n	8009d76 <_strtoul_l.constprop.0+0xaa>
 8009d6c:	3c57      	subs	r4, #87	; 0x57
 8009d6e:	e7dc      	b.n	8009d2a <_strtoul_l.constprop.0+0x5e>
 8009d70:	f04f 37ff 	mov.w	r7, #4294967295
 8009d74:	e7e6      	b.n	8009d44 <_strtoul_l.constprop.0+0x78>
 8009d76:	1c7b      	adds	r3, r7, #1
 8009d78:	d106      	bne.n	8009d88 <_strtoul_l.constprop.0+0xbc>
 8009d7a:	2322      	movs	r3, #34	; 0x22
 8009d7c:	f8ce 3000 	str.w	r3, [lr]
 8009d80:	4638      	mov	r0, r7
 8009d82:	b932      	cbnz	r2, 8009d92 <_strtoul_l.constprop.0+0xc6>
 8009d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d88:	b106      	cbz	r6, 8009d8c <_strtoul_l.constprop.0+0xc0>
 8009d8a:	4240      	negs	r0, r0
 8009d8c:	2a00      	cmp	r2, #0
 8009d8e:	d0f9      	beq.n	8009d84 <_strtoul_l.constprop.0+0xb8>
 8009d90:	b107      	cbz	r7, 8009d94 <_strtoul_l.constprop.0+0xc8>
 8009d92:	1e69      	subs	r1, r5, #1
 8009d94:	6011      	str	r1, [r2, #0]
 8009d96:	e7f5      	b.n	8009d84 <_strtoul_l.constprop.0+0xb8>
 8009d98:	2430      	movs	r4, #48	; 0x30
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1b5      	bne.n	8009d0a <_strtoul_l.constprop.0+0x3e>
 8009d9e:	2308      	movs	r3, #8
 8009da0:	e7b3      	b.n	8009d0a <_strtoul_l.constprop.0+0x3e>
 8009da2:	2c30      	cmp	r4, #48	; 0x30
 8009da4:	d0a9      	beq.n	8009cfa <_strtoul_l.constprop.0+0x2e>
 8009da6:	230a      	movs	r3, #10
 8009da8:	e7af      	b.n	8009d0a <_strtoul_l.constprop.0+0x3e>
 8009daa:	bf00      	nop
 8009dac:	0800c35d 	.word	0x0800c35d

08009db0 <_strtoul_r>:
 8009db0:	f7ff bf8c 	b.w	8009ccc <_strtoul_l.constprop.0>

08009db4 <strtoul>:
 8009db4:	4613      	mov	r3, r2
 8009db6:	460a      	mov	r2, r1
 8009db8:	4601      	mov	r1, r0
 8009dba:	4802      	ldr	r0, [pc, #8]	; (8009dc4 <strtoul+0x10>)
 8009dbc:	6800      	ldr	r0, [r0, #0]
 8009dbe:	f7ff bf85 	b.w	8009ccc <_strtoul_l.constprop.0>
 8009dc2:	bf00      	nop
 8009dc4:	20000070 	.word	0x20000070

08009dc8 <__ssputs_r>:
 8009dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dcc:	688e      	ldr	r6, [r1, #8]
 8009dce:	461f      	mov	r7, r3
 8009dd0:	42be      	cmp	r6, r7
 8009dd2:	680b      	ldr	r3, [r1, #0]
 8009dd4:	4682      	mov	sl, r0
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	4690      	mov	r8, r2
 8009dda:	d82c      	bhi.n	8009e36 <__ssputs_r+0x6e>
 8009ddc:	898a      	ldrh	r2, [r1, #12]
 8009dde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009de2:	d026      	beq.n	8009e32 <__ssputs_r+0x6a>
 8009de4:	6965      	ldr	r5, [r4, #20]
 8009de6:	6909      	ldr	r1, [r1, #16]
 8009de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dec:	eba3 0901 	sub.w	r9, r3, r1
 8009df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009df4:	1c7b      	adds	r3, r7, #1
 8009df6:	444b      	add	r3, r9
 8009df8:	106d      	asrs	r5, r5, #1
 8009dfa:	429d      	cmp	r5, r3
 8009dfc:	bf38      	it	cc
 8009dfe:	461d      	movcc	r5, r3
 8009e00:	0553      	lsls	r3, r2, #21
 8009e02:	d527      	bpl.n	8009e54 <__ssputs_r+0x8c>
 8009e04:	4629      	mov	r1, r5
 8009e06:	f7ff fed5 	bl	8009bb4 <_malloc_r>
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	b360      	cbz	r0, 8009e68 <__ssputs_r+0xa0>
 8009e0e:	6921      	ldr	r1, [r4, #16]
 8009e10:	464a      	mov	r2, r9
 8009e12:	f7ff fdc6 	bl	80099a2 <memcpy>
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	6126      	str	r6, [r4, #16]
 8009e24:	6165      	str	r5, [r4, #20]
 8009e26:	444e      	add	r6, r9
 8009e28:	eba5 0509 	sub.w	r5, r5, r9
 8009e2c:	6026      	str	r6, [r4, #0]
 8009e2e:	60a5      	str	r5, [r4, #8]
 8009e30:	463e      	mov	r6, r7
 8009e32:	42be      	cmp	r6, r7
 8009e34:	d900      	bls.n	8009e38 <__ssputs_r+0x70>
 8009e36:	463e      	mov	r6, r7
 8009e38:	6820      	ldr	r0, [r4, #0]
 8009e3a:	4632      	mov	r2, r6
 8009e3c:	4641      	mov	r1, r8
 8009e3e:	f000 fb97 	bl	800a570 <memmove>
 8009e42:	68a3      	ldr	r3, [r4, #8]
 8009e44:	1b9b      	subs	r3, r3, r6
 8009e46:	60a3      	str	r3, [r4, #8]
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	4433      	add	r3, r6
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	2000      	movs	r0, #0
 8009e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e54:	462a      	mov	r2, r5
 8009e56:	f000 fc85 	bl	800a764 <_realloc_r>
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d1e0      	bne.n	8009e22 <__ssputs_r+0x5a>
 8009e60:	6921      	ldr	r1, [r4, #16]
 8009e62:	4650      	mov	r0, sl
 8009e64:	f7ff fde2 	bl	8009a2c <_free_r>
 8009e68:	230c      	movs	r3, #12
 8009e6a:	f8ca 3000 	str.w	r3, [sl]
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7a:	e7e9      	b.n	8009e50 <__ssputs_r+0x88>

08009e7c <_svfiprintf_r>:
 8009e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e80:	4698      	mov	r8, r3
 8009e82:	898b      	ldrh	r3, [r1, #12]
 8009e84:	061b      	lsls	r3, r3, #24
 8009e86:	b09d      	sub	sp, #116	; 0x74
 8009e88:	4607      	mov	r7, r0
 8009e8a:	460d      	mov	r5, r1
 8009e8c:	4614      	mov	r4, r2
 8009e8e:	d50e      	bpl.n	8009eae <_svfiprintf_r+0x32>
 8009e90:	690b      	ldr	r3, [r1, #16]
 8009e92:	b963      	cbnz	r3, 8009eae <_svfiprintf_r+0x32>
 8009e94:	2140      	movs	r1, #64	; 0x40
 8009e96:	f7ff fe8d 	bl	8009bb4 <_malloc_r>
 8009e9a:	6028      	str	r0, [r5, #0]
 8009e9c:	6128      	str	r0, [r5, #16]
 8009e9e:	b920      	cbnz	r0, 8009eaa <_svfiprintf_r+0x2e>
 8009ea0:	230c      	movs	r3, #12
 8009ea2:	603b      	str	r3, [r7, #0]
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e0d0      	b.n	800a04c <_svfiprintf_r+0x1d0>
 8009eaa:	2340      	movs	r3, #64	; 0x40
 8009eac:	616b      	str	r3, [r5, #20]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb2:	2320      	movs	r3, #32
 8009eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ebc:	2330      	movs	r3, #48	; 0x30
 8009ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a064 <_svfiprintf_r+0x1e8>
 8009ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ec6:	f04f 0901 	mov.w	r9, #1
 8009eca:	4623      	mov	r3, r4
 8009ecc:	469a      	mov	sl, r3
 8009ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ed2:	b10a      	cbz	r2, 8009ed8 <_svfiprintf_r+0x5c>
 8009ed4:	2a25      	cmp	r2, #37	; 0x25
 8009ed6:	d1f9      	bne.n	8009ecc <_svfiprintf_r+0x50>
 8009ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8009edc:	d00b      	beq.n	8009ef6 <_svfiprintf_r+0x7a>
 8009ede:	465b      	mov	r3, fp
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	f7ff ff6f 	bl	8009dc8 <__ssputs_r>
 8009eea:	3001      	adds	r0, #1
 8009eec:	f000 80a9 	beq.w	800a042 <_svfiprintf_r+0x1c6>
 8009ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef2:	445a      	add	r2, fp
 8009ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 80a1 	beq.w	800a042 <_svfiprintf_r+0x1c6>
 8009f00:	2300      	movs	r3, #0
 8009f02:	f04f 32ff 	mov.w	r2, #4294967295
 8009f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f0a:	f10a 0a01 	add.w	sl, sl, #1
 8009f0e:	9304      	str	r3, [sp, #16]
 8009f10:	9307      	str	r3, [sp, #28]
 8009f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f16:	931a      	str	r3, [sp, #104]	; 0x68
 8009f18:	4654      	mov	r4, sl
 8009f1a:	2205      	movs	r2, #5
 8009f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f20:	4850      	ldr	r0, [pc, #320]	; (800a064 <_svfiprintf_r+0x1e8>)
 8009f22:	f7f6 f96d 	bl	8000200 <memchr>
 8009f26:	9a04      	ldr	r2, [sp, #16]
 8009f28:	b9d8      	cbnz	r0, 8009f62 <_svfiprintf_r+0xe6>
 8009f2a:	06d0      	lsls	r0, r2, #27
 8009f2c:	bf44      	itt	mi
 8009f2e:	2320      	movmi	r3, #32
 8009f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f34:	0711      	lsls	r1, r2, #28
 8009f36:	bf44      	itt	mi
 8009f38:	232b      	movmi	r3, #43	; 0x2b
 8009f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f42:	2b2a      	cmp	r3, #42	; 0x2a
 8009f44:	d015      	beq.n	8009f72 <_svfiprintf_r+0xf6>
 8009f46:	9a07      	ldr	r2, [sp, #28]
 8009f48:	4654      	mov	r4, sl
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	f04f 0c0a 	mov.w	ip, #10
 8009f50:	4621      	mov	r1, r4
 8009f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f56:	3b30      	subs	r3, #48	; 0x30
 8009f58:	2b09      	cmp	r3, #9
 8009f5a:	d94d      	bls.n	8009ff8 <_svfiprintf_r+0x17c>
 8009f5c:	b1b0      	cbz	r0, 8009f8c <_svfiprintf_r+0x110>
 8009f5e:	9207      	str	r2, [sp, #28]
 8009f60:	e014      	b.n	8009f8c <_svfiprintf_r+0x110>
 8009f62:	eba0 0308 	sub.w	r3, r0, r8
 8009f66:	fa09 f303 	lsl.w	r3, r9, r3
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	9304      	str	r3, [sp, #16]
 8009f6e:	46a2      	mov	sl, r4
 8009f70:	e7d2      	b.n	8009f18 <_svfiprintf_r+0x9c>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	1d19      	adds	r1, r3, #4
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	9103      	str	r1, [sp, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	bfbb      	ittet	lt
 8009f7e:	425b      	neglt	r3, r3
 8009f80:	f042 0202 	orrlt.w	r2, r2, #2
 8009f84:	9307      	strge	r3, [sp, #28]
 8009f86:	9307      	strlt	r3, [sp, #28]
 8009f88:	bfb8      	it	lt
 8009f8a:	9204      	strlt	r2, [sp, #16]
 8009f8c:	7823      	ldrb	r3, [r4, #0]
 8009f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f90:	d10c      	bne.n	8009fac <_svfiprintf_r+0x130>
 8009f92:	7863      	ldrb	r3, [r4, #1]
 8009f94:	2b2a      	cmp	r3, #42	; 0x2a
 8009f96:	d134      	bne.n	800a002 <_svfiprintf_r+0x186>
 8009f98:	9b03      	ldr	r3, [sp, #12]
 8009f9a:	1d1a      	adds	r2, r3, #4
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	9203      	str	r2, [sp, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	bfb8      	it	lt
 8009fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fa8:	3402      	adds	r4, #2
 8009faa:	9305      	str	r3, [sp, #20]
 8009fac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a074 <_svfiprintf_r+0x1f8>
 8009fb0:	7821      	ldrb	r1, [r4, #0]
 8009fb2:	2203      	movs	r2, #3
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	f7f6 f923 	bl	8000200 <memchr>
 8009fba:	b138      	cbz	r0, 8009fcc <_svfiprintf_r+0x150>
 8009fbc:	9b04      	ldr	r3, [sp, #16]
 8009fbe:	eba0 000a 	sub.w	r0, r0, sl
 8009fc2:	2240      	movs	r2, #64	; 0x40
 8009fc4:	4082      	lsls	r2, r0
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	3401      	adds	r4, #1
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd0:	4825      	ldr	r0, [pc, #148]	; (800a068 <_svfiprintf_r+0x1ec>)
 8009fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fd6:	2206      	movs	r2, #6
 8009fd8:	f7f6 f912 	bl	8000200 <memchr>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d038      	beq.n	800a052 <_svfiprintf_r+0x1d6>
 8009fe0:	4b22      	ldr	r3, [pc, #136]	; (800a06c <_svfiprintf_r+0x1f0>)
 8009fe2:	bb1b      	cbnz	r3, 800a02c <_svfiprintf_r+0x1b0>
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	3307      	adds	r3, #7
 8009fe8:	f023 0307 	bic.w	r3, r3, #7
 8009fec:	3308      	adds	r3, #8
 8009fee:	9303      	str	r3, [sp, #12]
 8009ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff2:	4433      	add	r3, r6
 8009ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff6:	e768      	b.n	8009eca <_svfiprintf_r+0x4e>
 8009ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	2001      	movs	r0, #1
 800a000:	e7a6      	b.n	8009f50 <_svfiprintf_r+0xd4>
 800a002:	2300      	movs	r3, #0
 800a004:	3401      	adds	r4, #1
 800a006:	9305      	str	r3, [sp, #20]
 800a008:	4619      	mov	r1, r3
 800a00a:	f04f 0c0a 	mov.w	ip, #10
 800a00e:	4620      	mov	r0, r4
 800a010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a014:	3a30      	subs	r2, #48	; 0x30
 800a016:	2a09      	cmp	r2, #9
 800a018:	d903      	bls.n	800a022 <_svfiprintf_r+0x1a6>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0c6      	beq.n	8009fac <_svfiprintf_r+0x130>
 800a01e:	9105      	str	r1, [sp, #20]
 800a020:	e7c4      	b.n	8009fac <_svfiprintf_r+0x130>
 800a022:	fb0c 2101 	mla	r1, ip, r1, r2
 800a026:	4604      	mov	r4, r0
 800a028:	2301      	movs	r3, #1
 800a02a:	e7f0      	b.n	800a00e <_svfiprintf_r+0x192>
 800a02c:	ab03      	add	r3, sp, #12
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	462a      	mov	r2, r5
 800a032:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <_svfiprintf_r+0x1f4>)
 800a034:	a904      	add	r1, sp, #16
 800a036:	4638      	mov	r0, r7
 800a038:	f3af 8000 	nop.w
 800a03c:	1c42      	adds	r2, r0, #1
 800a03e:	4606      	mov	r6, r0
 800a040:	d1d6      	bne.n	8009ff0 <_svfiprintf_r+0x174>
 800a042:	89ab      	ldrh	r3, [r5, #12]
 800a044:	065b      	lsls	r3, r3, #25
 800a046:	f53f af2d 	bmi.w	8009ea4 <_svfiprintf_r+0x28>
 800a04a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a04c:	b01d      	add	sp, #116	; 0x74
 800a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	ab03      	add	r3, sp, #12
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	462a      	mov	r2, r5
 800a058:	4b05      	ldr	r3, [pc, #20]	; (800a070 <_svfiprintf_r+0x1f4>)
 800a05a:	a904      	add	r1, sp, #16
 800a05c:	4638      	mov	r0, r7
 800a05e:	f000 f879 	bl	800a154 <_printf_i>
 800a062:	e7eb      	b.n	800a03c <_svfiprintf_r+0x1c0>
 800a064:	0800c45d 	.word	0x0800c45d
 800a068:	0800c467 	.word	0x0800c467
 800a06c:	00000000 	.word	0x00000000
 800a070:	08009dc9 	.word	0x08009dc9
 800a074:	0800c463 	.word	0x0800c463

0800a078 <_printf_common>:
 800a078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a07c:	4616      	mov	r6, r2
 800a07e:	4699      	mov	r9, r3
 800a080:	688a      	ldr	r2, [r1, #8]
 800a082:	690b      	ldr	r3, [r1, #16]
 800a084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a088:	4293      	cmp	r3, r2
 800a08a:	bfb8      	it	lt
 800a08c:	4613      	movlt	r3, r2
 800a08e:	6033      	str	r3, [r6, #0]
 800a090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a094:	4607      	mov	r7, r0
 800a096:	460c      	mov	r4, r1
 800a098:	b10a      	cbz	r2, 800a09e <_printf_common+0x26>
 800a09a:	3301      	adds	r3, #1
 800a09c:	6033      	str	r3, [r6, #0]
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	0699      	lsls	r1, r3, #26
 800a0a2:	bf42      	ittt	mi
 800a0a4:	6833      	ldrmi	r3, [r6, #0]
 800a0a6:	3302      	addmi	r3, #2
 800a0a8:	6033      	strmi	r3, [r6, #0]
 800a0aa:	6825      	ldr	r5, [r4, #0]
 800a0ac:	f015 0506 	ands.w	r5, r5, #6
 800a0b0:	d106      	bne.n	800a0c0 <_printf_common+0x48>
 800a0b2:	f104 0a19 	add.w	sl, r4, #25
 800a0b6:	68e3      	ldr	r3, [r4, #12]
 800a0b8:	6832      	ldr	r2, [r6, #0]
 800a0ba:	1a9b      	subs	r3, r3, r2
 800a0bc:	42ab      	cmp	r3, r5
 800a0be:	dc26      	bgt.n	800a10e <_printf_common+0x96>
 800a0c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0c4:	1e13      	subs	r3, r2, #0
 800a0c6:	6822      	ldr	r2, [r4, #0]
 800a0c8:	bf18      	it	ne
 800a0ca:	2301      	movne	r3, #1
 800a0cc:	0692      	lsls	r2, r2, #26
 800a0ce:	d42b      	bmi.n	800a128 <_printf_common+0xb0>
 800a0d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	4638      	mov	r0, r7
 800a0d8:	47c0      	blx	r8
 800a0da:	3001      	adds	r0, #1
 800a0dc:	d01e      	beq.n	800a11c <_printf_common+0xa4>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	6922      	ldr	r2, [r4, #16]
 800a0e2:	f003 0306 	and.w	r3, r3, #6
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	bf02      	ittt	eq
 800a0ea:	68e5      	ldreq	r5, [r4, #12]
 800a0ec:	6833      	ldreq	r3, [r6, #0]
 800a0ee:	1aed      	subeq	r5, r5, r3
 800a0f0:	68a3      	ldr	r3, [r4, #8]
 800a0f2:	bf0c      	ite	eq
 800a0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0f8:	2500      	movne	r5, #0
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	bfc4      	itt	gt
 800a0fe:	1a9b      	subgt	r3, r3, r2
 800a100:	18ed      	addgt	r5, r5, r3
 800a102:	2600      	movs	r6, #0
 800a104:	341a      	adds	r4, #26
 800a106:	42b5      	cmp	r5, r6
 800a108:	d11a      	bne.n	800a140 <_printf_common+0xc8>
 800a10a:	2000      	movs	r0, #0
 800a10c:	e008      	b.n	800a120 <_printf_common+0xa8>
 800a10e:	2301      	movs	r3, #1
 800a110:	4652      	mov	r2, sl
 800a112:	4649      	mov	r1, r9
 800a114:	4638      	mov	r0, r7
 800a116:	47c0      	blx	r8
 800a118:	3001      	adds	r0, #1
 800a11a:	d103      	bne.n	800a124 <_printf_common+0xac>
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a124:	3501      	adds	r5, #1
 800a126:	e7c6      	b.n	800a0b6 <_printf_common+0x3e>
 800a128:	18e1      	adds	r1, r4, r3
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	2030      	movs	r0, #48	; 0x30
 800a12e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a132:	4422      	add	r2, r4
 800a134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a13c:	3302      	adds	r3, #2
 800a13e:	e7c7      	b.n	800a0d0 <_printf_common+0x58>
 800a140:	2301      	movs	r3, #1
 800a142:	4622      	mov	r2, r4
 800a144:	4649      	mov	r1, r9
 800a146:	4638      	mov	r0, r7
 800a148:	47c0      	blx	r8
 800a14a:	3001      	adds	r0, #1
 800a14c:	d0e6      	beq.n	800a11c <_printf_common+0xa4>
 800a14e:	3601      	adds	r6, #1
 800a150:	e7d9      	b.n	800a106 <_printf_common+0x8e>
	...

0800a154 <_printf_i>:
 800a154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a158:	7e0f      	ldrb	r7, [r1, #24]
 800a15a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a15c:	2f78      	cmp	r7, #120	; 0x78
 800a15e:	4691      	mov	r9, r2
 800a160:	4680      	mov	r8, r0
 800a162:	460c      	mov	r4, r1
 800a164:	469a      	mov	sl, r3
 800a166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a16a:	d807      	bhi.n	800a17c <_printf_i+0x28>
 800a16c:	2f62      	cmp	r7, #98	; 0x62
 800a16e:	d80a      	bhi.n	800a186 <_printf_i+0x32>
 800a170:	2f00      	cmp	r7, #0
 800a172:	f000 80d4 	beq.w	800a31e <_printf_i+0x1ca>
 800a176:	2f58      	cmp	r7, #88	; 0x58
 800a178:	f000 80c0 	beq.w	800a2fc <_printf_i+0x1a8>
 800a17c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a184:	e03a      	b.n	800a1fc <_printf_i+0xa8>
 800a186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a18a:	2b15      	cmp	r3, #21
 800a18c:	d8f6      	bhi.n	800a17c <_printf_i+0x28>
 800a18e:	a101      	add	r1, pc, #4	; (adr r1, 800a194 <_printf_i+0x40>)
 800a190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a194:	0800a1ed 	.word	0x0800a1ed
 800a198:	0800a201 	.word	0x0800a201
 800a19c:	0800a17d 	.word	0x0800a17d
 800a1a0:	0800a17d 	.word	0x0800a17d
 800a1a4:	0800a17d 	.word	0x0800a17d
 800a1a8:	0800a17d 	.word	0x0800a17d
 800a1ac:	0800a201 	.word	0x0800a201
 800a1b0:	0800a17d 	.word	0x0800a17d
 800a1b4:	0800a17d 	.word	0x0800a17d
 800a1b8:	0800a17d 	.word	0x0800a17d
 800a1bc:	0800a17d 	.word	0x0800a17d
 800a1c0:	0800a305 	.word	0x0800a305
 800a1c4:	0800a22d 	.word	0x0800a22d
 800a1c8:	0800a2bf 	.word	0x0800a2bf
 800a1cc:	0800a17d 	.word	0x0800a17d
 800a1d0:	0800a17d 	.word	0x0800a17d
 800a1d4:	0800a327 	.word	0x0800a327
 800a1d8:	0800a17d 	.word	0x0800a17d
 800a1dc:	0800a22d 	.word	0x0800a22d
 800a1e0:	0800a17d 	.word	0x0800a17d
 800a1e4:	0800a17d 	.word	0x0800a17d
 800a1e8:	0800a2c7 	.word	0x0800a2c7
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	1d1a      	adds	r2, r3, #4
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	602a      	str	r2, [r5, #0]
 800a1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e09f      	b.n	800a340 <_printf_i+0x1ec>
 800a200:	6820      	ldr	r0, [r4, #0]
 800a202:	682b      	ldr	r3, [r5, #0]
 800a204:	0607      	lsls	r7, r0, #24
 800a206:	f103 0104 	add.w	r1, r3, #4
 800a20a:	6029      	str	r1, [r5, #0]
 800a20c:	d501      	bpl.n	800a212 <_printf_i+0xbe>
 800a20e:	681e      	ldr	r6, [r3, #0]
 800a210:	e003      	b.n	800a21a <_printf_i+0xc6>
 800a212:	0646      	lsls	r6, r0, #25
 800a214:	d5fb      	bpl.n	800a20e <_printf_i+0xba>
 800a216:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	da03      	bge.n	800a226 <_printf_i+0xd2>
 800a21e:	232d      	movs	r3, #45	; 0x2d
 800a220:	4276      	negs	r6, r6
 800a222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a226:	485a      	ldr	r0, [pc, #360]	; (800a390 <_printf_i+0x23c>)
 800a228:	230a      	movs	r3, #10
 800a22a:	e012      	b.n	800a252 <_printf_i+0xfe>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	6820      	ldr	r0, [r4, #0]
 800a230:	1d19      	adds	r1, r3, #4
 800a232:	6029      	str	r1, [r5, #0]
 800a234:	0605      	lsls	r5, r0, #24
 800a236:	d501      	bpl.n	800a23c <_printf_i+0xe8>
 800a238:	681e      	ldr	r6, [r3, #0]
 800a23a:	e002      	b.n	800a242 <_printf_i+0xee>
 800a23c:	0641      	lsls	r1, r0, #25
 800a23e:	d5fb      	bpl.n	800a238 <_printf_i+0xe4>
 800a240:	881e      	ldrh	r6, [r3, #0]
 800a242:	4853      	ldr	r0, [pc, #332]	; (800a390 <_printf_i+0x23c>)
 800a244:	2f6f      	cmp	r7, #111	; 0x6f
 800a246:	bf0c      	ite	eq
 800a248:	2308      	moveq	r3, #8
 800a24a:	230a      	movne	r3, #10
 800a24c:	2100      	movs	r1, #0
 800a24e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a252:	6865      	ldr	r5, [r4, #4]
 800a254:	60a5      	str	r5, [r4, #8]
 800a256:	2d00      	cmp	r5, #0
 800a258:	bfa2      	ittt	ge
 800a25a:	6821      	ldrge	r1, [r4, #0]
 800a25c:	f021 0104 	bicge.w	r1, r1, #4
 800a260:	6021      	strge	r1, [r4, #0]
 800a262:	b90e      	cbnz	r6, 800a268 <_printf_i+0x114>
 800a264:	2d00      	cmp	r5, #0
 800a266:	d04b      	beq.n	800a300 <_printf_i+0x1ac>
 800a268:	4615      	mov	r5, r2
 800a26a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a26e:	fb03 6711 	mls	r7, r3, r1, r6
 800a272:	5dc7      	ldrb	r7, [r0, r7]
 800a274:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a278:	4637      	mov	r7, r6
 800a27a:	42bb      	cmp	r3, r7
 800a27c:	460e      	mov	r6, r1
 800a27e:	d9f4      	bls.n	800a26a <_printf_i+0x116>
 800a280:	2b08      	cmp	r3, #8
 800a282:	d10b      	bne.n	800a29c <_printf_i+0x148>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	07de      	lsls	r6, r3, #31
 800a288:	d508      	bpl.n	800a29c <_printf_i+0x148>
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	6861      	ldr	r1, [r4, #4]
 800a28e:	4299      	cmp	r1, r3
 800a290:	bfde      	ittt	le
 800a292:	2330      	movle	r3, #48	; 0x30
 800a294:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a298:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a29c:	1b52      	subs	r2, r2, r5
 800a29e:	6122      	str	r2, [r4, #16]
 800a2a0:	f8cd a000 	str.w	sl, [sp]
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	aa03      	add	r2, sp, #12
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	f7ff fee4 	bl	800a078 <_printf_common>
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d14a      	bne.n	800a34a <_printf_i+0x1f6>
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b8:	b004      	add	sp, #16
 800a2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	f043 0320 	orr.w	r3, r3, #32
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	4833      	ldr	r0, [pc, #204]	; (800a394 <_printf_i+0x240>)
 800a2c8:	2778      	movs	r7, #120	; 0x78
 800a2ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	6829      	ldr	r1, [r5, #0]
 800a2d2:	061f      	lsls	r7, r3, #24
 800a2d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2d8:	d402      	bmi.n	800a2e0 <_printf_i+0x18c>
 800a2da:	065f      	lsls	r7, r3, #25
 800a2dc:	bf48      	it	mi
 800a2de:	b2b6      	uxthmi	r6, r6
 800a2e0:	07df      	lsls	r7, r3, #31
 800a2e2:	bf48      	it	mi
 800a2e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a2e8:	6029      	str	r1, [r5, #0]
 800a2ea:	bf48      	it	mi
 800a2ec:	6023      	strmi	r3, [r4, #0]
 800a2ee:	b91e      	cbnz	r6, 800a2f8 <_printf_i+0x1a4>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	f023 0320 	bic.w	r3, r3, #32
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	e7a7      	b.n	800a24c <_printf_i+0xf8>
 800a2fc:	4824      	ldr	r0, [pc, #144]	; (800a390 <_printf_i+0x23c>)
 800a2fe:	e7e4      	b.n	800a2ca <_printf_i+0x176>
 800a300:	4615      	mov	r5, r2
 800a302:	e7bd      	b.n	800a280 <_printf_i+0x12c>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	6826      	ldr	r6, [r4, #0]
 800a308:	6961      	ldr	r1, [r4, #20]
 800a30a:	1d18      	adds	r0, r3, #4
 800a30c:	6028      	str	r0, [r5, #0]
 800a30e:	0635      	lsls	r5, r6, #24
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	d501      	bpl.n	800a318 <_printf_i+0x1c4>
 800a314:	6019      	str	r1, [r3, #0]
 800a316:	e002      	b.n	800a31e <_printf_i+0x1ca>
 800a318:	0670      	lsls	r0, r6, #25
 800a31a:	d5fb      	bpl.n	800a314 <_printf_i+0x1c0>
 800a31c:	8019      	strh	r1, [r3, #0]
 800a31e:	2300      	movs	r3, #0
 800a320:	6123      	str	r3, [r4, #16]
 800a322:	4615      	mov	r5, r2
 800a324:	e7bc      	b.n	800a2a0 <_printf_i+0x14c>
 800a326:	682b      	ldr	r3, [r5, #0]
 800a328:	1d1a      	adds	r2, r3, #4
 800a32a:	602a      	str	r2, [r5, #0]
 800a32c:	681d      	ldr	r5, [r3, #0]
 800a32e:	6862      	ldr	r2, [r4, #4]
 800a330:	2100      	movs	r1, #0
 800a332:	4628      	mov	r0, r5
 800a334:	f7f5 ff64 	bl	8000200 <memchr>
 800a338:	b108      	cbz	r0, 800a33e <_printf_i+0x1ea>
 800a33a:	1b40      	subs	r0, r0, r5
 800a33c:	6060      	str	r0, [r4, #4]
 800a33e:	6863      	ldr	r3, [r4, #4]
 800a340:	6123      	str	r3, [r4, #16]
 800a342:	2300      	movs	r3, #0
 800a344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a348:	e7aa      	b.n	800a2a0 <_printf_i+0x14c>
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	462a      	mov	r2, r5
 800a34e:	4649      	mov	r1, r9
 800a350:	4640      	mov	r0, r8
 800a352:	47d0      	blx	sl
 800a354:	3001      	adds	r0, #1
 800a356:	d0ad      	beq.n	800a2b4 <_printf_i+0x160>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	079b      	lsls	r3, r3, #30
 800a35c:	d413      	bmi.n	800a386 <_printf_i+0x232>
 800a35e:	68e0      	ldr	r0, [r4, #12]
 800a360:	9b03      	ldr	r3, [sp, #12]
 800a362:	4298      	cmp	r0, r3
 800a364:	bfb8      	it	lt
 800a366:	4618      	movlt	r0, r3
 800a368:	e7a6      	b.n	800a2b8 <_printf_i+0x164>
 800a36a:	2301      	movs	r3, #1
 800a36c:	4632      	mov	r2, r6
 800a36e:	4649      	mov	r1, r9
 800a370:	4640      	mov	r0, r8
 800a372:	47d0      	blx	sl
 800a374:	3001      	adds	r0, #1
 800a376:	d09d      	beq.n	800a2b4 <_printf_i+0x160>
 800a378:	3501      	adds	r5, #1
 800a37a:	68e3      	ldr	r3, [r4, #12]
 800a37c:	9903      	ldr	r1, [sp, #12]
 800a37e:	1a5b      	subs	r3, r3, r1
 800a380:	42ab      	cmp	r3, r5
 800a382:	dcf2      	bgt.n	800a36a <_printf_i+0x216>
 800a384:	e7eb      	b.n	800a35e <_printf_i+0x20a>
 800a386:	2500      	movs	r5, #0
 800a388:	f104 0619 	add.w	r6, r4, #25
 800a38c:	e7f5      	b.n	800a37a <_printf_i+0x226>
 800a38e:	bf00      	nop
 800a390:	0800c46e 	.word	0x0800c46e
 800a394:	0800c47f 	.word	0x0800c47f

0800a398 <__sflush_r>:
 800a398:	898a      	ldrh	r2, [r1, #12]
 800a39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39e:	4605      	mov	r5, r0
 800a3a0:	0710      	lsls	r0, r2, #28
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	d458      	bmi.n	800a458 <__sflush_r+0xc0>
 800a3a6:	684b      	ldr	r3, [r1, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dc05      	bgt.n	800a3b8 <__sflush_r+0x20>
 800a3ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	dc02      	bgt.n	800a3b8 <__sflush_r+0x20>
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	d0f9      	beq.n	800a3b2 <__sflush_r+0x1a>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3c4:	682f      	ldr	r7, [r5, #0]
 800a3c6:	6a21      	ldr	r1, [r4, #32]
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	d032      	beq.n	800a432 <__sflush_r+0x9a>
 800a3cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	075a      	lsls	r2, r3, #29
 800a3d2:	d505      	bpl.n	800a3e0 <__sflush_r+0x48>
 800a3d4:	6863      	ldr	r3, [r4, #4]
 800a3d6:	1ac0      	subs	r0, r0, r3
 800a3d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3da:	b10b      	cbz	r3, 800a3e0 <__sflush_r+0x48>
 800a3dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3de:	1ac0      	subs	r0, r0, r3
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3e6:	6a21      	ldr	r1, [r4, #32]
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b0      	blx	r6
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	d106      	bne.n	800a400 <__sflush_r+0x68>
 800a3f2:	6829      	ldr	r1, [r5, #0]
 800a3f4:	291d      	cmp	r1, #29
 800a3f6:	d82b      	bhi.n	800a450 <__sflush_r+0xb8>
 800a3f8:	4a29      	ldr	r2, [pc, #164]	; (800a4a0 <__sflush_r+0x108>)
 800a3fa:	410a      	asrs	r2, r1
 800a3fc:	07d6      	lsls	r6, r2, #31
 800a3fe:	d427      	bmi.n	800a450 <__sflush_r+0xb8>
 800a400:	2200      	movs	r2, #0
 800a402:	6062      	str	r2, [r4, #4]
 800a404:	04d9      	lsls	r1, r3, #19
 800a406:	6922      	ldr	r2, [r4, #16]
 800a408:	6022      	str	r2, [r4, #0]
 800a40a:	d504      	bpl.n	800a416 <__sflush_r+0x7e>
 800a40c:	1c42      	adds	r2, r0, #1
 800a40e:	d101      	bne.n	800a414 <__sflush_r+0x7c>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	b903      	cbnz	r3, 800a416 <__sflush_r+0x7e>
 800a414:	6560      	str	r0, [r4, #84]	; 0x54
 800a416:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a418:	602f      	str	r7, [r5, #0]
 800a41a:	2900      	cmp	r1, #0
 800a41c:	d0c9      	beq.n	800a3b2 <__sflush_r+0x1a>
 800a41e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a422:	4299      	cmp	r1, r3
 800a424:	d002      	beq.n	800a42c <__sflush_r+0x94>
 800a426:	4628      	mov	r0, r5
 800a428:	f7ff fb00 	bl	8009a2c <_free_r>
 800a42c:	2000      	movs	r0, #0
 800a42e:	6360      	str	r0, [r4, #52]	; 0x34
 800a430:	e7c0      	b.n	800a3b4 <__sflush_r+0x1c>
 800a432:	2301      	movs	r3, #1
 800a434:	4628      	mov	r0, r5
 800a436:	47b0      	blx	r6
 800a438:	1c41      	adds	r1, r0, #1
 800a43a:	d1c8      	bne.n	800a3ce <__sflush_r+0x36>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0c5      	beq.n	800a3ce <__sflush_r+0x36>
 800a442:	2b1d      	cmp	r3, #29
 800a444:	d001      	beq.n	800a44a <__sflush_r+0xb2>
 800a446:	2b16      	cmp	r3, #22
 800a448:	d101      	bne.n	800a44e <__sflush_r+0xb6>
 800a44a:	602f      	str	r7, [r5, #0]
 800a44c:	e7b1      	b.n	800a3b2 <__sflush_r+0x1a>
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a454:	81a3      	strh	r3, [r4, #12]
 800a456:	e7ad      	b.n	800a3b4 <__sflush_r+0x1c>
 800a458:	690f      	ldr	r7, [r1, #16]
 800a45a:	2f00      	cmp	r7, #0
 800a45c:	d0a9      	beq.n	800a3b2 <__sflush_r+0x1a>
 800a45e:	0793      	lsls	r3, r2, #30
 800a460:	680e      	ldr	r6, [r1, #0]
 800a462:	bf08      	it	eq
 800a464:	694b      	ldreq	r3, [r1, #20]
 800a466:	600f      	str	r7, [r1, #0]
 800a468:	bf18      	it	ne
 800a46a:	2300      	movne	r3, #0
 800a46c:	eba6 0807 	sub.w	r8, r6, r7
 800a470:	608b      	str	r3, [r1, #8]
 800a472:	f1b8 0f00 	cmp.w	r8, #0
 800a476:	dd9c      	ble.n	800a3b2 <__sflush_r+0x1a>
 800a478:	6a21      	ldr	r1, [r4, #32]
 800a47a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a47c:	4643      	mov	r3, r8
 800a47e:	463a      	mov	r2, r7
 800a480:	4628      	mov	r0, r5
 800a482:	47b0      	blx	r6
 800a484:	2800      	cmp	r0, #0
 800a486:	dc06      	bgt.n	800a496 <__sflush_r+0xfe>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a48e:	81a3      	strh	r3, [r4, #12]
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	e78e      	b.n	800a3b4 <__sflush_r+0x1c>
 800a496:	4407      	add	r7, r0
 800a498:	eba8 0800 	sub.w	r8, r8, r0
 800a49c:	e7e9      	b.n	800a472 <__sflush_r+0xda>
 800a49e:	bf00      	nop
 800a4a0:	dfbffffe 	.word	0xdfbffffe

0800a4a4 <_fflush_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	690b      	ldr	r3, [r1, #16]
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	b913      	cbnz	r3, 800a4b4 <_fflush_r+0x10>
 800a4ae:	2500      	movs	r5, #0
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	b118      	cbz	r0, 800a4be <_fflush_r+0x1a>
 800a4b6:	6a03      	ldr	r3, [r0, #32]
 800a4b8:	b90b      	cbnz	r3, 800a4be <_fflush_r+0x1a>
 800a4ba:	f7fd fd6d 	bl	8007f98 <__sinit>
 800a4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0f3      	beq.n	800a4ae <_fflush_r+0xa>
 800a4c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4c8:	07d0      	lsls	r0, r2, #31
 800a4ca:	d404      	bmi.n	800a4d6 <_fflush_r+0x32>
 800a4cc:	0599      	lsls	r1, r3, #22
 800a4ce:	d402      	bmi.n	800a4d6 <_fflush_r+0x32>
 800a4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4d2:	f7ff fa5b 	bl	800998c <__retarget_lock_acquire_recursive>
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	4621      	mov	r1, r4
 800a4da:	f7ff ff5d 	bl	800a398 <__sflush_r>
 800a4de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4e0:	07da      	lsls	r2, r3, #31
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	d4e4      	bmi.n	800a4b0 <_fflush_r+0xc>
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	059b      	lsls	r3, r3, #22
 800a4ea:	d4e1      	bmi.n	800a4b0 <_fflush_r+0xc>
 800a4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ee:	f7ff fa4f 	bl	8009990 <__retarget_lock_release_recursive>
 800a4f2:	e7dd      	b.n	800a4b0 <_fflush_r+0xc>

0800a4f4 <fiprintf>:
 800a4f4:	b40e      	push	{r1, r2, r3}
 800a4f6:	b503      	push	{r0, r1, lr}
 800a4f8:	4601      	mov	r1, r0
 800a4fa:	ab03      	add	r3, sp, #12
 800a4fc:	4805      	ldr	r0, [pc, #20]	; (800a514 <fiprintf+0x20>)
 800a4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a502:	6800      	ldr	r0, [r0, #0]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	f000 fb59 	bl	800abbc <_vfiprintf_r>
 800a50a:	b002      	add	sp, #8
 800a50c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a510:	b003      	add	sp, #12
 800a512:	4770      	bx	lr
 800a514:	20000070 	.word	0x20000070

0800a518 <siscanf>:
 800a518:	b40e      	push	{r1, r2, r3}
 800a51a:	b510      	push	{r4, lr}
 800a51c:	b09f      	sub	sp, #124	; 0x7c
 800a51e:	ac21      	add	r4, sp, #132	; 0x84
 800a520:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a524:	f854 2b04 	ldr.w	r2, [r4], #4
 800a528:	9201      	str	r2, [sp, #4]
 800a52a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a52e:	9004      	str	r0, [sp, #16]
 800a530:	9008      	str	r0, [sp, #32]
 800a532:	f7f5 fe57 	bl	80001e4 <strlen>
 800a536:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <siscanf+0x50>)
 800a538:	9005      	str	r0, [sp, #20]
 800a53a:	9009      	str	r0, [sp, #36]	; 0x24
 800a53c:	930d      	str	r3, [sp, #52]	; 0x34
 800a53e:	480b      	ldr	r0, [pc, #44]	; (800a56c <siscanf+0x54>)
 800a540:	9a01      	ldr	r2, [sp, #4]
 800a542:	6800      	ldr	r0, [r0, #0]
 800a544:	9403      	str	r4, [sp, #12]
 800a546:	2300      	movs	r3, #0
 800a548:	9311      	str	r3, [sp, #68]	; 0x44
 800a54a:	9316      	str	r3, [sp, #88]	; 0x58
 800a54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a550:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a554:	a904      	add	r1, sp, #16
 800a556:	4623      	mov	r3, r4
 800a558:	f000 f98e 	bl	800a878 <__ssvfiscanf_r>
 800a55c:	b01f      	add	sp, #124	; 0x7c
 800a55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a562:	b003      	add	sp, #12
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	0800808f 	.word	0x0800808f
 800a56c:	20000070 	.word	0x20000070

0800a570 <memmove>:
 800a570:	4288      	cmp	r0, r1
 800a572:	b510      	push	{r4, lr}
 800a574:	eb01 0402 	add.w	r4, r1, r2
 800a578:	d902      	bls.n	800a580 <memmove+0x10>
 800a57a:	4284      	cmp	r4, r0
 800a57c:	4623      	mov	r3, r4
 800a57e:	d807      	bhi.n	800a590 <memmove+0x20>
 800a580:	1e43      	subs	r3, r0, #1
 800a582:	42a1      	cmp	r1, r4
 800a584:	d008      	beq.n	800a598 <memmove+0x28>
 800a586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a58a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a58e:	e7f8      	b.n	800a582 <memmove+0x12>
 800a590:	4402      	add	r2, r0
 800a592:	4601      	mov	r1, r0
 800a594:	428a      	cmp	r2, r1
 800a596:	d100      	bne.n	800a59a <memmove+0x2a>
 800a598:	bd10      	pop	{r4, pc}
 800a59a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a59e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5a2:	e7f7      	b.n	800a594 <memmove+0x24>

0800a5a4 <strncmp>:
 800a5a4:	b510      	push	{r4, lr}
 800a5a6:	b16a      	cbz	r2, 800a5c4 <strncmp+0x20>
 800a5a8:	3901      	subs	r1, #1
 800a5aa:	1884      	adds	r4, r0, r2
 800a5ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d103      	bne.n	800a5c0 <strncmp+0x1c>
 800a5b8:	42a0      	cmp	r0, r4
 800a5ba:	d001      	beq.n	800a5c0 <strncmp+0x1c>
 800a5bc:	2a00      	cmp	r2, #0
 800a5be:	d1f5      	bne.n	800a5ac <strncmp+0x8>
 800a5c0:	1ad0      	subs	r0, r2, r3
 800a5c2:	bd10      	pop	{r4, pc}
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	e7fc      	b.n	800a5c2 <strncmp+0x1e>

0800a5c8 <__gettzinfo>:
 800a5c8:	4800      	ldr	r0, [pc, #0]	; (800a5cc <__gettzinfo+0x4>)
 800a5ca:	4770      	bx	lr
 800a5cc:	20000078 	.word	0x20000078

0800a5d0 <gmtime_r>:
 800a5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	4a4d      	ldr	r2, [pc, #308]	; (800a70c <gmtime_r+0x13c>)
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a5de:	f7f6 fb43 	bl	8000c68 <__aeabi_ldivmod>
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	bfbc      	itt	lt
 800a5e6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a5ea:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a5ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a5f2:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 800a5f6:	fbb2 f3f1 	udiv	r3, r2, r1
 800a5fa:	fb01 2213 	mls	r2, r1, r3, r2
 800a5fe:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800a602:	bfac      	ite	ge
 800a604:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800a608:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800a60c:	60a3      	str	r3, [r4, #8]
 800a60e:	fbb2 f3f1 	udiv	r3, r2, r1
 800a612:	fb01 2213 	mls	r2, r1, r3, r2
 800a616:	6063      	str	r3, [r4, #4]
 800a618:	6022      	str	r2, [r4, #0]
 800a61a:	1cc3      	adds	r3, r0, #3
 800a61c:	2207      	movs	r2, #7
 800a61e:	fb93 f2f2 	sdiv	r2, r3, r2
 800a622:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800a626:	1a9b      	subs	r3, r3, r2
 800a628:	bf48      	it	mi
 800a62a:	3307      	addmi	r3, #7
 800a62c:	2800      	cmp	r0, #0
 800a62e:	61a3      	str	r3, [r4, #24]
 800a630:	bfb8      	it	lt
 800a632:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800a636:	4936      	ldr	r1, [pc, #216]	; (800a710 <gmtime_r+0x140>)
 800a638:	bfae      	itee	ge
 800a63a:	fb90 f1f1 	sdivge	r1, r0, r1
 800a63e:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800a642:	fb93 f1f1 	sdivlt	r1, r3, r1
 800a646:	4b33      	ldr	r3, [pc, #204]	; (800a714 <gmtime_r+0x144>)
 800a648:	fb03 0001 	mla	r0, r3, r1, r0
 800a64c:	f648 63ac 	movw	r3, #36524	; 0x8eac
 800a650:	fbb0 f3f3 	udiv	r3, r0, r3
 800a654:	4403      	add	r3, r0
 800a656:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800a65a:	fbb0 f2fc 	udiv	r2, r0, ip
 800a65e:	1a9b      	subs	r3, r3, r2
 800a660:	f240 176d 	movw	r7, #365	; 0x16d
 800a664:	4a2c      	ldr	r2, [pc, #176]	; (800a718 <gmtime_r+0x148>)
 800a666:	fbb0 f2f2 	udiv	r2, r0, r2
 800a66a:	2664      	movs	r6, #100	; 0x64
 800a66c:	1a9b      	subs	r3, r3, r2
 800a66e:	fbb3 f2f7 	udiv	r2, r3, r7
 800a672:	fbb3 f3fc 	udiv	r3, r3, ip
 800a676:	fbb2 f5f6 	udiv	r5, r2, r6
 800a67a:	1aeb      	subs	r3, r5, r3
 800a67c:	4403      	add	r3, r0
 800a67e:	fb07 3312 	mls	r3, r7, r2, r3
 800a682:	2099      	movs	r0, #153	; 0x99
 800a684:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800a688:	3702      	adds	r7, #2
 800a68a:	f103 0e01 	add.w	lr, r3, #1
 800a68e:	fbb7 fcf0 	udiv	ip, r7, r0
 800a692:	fb00 f00c 	mul.w	r0, r0, ip
 800a696:	3002      	adds	r0, #2
 800a698:	f04f 0805 	mov.w	r8, #5
 800a69c:	fbb0 f0f8 	udiv	r0, r0, r8
 800a6a0:	ebae 0000 	sub.w	r0, lr, r0
 800a6a4:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800a6a8:	4577      	cmp	r7, lr
 800a6aa:	bf94      	ite	ls
 800a6ac:	2702      	movls	r7, #2
 800a6ae:	f06f 0709 	mvnhi.w	r7, #9
 800a6b2:	4467      	add	r7, ip
 800a6b4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800a6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6bc:	2f01      	cmp	r7, #1
 800a6be:	bf98      	it	ls
 800a6c0:	3101      	addls	r1, #1
 800a6c2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a6c6:	d30c      	bcc.n	800a6e2 <gmtime_r+0x112>
 800a6c8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a6cc:	61e3      	str	r3, [r4, #28]
 800a6ce:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60e0      	str	r0, [r4, #12]
 800a6d6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800a6da:	6223      	str	r3, [r4, #32]
 800a6dc:	4620      	mov	r0, r4
 800a6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e2:	f012 0f03 	tst.w	r2, #3
 800a6e6:	d102      	bne.n	800a6ee <gmtime_r+0x11e>
 800a6e8:	fb06 2515 	mls	r5, r6, r5, r2
 800a6ec:	b95d      	cbnz	r5, 800a706 <gmtime_r+0x136>
 800a6ee:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800a6f2:	fbb2 f6f5 	udiv	r6, r2, r5
 800a6f6:	fb05 2216 	mls	r2, r5, r6, r2
 800a6fa:	fab2 f282 	clz	r2, r2
 800a6fe:	0952      	lsrs	r2, r2, #5
 800a700:	333b      	adds	r3, #59	; 0x3b
 800a702:	4413      	add	r3, r2
 800a704:	e7e2      	b.n	800a6cc <gmtime_r+0xfc>
 800a706:	2201      	movs	r2, #1
 800a708:	e7fa      	b.n	800a700 <gmtime_r+0x130>
 800a70a:	bf00      	nop
 800a70c:	00015180 	.word	0x00015180
 800a710:	00023ab1 	.word	0x00023ab1
 800a714:	fffdc54f 	.word	0xfffdc54f
 800a718:	00023ab0 	.word	0x00023ab0

0800a71c <_sbrk_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4d06      	ldr	r5, [pc, #24]	; (800a738 <_sbrk_r+0x1c>)
 800a720:	2300      	movs	r3, #0
 800a722:	4604      	mov	r4, r0
 800a724:	4608      	mov	r0, r1
 800a726:	602b      	str	r3, [r5, #0]
 800a728:	f7f8 ffec 	bl	8003704 <_sbrk>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d102      	bne.n	800a736 <_sbrk_r+0x1a>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	b103      	cbz	r3, 800a736 <_sbrk_r+0x1a>
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	bd38      	pop	{r3, r4, r5, pc}
 800a738:	200003d8 	.word	0x200003d8

0800a73c <abort>:
 800a73c:	b508      	push	{r3, lr}
 800a73e:	2006      	movs	r0, #6
 800a740:	f000 fdd4 	bl	800b2ec <raise>
 800a744:	2001      	movs	r0, #1
 800a746:	f7f8 ff66 	bl	8003616 <_exit>
	...

0800a74c <__env_lock>:
 800a74c:	4801      	ldr	r0, [pc, #4]	; (800a754 <__env_lock+0x8>)
 800a74e:	f7ff b91d 	b.w	800998c <__retarget_lock_acquire_recursive>
 800a752:	bf00      	nop
 800a754:	200003dc 	.word	0x200003dc

0800a758 <__env_unlock>:
 800a758:	4801      	ldr	r0, [pc, #4]	; (800a760 <__env_unlock+0x8>)
 800a75a:	f7ff b919 	b.w	8009990 <__retarget_lock_release_recursive>
 800a75e:	bf00      	nop
 800a760:	200003dc 	.word	0x200003dc

0800a764 <_realloc_r>:
 800a764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a768:	4680      	mov	r8, r0
 800a76a:	4614      	mov	r4, r2
 800a76c:	460e      	mov	r6, r1
 800a76e:	b921      	cbnz	r1, 800a77a <_realloc_r+0x16>
 800a770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a774:	4611      	mov	r1, r2
 800a776:	f7ff ba1d 	b.w	8009bb4 <_malloc_r>
 800a77a:	b92a      	cbnz	r2, 800a788 <_realloc_r+0x24>
 800a77c:	f7ff f956 	bl	8009a2c <_free_r>
 800a780:	4625      	mov	r5, r4
 800a782:	4628      	mov	r0, r5
 800a784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a788:	f000 fdcc 	bl	800b324 <_malloc_usable_size_r>
 800a78c:	4284      	cmp	r4, r0
 800a78e:	4607      	mov	r7, r0
 800a790:	d802      	bhi.n	800a798 <_realloc_r+0x34>
 800a792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a796:	d812      	bhi.n	800a7be <_realloc_r+0x5a>
 800a798:	4621      	mov	r1, r4
 800a79a:	4640      	mov	r0, r8
 800a79c:	f7ff fa0a 	bl	8009bb4 <_malloc_r>
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d0ed      	beq.n	800a782 <_realloc_r+0x1e>
 800a7a6:	42bc      	cmp	r4, r7
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	bf28      	it	cs
 800a7ae:	463a      	movcs	r2, r7
 800a7b0:	f7ff f8f7 	bl	80099a2 <memcpy>
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	f7ff f938 	bl	8009a2c <_free_r>
 800a7bc:	e7e1      	b.n	800a782 <_realloc_r+0x1e>
 800a7be:	4635      	mov	r5, r6
 800a7c0:	e7df      	b.n	800a782 <_realloc_r+0x1e>

0800a7c2 <_sungetc_r>:
 800a7c2:	b538      	push	{r3, r4, r5, lr}
 800a7c4:	1c4b      	adds	r3, r1, #1
 800a7c6:	4614      	mov	r4, r2
 800a7c8:	d103      	bne.n	800a7d2 <_sungetc_r+0x10>
 800a7ca:	f04f 35ff 	mov.w	r5, #4294967295
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	bd38      	pop	{r3, r4, r5, pc}
 800a7d2:	8993      	ldrh	r3, [r2, #12]
 800a7d4:	f023 0320 	bic.w	r3, r3, #32
 800a7d8:	8193      	strh	r3, [r2, #12]
 800a7da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7dc:	6852      	ldr	r2, [r2, #4]
 800a7de:	b2cd      	uxtb	r5, r1
 800a7e0:	b18b      	cbz	r3, 800a806 <_sungetc_r+0x44>
 800a7e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	dd08      	ble.n	800a7fa <_sungetc_r+0x38>
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	1e5a      	subs	r2, r3, #1
 800a7ec:	6022      	str	r2, [r4, #0]
 800a7ee:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a7f2:	6863      	ldr	r3, [r4, #4]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	6063      	str	r3, [r4, #4]
 800a7f8:	e7e9      	b.n	800a7ce <_sungetc_r+0xc>
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	f000 fc7f 	bl	800b0fe <__submore>
 800a800:	2800      	cmp	r0, #0
 800a802:	d0f1      	beq.n	800a7e8 <_sungetc_r+0x26>
 800a804:	e7e1      	b.n	800a7ca <_sungetc_r+0x8>
 800a806:	6921      	ldr	r1, [r4, #16]
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	b151      	cbz	r1, 800a822 <_sungetc_r+0x60>
 800a80c:	4299      	cmp	r1, r3
 800a80e:	d208      	bcs.n	800a822 <_sungetc_r+0x60>
 800a810:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a814:	42a9      	cmp	r1, r5
 800a816:	d104      	bne.n	800a822 <_sungetc_r+0x60>
 800a818:	3b01      	subs	r3, #1
 800a81a:	3201      	adds	r2, #1
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	6062      	str	r2, [r4, #4]
 800a820:	e7d5      	b.n	800a7ce <_sungetc_r+0xc>
 800a822:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a82a:	6363      	str	r3, [r4, #52]	; 0x34
 800a82c:	2303      	movs	r3, #3
 800a82e:	63a3      	str	r3, [r4, #56]	; 0x38
 800a830:	4623      	mov	r3, r4
 800a832:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	2301      	movs	r3, #1
 800a83a:	e7dc      	b.n	800a7f6 <_sungetc_r+0x34>

0800a83c <__ssrefill_r>:
 800a83c:	b510      	push	{r4, lr}
 800a83e:	460c      	mov	r4, r1
 800a840:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a842:	b169      	cbz	r1, 800a860 <__ssrefill_r+0x24>
 800a844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a848:	4299      	cmp	r1, r3
 800a84a:	d001      	beq.n	800a850 <__ssrefill_r+0x14>
 800a84c:	f7ff f8ee 	bl	8009a2c <_free_r>
 800a850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a852:	6063      	str	r3, [r4, #4]
 800a854:	2000      	movs	r0, #0
 800a856:	6360      	str	r0, [r4, #52]	; 0x34
 800a858:	b113      	cbz	r3, 800a860 <__ssrefill_r+0x24>
 800a85a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	bd10      	pop	{r4, pc}
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	6023      	str	r3, [r4, #0]
 800a864:	2300      	movs	r3, #0
 800a866:	6063      	str	r3, [r4, #4]
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	f043 0320 	orr.w	r3, r3, #32
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	e7f3      	b.n	800a85e <__ssrefill_r+0x22>
	...

0800a878 <__ssvfiscanf_r>:
 800a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	460c      	mov	r4, r1
 800a87e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a882:	2100      	movs	r1, #0
 800a884:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a888:	49a6      	ldr	r1, [pc, #664]	; (800ab24 <__ssvfiscanf_r+0x2ac>)
 800a88a:	91a0      	str	r1, [sp, #640]	; 0x280
 800a88c:	f10d 0804 	add.w	r8, sp, #4
 800a890:	49a5      	ldr	r1, [pc, #660]	; (800ab28 <__ssvfiscanf_r+0x2b0>)
 800a892:	4fa6      	ldr	r7, [pc, #664]	; (800ab2c <__ssvfiscanf_r+0x2b4>)
 800a894:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ab30 <__ssvfiscanf_r+0x2b8>
 800a898:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a89c:	4606      	mov	r6, r0
 800a89e:	91a1      	str	r1, [sp, #644]	; 0x284
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	7813      	ldrb	r3, [r2, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 815a 	beq.w	800ab5e <__ssvfiscanf_r+0x2e6>
 800a8aa:	5cf9      	ldrb	r1, [r7, r3]
 800a8ac:	f011 0108 	ands.w	r1, r1, #8
 800a8b0:	f102 0501 	add.w	r5, r2, #1
 800a8b4:	d019      	beq.n	800a8ea <__ssvfiscanf_r+0x72>
 800a8b6:	6863      	ldr	r3, [r4, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	dd0f      	ble.n	800a8dc <__ssvfiscanf_r+0x64>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	781a      	ldrb	r2, [r3, #0]
 800a8c0:	5cba      	ldrb	r2, [r7, r2]
 800a8c2:	0712      	lsls	r2, r2, #28
 800a8c4:	d401      	bmi.n	800a8ca <__ssvfiscanf_r+0x52>
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	e7eb      	b.n	800a8a2 <__ssvfiscanf_r+0x2a>
 800a8ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8cc:	3201      	adds	r2, #1
 800a8ce:	9245      	str	r2, [sp, #276]	; 0x114
 800a8d0:	6862      	ldr	r2, [r4, #4]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	3a01      	subs	r2, #1
 800a8d6:	6062      	str	r2, [r4, #4]
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	e7ec      	b.n	800a8b6 <__ssvfiscanf_r+0x3e>
 800a8dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4798      	blx	r3
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d0e9      	beq.n	800a8bc <__ssvfiscanf_r+0x44>
 800a8e8:	e7ed      	b.n	800a8c6 <__ssvfiscanf_r+0x4e>
 800a8ea:	2b25      	cmp	r3, #37	; 0x25
 800a8ec:	d012      	beq.n	800a914 <__ssvfiscanf_r+0x9c>
 800a8ee:	469a      	mov	sl, r3
 800a8f0:	6863      	ldr	r3, [r4, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f340 8091 	ble.w	800aa1a <__ssvfiscanf_r+0x1a2>
 800a8f8:	6822      	ldr	r2, [r4, #0]
 800a8fa:	7813      	ldrb	r3, [r2, #0]
 800a8fc:	4553      	cmp	r3, sl
 800a8fe:	f040 812e 	bne.w	800ab5e <__ssvfiscanf_r+0x2e6>
 800a902:	6863      	ldr	r3, [r4, #4]
 800a904:	3b01      	subs	r3, #1
 800a906:	6063      	str	r3, [r4, #4]
 800a908:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a90a:	3201      	adds	r2, #1
 800a90c:	3301      	adds	r3, #1
 800a90e:	6022      	str	r2, [r4, #0]
 800a910:	9345      	str	r3, [sp, #276]	; 0x114
 800a912:	e7d8      	b.n	800a8c6 <__ssvfiscanf_r+0x4e>
 800a914:	9141      	str	r1, [sp, #260]	; 0x104
 800a916:	9143      	str	r1, [sp, #268]	; 0x10c
 800a918:	7853      	ldrb	r3, [r2, #1]
 800a91a:	2b2a      	cmp	r3, #42	; 0x2a
 800a91c:	bf02      	ittt	eq
 800a91e:	2310      	moveq	r3, #16
 800a920:	1c95      	addeq	r5, r2, #2
 800a922:	9341      	streq	r3, [sp, #260]	; 0x104
 800a924:	220a      	movs	r2, #10
 800a926:	46aa      	mov	sl, r5
 800a928:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a92c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a930:	2b09      	cmp	r3, #9
 800a932:	d91c      	bls.n	800a96e <__ssvfiscanf_r+0xf6>
 800a934:	487e      	ldr	r0, [pc, #504]	; (800ab30 <__ssvfiscanf_r+0x2b8>)
 800a936:	2203      	movs	r2, #3
 800a938:	f7f5 fc62 	bl	8000200 <memchr>
 800a93c:	b138      	cbz	r0, 800a94e <__ssvfiscanf_r+0xd6>
 800a93e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a940:	eba0 0009 	sub.w	r0, r0, r9
 800a944:	2301      	movs	r3, #1
 800a946:	4083      	lsls	r3, r0
 800a948:	4313      	orrs	r3, r2
 800a94a:	9341      	str	r3, [sp, #260]	; 0x104
 800a94c:	4655      	mov	r5, sl
 800a94e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a952:	2b78      	cmp	r3, #120	; 0x78
 800a954:	d806      	bhi.n	800a964 <__ssvfiscanf_r+0xec>
 800a956:	2b57      	cmp	r3, #87	; 0x57
 800a958:	d810      	bhi.n	800a97c <__ssvfiscanf_r+0x104>
 800a95a:	2b25      	cmp	r3, #37	; 0x25
 800a95c:	d0c7      	beq.n	800a8ee <__ssvfiscanf_r+0x76>
 800a95e:	d857      	bhi.n	800aa10 <__ssvfiscanf_r+0x198>
 800a960:	2b00      	cmp	r3, #0
 800a962:	d065      	beq.n	800aa30 <__ssvfiscanf_r+0x1b8>
 800a964:	2303      	movs	r3, #3
 800a966:	9347      	str	r3, [sp, #284]	; 0x11c
 800a968:	230a      	movs	r3, #10
 800a96a:	9342      	str	r3, [sp, #264]	; 0x108
 800a96c:	e076      	b.n	800aa5c <__ssvfiscanf_r+0x1e4>
 800a96e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a970:	fb02 1103 	mla	r1, r2, r3, r1
 800a974:	3930      	subs	r1, #48	; 0x30
 800a976:	9143      	str	r1, [sp, #268]	; 0x10c
 800a978:	4655      	mov	r5, sl
 800a97a:	e7d4      	b.n	800a926 <__ssvfiscanf_r+0xae>
 800a97c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a980:	2a20      	cmp	r2, #32
 800a982:	d8ef      	bhi.n	800a964 <__ssvfiscanf_r+0xec>
 800a984:	a101      	add	r1, pc, #4	; (adr r1, 800a98c <__ssvfiscanf_r+0x114>)
 800a986:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a98a:	bf00      	nop
 800a98c:	0800aa3f 	.word	0x0800aa3f
 800a990:	0800a965 	.word	0x0800a965
 800a994:	0800a965 	.word	0x0800a965
 800a998:	0800aa9d 	.word	0x0800aa9d
 800a99c:	0800a965 	.word	0x0800a965
 800a9a0:	0800a965 	.word	0x0800a965
 800a9a4:	0800a965 	.word	0x0800a965
 800a9a8:	0800a965 	.word	0x0800a965
 800a9ac:	0800a965 	.word	0x0800a965
 800a9b0:	0800a965 	.word	0x0800a965
 800a9b4:	0800a965 	.word	0x0800a965
 800a9b8:	0800aab3 	.word	0x0800aab3
 800a9bc:	0800aa99 	.word	0x0800aa99
 800a9c0:	0800aa17 	.word	0x0800aa17
 800a9c4:	0800aa17 	.word	0x0800aa17
 800a9c8:	0800aa17 	.word	0x0800aa17
 800a9cc:	0800a965 	.word	0x0800a965
 800a9d0:	0800aa55 	.word	0x0800aa55
 800a9d4:	0800a965 	.word	0x0800a965
 800a9d8:	0800a965 	.word	0x0800a965
 800a9dc:	0800a965 	.word	0x0800a965
 800a9e0:	0800a965 	.word	0x0800a965
 800a9e4:	0800aac3 	.word	0x0800aac3
 800a9e8:	0800aa91 	.word	0x0800aa91
 800a9ec:	0800aa37 	.word	0x0800aa37
 800a9f0:	0800a965 	.word	0x0800a965
 800a9f4:	0800a965 	.word	0x0800a965
 800a9f8:	0800aabf 	.word	0x0800aabf
 800a9fc:	0800a965 	.word	0x0800a965
 800aa00:	0800aa99 	.word	0x0800aa99
 800aa04:	0800a965 	.word	0x0800a965
 800aa08:	0800a965 	.word	0x0800a965
 800aa0c:	0800aa3f 	.word	0x0800aa3f
 800aa10:	3b45      	subs	r3, #69	; 0x45
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d8a6      	bhi.n	800a964 <__ssvfiscanf_r+0xec>
 800aa16:	2305      	movs	r3, #5
 800aa18:	e01f      	b.n	800aa5a <__ssvfiscanf_r+0x1e2>
 800aa1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	4630      	mov	r0, r6
 800aa20:	4798      	blx	r3
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f43f af68 	beq.w	800a8f8 <__ssvfiscanf_r+0x80>
 800aa28:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	f040 808d 	bne.w	800ab4a <__ssvfiscanf_r+0x2d2>
 800aa30:	f04f 30ff 	mov.w	r0, #4294967295
 800aa34:	e08f      	b.n	800ab56 <__ssvfiscanf_r+0x2de>
 800aa36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aa38:	f042 0220 	orr.w	r2, r2, #32
 800aa3c:	9241      	str	r2, [sp, #260]	; 0x104
 800aa3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aa40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa44:	9241      	str	r2, [sp, #260]	; 0x104
 800aa46:	2210      	movs	r2, #16
 800aa48:	2b6f      	cmp	r3, #111	; 0x6f
 800aa4a:	9242      	str	r2, [sp, #264]	; 0x108
 800aa4c:	bf34      	ite	cc
 800aa4e:	2303      	movcc	r3, #3
 800aa50:	2304      	movcs	r3, #4
 800aa52:	e002      	b.n	800aa5a <__ssvfiscanf_r+0x1e2>
 800aa54:	2300      	movs	r3, #0
 800aa56:	9342      	str	r3, [sp, #264]	; 0x108
 800aa58:	2303      	movs	r3, #3
 800aa5a:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa5c:	6863      	ldr	r3, [r4, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	dd3d      	ble.n	800aade <__ssvfiscanf_r+0x266>
 800aa62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa64:	0659      	lsls	r1, r3, #25
 800aa66:	d404      	bmi.n	800aa72 <__ssvfiscanf_r+0x1fa>
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	781a      	ldrb	r2, [r3, #0]
 800aa6c:	5cba      	ldrb	r2, [r7, r2]
 800aa6e:	0712      	lsls	r2, r2, #28
 800aa70:	d43c      	bmi.n	800aaec <__ssvfiscanf_r+0x274>
 800aa72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	dc4b      	bgt.n	800ab10 <__ssvfiscanf_r+0x298>
 800aa78:	466b      	mov	r3, sp
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	a941      	add	r1, sp, #260	; 0x104
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f000 f9b6 	bl	800adf0 <_scanf_chars>
 800aa84:	2801      	cmp	r0, #1
 800aa86:	d06a      	beq.n	800ab5e <__ssvfiscanf_r+0x2e6>
 800aa88:	2802      	cmp	r0, #2
 800aa8a:	f47f af1c 	bne.w	800a8c6 <__ssvfiscanf_r+0x4e>
 800aa8e:	e7cb      	b.n	800aa28 <__ssvfiscanf_r+0x1b0>
 800aa90:	2308      	movs	r3, #8
 800aa92:	9342      	str	r3, [sp, #264]	; 0x108
 800aa94:	2304      	movs	r3, #4
 800aa96:	e7e0      	b.n	800aa5a <__ssvfiscanf_r+0x1e2>
 800aa98:	220a      	movs	r2, #10
 800aa9a:	e7d5      	b.n	800aa48 <__ssvfiscanf_r+0x1d0>
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	f000 faf4 	bl	800b08c <__sccl>
 800aaa4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aaa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaaa:	9341      	str	r3, [sp, #260]	; 0x104
 800aaac:	4605      	mov	r5, r0
 800aaae:	2301      	movs	r3, #1
 800aab0:	e7d3      	b.n	800aa5a <__ssvfiscanf_r+0x1e2>
 800aab2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aab8:	9341      	str	r3, [sp, #260]	; 0x104
 800aaba:	2300      	movs	r3, #0
 800aabc:	e7cd      	b.n	800aa5a <__ssvfiscanf_r+0x1e2>
 800aabe:	2302      	movs	r3, #2
 800aac0:	e7cb      	b.n	800aa5a <__ssvfiscanf_r+0x1e2>
 800aac2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800aac4:	06c3      	lsls	r3, r0, #27
 800aac6:	f53f aefe 	bmi.w	800a8c6 <__ssvfiscanf_r+0x4e>
 800aaca:	9b00      	ldr	r3, [sp, #0]
 800aacc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aace:	1d19      	adds	r1, r3, #4
 800aad0:	9100      	str	r1, [sp, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	07c0      	lsls	r0, r0, #31
 800aad6:	bf4c      	ite	mi
 800aad8:	801a      	strhmi	r2, [r3, #0]
 800aada:	601a      	strpl	r2, [r3, #0]
 800aadc:	e6f3      	b.n	800a8c6 <__ssvfiscanf_r+0x4e>
 800aade:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aae0:	4621      	mov	r1, r4
 800aae2:	4630      	mov	r0, r6
 800aae4:	4798      	blx	r3
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d0bb      	beq.n	800aa62 <__ssvfiscanf_r+0x1ea>
 800aaea:	e79d      	b.n	800aa28 <__ssvfiscanf_r+0x1b0>
 800aaec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aaee:	3201      	adds	r2, #1
 800aaf0:	9245      	str	r2, [sp, #276]	; 0x114
 800aaf2:	6862      	ldr	r2, [r4, #4]
 800aaf4:	3a01      	subs	r2, #1
 800aaf6:	2a00      	cmp	r2, #0
 800aaf8:	6062      	str	r2, [r4, #4]
 800aafa:	dd02      	ble.n	800ab02 <__ssvfiscanf_r+0x28a>
 800aafc:	3301      	adds	r3, #1
 800aafe:	6023      	str	r3, [r4, #0]
 800ab00:	e7b2      	b.n	800aa68 <__ssvfiscanf_r+0x1f0>
 800ab02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab04:	4621      	mov	r1, r4
 800ab06:	4630      	mov	r0, r6
 800ab08:	4798      	blx	r3
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d0ac      	beq.n	800aa68 <__ssvfiscanf_r+0x1f0>
 800ab0e:	e78b      	b.n	800aa28 <__ssvfiscanf_r+0x1b0>
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	dc0f      	bgt.n	800ab34 <__ssvfiscanf_r+0x2bc>
 800ab14:	466b      	mov	r3, sp
 800ab16:	4622      	mov	r2, r4
 800ab18:	a941      	add	r1, sp, #260	; 0x104
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f000 f9c2 	bl	800aea4 <_scanf_i>
 800ab20:	e7b0      	b.n	800aa84 <__ssvfiscanf_r+0x20c>
 800ab22:	bf00      	nop
 800ab24:	0800a7c3 	.word	0x0800a7c3
 800ab28:	0800a83d 	.word	0x0800a83d
 800ab2c:	0800c35d 	.word	0x0800c35d
 800ab30:	0800c463 	.word	0x0800c463
 800ab34:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <__ssvfiscanf_r+0x2ec>)
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f43f aec5 	beq.w	800a8c6 <__ssvfiscanf_r+0x4e>
 800ab3c:	466b      	mov	r3, sp
 800ab3e:	4622      	mov	r2, r4
 800ab40:	a941      	add	r1, sp, #260	; 0x104
 800ab42:	4630      	mov	r0, r6
 800ab44:	f3af 8000 	nop.w
 800ab48:	e79c      	b.n	800aa84 <__ssvfiscanf_r+0x20c>
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ab50:	bf18      	it	ne
 800ab52:	f04f 30ff 	movne.w	r0, #4294967295
 800ab56:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ab5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab5e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ab60:	e7f9      	b.n	800ab56 <__ssvfiscanf_r+0x2de>
 800ab62:	bf00      	nop
 800ab64:	00000000 	.word	0x00000000

0800ab68 <__sfputc_r>:
 800ab68:	6893      	ldr	r3, [r2, #8]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	b410      	push	{r4}
 800ab70:	6093      	str	r3, [r2, #8]
 800ab72:	da08      	bge.n	800ab86 <__sfputc_r+0x1e>
 800ab74:	6994      	ldr	r4, [r2, #24]
 800ab76:	42a3      	cmp	r3, r4
 800ab78:	db01      	blt.n	800ab7e <__sfputc_r+0x16>
 800ab7a:	290a      	cmp	r1, #10
 800ab7c:	d103      	bne.n	800ab86 <__sfputc_r+0x1e>
 800ab7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab82:	f000 baf6 	b.w	800b172 <__swbuf_r>
 800ab86:	6813      	ldr	r3, [r2, #0]
 800ab88:	1c58      	adds	r0, r3, #1
 800ab8a:	6010      	str	r0, [r2, #0]
 800ab8c:	7019      	strb	r1, [r3, #0]
 800ab8e:	4608      	mov	r0, r1
 800ab90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <__sfputs_r>:
 800ab96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab98:	4606      	mov	r6, r0
 800ab9a:	460f      	mov	r7, r1
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	18d5      	adds	r5, r2, r3
 800aba0:	42ac      	cmp	r4, r5
 800aba2:	d101      	bne.n	800aba8 <__sfputs_r+0x12>
 800aba4:	2000      	movs	r0, #0
 800aba6:	e007      	b.n	800abb8 <__sfputs_r+0x22>
 800aba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abac:	463a      	mov	r2, r7
 800abae:	4630      	mov	r0, r6
 800abb0:	f7ff ffda 	bl	800ab68 <__sfputc_r>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d1f3      	bne.n	800aba0 <__sfputs_r+0xa>
 800abb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abbc <_vfiprintf_r>:
 800abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	460d      	mov	r5, r1
 800abc2:	b09d      	sub	sp, #116	; 0x74
 800abc4:	4614      	mov	r4, r2
 800abc6:	4698      	mov	r8, r3
 800abc8:	4606      	mov	r6, r0
 800abca:	b118      	cbz	r0, 800abd4 <_vfiprintf_r+0x18>
 800abcc:	6a03      	ldr	r3, [r0, #32]
 800abce:	b90b      	cbnz	r3, 800abd4 <_vfiprintf_r+0x18>
 800abd0:	f7fd f9e2 	bl	8007f98 <__sinit>
 800abd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abd6:	07d9      	lsls	r1, r3, #31
 800abd8:	d405      	bmi.n	800abe6 <_vfiprintf_r+0x2a>
 800abda:	89ab      	ldrh	r3, [r5, #12]
 800abdc:	059a      	lsls	r2, r3, #22
 800abde:	d402      	bmi.n	800abe6 <_vfiprintf_r+0x2a>
 800abe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abe2:	f7fe fed3 	bl	800998c <__retarget_lock_acquire_recursive>
 800abe6:	89ab      	ldrh	r3, [r5, #12]
 800abe8:	071b      	lsls	r3, r3, #28
 800abea:	d501      	bpl.n	800abf0 <_vfiprintf_r+0x34>
 800abec:	692b      	ldr	r3, [r5, #16]
 800abee:	b99b      	cbnz	r3, 800ac18 <_vfiprintf_r+0x5c>
 800abf0:	4629      	mov	r1, r5
 800abf2:	4630      	mov	r0, r6
 800abf4:	f000 fafa 	bl	800b1ec <__swsetup_r>
 800abf8:	b170      	cbz	r0, 800ac18 <_vfiprintf_r+0x5c>
 800abfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abfc:	07dc      	lsls	r4, r3, #31
 800abfe:	d504      	bpl.n	800ac0a <_vfiprintf_r+0x4e>
 800ac00:	f04f 30ff 	mov.w	r0, #4294967295
 800ac04:	b01d      	add	sp, #116	; 0x74
 800ac06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0a:	89ab      	ldrh	r3, [r5, #12]
 800ac0c:	0598      	lsls	r0, r3, #22
 800ac0e:	d4f7      	bmi.n	800ac00 <_vfiprintf_r+0x44>
 800ac10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac12:	f7fe febd 	bl	8009990 <__retarget_lock_release_recursive>
 800ac16:	e7f3      	b.n	800ac00 <_vfiprintf_r+0x44>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1c:	2320      	movs	r3, #32
 800ac1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac26:	2330      	movs	r3, #48	; 0x30
 800ac28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800addc <_vfiprintf_r+0x220>
 800ac2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac30:	f04f 0901 	mov.w	r9, #1
 800ac34:	4623      	mov	r3, r4
 800ac36:	469a      	mov	sl, r3
 800ac38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac3c:	b10a      	cbz	r2, 800ac42 <_vfiprintf_r+0x86>
 800ac3e:	2a25      	cmp	r2, #37	; 0x25
 800ac40:	d1f9      	bne.n	800ac36 <_vfiprintf_r+0x7a>
 800ac42:	ebba 0b04 	subs.w	fp, sl, r4
 800ac46:	d00b      	beq.n	800ac60 <_vfiprintf_r+0xa4>
 800ac48:	465b      	mov	r3, fp
 800ac4a:	4622      	mov	r2, r4
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f7ff ffa1 	bl	800ab96 <__sfputs_r>
 800ac54:	3001      	adds	r0, #1
 800ac56:	f000 80a9 	beq.w	800adac <_vfiprintf_r+0x1f0>
 800ac5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac5c:	445a      	add	r2, fp
 800ac5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ac60:	f89a 3000 	ldrb.w	r3, [sl]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 80a1 	beq.w	800adac <_vfiprintf_r+0x1f0>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac74:	f10a 0a01 	add.w	sl, sl, #1
 800ac78:	9304      	str	r3, [sp, #16]
 800ac7a:	9307      	str	r3, [sp, #28]
 800ac7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac80:	931a      	str	r3, [sp, #104]	; 0x68
 800ac82:	4654      	mov	r4, sl
 800ac84:	2205      	movs	r2, #5
 800ac86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8a:	4854      	ldr	r0, [pc, #336]	; (800addc <_vfiprintf_r+0x220>)
 800ac8c:	f7f5 fab8 	bl	8000200 <memchr>
 800ac90:	9a04      	ldr	r2, [sp, #16]
 800ac92:	b9d8      	cbnz	r0, 800accc <_vfiprintf_r+0x110>
 800ac94:	06d1      	lsls	r1, r2, #27
 800ac96:	bf44      	itt	mi
 800ac98:	2320      	movmi	r3, #32
 800ac9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac9e:	0713      	lsls	r3, r2, #28
 800aca0:	bf44      	itt	mi
 800aca2:	232b      	movmi	r3, #43	; 0x2b
 800aca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca8:	f89a 3000 	ldrb.w	r3, [sl]
 800acac:	2b2a      	cmp	r3, #42	; 0x2a
 800acae:	d015      	beq.n	800acdc <_vfiprintf_r+0x120>
 800acb0:	9a07      	ldr	r2, [sp, #28]
 800acb2:	4654      	mov	r4, sl
 800acb4:	2000      	movs	r0, #0
 800acb6:	f04f 0c0a 	mov.w	ip, #10
 800acba:	4621      	mov	r1, r4
 800acbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acc0:	3b30      	subs	r3, #48	; 0x30
 800acc2:	2b09      	cmp	r3, #9
 800acc4:	d94d      	bls.n	800ad62 <_vfiprintf_r+0x1a6>
 800acc6:	b1b0      	cbz	r0, 800acf6 <_vfiprintf_r+0x13a>
 800acc8:	9207      	str	r2, [sp, #28]
 800acca:	e014      	b.n	800acf6 <_vfiprintf_r+0x13a>
 800accc:	eba0 0308 	sub.w	r3, r0, r8
 800acd0:	fa09 f303 	lsl.w	r3, r9, r3
 800acd4:	4313      	orrs	r3, r2
 800acd6:	9304      	str	r3, [sp, #16]
 800acd8:	46a2      	mov	sl, r4
 800acda:	e7d2      	b.n	800ac82 <_vfiprintf_r+0xc6>
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	1d19      	adds	r1, r3, #4
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	9103      	str	r1, [sp, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	bfbb      	ittet	lt
 800ace8:	425b      	neglt	r3, r3
 800acea:	f042 0202 	orrlt.w	r2, r2, #2
 800acee:	9307      	strge	r3, [sp, #28]
 800acf0:	9307      	strlt	r3, [sp, #28]
 800acf2:	bfb8      	it	lt
 800acf4:	9204      	strlt	r2, [sp, #16]
 800acf6:	7823      	ldrb	r3, [r4, #0]
 800acf8:	2b2e      	cmp	r3, #46	; 0x2e
 800acfa:	d10c      	bne.n	800ad16 <_vfiprintf_r+0x15a>
 800acfc:	7863      	ldrb	r3, [r4, #1]
 800acfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ad00:	d134      	bne.n	800ad6c <_vfiprintf_r+0x1b0>
 800ad02:	9b03      	ldr	r3, [sp, #12]
 800ad04:	1d1a      	adds	r2, r3, #4
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	9203      	str	r2, [sp, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bfb8      	it	lt
 800ad0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad12:	3402      	adds	r4, #2
 800ad14:	9305      	str	r3, [sp, #20]
 800ad16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800adec <_vfiprintf_r+0x230>
 800ad1a:	7821      	ldrb	r1, [r4, #0]
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	4650      	mov	r0, sl
 800ad20:	f7f5 fa6e 	bl	8000200 <memchr>
 800ad24:	b138      	cbz	r0, 800ad36 <_vfiprintf_r+0x17a>
 800ad26:	9b04      	ldr	r3, [sp, #16]
 800ad28:	eba0 000a 	sub.w	r0, r0, sl
 800ad2c:	2240      	movs	r2, #64	; 0x40
 800ad2e:	4082      	lsls	r2, r0
 800ad30:	4313      	orrs	r3, r2
 800ad32:	3401      	adds	r4, #1
 800ad34:	9304      	str	r3, [sp, #16]
 800ad36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad3a:	4829      	ldr	r0, [pc, #164]	; (800ade0 <_vfiprintf_r+0x224>)
 800ad3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad40:	2206      	movs	r2, #6
 800ad42:	f7f5 fa5d 	bl	8000200 <memchr>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d03f      	beq.n	800adca <_vfiprintf_r+0x20e>
 800ad4a:	4b26      	ldr	r3, [pc, #152]	; (800ade4 <_vfiprintf_r+0x228>)
 800ad4c:	bb1b      	cbnz	r3, 800ad96 <_vfiprintf_r+0x1da>
 800ad4e:	9b03      	ldr	r3, [sp, #12]
 800ad50:	3307      	adds	r3, #7
 800ad52:	f023 0307 	bic.w	r3, r3, #7
 800ad56:	3308      	adds	r3, #8
 800ad58:	9303      	str	r3, [sp, #12]
 800ad5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad5c:	443b      	add	r3, r7
 800ad5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad60:	e768      	b.n	800ac34 <_vfiprintf_r+0x78>
 800ad62:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad66:	460c      	mov	r4, r1
 800ad68:	2001      	movs	r0, #1
 800ad6a:	e7a6      	b.n	800acba <_vfiprintf_r+0xfe>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	3401      	adds	r4, #1
 800ad70:	9305      	str	r3, [sp, #20]
 800ad72:	4619      	mov	r1, r3
 800ad74:	f04f 0c0a 	mov.w	ip, #10
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad7e:	3a30      	subs	r2, #48	; 0x30
 800ad80:	2a09      	cmp	r2, #9
 800ad82:	d903      	bls.n	800ad8c <_vfiprintf_r+0x1d0>
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d0c6      	beq.n	800ad16 <_vfiprintf_r+0x15a>
 800ad88:	9105      	str	r1, [sp, #20]
 800ad8a:	e7c4      	b.n	800ad16 <_vfiprintf_r+0x15a>
 800ad8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad90:	4604      	mov	r4, r0
 800ad92:	2301      	movs	r3, #1
 800ad94:	e7f0      	b.n	800ad78 <_vfiprintf_r+0x1bc>
 800ad96:	ab03      	add	r3, sp, #12
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	4b12      	ldr	r3, [pc, #72]	; (800ade8 <_vfiprintf_r+0x22c>)
 800ad9e:	a904      	add	r1, sp, #16
 800ada0:	4630      	mov	r0, r6
 800ada2:	f3af 8000 	nop.w
 800ada6:	4607      	mov	r7, r0
 800ada8:	1c78      	adds	r0, r7, #1
 800adaa:	d1d6      	bne.n	800ad5a <_vfiprintf_r+0x19e>
 800adac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adae:	07d9      	lsls	r1, r3, #31
 800adb0:	d405      	bmi.n	800adbe <_vfiprintf_r+0x202>
 800adb2:	89ab      	ldrh	r3, [r5, #12]
 800adb4:	059a      	lsls	r2, r3, #22
 800adb6:	d402      	bmi.n	800adbe <_vfiprintf_r+0x202>
 800adb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adba:	f7fe fde9 	bl	8009990 <__retarget_lock_release_recursive>
 800adbe:	89ab      	ldrh	r3, [r5, #12]
 800adc0:	065b      	lsls	r3, r3, #25
 800adc2:	f53f af1d 	bmi.w	800ac00 <_vfiprintf_r+0x44>
 800adc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adc8:	e71c      	b.n	800ac04 <_vfiprintf_r+0x48>
 800adca:	ab03      	add	r3, sp, #12
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	462a      	mov	r2, r5
 800add0:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <_vfiprintf_r+0x22c>)
 800add2:	a904      	add	r1, sp, #16
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff f9bd 	bl	800a154 <_printf_i>
 800adda:	e7e4      	b.n	800ada6 <_vfiprintf_r+0x1ea>
 800addc:	0800c45d 	.word	0x0800c45d
 800ade0:	0800c467 	.word	0x0800c467
 800ade4:	00000000 	.word	0x00000000
 800ade8:	0800ab97 	.word	0x0800ab97
 800adec:	0800c463 	.word	0x0800c463

0800adf0 <_scanf_chars>:
 800adf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf4:	4615      	mov	r5, r2
 800adf6:	688a      	ldr	r2, [r1, #8]
 800adf8:	4680      	mov	r8, r0
 800adfa:	460c      	mov	r4, r1
 800adfc:	b932      	cbnz	r2, 800ae0c <_scanf_chars+0x1c>
 800adfe:	698a      	ldr	r2, [r1, #24]
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	bf0c      	ite	eq
 800ae04:	2201      	moveq	r2, #1
 800ae06:	f04f 32ff 	movne.w	r2, #4294967295
 800ae0a:	608a      	str	r2, [r1, #8]
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800aea0 <_scanf_chars+0xb0>
 800ae12:	06d1      	lsls	r1, r2, #27
 800ae14:	bf5f      	itttt	pl
 800ae16:	681a      	ldrpl	r2, [r3, #0]
 800ae18:	1d11      	addpl	r1, r2, #4
 800ae1a:	6019      	strpl	r1, [r3, #0]
 800ae1c:	6816      	ldrpl	r6, [r2, #0]
 800ae1e:	2700      	movs	r7, #0
 800ae20:	69a0      	ldr	r0, [r4, #24]
 800ae22:	b188      	cbz	r0, 800ae48 <_scanf_chars+0x58>
 800ae24:	2801      	cmp	r0, #1
 800ae26:	d107      	bne.n	800ae38 <_scanf_chars+0x48>
 800ae28:	682a      	ldr	r2, [r5, #0]
 800ae2a:	7811      	ldrb	r1, [r2, #0]
 800ae2c:	6962      	ldr	r2, [r4, #20]
 800ae2e:	5c52      	ldrb	r2, [r2, r1]
 800ae30:	b952      	cbnz	r2, 800ae48 <_scanf_chars+0x58>
 800ae32:	2f00      	cmp	r7, #0
 800ae34:	d031      	beq.n	800ae9a <_scanf_chars+0xaa>
 800ae36:	e022      	b.n	800ae7e <_scanf_chars+0x8e>
 800ae38:	2802      	cmp	r0, #2
 800ae3a:	d120      	bne.n	800ae7e <_scanf_chars+0x8e>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ae44:	071b      	lsls	r3, r3, #28
 800ae46:	d41a      	bmi.n	800ae7e <_scanf_chars+0x8e>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	06da      	lsls	r2, r3, #27
 800ae4c:	bf5e      	ittt	pl
 800ae4e:	682b      	ldrpl	r3, [r5, #0]
 800ae50:	781b      	ldrbpl	r3, [r3, #0]
 800ae52:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ae56:	682a      	ldr	r2, [r5, #0]
 800ae58:	686b      	ldr	r3, [r5, #4]
 800ae5a:	3201      	adds	r2, #1
 800ae5c:	602a      	str	r2, [r5, #0]
 800ae5e:	68a2      	ldr	r2, [r4, #8]
 800ae60:	3b01      	subs	r3, #1
 800ae62:	3a01      	subs	r2, #1
 800ae64:	606b      	str	r3, [r5, #4]
 800ae66:	3701      	adds	r7, #1
 800ae68:	60a2      	str	r2, [r4, #8]
 800ae6a:	b142      	cbz	r2, 800ae7e <_scanf_chars+0x8e>
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dcd7      	bgt.n	800ae20 <_scanf_chars+0x30>
 800ae70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ae74:	4629      	mov	r1, r5
 800ae76:	4640      	mov	r0, r8
 800ae78:	4798      	blx	r3
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d0d0      	beq.n	800ae20 <_scanf_chars+0x30>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	f013 0310 	ands.w	r3, r3, #16
 800ae84:	d105      	bne.n	800ae92 <_scanf_chars+0xa2>
 800ae86:	68e2      	ldr	r2, [r4, #12]
 800ae88:	3201      	adds	r2, #1
 800ae8a:	60e2      	str	r2, [r4, #12]
 800ae8c:	69a2      	ldr	r2, [r4, #24]
 800ae8e:	b102      	cbz	r2, 800ae92 <_scanf_chars+0xa2>
 800ae90:	7033      	strb	r3, [r6, #0]
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	443b      	add	r3, r7
 800ae96:	6123      	str	r3, [r4, #16]
 800ae98:	2000      	movs	r0, #0
 800ae9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae9e:	bf00      	nop
 800aea0:	0800c35d 	.word	0x0800c35d

0800aea4 <_scanf_i>:
 800aea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea8:	4698      	mov	r8, r3
 800aeaa:	4b74      	ldr	r3, [pc, #464]	; (800b07c <_scanf_i+0x1d8>)
 800aeac:	460c      	mov	r4, r1
 800aeae:	4682      	mov	sl, r0
 800aeb0:	4616      	mov	r6, r2
 800aeb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aeb6:	b087      	sub	sp, #28
 800aeb8:	ab03      	add	r3, sp, #12
 800aeba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aebe:	4b70      	ldr	r3, [pc, #448]	; (800b080 <_scanf_i+0x1dc>)
 800aec0:	69a1      	ldr	r1, [r4, #24]
 800aec2:	4a70      	ldr	r2, [pc, #448]	; (800b084 <_scanf_i+0x1e0>)
 800aec4:	2903      	cmp	r1, #3
 800aec6:	bf18      	it	ne
 800aec8:	461a      	movne	r2, r3
 800aeca:	68a3      	ldr	r3, [r4, #8]
 800aecc:	9201      	str	r2, [sp, #4]
 800aece:	1e5a      	subs	r2, r3, #1
 800aed0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aed4:	bf88      	it	hi
 800aed6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aeda:	4627      	mov	r7, r4
 800aedc:	bf82      	ittt	hi
 800aede:	eb03 0905 	addhi.w	r9, r3, r5
 800aee2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aee6:	60a3      	strhi	r3, [r4, #8]
 800aee8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aeec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aef0:	bf98      	it	ls
 800aef2:	f04f 0900 	movls.w	r9, #0
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	463d      	mov	r5, r7
 800aefa:	f04f 0b00 	mov.w	fp, #0
 800aefe:	6831      	ldr	r1, [r6, #0]
 800af00:	ab03      	add	r3, sp, #12
 800af02:	7809      	ldrb	r1, [r1, #0]
 800af04:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800af08:	2202      	movs	r2, #2
 800af0a:	f7f5 f979 	bl	8000200 <memchr>
 800af0e:	b328      	cbz	r0, 800af5c <_scanf_i+0xb8>
 800af10:	f1bb 0f01 	cmp.w	fp, #1
 800af14:	d159      	bne.n	800afca <_scanf_i+0x126>
 800af16:	6862      	ldr	r2, [r4, #4]
 800af18:	b92a      	cbnz	r2, 800af26 <_scanf_i+0x82>
 800af1a:	6822      	ldr	r2, [r4, #0]
 800af1c:	2308      	movs	r3, #8
 800af1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af22:	6063      	str	r3, [r4, #4]
 800af24:	6022      	str	r2, [r4, #0]
 800af26:	6822      	ldr	r2, [r4, #0]
 800af28:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800af2c:	6022      	str	r2, [r4, #0]
 800af2e:	68a2      	ldr	r2, [r4, #8]
 800af30:	1e51      	subs	r1, r2, #1
 800af32:	60a1      	str	r1, [r4, #8]
 800af34:	b192      	cbz	r2, 800af5c <_scanf_i+0xb8>
 800af36:	6832      	ldr	r2, [r6, #0]
 800af38:	1c51      	adds	r1, r2, #1
 800af3a:	6031      	str	r1, [r6, #0]
 800af3c:	7812      	ldrb	r2, [r2, #0]
 800af3e:	f805 2b01 	strb.w	r2, [r5], #1
 800af42:	6872      	ldr	r2, [r6, #4]
 800af44:	3a01      	subs	r2, #1
 800af46:	2a00      	cmp	r2, #0
 800af48:	6072      	str	r2, [r6, #4]
 800af4a:	dc07      	bgt.n	800af5c <_scanf_i+0xb8>
 800af4c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800af50:	4631      	mov	r1, r6
 800af52:	4650      	mov	r0, sl
 800af54:	4790      	blx	r2
 800af56:	2800      	cmp	r0, #0
 800af58:	f040 8085 	bne.w	800b066 <_scanf_i+0x1c2>
 800af5c:	f10b 0b01 	add.w	fp, fp, #1
 800af60:	f1bb 0f03 	cmp.w	fp, #3
 800af64:	d1cb      	bne.n	800aefe <_scanf_i+0x5a>
 800af66:	6863      	ldr	r3, [r4, #4]
 800af68:	b90b      	cbnz	r3, 800af6e <_scanf_i+0xca>
 800af6a:	230a      	movs	r3, #10
 800af6c:	6063      	str	r3, [r4, #4]
 800af6e:	6863      	ldr	r3, [r4, #4]
 800af70:	4945      	ldr	r1, [pc, #276]	; (800b088 <_scanf_i+0x1e4>)
 800af72:	6960      	ldr	r0, [r4, #20]
 800af74:	1ac9      	subs	r1, r1, r3
 800af76:	f000 f889 	bl	800b08c <__sccl>
 800af7a:	f04f 0b00 	mov.w	fp, #0
 800af7e:	68a3      	ldr	r3, [r4, #8]
 800af80:	6822      	ldr	r2, [r4, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d03d      	beq.n	800b002 <_scanf_i+0x15e>
 800af86:	6831      	ldr	r1, [r6, #0]
 800af88:	6960      	ldr	r0, [r4, #20]
 800af8a:	f891 c000 	ldrb.w	ip, [r1]
 800af8e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800af92:	2800      	cmp	r0, #0
 800af94:	d035      	beq.n	800b002 <_scanf_i+0x15e>
 800af96:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800af9a:	d124      	bne.n	800afe6 <_scanf_i+0x142>
 800af9c:	0510      	lsls	r0, r2, #20
 800af9e:	d522      	bpl.n	800afe6 <_scanf_i+0x142>
 800afa0:	f10b 0b01 	add.w	fp, fp, #1
 800afa4:	f1b9 0f00 	cmp.w	r9, #0
 800afa8:	d003      	beq.n	800afb2 <_scanf_i+0x10e>
 800afaa:	3301      	adds	r3, #1
 800afac:	f109 39ff 	add.w	r9, r9, #4294967295
 800afb0:	60a3      	str	r3, [r4, #8]
 800afb2:	6873      	ldr	r3, [r6, #4]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	6073      	str	r3, [r6, #4]
 800afba:	dd1b      	ble.n	800aff4 <_scanf_i+0x150>
 800afbc:	6833      	ldr	r3, [r6, #0]
 800afbe:	3301      	adds	r3, #1
 800afc0:	6033      	str	r3, [r6, #0]
 800afc2:	68a3      	ldr	r3, [r4, #8]
 800afc4:	3b01      	subs	r3, #1
 800afc6:	60a3      	str	r3, [r4, #8]
 800afc8:	e7d9      	b.n	800af7e <_scanf_i+0xda>
 800afca:	f1bb 0f02 	cmp.w	fp, #2
 800afce:	d1ae      	bne.n	800af2e <_scanf_i+0x8a>
 800afd0:	6822      	ldr	r2, [r4, #0]
 800afd2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800afd6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800afda:	d1bf      	bne.n	800af5c <_scanf_i+0xb8>
 800afdc:	2310      	movs	r3, #16
 800afde:	6063      	str	r3, [r4, #4]
 800afe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afe4:	e7a2      	b.n	800af2c <_scanf_i+0x88>
 800afe6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800afea:	6022      	str	r2, [r4, #0]
 800afec:	780b      	ldrb	r3, [r1, #0]
 800afee:	f805 3b01 	strb.w	r3, [r5], #1
 800aff2:	e7de      	b.n	800afb2 <_scanf_i+0x10e>
 800aff4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aff8:	4631      	mov	r1, r6
 800affa:	4650      	mov	r0, sl
 800affc:	4798      	blx	r3
 800affe:	2800      	cmp	r0, #0
 800b000:	d0df      	beq.n	800afc2 <_scanf_i+0x11e>
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	05d9      	lsls	r1, r3, #23
 800b006:	d50d      	bpl.n	800b024 <_scanf_i+0x180>
 800b008:	42bd      	cmp	r5, r7
 800b00a:	d909      	bls.n	800b020 <_scanf_i+0x17c>
 800b00c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b010:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b014:	4632      	mov	r2, r6
 800b016:	4650      	mov	r0, sl
 800b018:	4798      	blx	r3
 800b01a:	f105 39ff 	add.w	r9, r5, #4294967295
 800b01e:	464d      	mov	r5, r9
 800b020:	42bd      	cmp	r5, r7
 800b022:	d028      	beq.n	800b076 <_scanf_i+0x1d2>
 800b024:	6822      	ldr	r2, [r4, #0]
 800b026:	f012 0210 	ands.w	r2, r2, #16
 800b02a:	d113      	bne.n	800b054 <_scanf_i+0x1b0>
 800b02c:	702a      	strb	r2, [r5, #0]
 800b02e:	6863      	ldr	r3, [r4, #4]
 800b030:	9e01      	ldr	r6, [sp, #4]
 800b032:	4639      	mov	r1, r7
 800b034:	4650      	mov	r0, sl
 800b036:	47b0      	blx	r6
 800b038:	f8d8 3000 	ldr.w	r3, [r8]
 800b03c:	6821      	ldr	r1, [r4, #0]
 800b03e:	1d1a      	adds	r2, r3, #4
 800b040:	f8c8 2000 	str.w	r2, [r8]
 800b044:	f011 0f20 	tst.w	r1, #32
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	d00f      	beq.n	800b06c <_scanf_i+0x1c8>
 800b04c:	6018      	str	r0, [r3, #0]
 800b04e:	68e3      	ldr	r3, [r4, #12]
 800b050:	3301      	adds	r3, #1
 800b052:	60e3      	str	r3, [r4, #12]
 800b054:	6923      	ldr	r3, [r4, #16]
 800b056:	1bed      	subs	r5, r5, r7
 800b058:	445d      	add	r5, fp
 800b05a:	442b      	add	r3, r5
 800b05c:	6123      	str	r3, [r4, #16]
 800b05e:	2000      	movs	r0, #0
 800b060:	b007      	add	sp, #28
 800b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b066:	f04f 0b00 	mov.w	fp, #0
 800b06a:	e7ca      	b.n	800b002 <_scanf_i+0x15e>
 800b06c:	07ca      	lsls	r2, r1, #31
 800b06e:	bf4c      	ite	mi
 800b070:	8018      	strhmi	r0, [r3, #0]
 800b072:	6018      	strpl	r0, [r3, #0]
 800b074:	e7eb      	b.n	800b04e <_scanf_i+0x1aa>
 800b076:	2001      	movs	r0, #1
 800b078:	e7f2      	b.n	800b060 <_scanf_i+0x1bc>
 800b07a:	bf00      	nop
 800b07c:	0800becc 	.word	0x0800becc
 800b080:	08009db1 	.word	0x08009db1
 800b084:	0800b439 	.word	0x0800b439
 800b088:	0800c4a0 	.word	0x0800c4a0

0800b08c <__sccl>:
 800b08c:	b570      	push	{r4, r5, r6, lr}
 800b08e:	780b      	ldrb	r3, [r1, #0]
 800b090:	4604      	mov	r4, r0
 800b092:	2b5e      	cmp	r3, #94	; 0x5e
 800b094:	bf0b      	itete	eq
 800b096:	784b      	ldrbeq	r3, [r1, #1]
 800b098:	1c4a      	addne	r2, r1, #1
 800b09a:	1c8a      	addeq	r2, r1, #2
 800b09c:	2100      	movne	r1, #0
 800b09e:	bf08      	it	eq
 800b0a0:	2101      	moveq	r1, #1
 800b0a2:	3801      	subs	r0, #1
 800b0a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b0a8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b0ac:	42a8      	cmp	r0, r5
 800b0ae:	d1fb      	bne.n	800b0a8 <__sccl+0x1c>
 800b0b0:	b90b      	cbnz	r3, 800b0b6 <__sccl+0x2a>
 800b0b2:	1e50      	subs	r0, r2, #1
 800b0b4:	bd70      	pop	{r4, r5, r6, pc}
 800b0b6:	f081 0101 	eor.w	r1, r1, #1
 800b0ba:	54e1      	strb	r1, [r4, r3]
 800b0bc:	4610      	mov	r0, r2
 800b0be:	4602      	mov	r2, r0
 800b0c0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b0c4:	2d2d      	cmp	r5, #45	; 0x2d
 800b0c6:	d005      	beq.n	800b0d4 <__sccl+0x48>
 800b0c8:	2d5d      	cmp	r5, #93	; 0x5d
 800b0ca:	d016      	beq.n	800b0fa <__sccl+0x6e>
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	d0f1      	beq.n	800b0b4 <__sccl+0x28>
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	e7f2      	b.n	800b0ba <__sccl+0x2e>
 800b0d4:	7846      	ldrb	r6, [r0, #1]
 800b0d6:	2e5d      	cmp	r6, #93	; 0x5d
 800b0d8:	d0fa      	beq.n	800b0d0 <__sccl+0x44>
 800b0da:	42b3      	cmp	r3, r6
 800b0dc:	dcf8      	bgt.n	800b0d0 <__sccl+0x44>
 800b0de:	3002      	adds	r0, #2
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	3201      	adds	r2, #1
 800b0e4:	4296      	cmp	r6, r2
 800b0e6:	54a1      	strb	r1, [r4, r2]
 800b0e8:	dcfb      	bgt.n	800b0e2 <__sccl+0x56>
 800b0ea:	1af2      	subs	r2, r6, r3
 800b0ec:	3a01      	subs	r2, #1
 800b0ee:	1c5d      	adds	r5, r3, #1
 800b0f0:	42b3      	cmp	r3, r6
 800b0f2:	bfa8      	it	ge
 800b0f4:	2200      	movge	r2, #0
 800b0f6:	18ab      	adds	r3, r5, r2
 800b0f8:	e7e1      	b.n	800b0be <__sccl+0x32>
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	e7da      	b.n	800b0b4 <__sccl+0x28>

0800b0fe <__submore>:
 800b0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b102:	460c      	mov	r4, r1
 800b104:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b10a:	4299      	cmp	r1, r3
 800b10c:	d11d      	bne.n	800b14a <__submore+0x4c>
 800b10e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b112:	f7fe fd4f 	bl	8009bb4 <_malloc_r>
 800b116:	b918      	cbnz	r0, 800b120 <__submore+0x22>
 800b118:	f04f 30ff 	mov.w	r0, #4294967295
 800b11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b124:	63a3      	str	r3, [r4, #56]	; 0x38
 800b126:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b12a:	6360      	str	r0, [r4, #52]	; 0x34
 800b12c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b130:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b134:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b138:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b13c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b140:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b144:	6020      	str	r0, [r4, #0]
 800b146:	2000      	movs	r0, #0
 800b148:	e7e8      	b.n	800b11c <__submore+0x1e>
 800b14a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b14c:	0077      	lsls	r7, r6, #1
 800b14e:	463a      	mov	r2, r7
 800b150:	f7ff fb08 	bl	800a764 <_realloc_r>
 800b154:	4605      	mov	r5, r0
 800b156:	2800      	cmp	r0, #0
 800b158:	d0de      	beq.n	800b118 <__submore+0x1a>
 800b15a:	eb00 0806 	add.w	r8, r0, r6
 800b15e:	4601      	mov	r1, r0
 800b160:	4632      	mov	r2, r6
 800b162:	4640      	mov	r0, r8
 800b164:	f7fe fc1d 	bl	80099a2 <memcpy>
 800b168:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b16c:	f8c4 8000 	str.w	r8, [r4]
 800b170:	e7e9      	b.n	800b146 <__submore+0x48>

0800b172 <__swbuf_r>:
 800b172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b174:	460e      	mov	r6, r1
 800b176:	4614      	mov	r4, r2
 800b178:	4605      	mov	r5, r0
 800b17a:	b118      	cbz	r0, 800b184 <__swbuf_r+0x12>
 800b17c:	6a03      	ldr	r3, [r0, #32]
 800b17e:	b90b      	cbnz	r3, 800b184 <__swbuf_r+0x12>
 800b180:	f7fc ff0a 	bl	8007f98 <__sinit>
 800b184:	69a3      	ldr	r3, [r4, #24]
 800b186:	60a3      	str	r3, [r4, #8]
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	071a      	lsls	r2, r3, #28
 800b18c:	d525      	bpl.n	800b1da <__swbuf_r+0x68>
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	b31b      	cbz	r3, 800b1da <__swbuf_r+0x68>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	6922      	ldr	r2, [r4, #16]
 800b196:	1a98      	subs	r0, r3, r2
 800b198:	6963      	ldr	r3, [r4, #20]
 800b19a:	b2f6      	uxtb	r6, r6
 800b19c:	4283      	cmp	r3, r0
 800b19e:	4637      	mov	r7, r6
 800b1a0:	dc04      	bgt.n	800b1ac <__swbuf_r+0x3a>
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f7ff f97d 	bl	800a4a4 <_fflush_r>
 800b1aa:	b9e0      	cbnz	r0, 800b1e6 <__swbuf_r+0x74>
 800b1ac:	68a3      	ldr	r3, [r4, #8]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	6022      	str	r2, [r4, #0]
 800b1b8:	701e      	strb	r6, [r3, #0]
 800b1ba:	6962      	ldr	r2, [r4, #20]
 800b1bc:	1c43      	adds	r3, r0, #1
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d004      	beq.n	800b1cc <__swbuf_r+0x5a>
 800b1c2:	89a3      	ldrh	r3, [r4, #12]
 800b1c4:	07db      	lsls	r3, r3, #31
 800b1c6:	d506      	bpl.n	800b1d6 <__swbuf_r+0x64>
 800b1c8:	2e0a      	cmp	r6, #10
 800b1ca:	d104      	bne.n	800b1d6 <__swbuf_r+0x64>
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f7ff f968 	bl	800a4a4 <_fflush_r>
 800b1d4:	b938      	cbnz	r0, 800b1e6 <__swbuf_r+0x74>
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1da:	4621      	mov	r1, r4
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f000 f805 	bl	800b1ec <__swsetup_r>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d0d5      	beq.n	800b192 <__swbuf_r+0x20>
 800b1e6:	f04f 37ff 	mov.w	r7, #4294967295
 800b1ea:	e7f4      	b.n	800b1d6 <__swbuf_r+0x64>

0800b1ec <__swsetup_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4b2a      	ldr	r3, [pc, #168]	; (800b298 <__swsetup_r+0xac>)
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	6818      	ldr	r0, [r3, #0]
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	b118      	cbz	r0, 800b200 <__swsetup_r+0x14>
 800b1f8:	6a03      	ldr	r3, [r0, #32]
 800b1fa:	b90b      	cbnz	r3, 800b200 <__swsetup_r+0x14>
 800b1fc:	f7fc fecc 	bl	8007f98 <__sinit>
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b206:	0718      	lsls	r0, r3, #28
 800b208:	d422      	bmi.n	800b250 <__swsetup_r+0x64>
 800b20a:	06d9      	lsls	r1, r3, #27
 800b20c:	d407      	bmi.n	800b21e <__swsetup_r+0x32>
 800b20e:	2309      	movs	r3, #9
 800b210:	602b      	str	r3, [r5, #0]
 800b212:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b216:	81a3      	strh	r3, [r4, #12]
 800b218:	f04f 30ff 	mov.w	r0, #4294967295
 800b21c:	e034      	b.n	800b288 <__swsetup_r+0x9c>
 800b21e:	0758      	lsls	r0, r3, #29
 800b220:	d512      	bpl.n	800b248 <__swsetup_r+0x5c>
 800b222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b224:	b141      	cbz	r1, 800b238 <__swsetup_r+0x4c>
 800b226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b22a:	4299      	cmp	r1, r3
 800b22c:	d002      	beq.n	800b234 <__swsetup_r+0x48>
 800b22e:	4628      	mov	r0, r5
 800b230:	f7fe fbfc 	bl	8009a2c <_free_r>
 800b234:	2300      	movs	r3, #0
 800b236:	6363      	str	r3, [r4, #52]	; 0x34
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	2300      	movs	r3, #0
 800b242:	6063      	str	r3, [r4, #4]
 800b244:	6923      	ldr	r3, [r4, #16]
 800b246:	6023      	str	r3, [r4, #0]
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	f043 0308 	orr.w	r3, r3, #8
 800b24e:	81a3      	strh	r3, [r4, #12]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	b94b      	cbnz	r3, 800b268 <__swsetup_r+0x7c>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b25a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b25e:	d003      	beq.n	800b268 <__swsetup_r+0x7c>
 800b260:	4621      	mov	r1, r4
 800b262:	4628      	mov	r0, r5
 800b264:	f000 f910 	bl	800b488 <__smakebuf_r>
 800b268:	89a0      	ldrh	r0, [r4, #12]
 800b26a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b26e:	f010 0301 	ands.w	r3, r0, #1
 800b272:	d00a      	beq.n	800b28a <__swsetup_r+0x9e>
 800b274:	2300      	movs	r3, #0
 800b276:	60a3      	str	r3, [r4, #8]
 800b278:	6963      	ldr	r3, [r4, #20]
 800b27a:	425b      	negs	r3, r3
 800b27c:	61a3      	str	r3, [r4, #24]
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	b943      	cbnz	r3, 800b294 <__swsetup_r+0xa8>
 800b282:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b286:	d1c4      	bne.n	800b212 <__swsetup_r+0x26>
 800b288:	bd38      	pop	{r3, r4, r5, pc}
 800b28a:	0781      	lsls	r1, r0, #30
 800b28c:	bf58      	it	pl
 800b28e:	6963      	ldrpl	r3, [r4, #20]
 800b290:	60a3      	str	r3, [r4, #8]
 800b292:	e7f4      	b.n	800b27e <__swsetup_r+0x92>
 800b294:	2000      	movs	r0, #0
 800b296:	e7f7      	b.n	800b288 <__swsetup_r+0x9c>
 800b298:	20000070 	.word	0x20000070

0800b29c <_raise_r>:
 800b29c:	291f      	cmp	r1, #31
 800b29e:	b538      	push	{r3, r4, r5, lr}
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	d904      	bls.n	800b2b0 <_raise_r+0x14>
 800b2a6:	2316      	movs	r3, #22
 800b2a8:	6003      	str	r3, [r0, #0]
 800b2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b2b2:	b112      	cbz	r2, 800b2ba <_raise_r+0x1e>
 800b2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2b8:	b94b      	cbnz	r3, 800b2ce <_raise_r+0x32>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 f830 	bl	800b320 <_getpid_r>
 800b2c0:	462a      	mov	r2, r5
 800b2c2:	4601      	mov	r1, r0
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ca:	f000 b817 	b.w	800b2fc <_kill_r>
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d00a      	beq.n	800b2e8 <_raise_r+0x4c>
 800b2d2:	1c59      	adds	r1, r3, #1
 800b2d4:	d103      	bne.n	800b2de <_raise_r+0x42>
 800b2d6:	2316      	movs	r3, #22
 800b2d8:	6003      	str	r3, [r0, #0]
 800b2da:	2001      	movs	r0, #1
 800b2dc:	e7e7      	b.n	800b2ae <_raise_r+0x12>
 800b2de:	2400      	movs	r4, #0
 800b2e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	4798      	blx	r3
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7e0      	b.n	800b2ae <_raise_r+0x12>

0800b2ec <raise>:
 800b2ec:	4b02      	ldr	r3, [pc, #8]	; (800b2f8 <raise+0xc>)
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	f7ff bfd3 	b.w	800b29c <_raise_r>
 800b2f6:	bf00      	nop
 800b2f8:	20000070 	.word	0x20000070

0800b2fc <_kill_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4d07      	ldr	r5, [pc, #28]	; (800b31c <_kill_r+0x20>)
 800b300:	2300      	movs	r3, #0
 800b302:	4604      	mov	r4, r0
 800b304:	4608      	mov	r0, r1
 800b306:	4611      	mov	r1, r2
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	f7f8 f974 	bl	80035f6 <_kill>
 800b30e:	1c43      	adds	r3, r0, #1
 800b310:	d102      	bne.n	800b318 <_kill_r+0x1c>
 800b312:	682b      	ldr	r3, [r5, #0]
 800b314:	b103      	cbz	r3, 800b318 <_kill_r+0x1c>
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	bd38      	pop	{r3, r4, r5, pc}
 800b31a:	bf00      	nop
 800b31c:	200003d8 	.word	0x200003d8

0800b320 <_getpid_r>:
 800b320:	f7f8 b961 	b.w	80035e6 <_getpid>

0800b324 <_malloc_usable_size_r>:
 800b324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b328:	1f18      	subs	r0, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bfbc      	itt	lt
 800b32e:	580b      	ldrlt	r3, [r1, r0]
 800b330:	18c0      	addlt	r0, r0, r3
 800b332:	4770      	bx	lr

0800b334 <_strtol_l.constprop.0>:
 800b334:	2b01      	cmp	r3, #1
 800b336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33a:	d001      	beq.n	800b340 <_strtol_l.constprop.0+0xc>
 800b33c:	2b24      	cmp	r3, #36	; 0x24
 800b33e:	d906      	bls.n	800b34e <_strtol_l.constprop.0+0x1a>
 800b340:	f7fe faf8 	bl	8009934 <__errno>
 800b344:	2316      	movs	r3, #22
 800b346:	6003      	str	r3, [r0, #0]
 800b348:	2000      	movs	r0, #0
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b434 <_strtol_l.constprop.0+0x100>
 800b352:	460d      	mov	r5, r1
 800b354:	462e      	mov	r6, r5
 800b356:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b35a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b35e:	f017 0708 	ands.w	r7, r7, #8
 800b362:	d1f7      	bne.n	800b354 <_strtol_l.constprop.0+0x20>
 800b364:	2c2d      	cmp	r4, #45	; 0x2d
 800b366:	d132      	bne.n	800b3ce <_strtol_l.constprop.0+0x9a>
 800b368:	782c      	ldrb	r4, [r5, #0]
 800b36a:	2701      	movs	r7, #1
 800b36c:	1cb5      	adds	r5, r6, #2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d05b      	beq.n	800b42a <_strtol_l.constprop.0+0xf6>
 800b372:	2b10      	cmp	r3, #16
 800b374:	d109      	bne.n	800b38a <_strtol_l.constprop.0+0x56>
 800b376:	2c30      	cmp	r4, #48	; 0x30
 800b378:	d107      	bne.n	800b38a <_strtol_l.constprop.0+0x56>
 800b37a:	782c      	ldrb	r4, [r5, #0]
 800b37c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b380:	2c58      	cmp	r4, #88	; 0x58
 800b382:	d14d      	bne.n	800b420 <_strtol_l.constprop.0+0xec>
 800b384:	786c      	ldrb	r4, [r5, #1]
 800b386:	2310      	movs	r3, #16
 800b388:	3502      	adds	r5, #2
 800b38a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b38e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b392:	f04f 0e00 	mov.w	lr, #0
 800b396:	fbb8 f9f3 	udiv	r9, r8, r3
 800b39a:	4676      	mov	r6, lr
 800b39c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b3a0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b3a4:	f1bc 0f09 	cmp.w	ip, #9
 800b3a8:	d816      	bhi.n	800b3d8 <_strtol_l.constprop.0+0xa4>
 800b3aa:	4664      	mov	r4, ip
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	dd24      	ble.n	800b3fa <_strtol_l.constprop.0+0xc6>
 800b3b0:	f1be 3fff 	cmp.w	lr, #4294967295
 800b3b4:	d008      	beq.n	800b3c8 <_strtol_l.constprop.0+0x94>
 800b3b6:	45b1      	cmp	r9, r6
 800b3b8:	d31c      	bcc.n	800b3f4 <_strtol_l.constprop.0+0xc0>
 800b3ba:	d101      	bne.n	800b3c0 <_strtol_l.constprop.0+0x8c>
 800b3bc:	45a2      	cmp	sl, r4
 800b3be:	db19      	blt.n	800b3f4 <_strtol_l.constprop.0+0xc0>
 800b3c0:	fb06 4603 	mla	r6, r6, r3, r4
 800b3c4:	f04f 0e01 	mov.w	lr, #1
 800b3c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3cc:	e7e8      	b.n	800b3a0 <_strtol_l.constprop.0+0x6c>
 800b3ce:	2c2b      	cmp	r4, #43	; 0x2b
 800b3d0:	bf04      	itt	eq
 800b3d2:	782c      	ldrbeq	r4, [r5, #0]
 800b3d4:	1cb5      	addeq	r5, r6, #2
 800b3d6:	e7ca      	b.n	800b36e <_strtol_l.constprop.0+0x3a>
 800b3d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b3dc:	f1bc 0f19 	cmp.w	ip, #25
 800b3e0:	d801      	bhi.n	800b3e6 <_strtol_l.constprop.0+0xb2>
 800b3e2:	3c37      	subs	r4, #55	; 0x37
 800b3e4:	e7e2      	b.n	800b3ac <_strtol_l.constprop.0+0x78>
 800b3e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b3ea:	f1bc 0f19 	cmp.w	ip, #25
 800b3ee:	d804      	bhi.n	800b3fa <_strtol_l.constprop.0+0xc6>
 800b3f0:	3c57      	subs	r4, #87	; 0x57
 800b3f2:	e7db      	b.n	800b3ac <_strtol_l.constprop.0+0x78>
 800b3f4:	f04f 3eff 	mov.w	lr, #4294967295
 800b3f8:	e7e6      	b.n	800b3c8 <_strtol_l.constprop.0+0x94>
 800b3fa:	f1be 3fff 	cmp.w	lr, #4294967295
 800b3fe:	d105      	bne.n	800b40c <_strtol_l.constprop.0+0xd8>
 800b400:	2322      	movs	r3, #34	; 0x22
 800b402:	6003      	str	r3, [r0, #0]
 800b404:	4646      	mov	r6, r8
 800b406:	b942      	cbnz	r2, 800b41a <_strtol_l.constprop.0+0xe6>
 800b408:	4630      	mov	r0, r6
 800b40a:	e79e      	b.n	800b34a <_strtol_l.constprop.0+0x16>
 800b40c:	b107      	cbz	r7, 800b410 <_strtol_l.constprop.0+0xdc>
 800b40e:	4276      	negs	r6, r6
 800b410:	2a00      	cmp	r2, #0
 800b412:	d0f9      	beq.n	800b408 <_strtol_l.constprop.0+0xd4>
 800b414:	f1be 0f00 	cmp.w	lr, #0
 800b418:	d000      	beq.n	800b41c <_strtol_l.constprop.0+0xe8>
 800b41a:	1e69      	subs	r1, r5, #1
 800b41c:	6011      	str	r1, [r2, #0]
 800b41e:	e7f3      	b.n	800b408 <_strtol_l.constprop.0+0xd4>
 800b420:	2430      	movs	r4, #48	; 0x30
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1b1      	bne.n	800b38a <_strtol_l.constprop.0+0x56>
 800b426:	2308      	movs	r3, #8
 800b428:	e7af      	b.n	800b38a <_strtol_l.constprop.0+0x56>
 800b42a:	2c30      	cmp	r4, #48	; 0x30
 800b42c:	d0a5      	beq.n	800b37a <_strtol_l.constprop.0+0x46>
 800b42e:	230a      	movs	r3, #10
 800b430:	e7ab      	b.n	800b38a <_strtol_l.constprop.0+0x56>
 800b432:	bf00      	nop
 800b434:	0800c35d 	.word	0x0800c35d

0800b438 <_strtol_r>:
 800b438:	f7ff bf7c 	b.w	800b334 <_strtol_l.constprop.0>

0800b43c <__swhatbuf_r>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	460c      	mov	r4, r1
 800b440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b444:	2900      	cmp	r1, #0
 800b446:	b096      	sub	sp, #88	; 0x58
 800b448:	4615      	mov	r5, r2
 800b44a:	461e      	mov	r6, r3
 800b44c:	da0d      	bge.n	800b46a <__swhatbuf_r+0x2e>
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b454:	f04f 0100 	mov.w	r1, #0
 800b458:	bf0c      	ite	eq
 800b45a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b45e:	2340      	movne	r3, #64	; 0x40
 800b460:	2000      	movs	r0, #0
 800b462:	6031      	str	r1, [r6, #0]
 800b464:	602b      	str	r3, [r5, #0]
 800b466:	b016      	add	sp, #88	; 0x58
 800b468:	bd70      	pop	{r4, r5, r6, pc}
 800b46a:	466a      	mov	r2, sp
 800b46c:	f000 f848 	bl	800b500 <_fstat_r>
 800b470:	2800      	cmp	r0, #0
 800b472:	dbec      	blt.n	800b44e <__swhatbuf_r+0x12>
 800b474:	9901      	ldr	r1, [sp, #4]
 800b476:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b47a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b47e:	4259      	negs	r1, r3
 800b480:	4159      	adcs	r1, r3
 800b482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b486:	e7eb      	b.n	800b460 <__swhatbuf_r+0x24>

0800b488 <__smakebuf_r>:
 800b488:	898b      	ldrh	r3, [r1, #12]
 800b48a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b48c:	079d      	lsls	r5, r3, #30
 800b48e:	4606      	mov	r6, r0
 800b490:	460c      	mov	r4, r1
 800b492:	d507      	bpl.n	800b4a4 <__smakebuf_r+0x1c>
 800b494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	6123      	str	r3, [r4, #16]
 800b49c:	2301      	movs	r3, #1
 800b49e:	6163      	str	r3, [r4, #20]
 800b4a0:	b002      	add	sp, #8
 800b4a2:	bd70      	pop	{r4, r5, r6, pc}
 800b4a4:	ab01      	add	r3, sp, #4
 800b4a6:	466a      	mov	r2, sp
 800b4a8:	f7ff ffc8 	bl	800b43c <__swhatbuf_r>
 800b4ac:	9900      	ldr	r1, [sp, #0]
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f7fe fb7f 	bl	8009bb4 <_malloc_r>
 800b4b6:	b948      	cbnz	r0, 800b4cc <__smakebuf_r+0x44>
 800b4b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4bc:	059a      	lsls	r2, r3, #22
 800b4be:	d4ef      	bmi.n	800b4a0 <__smakebuf_r+0x18>
 800b4c0:	f023 0303 	bic.w	r3, r3, #3
 800b4c4:	f043 0302 	orr.w	r3, r3, #2
 800b4c8:	81a3      	strh	r3, [r4, #12]
 800b4ca:	e7e3      	b.n	800b494 <__smakebuf_r+0xc>
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	6020      	str	r0, [r4, #0]
 800b4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d4:	81a3      	strh	r3, [r4, #12]
 800b4d6:	9b00      	ldr	r3, [sp, #0]
 800b4d8:	6163      	str	r3, [r4, #20]
 800b4da:	9b01      	ldr	r3, [sp, #4]
 800b4dc:	6120      	str	r0, [r4, #16]
 800b4de:	b15b      	cbz	r3, 800b4f8 <__smakebuf_r+0x70>
 800b4e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f000 f81d 	bl	800b524 <_isatty_r>
 800b4ea:	b128      	cbz	r0, 800b4f8 <__smakebuf_r+0x70>
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	f023 0303 	bic.w	r3, r3, #3
 800b4f2:	f043 0301 	orr.w	r3, r3, #1
 800b4f6:	81a3      	strh	r3, [r4, #12]
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	431d      	orrs	r5, r3
 800b4fc:	81a5      	strh	r5, [r4, #12]
 800b4fe:	e7cf      	b.n	800b4a0 <__smakebuf_r+0x18>

0800b500 <_fstat_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4d07      	ldr	r5, [pc, #28]	; (800b520 <_fstat_r+0x20>)
 800b504:	2300      	movs	r3, #0
 800b506:	4604      	mov	r4, r0
 800b508:	4608      	mov	r0, r1
 800b50a:	4611      	mov	r1, r2
 800b50c:	602b      	str	r3, [r5, #0]
 800b50e:	f7f8 f8d1 	bl	80036b4 <_fstat>
 800b512:	1c43      	adds	r3, r0, #1
 800b514:	d102      	bne.n	800b51c <_fstat_r+0x1c>
 800b516:	682b      	ldr	r3, [r5, #0]
 800b518:	b103      	cbz	r3, 800b51c <_fstat_r+0x1c>
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	bd38      	pop	{r3, r4, r5, pc}
 800b51e:	bf00      	nop
 800b520:	200003d8 	.word	0x200003d8

0800b524 <_isatty_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	4d06      	ldr	r5, [pc, #24]	; (800b540 <_isatty_r+0x1c>)
 800b528:	2300      	movs	r3, #0
 800b52a:	4604      	mov	r4, r0
 800b52c:	4608      	mov	r0, r1
 800b52e:	602b      	str	r3, [r5, #0]
 800b530:	f7f8 f8d0 	bl	80036d4 <_isatty>
 800b534:	1c43      	adds	r3, r0, #1
 800b536:	d102      	bne.n	800b53e <_isatty_r+0x1a>
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	b103      	cbz	r3, 800b53e <_isatty_r+0x1a>
 800b53c:	6023      	str	r3, [r4, #0]
 800b53e:	bd38      	pop	{r3, r4, r5, pc}
 800b540:	200003d8 	.word	0x200003d8
 800b544:	00000000 	.word	0x00000000

0800b548 <log>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	ed2d 8b02 	vpush	{d8}
 800b54e:	ec55 4b10 	vmov	r4, r5, d0
 800b552:	f000 f841 	bl	800b5d8 <__ieee754_log>
 800b556:	4622      	mov	r2, r4
 800b558:	462b      	mov	r3, r5
 800b55a:	4620      	mov	r0, r4
 800b55c:	4629      	mov	r1, r5
 800b55e:	eeb0 8a40 	vmov.f32	s16, s0
 800b562:	eef0 8a60 	vmov.f32	s17, s1
 800b566:	f7f5 faf1 	bl	8000b4c <__aeabi_dcmpun>
 800b56a:	b998      	cbnz	r0, 800b594 <log+0x4c>
 800b56c:	2200      	movs	r2, #0
 800b56e:	2300      	movs	r3, #0
 800b570:	4620      	mov	r0, r4
 800b572:	4629      	mov	r1, r5
 800b574:	f7f5 fae0 	bl	8000b38 <__aeabi_dcmpgt>
 800b578:	b960      	cbnz	r0, 800b594 <log+0x4c>
 800b57a:	2200      	movs	r2, #0
 800b57c:	2300      	movs	r3, #0
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	f7f5 fab1 	bl	8000ae8 <__aeabi_dcmpeq>
 800b586:	b160      	cbz	r0, 800b5a2 <log+0x5a>
 800b588:	f7fe f9d4 	bl	8009934 <__errno>
 800b58c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b5b8 <log+0x70>
 800b590:	2322      	movs	r3, #34	; 0x22
 800b592:	6003      	str	r3, [r0, #0]
 800b594:	eeb0 0a48 	vmov.f32	s0, s16
 800b598:	eef0 0a68 	vmov.f32	s1, s17
 800b59c:	ecbd 8b02 	vpop	{d8}
 800b5a0:	bd38      	pop	{r3, r4, r5, pc}
 800b5a2:	f7fe f9c7 	bl	8009934 <__errno>
 800b5a6:	ecbd 8b02 	vpop	{d8}
 800b5aa:	2321      	movs	r3, #33	; 0x21
 800b5ac:	6003      	str	r3, [r0, #0]
 800b5ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5b2:	4803      	ldr	r0, [pc, #12]	; (800b5c0 <log+0x78>)
 800b5b4:	f000 b808 	b.w	800b5c8 <nan>
 800b5b8:	00000000 	.word	0x00000000
 800b5bc:	fff00000 	.word	0xfff00000
 800b5c0:	0800c35b 	.word	0x0800c35b
 800b5c4:	00000000 	.word	0x00000000

0800b5c8 <nan>:
 800b5c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5d0 <nan+0x8>
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	00000000 	.word	0x00000000
 800b5d4:	7ff80000 	.word	0x7ff80000

0800b5d8 <__ieee754_log>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	ec51 0b10 	vmov	r0, r1, d0
 800b5e0:	ed2d 8b04 	vpush	{d8-d9}
 800b5e4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	da29      	bge.n	800b642 <__ieee754_log+0x6a>
 800b5ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b5f2:	4303      	orrs	r3, r0
 800b5f4:	ee10 2a10 	vmov	r2, s0
 800b5f8:	d10c      	bne.n	800b614 <__ieee754_log+0x3c>
 800b5fa:	49cf      	ldr	r1, [pc, #828]	; (800b938 <__ieee754_log+0x360>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2300      	movs	r3, #0
 800b600:	2000      	movs	r0, #0
 800b602:	f7f5 f933 	bl	800086c <__aeabi_ddiv>
 800b606:	ec41 0b10 	vmov	d0, r0, r1
 800b60a:	b003      	add	sp, #12
 800b60c:	ecbd 8b04 	vpop	{d8-d9}
 800b610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b614:	2900      	cmp	r1, #0
 800b616:	da05      	bge.n	800b624 <__ieee754_log+0x4c>
 800b618:	460b      	mov	r3, r1
 800b61a:	f7f4 fe45 	bl	80002a8 <__aeabi_dsub>
 800b61e:	2200      	movs	r2, #0
 800b620:	2300      	movs	r3, #0
 800b622:	e7ee      	b.n	800b602 <__ieee754_log+0x2a>
 800b624:	4bc5      	ldr	r3, [pc, #788]	; (800b93c <__ieee754_log+0x364>)
 800b626:	2200      	movs	r2, #0
 800b628:	f7f4 fff6 	bl	8000618 <__aeabi_dmul>
 800b62c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b630:	460d      	mov	r5, r1
 800b632:	4ac3      	ldr	r2, [pc, #780]	; (800b940 <__ieee754_log+0x368>)
 800b634:	4295      	cmp	r5, r2
 800b636:	dd06      	ble.n	800b646 <__ieee754_log+0x6e>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	f7f4 fe36 	bl	80002ac <__adddf3>
 800b640:	e7e1      	b.n	800b606 <__ieee754_log+0x2e>
 800b642:	2300      	movs	r3, #0
 800b644:	e7f5      	b.n	800b632 <__ieee754_log+0x5a>
 800b646:	152c      	asrs	r4, r5, #20
 800b648:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b64c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b650:	441c      	add	r4, r3
 800b652:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b656:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b65a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b65e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b662:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b666:	ea42 0105 	orr.w	r1, r2, r5
 800b66a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b66e:	2200      	movs	r2, #0
 800b670:	4bb4      	ldr	r3, [pc, #720]	; (800b944 <__ieee754_log+0x36c>)
 800b672:	f7f4 fe19 	bl	80002a8 <__aeabi_dsub>
 800b676:	1cab      	adds	r3, r5, #2
 800b678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	4682      	mov	sl, r0
 800b680:	468b      	mov	fp, r1
 800b682:	f04f 0200 	mov.w	r2, #0
 800b686:	dc53      	bgt.n	800b730 <__ieee754_log+0x158>
 800b688:	2300      	movs	r3, #0
 800b68a:	f7f5 fa2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b68e:	b1d0      	cbz	r0, 800b6c6 <__ieee754_log+0xee>
 800b690:	2c00      	cmp	r4, #0
 800b692:	f000 8122 	beq.w	800b8da <__ieee754_log+0x302>
 800b696:	4620      	mov	r0, r4
 800b698:	f7f4 ff54 	bl	8000544 <__aeabi_i2d>
 800b69c:	a390      	add	r3, pc, #576	; (adr r3, 800b8e0 <__ieee754_log+0x308>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	460f      	mov	r7, r1
 800b6a6:	f7f4 ffb7 	bl	8000618 <__aeabi_dmul>
 800b6aa:	a38f      	add	r3, pc, #572	; (adr r3, 800b8e8 <__ieee754_log+0x310>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	f7f4 ffae 	bl	8000618 <__aeabi_dmul>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	e7ba      	b.n	800b63c <__ieee754_log+0x64>
 800b6c6:	a38a      	add	r3, pc, #552	; (adr r3, 800b8f0 <__ieee754_log+0x318>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	4650      	mov	r0, sl
 800b6ce:	4659      	mov	r1, fp
 800b6d0:	f7f4 ffa2 	bl	8000618 <__aeabi_dmul>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	2000      	movs	r0, #0
 800b6da:	499b      	ldr	r1, [pc, #620]	; (800b948 <__ieee754_log+0x370>)
 800b6dc:	f7f4 fde4 	bl	80002a8 <__aeabi_dsub>
 800b6e0:	4652      	mov	r2, sl
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	465b      	mov	r3, fp
 800b6e8:	4650      	mov	r0, sl
 800b6ea:	4659      	mov	r1, fp
 800b6ec:	f7f4 ff94 	bl	8000618 <__aeabi_dmul>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	4639      	mov	r1, r7
 800b6f8:	f7f4 ff8e 	bl	8000618 <__aeabi_dmul>
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	b914      	cbnz	r4, 800b708 <__ieee754_log+0x130>
 800b702:	4632      	mov	r2, r6
 800b704:	463b      	mov	r3, r7
 800b706:	e0a2      	b.n	800b84e <__ieee754_log+0x276>
 800b708:	4620      	mov	r0, r4
 800b70a:	f7f4 ff1b 	bl	8000544 <__aeabi_i2d>
 800b70e:	a374      	add	r3, pc, #464	; (adr r3, 800b8e0 <__ieee754_log+0x308>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	4680      	mov	r8, r0
 800b716:	4689      	mov	r9, r1
 800b718:	f7f4 ff7e 	bl	8000618 <__aeabi_dmul>
 800b71c:	a372      	add	r3, pc, #456	; (adr r3, 800b8e8 <__ieee754_log+0x310>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	4604      	mov	r4, r0
 800b724:	460d      	mov	r5, r1
 800b726:	4640      	mov	r0, r8
 800b728:	4649      	mov	r1, r9
 800b72a:	f7f4 ff75 	bl	8000618 <__aeabi_dmul>
 800b72e:	e0a7      	b.n	800b880 <__ieee754_log+0x2a8>
 800b730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b734:	f7f4 fdba 	bl	80002ac <__adddf3>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4650      	mov	r0, sl
 800b73e:	4659      	mov	r1, fp
 800b740:	f7f5 f894 	bl	800086c <__aeabi_ddiv>
 800b744:	ec41 0b18 	vmov	d8, r0, r1
 800b748:	4620      	mov	r0, r4
 800b74a:	f7f4 fefb 	bl	8000544 <__aeabi_i2d>
 800b74e:	ec53 2b18 	vmov	r2, r3, d8
 800b752:	ec41 0b19 	vmov	d9, r0, r1
 800b756:	ec51 0b18 	vmov	r0, r1, d8
 800b75a:	f7f4 ff5d 	bl	8000618 <__aeabi_dmul>
 800b75e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b762:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b766:	9301      	str	r3, [sp, #4]
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4680      	mov	r8, r0
 800b76e:	4689      	mov	r9, r1
 800b770:	f7f4 ff52 	bl	8000618 <__aeabi_dmul>
 800b774:	a360      	add	r3, pc, #384	; (adr r3, 800b8f8 <__ieee754_log+0x320>)
 800b776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77a:	4606      	mov	r6, r0
 800b77c:	460f      	mov	r7, r1
 800b77e:	f7f4 ff4b 	bl	8000618 <__aeabi_dmul>
 800b782:	a35f      	add	r3, pc, #380	; (adr r3, 800b900 <__ieee754_log+0x328>)
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	f7f4 fd90 	bl	80002ac <__adddf3>
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	f7f4 ff42 	bl	8000618 <__aeabi_dmul>
 800b794:	a35c      	add	r3, pc, #368	; (adr r3, 800b908 <__ieee754_log+0x330>)
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	f7f4 fd87 	bl	80002ac <__adddf3>
 800b79e:	4632      	mov	r2, r6
 800b7a0:	463b      	mov	r3, r7
 800b7a2:	f7f4 ff39 	bl	8000618 <__aeabi_dmul>
 800b7a6:	a35a      	add	r3, pc, #360	; (adr r3, 800b910 <__ieee754_log+0x338>)
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f7f4 fd7e 	bl	80002ac <__adddf3>
 800b7b0:	4642      	mov	r2, r8
 800b7b2:	464b      	mov	r3, r9
 800b7b4:	f7f4 ff30 	bl	8000618 <__aeabi_dmul>
 800b7b8:	a357      	add	r3, pc, #348	; (adr r3, 800b918 <__ieee754_log+0x340>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	4680      	mov	r8, r0
 800b7c0:	4689      	mov	r9, r1
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	f7f4 ff27 	bl	8000618 <__aeabi_dmul>
 800b7ca:	a355      	add	r3, pc, #340	; (adr r3, 800b920 <__ieee754_log+0x348>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f7f4 fd6c 	bl	80002ac <__adddf3>
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	463b      	mov	r3, r7
 800b7d8:	f7f4 ff1e 	bl	8000618 <__aeabi_dmul>
 800b7dc:	a352      	add	r3, pc, #328	; (adr r3, 800b928 <__ieee754_log+0x350>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fd63 	bl	80002ac <__adddf3>
 800b7e6:	4632      	mov	r2, r6
 800b7e8:	463b      	mov	r3, r7
 800b7ea:	f7f4 ff15 	bl	8000618 <__aeabi_dmul>
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	4649      	mov	r1, r9
 800b7f4:	4640      	mov	r0, r8
 800b7f6:	f7f4 fd59 	bl	80002ac <__adddf3>
 800b7fa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b7fe:	9b01      	ldr	r3, [sp, #4]
 800b800:	3551      	adds	r5, #81	; 0x51
 800b802:	431d      	orrs	r5, r3
 800b804:	2d00      	cmp	r5, #0
 800b806:	4680      	mov	r8, r0
 800b808:	4689      	mov	r9, r1
 800b80a:	dd48      	ble.n	800b89e <__ieee754_log+0x2c6>
 800b80c:	4b4e      	ldr	r3, [pc, #312]	; (800b948 <__ieee754_log+0x370>)
 800b80e:	2200      	movs	r2, #0
 800b810:	4650      	mov	r0, sl
 800b812:	4659      	mov	r1, fp
 800b814:	f7f4 ff00 	bl	8000618 <__aeabi_dmul>
 800b818:	4652      	mov	r2, sl
 800b81a:	465b      	mov	r3, fp
 800b81c:	f7f4 fefc 	bl	8000618 <__aeabi_dmul>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4606      	mov	r6, r0
 800b826:	460f      	mov	r7, r1
 800b828:	4640      	mov	r0, r8
 800b82a:	4649      	mov	r1, r9
 800b82c:	f7f4 fd3e 	bl	80002ac <__adddf3>
 800b830:	ec53 2b18 	vmov	r2, r3, d8
 800b834:	f7f4 fef0 	bl	8000618 <__aeabi_dmul>
 800b838:	4680      	mov	r8, r0
 800b83a:	4689      	mov	r9, r1
 800b83c:	b964      	cbnz	r4, 800b858 <__ieee754_log+0x280>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	4630      	mov	r0, r6
 800b844:	4639      	mov	r1, r7
 800b846:	f7f4 fd2f 	bl	80002a8 <__aeabi_dsub>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4650      	mov	r0, sl
 800b850:	4659      	mov	r1, fp
 800b852:	f7f4 fd29 	bl	80002a8 <__aeabi_dsub>
 800b856:	e6d6      	b.n	800b606 <__ieee754_log+0x2e>
 800b858:	a321      	add	r3, pc, #132	; (adr r3, 800b8e0 <__ieee754_log+0x308>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	ec51 0b19 	vmov	r0, r1, d9
 800b862:	f7f4 fed9 	bl	8000618 <__aeabi_dmul>
 800b866:	a320      	add	r3, pc, #128	; (adr r3, 800b8e8 <__ieee754_log+0x310>)
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	4604      	mov	r4, r0
 800b86e:	460d      	mov	r5, r1
 800b870:	ec51 0b19 	vmov	r0, r1, d9
 800b874:	f7f4 fed0 	bl	8000618 <__aeabi_dmul>
 800b878:	4642      	mov	r2, r8
 800b87a:	464b      	mov	r3, r9
 800b87c:	f7f4 fd16 	bl	80002ac <__adddf3>
 800b880:	4602      	mov	r2, r0
 800b882:	460b      	mov	r3, r1
 800b884:	4630      	mov	r0, r6
 800b886:	4639      	mov	r1, r7
 800b888:	f7f4 fd0e 	bl	80002a8 <__aeabi_dsub>
 800b88c:	4652      	mov	r2, sl
 800b88e:	465b      	mov	r3, fp
 800b890:	f7f4 fd0a 	bl	80002a8 <__aeabi_dsub>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4620      	mov	r0, r4
 800b89a:	4629      	mov	r1, r5
 800b89c:	e7d9      	b.n	800b852 <__ieee754_log+0x27a>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4650      	mov	r0, sl
 800b8a4:	4659      	mov	r1, fp
 800b8a6:	f7f4 fcff 	bl	80002a8 <__aeabi_dsub>
 800b8aa:	ec53 2b18 	vmov	r2, r3, d8
 800b8ae:	f7f4 feb3 	bl	8000618 <__aeabi_dmul>
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	460f      	mov	r7, r1
 800b8b6:	2c00      	cmp	r4, #0
 800b8b8:	f43f af23 	beq.w	800b702 <__ieee754_log+0x12a>
 800b8bc:	a308      	add	r3, pc, #32	; (adr r3, 800b8e0 <__ieee754_log+0x308>)
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	ec51 0b19 	vmov	r0, r1, d9
 800b8c6:	f7f4 fea7 	bl	8000618 <__aeabi_dmul>
 800b8ca:	a307      	add	r3, pc, #28	; (adr r3, 800b8e8 <__ieee754_log+0x310>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	460d      	mov	r5, r1
 800b8d4:	ec51 0b19 	vmov	r0, r1, d9
 800b8d8:	e727      	b.n	800b72a <__ieee754_log+0x152>
 800b8da:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b930 <__ieee754_log+0x358>
 800b8de:	e694      	b.n	800b60a <__ieee754_log+0x32>
 800b8e0:	fee00000 	.word	0xfee00000
 800b8e4:	3fe62e42 	.word	0x3fe62e42
 800b8e8:	35793c76 	.word	0x35793c76
 800b8ec:	3dea39ef 	.word	0x3dea39ef
 800b8f0:	55555555 	.word	0x55555555
 800b8f4:	3fd55555 	.word	0x3fd55555
 800b8f8:	df3e5244 	.word	0xdf3e5244
 800b8fc:	3fc2f112 	.word	0x3fc2f112
 800b900:	96cb03de 	.word	0x96cb03de
 800b904:	3fc74664 	.word	0x3fc74664
 800b908:	94229359 	.word	0x94229359
 800b90c:	3fd24924 	.word	0x3fd24924
 800b910:	55555593 	.word	0x55555593
 800b914:	3fe55555 	.word	0x3fe55555
 800b918:	d078c69f 	.word	0xd078c69f
 800b91c:	3fc39a09 	.word	0x3fc39a09
 800b920:	1d8e78af 	.word	0x1d8e78af
 800b924:	3fcc71c5 	.word	0x3fcc71c5
 800b928:	9997fa04 	.word	0x9997fa04
 800b92c:	3fd99999 	.word	0x3fd99999
	...
 800b938:	c3500000 	.word	0xc3500000
 800b93c:	43500000 	.word	0x43500000
 800b940:	7fefffff 	.word	0x7fefffff
 800b944:	3ff00000 	.word	0x3ff00000
 800b948:	3fe00000 	.word	0x3fe00000

0800b94c <_init>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	bf00      	nop
 800b950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b952:	bc08      	pop	{r3}
 800b954:	469e      	mov	lr, r3
 800b956:	4770      	bx	lr

0800b958 <_fini>:
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	bf00      	nop
 800b95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b95e:	bc08      	pop	{r3}
 800b960:	469e      	mov	lr, r3
 800b962:	4770      	bx	lr
