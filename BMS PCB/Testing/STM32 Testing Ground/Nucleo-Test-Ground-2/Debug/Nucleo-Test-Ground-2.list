
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002454  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002624  08002624  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002624  08002624  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002624  08002624  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800262c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002638  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002638  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000069e1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000141b  00000000  00000000  00026a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  00027e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000594  00000000  00000000  000285f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001811e  00000000  00000000  00028b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008172  00000000  00000000  00040caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097b2f  00000000  00000000  00048e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d34  00000000  00000000  000e094c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  000e2680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080025c8 	.word	0x080025c8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080025c8 	.word	0x080025c8

080001cc <main>:
// Register addresses for writing checksum and data length info for transactions
const uint8_t CHECKSUM_ADDR = 0x60;
const uint8_t DATALEN_ADDR = 0x61;

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 80001d2:	f000 fbce 	bl	8000972 <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 80001d6:	f000 f829 	bl	800022c <SystemClock_Config>

    // Initialize GPIO and SPI
    GPIO_Init();
 80001da:	f000 f85f 	bl	800029c <GPIO_Init>
    SPI1_Init();
 80001de:	f000 f8bb 	bl	8000358 <SPI1_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 80001e2:	2200      	movs	r2, #0
 80001e4:	2120      	movs	r1, #32
 80001e6:	4810      	ldr	r0, [pc, #64]	; (8000228 <main+0x5c>)
 80001e8:	f000 feb4 	bl	8000f54 <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 80001ec:	2300      	movs	r3, #0
 80001ee:	603b      	str	r3, [r7, #0]
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]
 80001fe:	615a      	str	r2, [r3, #20]
 8000200:	619a      	str	r2, [r3, #24]
    // Send FET_ENABLE sub-command to allow test commands to toggle FETs
//	SubCmdNoData(0x0022);

    while (1)
    {
    	SubCmdNoData(0x0022); // Send FET_ENABLE sub-command
 8000202:	2022      	movs	r0, #34	; 0x22
 8000204:	f000 f924 	bl	8000450 <SubCmdNoData>
    	SubCmdReadData(0x0057, readData, 2);
 8000208:	463b      	mov	r3, r7
 800020a:	2202      	movs	r2, #2
 800020c:	4619      	mov	r1, r3
 800020e:	2057      	movs	r0, #87	; 0x57
 8000210:	f000 f9d8 	bl	80005c4 <SubCmdReadData>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5); // Toggle heartbeat LED
 8000214:	2120      	movs	r1, #32
 8000216:	4804      	ldr	r0, [pc, #16]	; (8000228 <main+0x5c>)
 8000218:	f000 feb4 	bl	8000f84 <HAL_GPIO_TogglePin>
    	HAL_Delay(2000);
 800021c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000220:	f000 fc1c 	bl	8000a5c <HAL_Delay>
    	SubCmdNoData(0x0022); // Send FET_ENABLE sub-command
 8000224:	e7ed      	b.n	8000202 <main+0x36>
 8000226:	bf00      	nop
 8000228:	48000400 	.word	0x48000400

0800022c <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b096      	sub	sp, #88	; 0x58
 8000230:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	2244      	movs	r2, #68	; 0x44
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 f998 	bl	8002570 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	463b      	mov	r3, r7
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800024e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000252:	f000 febf 	bl	8000fd4 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000256:	2310      	movs	r3, #16
 8000258:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800025e:	2300      	movs	r3, #0
 8000260:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000262:	2360      	movs	r3, #96	; 0x60
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000266:	2300      	movs	r3, #0
 8000268:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	4618      	mov	r0, r3
 8000270:	f000 ff06 	bl	8001080 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000274:	230f      	movs	r3, #15
 8000276:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000278:	2300      	movs	r3, #0
 800027a:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000288:	463b      	mov	r3, r7
 800028a:	2100      	movs	r1, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f001 fb59 	bl	8001944 <HAL_RCC_ClockConfig>
}
 8000292:	bf00      	nop
 8000294:	3758      	adds	r7, #88	; 0x58
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <GPIO_Init>:

void GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a2:	4b2b      	ldr	r3, [pc, #172]	; (8000350 <GPIO_Init+0xb4>)
 80002a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a6:	4a2a      	ldr	r2, [pc, #168]	; (8000350 <GPIO_Init+0xb4>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ae:	4b28      	ldr	r3, [pc, #160]	; (8000350 <GPIO_Init+0xb4>)
 80002b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	60bb      	str	r3, [r7, #8]
 80002b8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ba:	4b25      	ldr	r3, [pc, #148]	; (8000350 <GPIO_Init+0xb4>)
 80002bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002be:	4a24      	ldr	r2, [pc, #144]	; (8000350 <GPIO_Init+0xb4>)
 80002c0:	f043 0302 	orr.w	r3, r3, #2
 80002c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c6:	4b22      	ldr	r3, [pc, #136]	; (8000350 <GPIO_Init+0xb4>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ca:	f003 0302 	and.w	r3, r3, #2
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002e2:	2301      	movs	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80002e6:	2311      	movs	r3, #17
 80002e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	4619      	mov	r1, r3
 80002f8:	4816      	ldr	r0, [pc, #88]	; (8000354 <GPIO_Init+0xb8>)
 80002fa:	f000 fcb9 	bl	8000c70 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 80002fe:	2201      	movs	r2, #1
 8000300:	2101      	movs	r1, #1
 8000302:	4814      	ldr	r0, [pc, #80]	; (8000354 <GPIO_Init+0xb8>)
 8000304:	f000 fe26 	bl	8000f54 <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000308:	2320      	movs	r3, #32
 800030a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030c:	2301      	movs	r3, #1
 800030e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	2300      	movs	r3, #0
 8000316:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000318:	f107 030c 	add.w	r3, r7, #12
 800031c:	4619      	mov	r1, r3
 800031e:	480d      	ldr	r0, [pc, #52]	; (8000354 <GPIO_Init+0xb8>)
 8000320:	f000 fca6 	bl	8000c70 <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000324:	23e0      	movs	r3, #224	; 0xe0
 8000326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000328:	2302      	movs	r3, #2
 800032a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2302      	movs	r3, #2
 8000332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000334:	2305      	movs	r3, #5
 8000336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000338:	f107 030c 	add.w	r3, r7, #12
 800033c:	4619      	mov	r1, r3
 800033e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000342:	f000 fc95 	bl	8000c70 <HAL_GPIO_Init>
}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	48000400 	.word	0x48000400

08000358 <SPI1_Init>:

void SPI1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 800035e:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <SPI1_Init+0x84>)
 8000360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000362:	4a1e      	ldr	r2, [pc, #120]	; (80003dc <SPI1_Init+0x84>)
 8000364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000368:	6613      	str	r3, [r2, #96]	; 0x60
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <SPI1_Init+0x84>)
 800036c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800036e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <SPI1_Init+0x88>)
 8000378:	4a1a      	ldr	r2, [pc, #104]	; (80003e4 <SPI1_Init+0x8c>)
 800037a:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <SPI1_Init+0x88>)
 800037e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000382:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <SPI1_Init+0x88>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <SPI1_Init+0x88>)
 800038c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000390:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <SPI1_Init+0x88>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <SPI1_Init+0x88>)
 800039a:	2200      	movs	r2, #0
 800039c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <SPI1_Init+0x88>)
 80003a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a4:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <SPI1_Init+0x88>)
 80003a8:	2230      	movs	r2, #48	; 0x30
 80003aa:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <SPI1_Init+0x88>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <SPI1_Init+0x88>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <SPI1_Init+0x88>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <SPI1_Init+0x88>)
 80003c0:	2207      	movs	r2, #7
 80003c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c4:	4806      	ldr	r0, [pc, #24]	; (80003e0 <SPI1_Init+0x88>)
 80003c6:	f001 fca9 	bl	8001d1c <HAL_SPI_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d000      	beq.n	80003d2 <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 80003d0:	e7fe      	b.n	80003d0 <SPI1_Init+0x78>
    }
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000
 80003e0:	20000028 	.word	0x20000028
 80003e4:	40013000 	.word	0x40013000

080003e8 <crc8>:

uint8_t crc8(uint8_t *data, size_t len)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 80003f2:	2300      	movs	r3, #0
 80003f4:	73fb      	strb	r3, [r7, #15]
    while (len--)
 80003f6:	e01e      	b.n	8000436 <crc8+0x4e>
    {
        crc ^= *data++;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	1c5a      	adds	r2, r3, #1
 80003fc:	607a      	str	r2, [r7, #4]
 80003fe:	781a      	ldrb	r2, [r3, #0]
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	4053      	eors	r3, r2
 8000404:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8000406:	2300      	movs	r3, #0
 8000408:	73bb      	strb	r3, [r7, #14]
 800040a:	e011      	b.n	8000430 <crc8+0x48>
        {
            if (crc & 0x80)
 800040c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000410:	2b00      	cmp	r3, #0
 8000412:	da07      	bge.n	8000424 <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	b25b      	sxtb	r3, r3
 800041a:	f083 0307 	eor.w	r3, r3, #7
 800041e:	b25b      	sxtb	r3, r3
 8000420:	73fb      	strb	r3, [r7, #15]
 8000422:	e002      	b.n	800042a <crc8+0x42>
            else
                crc <<= 1;
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 800042a:	7bbb      	ldrb	r3, [r7, #14]
 800042c:	3301      	adds	r3, #1
 800042e:	73bb      	strb	r3, [r7, #14]
 8000430:	7bbb      	ldrb	r3, [r7, #14]
 8000432:	2b07      	cmp	r3, #7
 8000434:	d9ea      	bls.n	800040c <crc8+0x24>
    while (len--)
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	1e5a      	subs	r2, r3, #1
 800043a:	603a      	str	r2, [r7, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1db      	bne.n	80003f8 <crc8+0x10>
        }
    }
    return crc;
 8000440:	7bfb      	ldrb	r3, [r7, #15]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <SubCmdNoData>:

void SubCmdNoData(uint16_t cmd)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08c      	sub	sp, #48	; 0x30
 8000454:	af02      	add	r7, sp, #8
 8000456:	4603      	mov	r3, r0
 8000458:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 800045a:	4b57      	ldr	r3, [pc, #348]	; (80005b8 <SubCmdNoData+0x168>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	82bb      	strh	r3, [r7, #20]
 8000460:	2300      	movs	r3, #0
 8000462:	75bb      	strb	r3, [r7, #22]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8000464:	23be      	movs	r3, #190	; 0xbe
 8000466:	743b      	strb	r3, [r7, #16]
 8000468:	88fb      	ldrh	r3, [r7, #6]
 800046a:	b2db      	uxtb	r3, r3
 800046c:	747b      	strb	r3, [r7, #17]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	2102      	movs	r1, #2
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ffb7 	bl	80003e8 <crc8>
 800047a:	4603      	mov	r3, r0
 800047c:	76fb      	strb	r3, [r7, #27]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 800047e:	23bf      	movs	r3, #191	; 0xbf
 8000480:	733b      	strb	r3, [r7, #12]
 8000482:	88fb      	ldrh	r3, [r7, #6]
 8000484:	0a1b      	lsrs	r3, r3, #8
 8000486:	b29b      	uxth	r3, r3
 8000488:	b2db      	uxtb	r3, r3
 800048a:	737b      	strb	r3, [r7, #13]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	2102      	movs	r1, #2
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ffa8 	bl	80003e8 <crc8>
 8000498:	4603      	mov	r3, r0
 800049a:	76bb      	strb	r3, [r7, #26]
	bool commReceived = false;
 800049c:	2300      	movs	r3, #0
 800049e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 80004a2:	7c3b      	ldrb	r3, [r7, #16]
 80004a4:	723b      	strb	r3, [r7, #8]
 80004a6:	7c7b      	ldrb	r3, [r7, #17]
 80004a8:	727b      	strb	r3, [r7, #9]
 80004aa:	7efb      	ldrb	r3, [r7, #27]
 80004ac:	72bb      	strb	r3, [r7, #10]
	while (!commReceived)
 80004ae:	e032      	b.n	8000516 <SubCmdNoData+0xc6>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2101      	movs	r1, #1
 80004b4:	4841      	ldr	r0, [pc, #260]	; (80005bc <SubCmdNoData+0x16c>)
 80004b6:	f000 fd4d 	bl	8000f54 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txData, rxData, sizeof(txData), HAL_MAX_DELAY);
 80004ba:	f107 0214 	add.w	r2, r7, #20
 80004be:	f107 0108 	add.w	r1, r7, #8
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	2303      	movs	r3, #3
 80004ca:	483d      	ldr	r0, [pc, #244]	; (80005c0 <SubCmdNoData+0x170>)
 80004cc:	f001 fcc9 	bl	8001e62 <HAL_SPI_TransmitReceive>

		// Confirm command was received
		commReceived = true;
 80004d0:	2301      	movs	r3, #1
 80004d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < sizeof(txData); i++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	623b      	str	r3, [r7, #32]
 80004da:	e011      	b.n	8000500 <SubCmdNoData+0xb0>
		{
			if (txData[i] != rxData[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 80004dc:	f107 0208 	add.w	r2, r7, #8
 80004e0:	6a3b      	ldr	r3, [r7, #32]
 80004e2:	4413      	add	r3, r2
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	f107 0114 	add.w	r1, r7, #20
 80004ea:	6a3b      	ldr	r3, [r7, #32]
 80004ec:	440b      	add	r3, r1
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d002      	beq.n	80004fa <SubCmdNoData+0xaa>
 80004f4:	2300      	movs	r3, #0
 80004f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < sizeof(txData); i++)
 80004fa:	6a3b      	ldr	r3, [r7, #32]
 80004fc:	3301      	adds	r3, #1
 80004fe:	623b      	str	r3, [r7, #32]
 8000500:	6a3b      	ldr	r3, [r7, #32]
 8000502:	2b02      	cmp	r3, #2
 8000504:	d9ea      	bls.n	80004dc <SubCmdNoData+0x8c>
		}
		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2101      	movs	r1, #1
 800050a:	482c      	ldr	r0, [pc, #176]	; (80005bc <SubCmdNoData+0x16c>)
 800050c:	f000 fd22 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 faa3 	bl	8000a5c <HAL_Delay>
	while (!commReceived)
 8000516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800051a:	f083 0301 	eor.w	r3, r3, #1
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1c5      	bne.n	80004b0 <SubCmdNoData+0x60>
	}

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8000524:	7b3b      	ldrb	r3, [r7, #12]
 8000526:	723b      	strb	r3, [r7, #8]
	txData[1] = commandUpperAddr[1];
 8000528:	7b7b      	ldrb	r3, [r7, #13]
 800052a:	727b      	strb	r3, [r7, #9]
	txData[2] = crcUpper;
 800052c:	7ebb      	ldrb	r3, [r7, #26]
 800052e:	72bb      	strb	r3, [r7, #10]
	commReceived = false;
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (!commReceived)
 8000536:	e032      	b.n	800059e <SubCmdNoData+0x14e>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2101      	movs	r1, #1
 800053c:	481f      	ldr	r0, [pc, #124]	; (80005bc <SubCmdNoData+0x16c>)
 800053e:	f000 fd09 	bl	8000f54 <HAL_GPIO_WritePin>

		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txData, rxData, sizeof(txData), HAL_MAX_DELAY);
 8000542:	f107 0214 	add.w	r2, r7, #20
 8000546:	f107 0108 	add.w	r1, r7, #8
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2303      	movs	r3, #3
 8000552:	481b      	ldr	r0, [pc, #108]	; (80005c0 <SubCmdNoData+0x170>)
 8000554:	f001 fc85 	bl	8001e62 <HAL_SPI_TransmitReceive>

		// Confirm command was received
		commReceived = true;
 8000558:	2301      	movs	r3, #1
 800055a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < sizeof(txData); i++)
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
 8000562:	e011      	b.n	8000588 <SubCmdNoData+0x138>
		{
			if (txData[i] != rxData[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 8000564:	f107 0208 	add.w	r2, r7, #8
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	4413      	add	r3, r2
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	f107 0114 	add.w	r1, r7, #20
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	440b      	add	r3, r1
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	d002      	beq.n	8000582 <SubCmdNoData+0x132>
 800057c:	2300      	movs	r3, #0
 800057e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < sizeof(txData); i++)
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3301      	adds	r3, #1
 8000586:	61fb      	str	r3, [r7, #28]
 8000588:	69fb      	ldr	r3, [r7, #28]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d9ea      	bls.n	8000564 <SubCmdNoData+0x114>
		}
		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2101      	movs	r1, #1
 8000592:	480a      	ldr	r0, [pc, #40]	; (80005bc <SubCmdNoData+0x16c>)
 8000594:	f000 fcde 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 fa5f 	bl	8000a5c <HAL_Delay>
	while (!commReceived)
 800059e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1c5      	bne.n	8000538 <SubCmdNoData+0xe8>
	}
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	080025e0 	.word	0x080025e0
 80005bc:	48000400 	.word	0x48000400
 80005c0:	20000028 	.word	0x20000028

080005c4 <SubCmdReadData>:

void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	80fb      	strh	r3, [r7, #6]
 80005d0:	4613      	mov	r3, r2
 80005d2:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 80005d4:	4b7e      	ldr	r3, [pc, #504]	; (80007d0 <SubCmdReadData+0x20c>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	833b      	strh	r3, [r7, #24]
 80005da:	2300      	movs	r3, #0
 80005dc:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 80005de:	23be      	movs	r3, #190	; 0xbe
 80005e0:	753b      	strb	r3, [r7, #20]
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fefa 	bl	80003e8 <crc8>
 80005f4:	4603      	mov	r3, r0
 80005f6:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 80005f8:	23bf      	movs	r3, #191	; 0xbf
 80005fa:	743b      	strb	r3, [r7, #16]
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	b29b      	uxth	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	2102      	movs	r1, #2
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff feeb 	bl	80003e8 <crc8>
 8000612:	4603      	mov	r3, r0
 8000614:	77bb      	strb	r3, [r7, #30]
	bool commReceived = false;
 8000616:	2300      	movs	r3, #0
 8000618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 800061c:	7d3b      	ldrb	r3, [r7, #20]
 800061e:	733b      	strb	r3, [r7, #12]
 8000620:	7d7b      	ldrb	r3, [r7, #21]
 8000622:	737b      	strb	r3, [r7, #13]
 8000624:	7ffb      	ldrb	r3, [r7, #31]
 8000626:	73bb      	strb	r3, [r7, #14]
	while (!commReceived)
 8000628:	e032      	b.n	8000690 <SubCmdReadData+0xcc>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2101      	movs	r1, #1
 800062e:	4869      	ldr	r0, [pc, #420]	; (80007d4 <SubCmdReadData+0x210>)
 8000630:	f000 fc90 	bl	8000f54 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txData, rxData, sizeof(txData), HAL_MAX_DELAY);
 8000634:	f107 0218 	add.w	r2, r7, #24
 8000638:	f107 010c 	add.w	r1, r7, #12
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2303      	movs	r3, #3
 8000644:	4864      	ldr	r0, [pc, #400]	; (80007d8 <SubCmdReadData+0x214>)
 8000646:	f001 fc0c 	bl	8001e62 <HAL_SPI_TransmitReceive>

		// Confirm command was received
		commReceived = true;
 800064a:	2301      	movs	r3, #1
 800064c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int i = 0; i < sizeof(txData); i++)
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
 8000654:	e011      	b.n	800067a <SubCmdReadData+0xb6>
		{
			if (txData[i] != rxData[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 8000656:	f107 020c 	add.w	r2, r7, #12
 800065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065c:	4413      	add	r3, r2
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	f107 0118 	add.w	r1, r7, #24
 8000664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000666:	440b      	add	r3, r1
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d002      	beq.n	8000674 <SubCmdReadData+0xb0>
 800066e:	2300      	movs	r3, #0
 8000670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int i = 0; i < sizeof(txData); i++)
 8000674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000676:	3301      	adds	r3, #1
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
 800067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067c:	2b02      	cmp	r3, #2
 800067e:	d9ea      	bls.n	8000656 <SubCmdReadData+0x92>
		}
		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2101      	movs	r1, #1
 8000684:	4853      	ldr	r0, [pc, #332]	; (80007d4 <SubCmdReadData+0x210>)
 8000686:	f000 fc65 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 800068a:	2003      	movs	r0, #3
 800068c:	f000 f9e6 	bl	8000a5c <HAL_Delay>
	while (!commReceived)
 8000690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000694:	f083 0301 	eor.w	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1c5      	bne.n	800062a <SubCmdReadData+0x66>
	}

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 800069e:	7c3b      	ldrb	r3, [r7, #16]
 80006a0:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 80006a2:	7c7b      	ldrb	r3, [r7, #17]
 80006a4:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 80006a6:	7fbb      	ldrb	r3, [r7, #30]
 80006a8:	73bb      	strb	r3, [r7, #14]
	commReceived = false;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while (!commReceived)
 80006b0:	e032      	b.n	8000718 <SubCmdReadData+0x154>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	4847      	ldr	r0, [pc, #284]	; (80007d4 <SubCmdReadData+0x210>)
 80006b8:	f000 fc4c 	bl	8000f54 <HAL_GPIO_WritePin>

		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txData, rxData, sizeof(txData), HAL_MAX_DELAY);
 80006bc:	f107 0218 	add.w	r2, r7, #24
 80006c0:	f107 010c 	add.w	r1, r7, #12
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2303      	movs	r3, #3
 80006cc:	4842      	ldr	r0, [pc, #264]	; (80007d8 <SubCmdReadData+0x214>)
 80006ce:	f001 fbc8 	bl	8001e62 <HAL_SPI_TransmitReceive>

		// Confirm command was received
		commReceived = true;
 80006d2:	2301      	movs	r3, #1
 80006d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int i = 0; i < sizeof(txData); i++)
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
 80006dc:	e011      	b.n	8000702 <SubCmdReadData+0x13e>
		{
			if (txData[i] != rxData[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 80006de:	f107 020c 	add.w	r2, r7, #12
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	4413      	add	r3, r2
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	f107 0118 	add.w	r1, r7, #24
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	440b      	add	r3, r1
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d002      	beq.n	80006fc <SubCmdReadData+0x138>
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int i = 0; i < sizeof(txData); i++)
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	3301      	adds	r3, #1
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	2b02      	cmp	r3, #2
 8000706:	d9ea      	bls.n	80006de <SubCmdReadData+0x11a>
		}
		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2101      	movs	r1, #1
 800070c:	4831      	ldr	r0, [pc, #196]	; (80007d4 <SubCmdReadData+0x210>)
 800070e:	f000 fc21 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 8000712:	2003      	movs	r0, #3
 8000714:	f000 f9a2 	bl	8000a5c <HAL_Delay>
	while (!commReceived)
 8000718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800071c:	f083 0301 	eor.w	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1c5      	bne.n	80006b2 <SubCmdReadData+0xee>
	}

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 8000726:	2300      	movs	r3, #0
 8000728:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < len; i++) {
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
 800072e:	e045      	b.n	80007bc <SubCmdReadData+0x1f8>
		readData[0] = READ_DATA_BUFF_LSB + i;
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2240      	movs	r2, #64	; 0x40
 8000736:	4413      	add	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	723b      	strb	r3, [r7, #8]
		readData[1] = 0xFF;
 800073c:	23ff      	movs	r3, #255	; 0xff
 800073e:	727b      	strb	r3, [r7, #9]

		txData[0] = readData[0];
 8000740:	7a3b      	ldrb	r3, [r7, #8]
 8000742:	733b      	strb	r3, [r7, #12]
		txData[1] = readData[1];
 8000744:	7a7b      	ldrb	r3, [r7, #9]
 8000746:	737b      	strb	r3, [r7, #13]
		txData[2] = crc8(readData, 2);
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fe4a 	bl	80003e8 <crc8>
 8000754:	4603      	mov	r3, r0
 8000756:	73bb      	strb	r3, [r7, #14]

		commReceived = false;
 8000758:	2300      	movs	r3, #0
 800075a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (!commReceived)
 800075e:	e01e      	b.n	800079e <SubCmdReadData+0x1da>
		{
			// Pull NSS low
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	481b      	ldr	r0, [pc, #108]	; (80007d4 <SubCmdReadData+0x210>)
 8000766:	f000 fbf5 	bl	8000f54 <HAL_GPIO_WritePin>

			// Transmit data and receive AFE's response
			HAL_SPI_TransmitReceive(&hspi1, txData, rxData, sizeof(txData), HAL_MAX_DELAY);
 800076a:	f107 0218 	add.w	r2, r7, #24
 800076e:	f107 010c 	add.w	r1, r7, #12
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2303      	movs	r3, #3
 800077a:	4817      	ldr	r0, [pc, #92]	; (80007d8 <SubCmdReadData+0x214>)
 800077c:	f001 fb71 	bl	8001e62 <HAL_SPI_TransmitReceive>

			// Confirm command was received by checking address byte received
			if (txData[0] == rxData[0]) commReceived = true;
 8000780:	7b3a      	ldrb	r2, [r7, #12]
 8000782:	7e3b      	ldrb	r3, [r7, #24]
 8000784:	429a      	cmp	r2, r3
 8000786:	d102      	bne.n	800078e <SubCmdReadData+0x1ca>
 8000788:	2301      	movs	r3, #1
 800078a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			// Pull NSS high and wait for transaction to be processed
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2101      	movs	r1, #1
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <SubCmdReadData+0x210>)
 8000794:	f000 fbde 	bl	8000f54 <HAL_GPIO_WritePin>
			HAL_Delay(3);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f95f 	bl	8000a5c <HAL_Delay>
		while (!commReceived)
 800079e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1d9      	bne.n	8000760 <SubCmdReadData+0x19c>
		}

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	7e7a      	ldrb	r2, [r7, #25]
 80007b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 80007b6:	6a3b      	ldr	r3, [r7, #32]
 80007b8:	3301      	adds	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	6a3a      	ldr	r2, [r7, #32]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbb5      	blt.n	8000730 <SubCmdReadData+0x16c>
	}
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	080025e0 	.word	0x080025e0
 80007d4:	48000400 	.word	0x48000400
 80007d8:	20000028 	.word	0x20000028

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x44>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6613      	str	r3, [r2, #96]	; 0x60
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x44>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <HAL_SPI_MspInit+0x7c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d128      	bne.n	8000898 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 800084c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000850:	6613      	str	r3, [r2, #96]	; 0x60
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000876:	23c2      	movs	r3, #194	; 0xc2
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000886:	2305      	movs	r3, #5
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f000 f9ec 	bl	8000c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40013000 	.word	0x40013000
 80008a4:	40021000 	.word	0x40021000

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 f892 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000958 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000924:	f7ff ffea 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <LoopForever+0x6>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	; (8000960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LoopForever+0xe>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <LoopForever+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094e:	f001 fe17 	bl	8002580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000952:	f7ff fc3b 	bl	80001cc <main>

08000956 <LoopForever>:

LoopForever:
    b LoopForever
 8000956:	e7fe      	b.n	8000956 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000958:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000964:	0800262c 	.word	0x0800262c
  ldr r2, =_sbss
 8000968:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800096c:	20000090 	.word	0x20000090

08000970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC1_2_IRQHandler>

08000972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f943 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000982:	200f      	movs	r0, #15
 8000984:	f000 f80e 	bl	80009a4 <HAL_InitTick>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	e001      	b.n	8000998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000994:	f7ff ff22 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000998:	79fb      	ldrb	r3, [r7, #7]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <HAL_InitTick+0x6c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d023      	beq.n	8000a00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_InitTick+0x70>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_InitTick+0x6c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f941 	bl	8000c56 <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10f      	bne.n	80009fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d809      	bhi.n	80009f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f919 	bl	8000c1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_InitTick+0x74>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	e007      	b.n	8000a04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
 80009f8:	e004      	b.n	8000a04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e001      	b.n	8000a04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	2000008c 	.word	0x2000008c

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	2000008c 	.word	0x2000008c

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff ffee 	bl	8000a44 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffde 	bl	8000a44 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd4:	d301      	bcc.n	8000bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00f      	b.n	8000bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <SysTick_Config+0x40>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be2:	210f      	movs	r1, #15
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f7ff ff8e 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <SysTick_Config+0x40>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SysTick_Config+0x40>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff47 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c30:	f7ff ff5c 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ff8e 	bl	8000b5c <NVIC_EncodePriority>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff5d 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffb0 	bl	8000bc4 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7e:	e14e      	b.n	8000f1e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	2101      	movs	r1, #1
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 8140 	beq.w	8000f18 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d005      	beq.n	8000cb0 <HAL_GPIO_Init+0x40>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d130      	bne.n	8000d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	f003 0201 	and.w	r2, r3, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d017      	beq.n	8000d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d123      	bne.n	8000da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	08da      	lsrs	r2, r3, #3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3208      	adds	r2, #8
 8000d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	220f      	movs	r2, #15
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	691a      	ldr	r2, [r3, #16]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	6939      	ldr	r1, [r7, #16]
 8000d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0203 	and.w	r2, r3, #3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 809a 	beq.w	8000f18 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de4:	4b55      	ldr	r3, [pc, #340]	; (8000f3c <HAL_GPIO_Init+0x2cc>)
 8000de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de8:	4a54      	ldr	r2, [pc, #336]	; (8000f3c <HAL_GPIO_Init+0x2cc>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6613      	str	r3, [r2, #96]	; 0x60
 8000df0:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <HAL_GPIO_Init+0x2cc>)
 8000df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dfc:	4a50      	ldr	r2, [pc, #320]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	3302      	adds	r3, #2
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e26:	d013      	beq.n	8000e50 <HAL_GPIO_Init+0x1e0>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a46      	ldr	r2, [pc, #280]	; (8000f44 <HAL_GPIO_Init+0x2d4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d00d      	beq.n	8000e4c <HAL_GPIO_Init+0x1dc>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a45      	ldr	r2, [pc, #276]	; (8000f48 <HAL_GPIO_Init+0x2d8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d007      	beq.n	8000e48 <HAL_GPIO_Init+0x1d8>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a44      	ldr	r2, [pc, #272]	; (8000f4c <HAL_GPIO_Init+0x2dc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d101      	bne.n	8000e44 <HAL_GPIO_Init+0x1d4>
 8000e40:	2303      	movs	r3, #3
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x1e2>
 8000e44:	2307      	movs	r3, #7
 8000e46:	e004      	b.n	8000e52 <HAL_GPIO_Init+0x1e2>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x1e2>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <HAL_GPIO_Init+0x1e2>
 8000e50:	2300      	movs	r3, #0
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	f002 0203 	and.w	r2, r2, #3
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	4093      	lsls	r3, r2
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e62:	4937      	ldr	r1, [pc, #220]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e70:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e94:	4a2e      	ldr	r2, [pc, #184]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e9a:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ebe:	4a24      	ldr	r2, [pc, #144]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_GPIO_Init+0x2e0>)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f47f aea9 	bne.w	8000c80 <HAL_GPIO_Init+0x10>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000
 8000f44:	48000400 	.word	0x48000400
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	48000c00 	.word	0x48000c00
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	4613      	mov	r3, r2
 8000f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	041a      	lsls	r2, r3, #16
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43d9      	mvns	r1, r3
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe2:	d130      	bne.n	8001046 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff0:	d038      	beq.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001000:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2232      	movs	r2, #50	; 0x32
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	3301      	adds	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001018:	e002      	b.n	8001020 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3b01      	subs	r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800102c:	d102      	bne.n	8001034 <HAL_PWREx_ControlVoltageScaling+0x60>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f2      	bne.n	800101a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001040:	d110      	bne.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e00f      	b.n	8001066 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001052:	d007      	beq.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800105c:	4a05      	ldr	r2, [pc, #20]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001062:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40007000 	.word	0x40007000
 8001078:	20000000 	.word	0x20000000
 800107c:	431bde83 	.word	0x431bde83

08001080 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	f000 bc4f 	b.w	8001932 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001094:	4b97      	ldr	r3, [pc, #604]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800109e:	4b95      	ldr	r3, [pc, #596]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80e6 	beq.w	8001282 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_RCC_OscConfig+0x4c>
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	2b0c      	cmp	r3, #12
 80010c0:	f040 808d 	bne.w	80011de <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	f040 8089 	bne.w	80011de <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010cc:	4b89      	ldr	r3, [pc, #548]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <HAL_RCC_OscConfig+0x66>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f000 bc26 	b.w	8001932 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ea:	4b82      	ldr	r3, [pc, #520]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <HAL_RCC_OscConfig+0x80>
 80010f6:	4b7f      	ldr	r3, [pc, #508]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010fe:	e005      	b.n	800110c <HAL_RCC_OscConfig+0x8c>
 8001100:	4b7c      	ldr	r3, [pc, #496]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800110c:	4293      	cmp	r3, r2
 800110e:	d224      	bcs.n	800115a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fda1 	bl	8001c5c <RCC_SetFlashLatencyFromMSIRange>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	f000 bc06 	b.w	8001932 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001126:	4b73      	ldr	r3, [pc, #460]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a72      	ldr	r2, [pc, #456]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	496d      	ldr	r1, [pc, #436]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001144:	4b6b      	ldr	r3, [pc, #428]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	4968      	ldr	r1, [pc, #416]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
 8001158:	e025      	b.n	80011a6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800115a:	4b66      	ldr	r3, [pc, #408]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a65      	ldr	r2, [pc, #404]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	4960      	ldr	r1, [pc, #384]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001174:	4313      	orrs	r3, r2
 8001176:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	495b      	ldr	r1, [pc, #364]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fd60 	bl	8001c5c <RCC_SetFlashLatencyFromMSIRange>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e3c5      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011a6:	f000 fccd 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 80011aa:	4602      	mov	r2, r0
 80011ac:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	4950      	ldr	r1, [pc, #320]	; (80012f8 <HAL_RCC_OscConfig+0x278>)
 80011b8:	5ccb      	ldrb	r3, [r1, r3]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_RCC_OscConfig+0x27c>)
 80011c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011c6:	4b4e      	ldr	r3, [pc, #312]	; (8001300 <HAL_RCC_OscConfig+0x280>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fbea 	bl	80009a4 <HAL_InitTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d052      	beq.n	8001280 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	e3a9      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d032      	beq.n	800124c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011e6:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a42      	ldr	r2, [pc, #264]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fc27 	bl	8000a44 <HAL_GetTick>
 80011f6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011fa:	f7ff fc23 	bl	8000a44 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e392      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a35      	ldr	r2, [pc, #212]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	4930      	ldr	r1, [pc, #192]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	492b      	ldr	r1, [pc, #172]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
 800124a:	e01a      	b.n	8001282 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001258:	f7ff fbf4 	bl	8000a44 <HAL_GetTick>
 800125c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001260:	f7ff fbf0 	bl	8000a44 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e35f      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x1e0>
 800127e:	e000      	b.n	8001282 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d073      	beq.n	8001376 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	2b08      	cmp	r3, #8
 8001292:	d005      	beq.n	80012a0 <HAL_RCC_OscConfig+0x220>
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	2b0c      	cmp	r3, #12
 8001298:	d10e      	bne.n	80012b8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d10b      	bne.n	80012b8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d063      	beq.n	8001374 <HAL_RCC_OscConfig+0x2f4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d15f      	bne.n	8001374 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e33c      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d106      	bne.n	80012d0 <HAL_RCC_OscConfig+0x250>
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e025      	b.n	800131c <HAL_RCC_OscConfig+0x29c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d8:	d114      	bne.n	8001304 <HAL_RCC_OscConfig+0x284>
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a02      	ldr	r2, [pc, #8]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e013      	b.n	800131c <HAL_RCC_OscConfig+0x29c>
 80012f4:	40021000 	.word	0x40021000
 80012f8:	080025e4 	.word	0x080025e4
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004
 8001304:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a8e      	ldr	r2, [pc, #568]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b8c      	ldr	r3, [pc, #560]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a8b      	ldr	r2, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fb8e 	bl	8000a44 <HAL_GetTick>
 8001328:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fb8a 	bl	8000a44 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e2f9      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133e:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x2ac>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fb7a 	bl	8000a44 <HAL_GetTick>
 8001350:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fb76 	bl	8000a44 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e2e5      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001366:	4b77      	ldr	r3, [pc, #476]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x2d4>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d060      	beq.n	8001444 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	2b04      	cmp	r3, #4
 8001386:	d005      	beq.n	8001394 <HAL_RCC_OscConfig+0x314>
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d119      	bne.n	80013c2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d116      	bne.n	80013c2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001394:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_OscConfig+0x32c>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e2c2      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b65      	ldr	r3, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	061b      	lsls	r3, r3, #24
 80013ba:	4962      	ldr	r1, [pc, #392]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c0:	e040      	b.n	8001444 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d023      	beq.n	8001412 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ca:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a5d      	ldr	r2, [pc, #372]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff fb35 	bl	8000a44 <HAL_GetTick>
 80013da:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fb31 	bl	8000a44 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e2a0      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f0:	4b54      	ldr	r3, [pc, #336]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	494e      	ldr	r1, [pc, #312]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
 8001410:	e018      	b.n	8001444 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a4b      	ldr	r2, [pc, #300]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800141c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fb11 	bl	8000a44 <HAL_GetTick>
 8001422:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fb0d 	bl	8000a44 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e27c      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001438:	4b42      	ldr	r3, [pc, #264]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8082 	beq.w	8001556 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d05f      	beq.n	800151a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800145a:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800145c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001460:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	429a      	cmp	r2, r3
 800146e:	d037      	beq.n	80014e0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e254      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01b      	beq.n	80014ca <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001492:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001498:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014a2:	f7ff facf 	bl	8000a44 <HAL_GetTick>
 80014a6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff facb 	bl	8000a44 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b11      	cmp	r3, #17
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e23a      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ef      	bne.n	80014aa <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d0:	f023 0210 	bic.w	r2, r3, #16
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	491a      	ldr	r1, [pc, #104]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff faa8 	bl	8000a44 <HAL_GetTick>
 80014f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff faa4 	bl	8000a44 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b11      	cmp	r3, #17
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e213      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0ef      	beq.n	80014f8 <HAL_RCC_OscConfig+0x478>
 8001518:	e01d      	b.n	8001556 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152a:	f7ff fa8b 	bl	8000a44 <HAL_GetTick>
 800152e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001532:	f7ff fa87 	bl	8000a44 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b11      	cmp	r3, #17
 800153e:	d903      	bls.n	8001548 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1f6      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
 8001544:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001548:	4ba9      	ldr	r3, [pc, #676]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1ed      	bne.n	8001532 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80bd 	beq.w	80016de <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800156a:	4ba1      	ldr	r3, [pc, #644]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10e      	bne.n	8001594 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b9e      	ldr	r3, [pc, #632]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	4a9d      	ldr	r2, [pc, #628]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6593      	str	r3, [r2, #88]	; 0x58
 8001582:	4b9b      	ldr	r3, [pc, #620]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001594:	4b97      	ldr	r3, [pc, #604]	; (80017f4 <HAL_RCC_OscConfig+0x774>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d118      	bne.n	80015d2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a0:	4b94      	ldr	r3, [pc, #592]	; (80017f4 <HAL_RCC_OscConfig+0x774>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a93      	ldr	r2, [pc, #588]	; (80017f4 <HAL_RCC_OscConfig+0x774>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fa4a 	bl	8000a44 <HAL_GetTick>
 80015b0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b4:	f7ff fa46 	bl	8000a44 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1b5      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c6:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <HAL_RCC_OscConfig+0x774>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02c      	beq.n	8001638 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80015de:	4b84      	ldr	r3, [pc, #528]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80015e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f0:	497f      	ldr	r1, [pc, #508]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d010      	beq.n	8001626 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001604:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160a:	4a79      	ldr	r2, [pc, #484]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001614:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800161a:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001624:	e018      	b.n	8001658 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001626:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162c:	4a70      	ldr	r2, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001636:	e00f      	b.n	8001658 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001638:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	4a6c      	ldr	r2, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001648:	4b69      	ldr	r3, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	4a68      	ldr	r2, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d016      	beq.n	800168e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff f9f0 	bl	8000a44 <HAL_GetTick>
 8001664:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001666:	e00a      	b.n	800167e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff f9ec 	bl	8000a44 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e159      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ed      	beq.n	8001668 <HAL_RCC_OscConfig+0x5e8>
 800168c:	e01d      	b.n	80016ca <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff f9d9 	bl	8000a44 <HAL_GetTick>
 8001692:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff f9d5 	bl	8000a44 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e142      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ac:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ed      	bne.n	8001696 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80016ba:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80016bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80016c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	4a46      	ldr	r2, [pc, #280]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80016d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d03c      	beq.n	8001764 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d01c      	beq.n	800172c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f2:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80016f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f8:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff f99f 	bl	8000a44 <HAL_GetTick>
 8001706:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800170a:	f7ff f99b 	bl	8000a44 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e10a      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800171c:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800171e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0ef      	beq.n	800170a <HAL_RCC_OscConfig+0x68a>
 800172a:	e01b      	b.n	8001764 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800172c:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800172e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001732:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff f982 	bl	8000a44 <HAL_GetTick>
 8001740:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001744:	f7ff f97e 	bl	8000a44 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0ed      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 8001758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ef      	bne.n	8001744 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80e1 	beq.w	8001930 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	2b02      	cmp	r3, #2
 8001774:	f040 80b5 	bne.w	80018e2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0203 	and.w	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	429a      	cmp	r2, r3
 800178a:	d124      	bne.n	80017d6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001796:	3b01      	subs	r3, #1
 8001798:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d11b      	bne.n	80017d6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d113      	bne.n	80017d6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	3b01      	subs	r3, #1
 80017bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d05f      	beq.n	8001896 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	d05a      	beq.n	8001892 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <HAL_RCC_OscConfig+0x770>)
 80017e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e8:	f7ff f92c 	bl	8000a44 <HAL_GetTick>
 80017ec:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ee:	e00c      	b.n	800180a <HAL_RCC_OscConfig+0x78a>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff f924 	bl	8000a44 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e093      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180a:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	4b49      	ldr	r3, [pc, #292]	; (8001940 <HAL_RCC_OscConfig+0x8c0>)
 800181c:	4013      	ands	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001826:	3a01      	subs	r2, #1
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001830:	0212      	lsls	r2, r2, #8
 8001832:	4311      	orrs	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001838:	0852      	lsrs	r2, r2, #1
 800183a:	3a01      	subs	r2, #1
 800183c:	0552      	lsls	r2, r2, #21
 800183e:	4311      	orrs	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001844:	0852      	lsrs	r2, r2, #1
 8001846:	3a01      	subs	r2, #1
 8001848:	0652      	lsls	r2, r2, #25
 800184a:	430a      	orrs	r2, r1
 800184c:	493b      	ldr	r1, [pc, #236]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001852:	4b3a      	ldr	r3, [pc, #232]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a39      	ldr	r2, [pc, #228]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 8001858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4a36      	ldr	r2, [pc, #216]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 8001864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001868:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800186a:	f7ff f8eb 	bl	8000a44 <HAL_GetTick>
 800186e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f8e7 	bl	8000a44 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e056      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001890:	e04e      	b.n	8001930 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e04d      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d146      	bne.n	8001930 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a25      	ldr	r2, [pc, #148]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 80018a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ac:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4a22      	ldr	r2, [pc, #136]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 80018b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018ba:	f7ff f8c3 	bl	8000a44 <HAL_GetTick>
 80018be:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff f8bf 	bl	8000a44 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e02e      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x842>
 80018e0:	e026      	b.n	8001930 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d021      	beq.n	800192c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a13      	ldr	r2, [pc, #76]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 80018ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff f8a6 	bl	8000a44 <HAL_GetTick>
 80018f8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f8a2 	bl	8000a44 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e011      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_RCC_OscConfig+0x8bc>)
 8001920:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001924:	f023 0303 	bic.w	r3, r3, #3
 8001928:	60d3      	str	r3, [r2, #12]
 800192a:	e001      	b.n	8001930 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	f99f808c 	.word	0xf99f808c

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0e7      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b72      	ldr	r3, [pc, #456]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4970      	ldr	r1, [pc, #448]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b6e      	ldr	r3, [pc, #440]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0cf      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d010      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d908      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4960      	ldr	r1, [pc, #384]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d04c      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	4b5a      	ldr	r3, [pc, #360]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d121      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0a6      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	4b54      	ldr	r3, [pc, #336]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e09a      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019fa:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e08e      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e086      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4943      	ldr	r1, [pc, #268]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a2c:	f7ff f80a 	bl	8000a44 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff f806 	bl	8000a44 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e06e      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d208      	bcs.n	8001a8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	492b      	ldr	r1, [pc, #172]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8a:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d210      	bcs.n	8001aba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 0207 	bic.w	r2, r3, #7
 8001aa0:	4923      	ldr	r1, [pc, #140]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_ClockConfig+0x1ec>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e036      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	4918      	ldr	r1, [pc, #96]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4910      	ldr	r1, [pc, #64]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af8:	f000 f824 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	490b      	ldr	r1, [pc, #44]	; (8001b38 <HAL_RCC_ClockConfig+0x1f4>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1fc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe ff41 	bl	80009a4 <HAL_InitTick>
 8001b22:	4603      	mov	r3, r0
 8001b24:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b26:	7afb      	ldrb	r3, [r7, #11]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	080025e4 	.word	0x080025e4
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x34>
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d121      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d11e      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e005      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ba0:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10d      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	e004      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d134      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d003      	beq.n	8001bea <HAL_RCC_GetSysClockFreq+0xa6>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d003      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xac>
 8001be8:	e005      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bec:	617b      	str	r3, [r7, #20]
      break;
 8001bee:	e005      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bf2:	617b      	str	r3, [r7, #20]
      break;
 8001bf4:	e002      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	617b      	str	r3, [r7, #20]
      break;
 8001bfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	3301      	adds	r3, #1
 8001c08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	fb03 f202 	mul.w	r2, r3, r2
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	0e5b      	lsrs	r3, r3, #25
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	080025f4 	.word	0x080025f4
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	007a1200 	.word	0x007a1200

08001c5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c74:	f7ff f9a0 	bl	8000fb8 <HAL_PWREx_GetVoltageRange>
 8001c78:	6178      	str	r0, [r7, #20]
 8001c7a:	e014      	b.n	8001ca6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	4a24      	ldr	r2, [pc, #144]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c86:	6593      	str	r3, [r2, #88]	; 0x58
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c94:	f7ff f990 	bl	8000fb8 <HAL_PWREx_GetVoltageRange>
 8001c98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cac:	d10b      	bne.n	8001cc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d919      	bls.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001cb8:	d902      	bls.n	8001cc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cba:	2302      	movs	r3, #2
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	e013      	b.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	e010      	b.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b80      	cmp	r3, #128	; 0x80
 8001cca:	d902      	bls.n	8001cd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ccc:	2303      	movs	r3, #3
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	e00a      	b.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b80      	cmp	r3, #128	; 0x80
 8001cd6:	d102      	bne.n	8001cde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd8:	2302      	movs	r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e004      	b.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b70      	cmp	r3, #112	; 0x70
 8001ce2:	d101      	bne.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 0207 	bic.w	r2, r3, #7
 8001cf0:	4909      	ldr	r1, [pc, #36]	; (8001d18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d001      	beq.n	8001d0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e095      	b.n	8001e5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d108      	bne.n	8001d48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d3e:	d009      	beq.n	8001d54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
 8001d46:	e005      	b.n	8001d54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7fe fd58 	bl	8000824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d94:	d902      	bls.n	8001d9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e002      	b.n	8001da2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001daa:	d007      	beq.n	8001dbc <HAL_SPI_Init+0xa0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001db4:	d002      	beq.n	8001dbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	ea42 0103 	orr.w	r1, r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	f003 0204 	and.w	r2, r3, #4
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e38:	ea42 0103 	orr.w	r1, r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08a      	sub	sp, #40	; 0x28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e70:	2301      	movs	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_SPI_TransmitReceive+0x26>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e20a      	b.n	800229e <HAL_SPI_TransmitReceive+0x43c>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e90:	f7fe fdd8 	bl	8000a44 <HAL_GetTick>
 8001e94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001eac:	7efb      	ldrb	r3, [r7, #27]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d00e      	beq.n	8001ed0 <HAL_SPI_TransmitReceive+0x6e>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eb8:	d106      	bne.n	8001ec8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <HAL_SPI_TransmitReceive+0x66>
 8001ec2:	7efb      	ldrb	r3, [r7, #27]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d003      	beq.n	8001ed0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001ece:	e1e0      	b.n	8002292 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_SPI_TransmitReceive+0x80>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_SPI_TransmitReceive+0x80>
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001ee8:	e1d3      	b.n	8002292 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d003      	beq.n	8001efe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2205      	movs	r2, #5
 8001efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	887a      	ldrh	r2, [r7, #2]
 8001f2a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f40:	d802      	bhi.n	8001f48 <HAL_SPI_TransmitReceive+0xe6>
 8001f42:	8a3b      	ldrh	r3, [r7, #16]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d908      	bls.n	8001f5a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	e007      	b.n	8001f6a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d007      	beq.n	8001f88 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f90:	f240 8081 	bls.w	8002096 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_SPI_TransmitReceive+0x140>
 8001f9c:	8a7b      	ldrh	r3, [r7, #18]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d16d      	bne.n	800207e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	881a      	ldrh	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	1c9a      	adds	r2, r3, #2
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fc6:	e05a      	b.n	800207e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d11b      	bne.n	800200e <HAL_SPI_TransmitReceive+0x1ac>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d016      	beq.n	800200e <HAL_SPI_TransmitReceive+0x1ac>
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d113      	bne.n	800200e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	881a      	ldrh	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	1c9a      	adds	r2, r3, #2
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d11c      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x1f4>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d016      	beq.n	8002056 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	b292      	uxth	r2, r2
 8002034:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	1c9a      	adds	r2, r3, #2
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002052:	2301      	movs	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002056:	f7fe fcf5 	bl	8000a44 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002062:	429a      	cmp	r2, r3
 8002064:	d80b      	bhi.n	800207e <HAL_SPI_TransmitReceive+0x21c>
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d007      	beq.n	800207e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800207c:	e109      	b.n	8002292 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d19f      	bne.n	8001fc8 <HAL_SPI_TransmitReceive+0x166>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d199      	bne.n	8001fc8 <HAL_SPI_TransmitReceive+0x166>
 8002094:	e0e3      	b.n	800225e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_SPI_TransmitReceive+0x244>
 800209e:	8a7b      	ldrh	r3, [r7, #18]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	f040 80cf 	bne.w	8002244 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d912      	bls.n	80020d6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	881a      	ldrh	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	1c9a      	adds	r2, r3, #2
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b02      	subs	r3, #2
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020d4:	e0b6      	b.n	8002244 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	330c      	adds	r3, #12
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020fc:	e0a2      	b.n	8002244 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d134      	bne.n	8002176 <HAL_SPI_TransmitReceive+0x314>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d02f      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x314>
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	2b01      	cmp	r3, #1
 800211a:	d12c      	bne.n	8002176 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d912      	bls.n	800214c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	1c9a      	adds	r2, r3, #2
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b02      	subs	r3, #2
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	87da      	strh	r2, [r3, #62]	; 0x3e
 800214a:	e012      	b.n	8002172 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	330c      	adds	r3, #12
 8002156:	7812      	ldrb	r2, [r2, #0]
 8002158:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d148      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x3b4>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d042      	beq.n	8002216 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d923      	bls.n	80021e4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	b292      	uxth	r2, r2
 80021a8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	1c9a      	adds	r2, r3, #2
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b02      	subs	r3, #2
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d81f      	bhi.n	8002212 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	e016      	b.n	8002212 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f103 020c 	add.w	r2, r3, #12
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002212:	2301      	movs	r3, #1
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002216:	f7fe fc15 	bl	8000a44 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002222:	429a      	cmp	r2, r3
 8002224:	d803      	bhi.n	800222e <HAL_SPI_TransmitReceive+0x3cc>
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d102      	bne.n	8002234 <HAL_SPI_TransmitReceive+0x3d2>
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	2b00      	cmp	r3, #0
 8002232:	d107      	bne.n	8002244 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002242:	e026      	b.n	8002292 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	f47f af57 	bne.w	80020fe <HAL_SPI_TransmitReceive+0x29c>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	f47f af50 	bne.w	80020fe <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f93e 	bl	80024e4 <SPI_EndRxTxTransaction>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002288:	e003      	b.n	8002292 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800229a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022b8:	f7fe fbc4 	bl	8000a44 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022c8:	f7fe fbbc 	bl	8000a44 <HAL_GetTick>
 80022cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022ce:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	015b      	lsls	r3, r3, #5
 80022d4:	0d1b      	lsrs	r3, r3, #20
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022de:	e054      	b.n	800238a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e6:	d050      	beq.n	800238a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022e8:	f7fe fbac 	bl	8000a44 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d902      	bls.n	80022fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d13d      	bne.n	800237a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800230c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002316:	d111      	bne.n	800233c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002320:	d004      	beq.n	800232c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232a:	d107      	bne.n	800233c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800233a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002344:	d10f      	bne.n	8002366 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002364:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e017      	b.n	80023aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3b01      	subs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4013      	ands	r3, r2
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	bf0c      	ite	eq
 800239a:	2301      	moveq	r3, #1
 800239c:	2300      	movne	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d19b      	bne.n	80022e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000000 	.word	0x20000000

080023b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80023ca:	f7fe fb3b 	bl	8000a44 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80023da:	f7fe fb33 	bl	8000a44 <HAL_GetTick>
 80023de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	330c      	adds	r3, #12
 80023e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80023e8:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00da      	lsls	r2, r3, #3
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	0d1b      	lsrs	r3, r3, #20
 80023f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002400:	e060      	b.n	80024c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002408:	d107      	bne.n	800241a <SPI_WaitFifoStateUntilTimeout+0x62>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002418:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d050      	beq.n	80024c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002422:	f7fe fb0f 	bl	8000a44 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	429a      	cmp	r2, r3
 8002430:	d902      	bls.n	8002438 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	2b00      	cmp	r3, #0
 8002436:	d13d      	bne.n	80024b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002446:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002450:	d111      	bne.n	8002476 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800245a:	d004      	beq.n	8002466 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002464:	d107      	bne.n	8002476 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002474:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247e:	d10f      	bne.n	80024a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800249e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e010      	b.n	80024d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d196      	bne.n	8002402 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000

080024e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff ff5b 	bl	80023b8 <SPI_WaitFifoStateUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e027      	b.n	8002568 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2200      	movs	r2, #0
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff fec0 	bl	80022a8 <SPI_WaitFlagStateUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	f043 0220 	orr.w	r2, r3, #32
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e014      	b.n	8002568 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff ff34 	bl	80023b8 <SPI_WaitFifoStateUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	f043 0220 	orr.w	r2, r3, #32
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e000      	b.n	8002568 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <memset>:
 8002570:	4402      	add	r2, r0
 8002572:	4603      	mov	r3, r0
 8002574:	4293      	cmp	r3, r2
 8002576:	d100      	bne.n	800257a <memset+0xa>
 8002578:	4770      	bx	lr
 800257a:	f803 1b01 	strb.w	r1, [r3], #1
 800257e:	e7f9      	b.n	8002574 <memset+0x4>

08002580 <__libc_init_array>:
 8002580:	b570      	push	{r4, r5, r6, lr}
 8002582:	4d0d      	ldr	r5, [pc, #52]	; (80025b8 <__libc_init_array+0x38>)
 8002584:	4c0d      	ldr	r4, [pc, #52]	; (80025bc <__libc_init_array+0x3c>)
 8002586:	1b64      	subs	r4, r4, r5
 8002588:	10a4      	asrs	r4, r4, #2
 800258a:	2600      	movs	r6, #0
 800258c:	42a6      	cmp	r6, r4
 800258e:	d109      	bne.n	80025a4 <__libc_init_array+0x24>
 8002590:	4d0b      	ldr	r5, [pc, #44]	; (80025c0 <__libc_init_array+0x40>)
 8002592:	4c0c      	ldr	r4, [pc, #48]	; (80025c4 <__libc_init_array+0x44>)
 8002594:	f000 f818 	bl	80025c8 <_init>
 8002598:	1b64      	subs	r4, r4, r5
 800259a:	10a4      	asrs	r4, r4, #2
 800259c:	2600      	movs	r6, #0
 800259e:	42a6      	cmp	r6, r4
 80025a0:	d105      	bne.n	80025ae <__libc_init_array+0x2e>
 80025a2:	bd70      	pop	{r4, r5, r6, pc}
 80025a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a8:	4798      	blx	r3
 80025aa:	3601      	adds	r6, #1
 80025ac:	e7ee      	b.n	800258c <__libc_init_array+0xc>
 80025ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b2:	4798      	blx	r3
 80025b4:	3601      	adds	r6, #1
 80025b6:	e7f2      	b.n	800259e <__libc_init_array+0x1e>
 80025b8:	08002624 	.word	0x08002624
 80025bc:	08002624 	.word	0x08002624
 80025c0:	08002624 	.word	0x08002624
 80025c4:	08002628 	.word	0x08002628

080025c8 <_init>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr

080025d4 <_fini>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	bf00      	nop
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr
