
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008378  08008378  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008378  08008378  00018378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008380  08008380  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000005c  080083e4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  080083e4  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff0e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fa2  00000000  00000000  0002ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00031f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aac  00000000  00000000  00032d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d27f  00000000  00000000  00033804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103e3  00000000  00000000  00050a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf0f7  00000000  00000000  00060e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004230  00000000  00000000  0011ff60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  00124190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dac 	.word	0x08007dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007dac 	.word	0x08007dac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <format_uint16>:
/**
 * Formats an unsigned 16-bit integer into the AFE's data buffer (little-endian byte order)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_uint16(uint8_t *dataArr, uint16_t data) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
	dataArr[0] = ((uint8_t)(data & 0xFF));
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	701a      	strb	r2, [r3, #0]
	dataArr[1] = ((uint8_t)(data >> 8));
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	701a      	strb	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <format_int16>:
/**
 * Formats a signed 16-bit integer into the AFE's data buffer (little-endian byte order, 2's complement)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_int16(uint8_t *dataArr, int data) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
	if (data < 0) format_uint16(dataArr, (~(abs(data)) + 1));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da0b      	bge.n	8000f9a <format_int16+0x28>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	bfb8      	it	lt
 8000f88:	425b      	neglt	r3, r3
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffd6 	bl	8000f44 <format_uint16>
	else format_uint16(dataArr, data);
}
 8000f98:	e005      	b.n	8000fa6 <format_int16+0x34>
	else format_uint16(dataArr, data);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ffcf 	bl	8000f44 <format_uint16>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <main>:

// Global variables - used for ISRs to raise flags
bool logDataFlag = 0;
bool logAlertsFlag = 0;

int main(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b0be      	sub	sp, #248	; 0xf8
 8001044:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 8001046:	f001 ff98 	bl	8002f7a <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 800104a:	f000 fa1d 	bl	8001488 <SystemClock_Config>

    // Initialize GPIO, SPI, UART, TIM1, ADC1
    GPIO_Init();
 800104e:	f000 fa53 	bl	80014f8 <GPIO_Init>
    SPI1_Init();
 8001052:	f000 faeb 	bl	800162c <SPI1_Init>
    USART1_Init();
 8001056:	f000 fb31 	bl	80016bc <USART1_Init>
    TIM1_Init();
 800105a:	f000 fb69 	bl	8001730 <TIM1_Init>
    TIM2_Init();
 800105e:	f000 fb91 	bl	8001784 <TIM2_Init>
    ADC1_Init();
 8001062:	f000 fbf3 	bl	800184c <ADC1_Init>

    // Start the logging timer
    TIM1->CR1 |= TIM_CR1_CEN;
 8001066:	4b9e      	ldr	r3, [pc, #632]	; (80012e0 <main+0x2a0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a9d      	ldr	r2, [pc, #628]	; (80012e0 <main+0x2a0>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 8001072:	2200      	movs	r2, #0
 8001074:	2120      	movs	r1, #32
 8001076:	489b      	ldr	r0, [pc, #620]	; (80012e4 <main+0x2a4>)
 8001078:	f003 fd9c 	bl	8004bb4 <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001082:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	619a      	str	r2, [r3, #24]

    uint16_t ctrlStatus = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
    uint16_t cellVolt = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    uint16_t cellVolts[17] = {0};
 80010a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010a6:	2222      	movs	r2, #34	; 0x22
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 ffe2 	bl	8007074 <memset>
    int16_t cellGains[16] = {12000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11900};
 80010b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010b4:	2220      	movs	r2, #32
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f005 ffdb 	bl	8007074 <memset>
 80010be:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80010c2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80010c6:	f642 637c 	movw	r3, #11900	; 0x2e7c
 80010ca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    uint32_t MCUTemperature = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int16_t AFETemperature = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    int16_t temperatures[4] = {0};
 80010da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
    int16_t currentRead = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    uint8_t fetStatus = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    uint8_t cmdAddr = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

    uint8_t writeData[32] = {0};
 80010f6:	2300      	movs	r3, #0
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	619a      	str	r2, [r3, #24]

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 800110e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001112:	2202      	movs	r2, #2
 8001114:	4619      	mov	r1, r3
 8001116:	2012      	movs	r0, #18
 8001118:	f000 fc30 	bl	800197c <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 800111c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001120:	2202      	movs	r2, #2
 8001122:	4619      	mov	r1, r3
 8001124:	2057      	movs	r0, #87	; 0x57
 8001126:	f000 fd03 	bl	8001b30 <SubCmdReadData>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800112a:	2120      	movs	r1, #32
 800112c:	486d      	ldr	r0, [pc, #436]	; (80012e4 <main+0x2a4>)
 800112e:	f003 fd59 	bl	8004be4 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001132:	20fa      	movs	r0, #250	; 0xfa
 8001134:	f001 ff96 	bl	8003064 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001138:	2120      	movs	r1, #32
 800113a:	486a      	ldr	r0, [pc, #424]	; (80012e4 <main+0x2a4>)
 800113c:	f003 fd52 	bl	8004be4 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 8001140:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001144:	f001 ff8e 	bl	8003064 <HAL_Delay>

	// Disable SLEEP mode and disable FET_TEST mode if already in FET_TEST
	SubCmdNoData(0x009A);
 8001148:	209a      	movs	r0, #154	; 0x9a
 800114a:	f000 fca9 	bl	8001aa0 <SubCmdNoData>
	if (!(readData[0] & (1 << 4))) SubCmdNoData(0x0022);
 800114e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <main+0x120>
 800115a:	2022      	movs	r0, #34	; 0x22
 800115c:	f000 fca0 	bl	8001aa0 <SubCmdNoData>

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 8001160:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001164:	2202      	movs	r2, #2
 8001166:	4619      	mov	r1, r3
 8001168:	2012      	movs	r0, #18
 800116a:	f000 fc07 	bl	800197c <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 800116e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001172:	2202      	movs	r2, #2
 8001174:	4619      	mov	r1, r3
 8001176:	2057      	movs	r0, #87	; 0x57
 8001178:	f000 fcda 	bl	8001b30 <SubCmdReadData>

	// Enter CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
 800117c:	2090      	movs	r0, #144	; 0x90
 800117e:	f000 fc8f 	bl	8001aa0 <SubCmdNoData>
	// Wait for Battery Status to confirm transition to CONFIG_UPDATE mode
	do {
		DirectCmdRead(0x12, readData, 2);
 8001182:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001186:	2202      	movs	r2, #2
 8001188:	4619      	mov	r1, r3
 800118a:	2012      	movs	r0, #18
 800118c:	f000 fbf6 	bl	800197c <DirectCmdRead>
	} while (!(readData[0] & 0x01));
 8001190:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f2      	beq.n	8001182 <main+0x142>

	// Program configuration for all AFE registers
	RAMRegisterInit();
 800119c:	f000 fe18 	bl	8001dd0 <RAMRegisterInit>

	/**
	 * Set calibration gain values for all cell voltages
	 */
	for (int i = 0; i < 16; i++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80011a6:	e020      	b.n	80011ea <main+0x1aa>
		format_int16(writeData, cellGains[i]);
 80011a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	33f8      	adds	r3, #248	; 0xf8
 80011b0:	443b      	add	r3, r7
 80011b2:	f933 3c84 	ldrsh.w	r3, [r3, #-132]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fed7 	bl	8000f72 <format_int16>
		RAMRegisterWrite(CAL_GAIN_CL1 + i*2, writeData, 2);
 80011c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011c8:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 80011cc:	3340      	adds	r3, #64	; 0x40
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80011d8:	2202      	movs	r2, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fd24 	bl	8001c28 <RAMRegisterWrite>
	for (int i = 0; i < 16; i++) {
 80011e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011e4:	3301      	adds	r3, #1
 80011e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80011ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	ddda      	ble.n	80011a8 <main+0x168>
	}

	// Exit CONFIG_UPDATE mode, disable SLEEP mode, read manufacturing status register again
	SubCmdNoData(0x0092);
 80011f2:	2092      	movs	r0, #146	; 0x92
 80011f4:	f000 fc54 	bl	8001aa0 <SubCmdNoData>
	SubCmdNoData(0x009A);
 80011f8:	209a      	movs	r0, #154	; 0x9a
 80011fa:	f000 fc51 	bl	8001aa0 <SubCmdNoData>
	SubCmdReadData(0x0057, readData, 2);
 80011fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001202:	2202      	movs	r2, #2
 8001204:	4619      	mov	r1, r3
 8001206:	2057      	movs	r0, #87	; 0x57
 8001208:	f000 fc92 	bl	8001b30 <SubCmdReadData>
	// Read battery status register
	DirectCmdRead(0x12, readData, 2);
 800120c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001210:	2202      	movs	r2, #2
 8001212:	4619      	mov	r1, r3
 8001214:	2012      	movs	r0, #18
 8001216:	f000 fbb1 	bl	800197c <DirectCmdRead>

	// Blink status LED a few times to indicate setup is complete
	for (int i = 0; i < 10; i++) {
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001220:	e00b      	b.n	800123a <main+0x1fa>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001222:	2120      	movs	r1, #32
 8001224:	482f      	ldr	r0, [pc, #188]	; (80012e4 <main+0x2a4>)
 8001226:	f003 fcdd 	bl	8004be4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800122a:	2064      	movs	r0, #100	; 0x64
 800122c:	f001 ff1a 	bl	8003064 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 8001230:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800123a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800123e:	2b09      	cmp	r3, #9
 8001240:	ddef      	ble.n	8001222 <main+0x1e2>
	}

	// Clear bits in the alarm registers
	writeData[0] = 0xFF;
 8001242:	23ff      	movs	r3, #255	; 0xff
 8001244:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	writeData[1] = 0xFE;
 8001248:	23fe      	movs	r3, #254	; 0xfe
 800124a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	DirectCmdWrite(0xE2, writeData, 2);
 800124e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001252:	2202      	movs	r2, #2
 8001254:	4619      	mov	r1, r3
 8001256:	20e2      	movs	r0, #226	; 0xe2
 8001258:	f000 fbda 	bl	8001a10 <DirectCmdWrite>
    	// Read the control status register
//    	DirectCmdRead(0x02, readData, 2);
//    	ctrlStatus = (readData[0]) + (readData[1] << 8);

    	// Check if flag to log data was raised
    	if (logDataFlag) {
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <main+0x2a8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80ae 	beq.w	80013c2 <main+0x382>
    		logDataFlag = false; // Clear the flag
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <main+0x2a8>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
    		//TODO: Only read measurements if FULLSCAN bit of Alarm Status is set, then clear bit after reading measurements
    		// Enable status LED to indicate data being logged
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2120      	movs	r1, #32
 8001270:	481c      	ldr	r0, [pc, #112]	; (80012e4 <main+0x2a4>)
 8001272:	f003 fc9f 	bl	8004bb4 <HAL_GPIO_WritePin>
    		// Read the cell voltage for all 16 cells and then the pack voltage
			for (int i = 0; i < 17; i++) {
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800127c:	e027      	b.n	80012ce <main+0x28e>
				cmdAddr = 0x14 + 2*i;
 800127e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001282:	330a      	adds	r3, #10
 8001284:	b2db      	uxtb	r3, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
				DirectCmdRead(cmdAddr, readData, 2);
 800128c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001290:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8001294:	2202      	movs	r2, #2
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fb70 	bl	800197c <DirectCmdRead>
				// Combine the 2 8-bit cell voltage bytes into a single 16-byte variable
				cellVolt = (readData[0]) + (readData[1] << 8);
 800129c:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
				cellVolts[i] = cellVolt;
 80012b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	33f8      	adds	r3, #248	; 0xf8
 80012ba:	443b      	add	r3, r7
 80012bc:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 80012c0:	f823 2c64 	strh.w	r2, [r3, #-100]
			for (int i = 0; i < 17; i++) {
 80012c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012c8:	3301      	adds	r3, #1
 80012ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80012ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012d2:	2b10      	cmp	r3, #16
 80012d4:	ddd3      	ble.n	800127e <main+0x23e>
			}

			// Read the AFETemperature measured at TS1-3
			for (int i = 0; i < 3; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80012dc:	e02f      	b.n	800133e <main+0x2fe>
 80012de:	bf00      	nop
 80012e0:	40012c00 	.word	0x40012c00
 80012e4:	48000400 	.word	0x48000400
 80012e8:	200001c8 	.word	0x200001c8
				cmdAddr = 0x70 + 2*i;
 80012ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80012f0:	3338      	adds	r3, #56	; 0x38
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
				DirectCmdRead(cmdAddr, readData, 2);
 80012fa:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80012fe:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8001302:	2202      	movs	r2, #2
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fb39 	bl	800197c <DirectCmdRead>
				AFETemperature = (readData[0]) + (readData[1] << 8);
 800130a:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800130e:	b29a      	uxth	r2, r3
 8001310:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8001314:	b29b      	uxth	r3, r3
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	4413      	add	r3, r2
 800131c:	b29b      	uxth	r3, r3
 800131e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				temperatures[i] = AFETemperature;
 8001322:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	33f8      	adds	r3, #248	; 0xf8
 800132a:	443b      	add	r3, r7
 800132c:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 8001330:	f823 2c8c 	strh.w	r2, [r3, #-140]
			for (int i = 0; i < 3; i++) {
 8001334:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001338:	3301      	adds	r3, #1
 800133a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800133e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001342:	2b02      	cmp	r3, #2
 8001344:	ddd2      	ble.n	80012ec <main+0x2ac>
			}
			// Calculate temperature measured by MCU's ADC
			MCUTemperature = T4_Acquire();
 8001346:	f001 fb7b 	bl	8002a40 <T4_Acquire>
 800134a:	4603      	mov	r3, r0
 800134c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			temperatures[3] = MCUTemperature;
 8001350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001354:	b21b      	sxth	r3, r3
 8001356:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

			TransmitCellVoltages(cellVolts, 17);
 800135a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800135e:	2111      	movs	r1, #17
 8001360:	4618      	mov	r0, r3
 8001362:	f000 ff61 	bl	8002228 <TransmitCellVoltages>
			TransmitTemperatures(temperatures, 4);
 8001366:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800136a:	2104      	movs	r1, #4
 800136c:	4618      	mov	r0, r3
 800136e:	f001 f91b 	bl	80025a8 <TransmitTemperatures>

			// Read the CC2 current and FET status
			DirectCmdRead(0x3A, readData, 2);
 8001372:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001376:	2202      	movs	r2, #2
 8001378:	4619      	mov	r1, r3
 800137a:	203a      	movs	r0, #58	; 0x3a
 800137c:	f000 fafe 	bl	800197c <DirectCmdRead>
			currentRead = (readData[0]) + (readData[1] << 8);
 8001380:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001384:	b29a      	uxth	r2, r3
 8001386:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800138a:	b29b      	uxth	r3, r3
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	b29b      	uxth	r3, r3
 8001394:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			TransmitCurrentReading(currentRead);
 8001398:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	; 0xdc
 800139c:	4618      	mov	r0, r3
 800139e:	f001 f88d 	bl	80024bc <TransmitCurrentReading>
			DirectCmdRead(0x7F, readData, 1);
 80013a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013a6:	2201      	movs	r2, #1
 80013a8:	4619      	mov	r1, r3
 80013aa:	207f      	movs	r0, #127	; 0x7f
 80013ac:	f000 fae6 	bl	800197c <DirectCmdRead>
			fetStatus = readData[0];
 80013b0:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80013b4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

			// Disable status LED to indicate data finished being logged
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2120      	movs	r1, #32
 80013bc:	482e      	ldr	r0, [pc, #184]	; (8001478 <main+0x438>)
 80013be:	f003 fbf9 	bl	8004bb4 <HAL_GPIO_WritePin>
    	}

    	// Check if AFE Alarm Status indicates one of the safety status bits has been set
    	if (logAlertsFlag) {
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <main+0x43c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f43f af48 	beq.w	800125c <main+0x21c>
    		logAlertsFlag = false;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <main+0x43c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
			// Read the Alarm Status register to figure out what's causing the alert
    		DirectCmdRead(0x62, readData, 2);
 80013d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013d6:	2202      	movs	r2, #2
 80013d8:	4619      	mov	r1, r3
 80013da:	2062      	movs	r0, #98	; 0x62
 80013dc:	f000 face 	bl	800197c <DirectCmdRead>
    		writeData[0] = 0x00;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    		writeData[1] = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		// Check each bit and determine where to look for the cause of the alert
    		// Safety status B/C
    		if (readData[1] & (1 << 7)) {
 80013ec:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da08      	bge.n	8001408 <main+0x3c8>
    			TransmitSafetyStatusB();
 80013f6:	f001 fa77 	bl	80028e8 <TransmitSafetyStatusB>
    			// No need to check safety status C as no protections there are enabled
    			writeData[1] |= (1 << 7);
 80013fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		}
    		// Safety status A
    		if (readData[1] & (1 << 6)) {
 8001408:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800140c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <main+0x3e6>
    			TransmitSafetyStatusA();
 8001414:	f001 f9e8 	bl	80027e8 <TransmitSafetyStatusA>
    			writeData[1] |= (1 << 6);
 8001418:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800141c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    		}
    		// Permanent failure
    		if (readData[1] & (1 << 5)) {
 8001426:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	2b00      	cmp	r3, #0
 8001430:	d012      	beq.n	8001458 <main+0x418>
    			// If there's a permanent failure, continuously transmit a distress signal
    			uint8_t msg[] = "Permanent failure! All BMS operations halted, requesting attention...";
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <main+0x440>)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4611      	mov	r1, r2
 8001438:	2246      	movs	r2, #70	; 0x46
 800143a:	4618      	mov	r0, r3
 800143c:	f005 fe62 	bl	8007104 <memcpy>
    			while (1) {
    				HAL_Delay(10000);
 8001440:	f242 7010 	movw	r0, #10000	; 0x2710
 8001444:	f001 fe0e 	bl	8003064 <HAL_Delay>
    				HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001448:	1d39      	adds	r1, r7, #4
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	2245      	movs	r2, #69	; 0x45
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <main+0x444>)
 8001452:	f005 f8e1 	bl	8006618 <HAL_UART_Transmit>
    				HAL_Delay(10000);
 8001456:	e7f3      	b.n	8001440 <main+0x400>
    			}
    		}
    		// Clear the bits for the received safety statuses, as well as the masked safety alerts
    		writeData[1] |= 0x18;
 8001458:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800145c:	f043 0318 	orr.w	r3, r3, #24
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
//    		writeData[0] = 0xFF;
//    		writeData[1] = 0xFE;
    		DirectCmdWrite(0xE2, writeData, 2);
 8001466:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800146a:	2202      	movs	r2, #2
 800146c:	4619      	mov	r1, r3
 800146e:	20e2      	movs	r0, #226	; 0xe2
 8001470:	f000 face 	bl	8001a10 <DirectCmdWrite>
    	if (logDataFlag) {
 8001474:	e6f2      	b.n	800125c <main+0x21c>
 8001476:	bf00      	nop
 8001478:	48000400 	.word	0x48000400
 800147c:	200001c9 	.word	0x200001c9
 8001480:	08007dc4 	.word	0x08007dc4
 8001484:	200000dc 	.word	0x200000dc

08001488 <SystemClock_Config>:
}

/**
 * Configures the clocks for the STM32
 */
void SystemClock_Config(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b096      	sub	sp, #88	; 0x58
 800148c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2244      	movs	r2, #68	; 0x44
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f005 fdec 	bl	8007074 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ae:	f003 fbd9 	bl	8004c64 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014b2:	2310      	movs	r3, #16
 80014b4:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014b6:	2301      	movs	r3, #1
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014be:	2360      	movs	r3, #96	; 0x60
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 fc20 	bl	8004d10 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014d0:	230f      	movs	r3, #15
 80014d2:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80014e4:	463b      	mov	r3, r7
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 f873 	bl	80055d4 <HAL_RCC_ClockConfig>
}
 80014ee:	bf00      	nop
 80014f0:	3758      	adds	r7, #88	; 0x58
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <GPIO_Init>:

/**
 * Initializes all GPIO pins
 */
void GPIO_Init(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b49      	ldr	r3, [pc, #292]	; (8001624 <GPIO_Init+0x12c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a48      	ldr	r2, [pc, #288]	; (8001624 <GPIO_Init+0x12c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b46      	ldr	r3, [pc, #280]	; (8001624 <GPIO_Init+0x12c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b43      	ldr	r3, [pc, #268]	; (8001624 <GPIO_Init+0x12c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a42      	ldr	r2, [pc, #264]	; (8001624 <GPIO_Init+0x12c>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <GPIO_Init+0x12c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <GPIO_Init+0x12c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	4a3c      	ldr	r2, [pc, #240]	; (8001624 <GPIO_Init+0x12c>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6613      	str	r3, [r2, #96]	; 0x60
 800153a:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <GPIO_Init+0x12c>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001556:	2301      	movs	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800155a:	2311      	movs	r3, #17
 800155c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	482e      	ldr	r0, [pc, #184]	; (8001628 <GPIO_Init+0x130>)
 800156e:	f003 f9af 	bl	80048d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 8001572:	2201      	movs	r2, #1
 8001574:	2101      	movs	r1, #1
 8001576:	482c      	ldr	r0, [pc, #176]	; (8001628 <GPIO_Init+0x130>)
 8001578:	f003 fb1c 	bl	8004bb4 <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800157c:	2320      	movs	r3, #32
 800157e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4619      	mov	r1, r3
 8001592:	4825      	ldr	r0, [pc, #148]	; (8001628 <GPIO_Init+0x130>)
 8001594:	f003 f99c 	bl	80048d0 <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8001598:	23e0      	movs	r3, #224	; 0xe0
 800159a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a8:	2305      	movs	r3, #5
 80015aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b6:	f003 f98b 	bl	80048d0 <HAL_GPIO_Init>

    // Configure PB6 (UART_TX), PB7 (UART_RX)
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Alternate function for USART1
 80015ca:	2307      	movs	r3, #7
 80015cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	4814      	ldr	r0, [pc, #80]	; (8001628 <GPIO_Init+0x130>)
 80015d6:	f003 f97b 	bl	80048d0 <HAL_GPIO_Init>

	// Configure PA4 (AFE ALERT pin) as an external interrupt
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015da:	2310      	movs	r3, #16
 80015dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f003 f96d 	bl	80048d0 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200a      	movs	r0, #10
 80015fc:	f003 f931 	bl	8004862 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001600:	200a      	movs	r0, #10
 8001602:	f003 f94a 	bl	800489a <HAL_NVIC_EnableIRQ>

	// Configure PA1 (T4 pin) as an analog input
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001606:	2302      	movs	r3, #2
 8001608:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	2303      	movs	r3, #3
 800160c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f003 f95a 	bl	80048d0 <HAL_GPIO_Init>
}
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	48000400 	.word	0x48000400

0800162c <SPI1_Init>:

// Initializes the SPI1 peripheral in master mode
void SPI1_Init(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <SPI1_Init+0x84>)
 8001634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <SPI1_Init+0x84>)
 8001638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800163c:	6613      	str	r3, [r2, #96]	; 0x60
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <SPI1_Init+0x84>)
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <SPI1_Init+0x88>)
 800164c:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <SPI1_Init+0x8c>)
 800164e:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <SPI1_Init+0x88>)
 8001652:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001656:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <SPI1_Init+0x88>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <SPI1_Init+0x88>)
 8001660:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001664:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <SPI1_Init+0x88>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <SPI1_Init+0x88>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <SPI1_Init+0x88>)
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <SPI1_Init+0x88>)
 800167c:	2228      	movs	r2, #40	; 0x28
 800167e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <SPI1_Init+0x88>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <SPI1_Init+0x88>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <SPI1_Init+0x88>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <SPI1_Init+0x88>)
 8001694:	2207      	movs	r2, #7
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <SPI1_Init+0x88>)
 800169a:	f004 fb45 	bl	8005d28 <HAL_SPI_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d000      	beq.n	80016a6 <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 80016a4:	e7fe      	b.n	80016a4 <SPI1_Init+0x78>
    }
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	20000078 	.word	0x20000078
 80016b8:	40013000 	.word	0x40013000

080016bc <USART1_Init>:

/**
 * Initializes the USART1 peripheral in UART TX/RX mode
 */
void USART1_Init(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <USART1_Init+0x68>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <USART1_Init+0x68>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6613      	str	r3, [r2, #96]	; 0x60
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <USART1_Init+0x68>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

	// Configure UART peripheral
	huart1.Instance = USART1;
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <USART1_Init+0x6c>)
 80016dc:	4a13      	ldr	r2, [pc, #76]	; (800172c <USART1_Init+0x70>)
 80016de:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <USART1_Init+0x6c>)
 80016e2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e6:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <USART1_Init+0x6c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <USART1_Init+0x6c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <USART1_Init+0x6c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <USART1_Init+0x6c>)
 80016fc:	220c      	movs	r2, #12
 80016fe:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <USART1_Init+0x6c>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <USART1_Init+0x6c>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <USART1_Init+0x6c>)
 800170e:	f004 ff35 	bl	800657c <HAL_UART_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d000      	beq.n	800171a <USART1_Init+0x5e>
	{
		// Initialization error
		while (1);
 8001718:	e7fe      	b.n	8001718 <USART1_Init+0x5c>
	}
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	200000dc 	.word	0x200000dc
 800172c:	40013800 	.word	0x40013800

08001730 <TIM1_Init>:

/**
 * Initializes the TIM1 peripheral with interrupts enabled
 */
void TIM1_Init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Enable TIM1 clock
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <TIM1_Init+0x4c>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001738:	4a10      	ldr	r2, [pc, #64]	; (800177c <TIM1_Init+0x4c>)
 800173a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173e:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->PSC = 4000 - 1; // Given 4MHz clock, 4000 cycles for 1ms
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <TIM1_Init+0x50>)
 8001742:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 5000 - 1; // Generate interrupt every 5000ms (5s)
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <TIM1_Init+0x50>)
 800174a:	f241 3287 	movw	r2, #4999	; 0x1387
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <TIM1_Init+0x50>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <TIM1_Init+0x50>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1); // Set TIM1 interrupt priority
 800175c:	2101      	movs	r1, #1
 800175e:	2019      	movs	r0, #25
 8001760:	f7ff fc44 	bl	8000fec <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); // Enable TIM1 interrupt
 8001764:	2019      	movs	r0, #25
 8001766:	f7ff fc23 	bl	8000fb0 <__NVIC_EnableIRQ>

	TIM1->CR1 |= TIM_CR1_CEN; // Enable TIM1
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <TIM1_Init+0x50>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <TIM1_Init+0x50>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6013      	str	r3, [r2, #0]
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40012c00 	.word	0x40012c00

08001784 <TIM2_Init>:

/**
 * Initializes the TIM2 peripheral with interrupts enabled
 */
void TIM2_Init(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // Enable TIM2 clock
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <TIM2_Init+0x58>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	4a13      	ldr	r2, [pc, #76]	; (80017dc <TIM2_Init+0x58>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2->PSC = 4000 - 1; // Given 4MHz clock, 4000 cycles for 1ms
 8001794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001798:	f640 729f 	movw	r2, #3999	; 0xf9f
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 500 - 1; // Generate interrupt every 500ms (half second)
 800179e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER |= TIM_DIER_UIE; // Enable update interrupt
 80017a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM2_IRQn, 0); // Set TIM2 interrupt priority
 80017b8:	2100      	movs	r1, #0
 80017ba:	201c      	movs	r0, #28
 80017bc:	f7ff fc16 	bl	8000fec <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // Enable TIM2 interrupt
 80017c0:	201c      	movs	r0, #28
 80017c2:	f7ff fbf5 	bl	8000fb0 <__NVIC_EnableIRQ>

	TIM2->CR1 |= TIM_CR1_CEN; // Enable TIM2
 80017c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <TIM1_UP_TIM16_IRQHandler>:

/**
 * Defining the ISR for the TIM1 timer
 */
void TIM1_UP_TIM16_IRQHandler(void) {
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
	// Check if UIF flag is set for TIM1
	if (TIM1->SR & TIM_SR_UIF) {
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <TIM1_UP_TIM16_IRQHandler+0x22>
		logDataFlag = true; // Raise a flag to log data from the AFE
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <TIM1_UP_TIM16_IRQHandler+0x30>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~TIM_SR_UIF; // Clear UIF flag
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6113      	str	r3, [r2, #16]
	}
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40012c00 	.word	0x40012c00
 8001810:	200001c8 	.word	0x200001c8

08001814 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	// Check if UIF flag is set for TIM2
    if (TIM2->SR & TIM_SR_UIF) {
 8001818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00a      	beq.n	800183c <TIM2_IRQHandler+0x28>
    	logAlertsFlag = true; // Raise a flag to check for safety alerts from the AFE
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <TIM2_IRQHandler+0x34>)
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 800182c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	6113      	str	r3, [r2, #16]
    }
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200001c9 	.word	0x200001c9

0800184c <ADC1_Init>:

void ADC1_Init(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]

    // Enable the clock for ADC1
    __HAL_RCC_ADC_CLK_ENABLE();
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <ADC1_Init+0xb8>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	4a26      	ldr	r2, [pc, #152]	; (8001904 <ADC1_Init+0xb8>)
 800186a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800186e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <ADC1_Init+0xb8>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]

    // Configure the ADC peripheral
    hadc1.Instance = ADC1;
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <ADC1_Init+0xbc>)
 800187e:	4a23      	ldr	r2, [pc, #140]	; (800190c <ADC1_Init+0xc0>)
 8001880:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <ADC1_Init+0xbc>)
 8001884:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001888:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;  // 12-bit resolution
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <ADC1_Init+0xbc>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;  // Right data alignment
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <ADC1_Init+0xbc>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;  // Single channel
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <ADC1_Init+0xbc>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;  // End of conversion flag after each conversion
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <ADC1_Init+0xbc>)
 800189e:	2204      	movs	r2, #4
 80018a0:	615a      	str	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;  // Single conversion mode
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <ADC1_Init+0xbc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;  // Single conversion
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <ADC1_Init+0xbc>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <ADC1_Init+0xbc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;  // Start conversion by software
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <ADC1_Init+0xbc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <ADC1_Init+0xbc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <ADC1_Init+0xbc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80018ca:	480f      	ldr	r0, [pc, #60]	; (8001908 <ADC1_Init+0xbc>)
 80018cc:	f001 fe32 	bl	8003534 <HAL_ADC_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <ADC1_Init+0x8e>
        // Initialization error
        Error_Handler();
 80018d6:	f001 f989 	bl	8002bec <Error_Handler>
    }

    // Configure the ADC regular channel (PA1 = ADC_CHANNEL_6)
    sConfig.Channel = ADC_CHANNEL_6;
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <ADC1_Init+0xc4>)
 80018dc:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80018de:	2306      	movs	r3, #6
 80018e0:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;  // Sample time (adjust as necessary)
 80018e2:	2304      	movs	r3, #4
 80018e4:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4619      	mov	r1, r3
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <ADC1_Init+0xbc>)
 80018ee:	f002 f93f 	bl	8003b70 <HAL_ADC_ConfigChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <ADC1_Init+0xb0>
        // Channel configuration error
        Error_Handler();
 80018f8:	f001 f978 	bl	8002bec <Error_Handler>
    }
}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	20000164 	.word	0x20000164
 800190c:	50040000 	.word	0x50040000
 8001910:	19200040 	.word	0x19200040

08001914 <crc8>:
/**
 * Calculates a CRC value according to the polynomial x^8 + x^2 + x + 1
 * @param data Pointer to an array storing the data bytes that will be transmitted
 * @param len Number of bytes that will be transmitted
 */
uint8_t crc8(uint8_t *data, size_t len) {
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
    while (len--)
 8001922:	e01e      	b.n	8001962 <crc8+0x4e>
    {
        crc ^= *data++;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	4053      	eors	r3, r2
 8001930:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8001932:	2300      	movs	r3, #0
 8001934:	73bb      	strb	r3, [r7, #14]
 8001936:	e011      	b.n	800195c <crc8+0x48>
        {
            if (crc & 0x80)
 8001938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193c:	2b00      	cmp	r3, #0
 800193e:	da07      	bge.n	8001950 <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	b25b      	sxtb	r3, r3
 8001946:	f083 0307 	eor.w	r3, r3, #7
 800194a:	b25b      	sxtb	r3, r3
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	e002      	b.n	8001956 <crc8+0x42>
            else
                crc <<= 1;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	3301      	adds	r3, #1
 800195a:	73bb      	strb	r3, [r7, #14]
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d9ea      	bls.n	8001938 <crc8+0x24>
    while (len--)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	603a      	str	r2, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1db      	bne.n	8001924 <crc8+0x10>
        }
    }
    return crc;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <DirectCmdRead>:
 * Sends a direct command to the AFE and reads the data that is output
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	4613      	mov	r3, r2
 800198a:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <DirectCmdRead+0x90>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	823b      	strh	r3, [r7, #16]
 8001992:	2300      	movs	r3, #0
 8001994:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <DirectCmdRead+0x90>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	81bb      	strh	r3, [r7, #12]
 800199c:	2300      	movs	r3, #0
 800199e:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	723b      	strb	r3, [r7, #8]
 80019a4:	23ff      	movs	r3, #255	; 0xff
 80019a6:	727b      	strb	r3, [r7, #9]
	uint8_t crcLower = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	74fb      	strb	r3, [r7, #19]
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e023      	b.n	80019fa <DirectCmdRead+0x7e>
	{
		fullCmd[0] = cmd + i; // Increment the address
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	4413      	add	r3, r2
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	723b      	strb	r3, [r7, #8]
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	2102      	movs	r1, #2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffa5 	bl	8001914 <crc8>
 80019ca:	4603      	mov	r3, r0
 80019cc:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 80019ce:	7a3b      	ldrb	r3, [r7, #8]
 80019d0:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 80019d2:	7a7b      	ldrb	r3, [r7, #9]
 80019d4:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 80019d6:	7cfb      	ldrb	r3, [r7, #19]
 80019d8:	73bb      	strb	r3, [r7, #14]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 80019da:	f107 0110 	add.w	r1, r7, #16
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	2203      	movs	r2, #3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fb9f 	bl	8002128 <AFETransmitReadCmd>
		returnData[i] = rxData[1]; // Save data byte received from last transaction
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	7c7a      	ldrb	r2, [r7, #17]
 80019f2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbd7      	blt.n	80019b2 <DirectCmdRead+0x36>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	08007e0c 	.word	0x08007e0c

08001a10 <DirectCmdWrite>:
 * Sends a direct command to the AFE and writes the provided data to it
 * @param cmd The address byte for the command
 * @param writeData Pointer to the 8-bit integer array containing the data to write
 * @param len Number of bytes to write to the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdWrite(uint8_t cmd, uint8_t *writeData, uint8_t len) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <DirectCmdWrite+0x8c>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	823b      	strh	r3, [r7, #16]
 8001a26:	2300      	movs	r3, #0
 8001a28:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <DirectCmdWrite+0x8c>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	81bb      	strh	r3, [r7, #12]
 8001a30:	2300      	movs	r3, #0
 8001a32:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[2] = {0};
 8001a34:	2300      	movs	r3, #0
 8001a36:	813b      	strh	r3, [r7, #8]
	uint8_t crcLower = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	74fb      	strb	r3, [r7, #19]

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e023      	b.n	8001a8a <DirectCmdWrite+0x7a>
		fullCmd[0] = cmd + i;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4413      	add	r3, r2
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	723b      	strb	r3, [r7, #8]
		fullCmd[1] = writeData[i];
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	727b      	strb	r3, [r7, #9]
		crcLower = crc8(fullCmd, 2);
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff58 	bl	8001914 <crc8>
 8001a64:	4603      	mov	r3, r0
 8001a66:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 8001a68:	7a3b      	ldrb	r3, [r7, #8]
 8001a6a:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 8001a6c:	7a7b      	ldrb	r3, [r7, #9]
 8001a6e:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 8001a70:	7cfb      	ldrb	r3, [r7, #19]
 8001a72:	73bb      	strb	r3, [r7, #14]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001a74:	f107 0110 	add.w	r1, r7, #16
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fb8a 	bl	8002198 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++) {
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	79bb      	ldrb	r3, [r7, #6]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dbd7      	blt.n	8001a42 <DirectCmdWrite+0x32>
	}
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	08007e0c 	.word	0x08007e0c

08001aa0 <SubCmdNoData>:

/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <SubCmdNoData+0x8c>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	833b      	strh	r3, [r7, #24]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001ab4:	23be      	movs	r3, #190	; 0xbe
 8001ab6:	753b      	strb	r3, [r7, #20]
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff25 	bl	8001914 <crc8>
 8001aca:	4603      	mov	r3, r0
 8001acc:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001ace:	23bf      	movs	r3, #191	; 0xbf
 8001ad0:	743b      	strb	r3, [r7, #16]
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff16 	bl	8001914 <crc8>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	77bb      	strb	r3, [r7, #30]

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001aec:	7d3b      	ldrb	r3, [r7, #20]
 8001aee:	733b      	strb	r3, [r7, #12]
 8001af0:	7d7b      	ldrb	r3, [r7, #21]
 8001af2:	737b      	strb	r3, [r7, #13]
 8001af4:	7ffb      	ldrb	r3, [r7, #31]
 8001af6:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001af8:	f107 0118 	add.w	r1, r7, #24
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	2203      	movs	r2, #3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fb48 	bl	8002198 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001b08:	7c3b      	ldrb	r3, [r7, #16]
 8001b0a:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 8001b0c:	7c7b      	ldrb	r3, [r7, #17]
 8001b0e:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 8001b10:	7fbb      	ldrb	r3, [r7, #30]
 8001b12:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001b14:	f107 0118 	add.w	r1, r7, #24
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fb3a 	bl	8002198 <AFETransmitWriteCmd>
}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	08007e0c 	.word	0x08007e0c

08001b30 <SubCmdReadData>:
 * Sends a sub-command to the AFE and reads the data that is output
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	80fb      	strh	r3, [r7, #6]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <SubCmdReadData+0xf4>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	83bb      	strh	r3, [r7, #28]
 8001b46:	2300      	movs	r3, #0
 8001b48:	77bb      	strb	r3, [r7, #30]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001b4a:	23be      	movs	r3, #190	; 0xbe
 8001b4c:	763b      	strb	r3, [r7, #24]
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff feda 	bl	8001914 <crc8>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001b66:	23bf      	movs	r3, #191	; 0xbf
 8001b68:	753b      	strb	r3, [r7, #20]
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2102      	movs	r1, #2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff feca 	bl	8001914 <crc8>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001b86:	7e3b      	ldrb	r3, [r7, #24]
 8001b88:	743b      	strb	r3, [r7, #16]
 8001b8a:	7e7b      	ldrb	r3, [r7, #25]
 8001b8c:	747b      	strb	r3, [r7, #17]
 8001b8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b92:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001b94:	f107 011c 	add.w	r1, r7, #28
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fafa 	bl	8002198 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001ba4:	7d3b      	ldrb	r3, [r7, #20]
 8001ba6:	743b      	strb	r3, [r7, #16]
	txData[1] = commandUpperAddr[1];
 8001ba8:	7d7b      	ldrb	r3, [r7, #21]
 8001baa:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001bac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001bb0:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001bb2:	f107 011c 	add.w	r1, r7, #28
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	2203      	movs	r2, #3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 faeb 	bl	8002198 <AFETransmitWriteCmd>

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bca:	e022      	b.n	8001c12 <SubCmdReadData+0xe2>
		readData[0] = READ_DATA_BUFF_LSB + i;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	3340      	adds	r3, #64	; 0x40
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	733b      	strb	r3, [r7, #12]
		readData[1] = 0xFF;
 8001bd6:	23ff      	movs	r3, #255	; 0xff
 8001bd8:	737b      	strb	r3, [r7, #13]

		txData[0] = readData[0];
 8001bda:	7b3b      	ldrb	r3, [r7, #12]
 8001bdc:	743b      	strb	r3, [r7, #16]
		txData[1] = readData[1];
 8001bde:	7b7b      	ldrb	r3, [r7, #13]
 8001be0:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(readData, 2);
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	2102      	movs	r1, #2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fe93 	bl	8001914 <crc8>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	74bb      	strb	r3, [r7, #18]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8001bf2:	f107 011c 	add.w	r1, r7, #28
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fa93 	bl	8002128 <AFETransmitReadCmd>

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	7f7a      	ldrb	r2, [r7, #29]
 8001c0a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3301      	adds	r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	797b      	ldrb	r3, [r7, #5]
 8001c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbd8      	blt.n	8001bcc <SubCmdReadData+0x9c>
	}
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	08007e0c 	.word	0x08007e0c

08001c28 <RAMRegisterWrite>:
 * Writes the given value in one of the AFE's RAM registers
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	; 0x30
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	80fb      	strh	r3, [r7, #6]
 8001c34:	4613      	mov	r3, r2
 8001c36:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001c38:	4b64      	ldr	r3, [pc, #400]	; (8001dcc <RAMRegisterWrite+0x1a4>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	83bb      	strh	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	77bb      	strb	r3, [r7, #30]
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
 8001c42:	23be      	movs	r3, #190	; 0xbe
 8001c44:	763b      	strb	r3, [r7, #24]
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(lowerAddr, 2);
 8001c4c:	f107 0318 	add.w	r3, r7, #24
 8001c50:	2102      	movs	r1, #2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe5e 	bl	8001914 <crc8>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
 8001c5e:	23bf      	movs	r3, #191	; 0xbf
 8001c60:	753b      	strb	r3, [r7, #20]
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(upperAddr, 2);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2102      	movs	r1, #2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fe4e 	bl	8001914 <crc8>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
 8001c7e:	7e3b      	ldrb	r3, [r7, #24]
 8001c80:	743b      	strb	r3, [r7, #16]
 8001c82:	7e7b      	ldrb	r3, [r7, #25]
 8001c84:	747b      	strb	r3, [r7, #17]
 8001c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c8a:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001c8c:	f107 011c 	add.w	r1, r7, #28
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2203      	movs	r2, #3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fa7e 	bl	8002198 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = upperAddr[0];
 8001c9c:	7d3b      	ldrb	r3, [r7, #20]
 8001c9e:	743b      	strb	r3, [r7, #16]
	txData[1] = upperAddr[1];
 8001ca0:	7d7b      	ldrb	r3, [r7, #21]
 8001ca2:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001ca4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ca8:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001caa:	f107 011c 	add.w	r1, r7, #28
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fa6f 	bl	8002198 <AFETransmitWriteCmd>

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
 8001cba:	2300      	movs	r3, #0
 8001cbc:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc2:	e020      	b.n	8001d06 <RAMRegisterWrite+0xde>
	{
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3b40      	subs	r3, #64	; 0x40
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	733b      	strb	r3, [r7, #12]
		writeBytes[1] = writeData[i];
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	737b      	strb	r3, [r7, #13]

		txData[0] = writeBytes[0];
 8001cd8:	7b3b      	ldrb	r3, [r7, #12]
 8001cda:	743b      	strb	r3, [r7, #16]
		txData[1] = writeBytes[1];
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fe14 	bl	8001914 <crc8>
 8001cec:	4603      	mov	r3, r0
 8001cee:	74bb      	strb	r3, [r7, #18]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001cf0:	f107 011c 	add.w	r1, r7, #28
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fa4c 	bl	8002198 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++)
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	3301      	adds	r3, #1
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d06:	797b      	ldrb	r3, [r7, #5]
 8001d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	dbda      	blt.n	8001cc4 <RAMRegisterWrite+0x9c>
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
 8001d18:	e00b      	b.n	8001d32 <RAMRegisterWrite+0x10a>
		checkSum += writeData[i];
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d26:	4413      	add	r3, r2
 8001d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	3301      	adds	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	429a      	cmp	r2, r3
 8001d38:	dbef      	blt.n	8001d1a <RAMRegisterWrite+0xf2>
	}
	checkSum += lowerAddr[1];
 8001d3a:	7e7a      	ldrb	r2, [r7, #25]
 8001d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d40:	4413      	add	r3, r2
 8001d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum += upperAddr[1];
 8001d46:	7d7a      	ldrb	r2, [r7, #21]
 8001d48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum = ~(checkSum);
 8001d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d56:	43db      	mvns	r3, r3
 8001d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
 8001d5c:	23e0      	movs	r3, #224	; 0xe0
 8001d5e:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = checkSum;
 8001d60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d64:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001d6a:	7b7b      	ldrb	r3, [r7, #13]
 8001d6c:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2102      	movs	r1, #2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fdcd 	bl	8001914 <crc8>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001d7e:	f107 011c 	add.w	r1, r7, #28
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	2203      	movs	r2, #3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fa05 	bl	8002198 <AFETransmitWriteCmd>

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
 8001d8e:	23e1      	movs	r3, #225	; 0xe1
 8001d90:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes
 8001d92:	797b      	ldrb	r3, [r7, #5]
 8001d94:	3304      	adds	r3, #4
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001d9a:	7b3b      	ldrb	r3, [r7, #12]
 8001d9c:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001d9e:	7b7b      	ldrb	r3, [r7, #13]
 8001da0:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	2102      	movs	r1, #2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fdb3 	bl	8001914 <crc8>
 8001dae:	4603      	mov	r3, r0
 8001db0:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001db2:	f107 011c 	add.w	r1, r7, #28
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 f9eb 	bl	8002198 <AFETransmitWriteCmd>
}
 8001dc2:	bf00      	nop
 8001dc4:	3730      	adds	r7, #48	; 0x30
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	08007e0c 	.word	0x08007e0c

08001dd0 <RAMRegisterInit>:

/**
 * Programs all the relevant AFE registers. To be used whenever BMS powers on or AFE enters SHUTDOWN
 */
void RAMRegisterInit(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
	// Initializing buffer for writing data to AFE
	uint8_t writeData[32] = {0};
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	619a      	str	r2, [r3, #24]

	/**
	 * Configuration settings registers
	 */
	// Configure TS pins
	writeData[0] = 0x07; // TS1 & TS2: Thermistor temperature, for cell temperature protection
 8001dec:	2307      	movs	r3, #7
 8001dee:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_TS1_CFG, writeData, 1);
 8001df0:	463b      	mov	r3, r7
 8001df2:	2201      	movs	r2, #1
 8001df4:	4619      	mov	r1, r3
 8001df6:	f249 20fd 	movw	r0, #37629	; 0x92fd
 8001dfa:	f7ff ff15 	bl	8001c28 <RAMRegisterWrite>
	RAMRegisterWrite(SET_CONF_TS2_CFG, writeData, 1);
 8001dfe:	463b      	mov	r3, r7
 8001e00:	2201      	movs	r2, #1
 8001e02:	4619      	mov	r1, r3
 8001e04:	f249 20fe 	movw	r0, #37630	; 0x92fe
 8001e08:	f7ff ff0e 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x0F; // TS3: Thermistor temperature, for FET temperature protection
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_TS3_CFG, writeData, 1);
 8001e10:	463b      	mov	r3, r7
 8001e12:	2201      	movs	r2, #1
 8001e14:	4619      	mov	r1, r3
 8001e16:	f249 20ff 	movw	r0, #37631	; 0x92ff
 8001e1a:	f7ff ff05 	bl	8001c28 <RAMRegisterWrite>
	// Configure ALERT pin
	writeData[0] = 0x2A;
 8001e1e:	232a      	movs	r3, #42	; 0x2a
 8001e20:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_ALERT_CFG, writeData, 1);
 8001e22:	463b      	mov	r3, r7
 8001e24:	2201      	movs	r2, #1
 8001e26:	4619      	mov	r1, r3
 8001e28:	f249 20fc 	movw	r0, #37628	; 0x92fc
 8001e2c:	f7ff fefc 	bl	8001c28 <RAMRegisterWrite>
	// Configure DA
	writeData[0] = 0x06;
 8001e30:	2306      	movs	r3, #6
 8001e32:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CONF_DA_CFG, writeData, 1);
 8001e34:	463b      	mov	r3, r7
 8001e36:	2201      	movs	r2, #1
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f249 3003 	movw	r0, #37635	; 0x9303
 8001e3e:	f7ff fef3 	bl	8001c28 <RAMRegisterWrite>

	/**
	 * Protection settings registers
	 */
	writeData[0] = 0xFC;
 8001e42:	23fc      	movs	r3, #252	; 0xfc
 8001e44:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_ENPROT_A, writeData, 1); // Enables SCD, OCD1, OCC, COV, CUV protection
 8001e46:	463b      	mov	r3, r7
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f249 2061 	movw	r0, #37473	; 0x9261
 8001e50:	f7ff feea 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0xF7;
 8001e54:	23f7      	movs	r3, #247	; 0xf7
 8001e56:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_ENPROT_B, writeData, 1); // Enables OTF, OTINT, OTD, OTC, and all UT protection
 8001e58:	463b      	mov	r3, r7
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f249 2062 	movw	r0, #37474	; 0x9262
 8001e62:	f7ff fee1 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_ENPROT_C, writeData, 1); // Disables all special/latch protections
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f249 2063 	movw	r0, #37475	; 0x9263
 8001e74:	f7ff fed8 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x98;
 8001e78:	2398      	movs	r3, #152	; 0x98
 8001e7a:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_CHGFET_PROT_A, writeData, 1); // SCD, OCC, and COV disable CHG FET
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4619      	mov	r1, r3
 8001e82:	f249 2065 	movw	r0, #37477	; 0x9265
 8001e86:	f7ff fecf 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0xD4;
 8001e8a:	23d4      	movs	r3, #212	; 0xd4
 8001e8c:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_CHGFET_PROT_B, writeData, 1); // OTF, OTINT, OTC, and UTINT disable CHG FET
 8001e8e:	463b      	mov	r3, r7
 8001e90:	2201      	movs	r2, #1
 8001e92:	4619      	mov	r1, r3
 8001e94:	f249 2066 	movw	r0, #37478	; 0x9266
 8001e98:	f7ff fec6 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x00;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_CHGFET_PROT_C, writeData, 1); // Type C protections are disabled anyways
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f249 2067 	movw	r0, #37479	; 0x9267
 8001eaa:	f7ff febd 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0xE4;
 8001eae:	23e4      	movs	r3, #228	; 0xe4
 8001eb0:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_DSGFET_PROT_A, writeData, 1); // SCD, OCD1, OCD2, and CUV disable DSG FET
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f249 2069 	movw	r0, #37481	; 0x9269
 8001ebc:	f7ff feb4 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0xE4;
 8001ec0:	23e4      	movs	r3, #228	; 0xe4
 8001ec2:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_DSGFET_PROT_B, writeData, 1); // OTF, OTINT, OTD, and UTINT disable DSG FET
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f249 206a 	movw	r0, #37482	; 0x926a
 8001ece:	f7ff feab 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x00;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_PROT_DSGFET_PROT_C, writeData, 1); // Type C protections are disabled anyways
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f249 206b 	movw	r0, #37483	; 0x926b
 8001ee0:	f7ff fea2 	bl	8001c28 <RAMRegisterWrite>

	/**
	 * FET settings registers
	 */
	writeData[0] = 0x1E;
 8001ee4:	231e      	movs	r3, #30
 8001ee6:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1); // Enable PDSG, disable body diode protection, enable CHG FET in SLEEP
 8001ee8:	463b      	mov	r3, r7
 8001eea:	2201      	movs	r2, #1
 8001eec:	4619      	mov	r1, r3
 8001eee:	f249 3008 	movw	r0, #37640	; 0x9308
 8001ef2:	f7ff fe99 	bl	8001c28 <RAMRegisterWrite>
	format_uint16(writeData, 0x06A4);
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f821 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(SET_FET_PCHG_STRT_V, writeData, 2); // Min. cell voltage below 1700mV activates PCHG mode
 8001f02:	463b      	mov	r3, r7
 8001f04:	2202      	movs	r2, #2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f249 300a 	movw	r0, #37642	; 0x930a
 8001f0c:	f7ff fe8c 	bl	8001c28 <RAMRegisterWrite>
	format_uint16(writeData, 0x06D6);
 8001f10:	463b      	mov	r3, r7
 8001f12:	f240 61d6 	movw	r1, #1750	; 0x6d6
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f814 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(SET_FET_PCHG_STP_V, writeData, 2); // Min. cell voltage above 1750mV deactivates PCHG mode
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f249 300c 	movw	r0, #37644	; 0x930c
 8001f26:	f7ff fe7f 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x64;
 8001f2a:	2364      	movs	r3, #100	; 0x64
 8001f2c:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_PDSG_TO, writeData, 1); // PDSG timeout after 1000ms, enables DSG FET after
 8001f2e:	463b      	mov	r3, r7
 8001f30:	2201      	movs	r2, #1
 8001f32:	4619      	mov	r1, r3
 8001f34:	f249 300e 	movw	r0, #37646	; 0x930e
 8001f38:	f7ff fe76 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x64;
 8001f3c:	2364      	movs	r3, #100	; 0x64
 8001f3e:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_PDSG_STP_DLT, writeData, 1); // Exit PDSG and enable DSG FET when LD equals VBAT+ minus 1000mV
 8001f40:	463b      	mov	r3, r7
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	f249 300f 	movw	r0, #37647	; 0x930f
 8001f4a:	f7ff fe6d 	bl	8001c28 <RAMRegisterWrite>

	/**
	 * Misc. settings
	 */
	// Setting MFG Status Init to disable FET Test commands
	format_uint16(writeData, 0x0050);
 8001f4e:	463b      	mov	r3, r7
 8001f50:	2150      	movs	r1, #80	; 0x50
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fff6 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(SET_MFG_STATUS_INIT, writeData, 2);
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f249 3033 	movw	r0, #37683	; 0x9333
 8001f62:	f7ff fe61 	bl	8001c28 <RAMRegisterWrite>
	// Setting DSG threshold to 100mA and CHG threshold to 50mA
	format_uint16(writeData, 0x000A);
 8001f66:	463b      	mov	r3, r7
 8001f68:	210a      	movs	r1, #10
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe ffea 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(SET_CURRTH_DSG_CURRTH, writeData, 2);
 8001f70:	463b      	mov	r3, r7
 8001f72:	2202      	movs	r2, #2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f249 3010 	movw	r0, #37648	; 0x9310
 8001f7a:	f7ff fe55 	bl	8001c28 <RAMRegisterWrite>
	format_uint16(writeData, 0x0005);
 8001f7e:	463b      	mov	r3, r7
 8001f80:	2105      	movs	r1, #5
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe ffde 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(SET_CURRTH_CHG_CURRTH, writeData, 2);
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f249 3012 	movw	r0, #37650	; 0x9312
 8001f92:	f7ff fe49 	bl	8001c28 <RAMRegisterWrite>

	/**
	 * Cell balancing settings registers
	 */
	writeData[0] = 0x0F;
 8001f96:	230f      	movs	r3, #15
 8001f98:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CLBCFG_CONFIG, writeData, 1); // Exits SLEEP to perform balancing, allow balancing while charging and in relax mode
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f249 3035 	movw	r0, #37685	; 0x9335
 8001fa4:	f7ff fe40 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x0A;
 8001fa8:	230a      	movs	r3, #10
 8001faa:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CLBCFG_CB_INTRVL, writeData, 1); // Recalculates which cells to balance every 10 seconds
 8001fac:	463b      	mov	r3, r7
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f249 3039 	movw	r0, #37689	; 0x9339
 8001fb6:	f7ff fe37 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x08;
 8001fba:	2308      	movs	r3, #8
 8001fbc:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_CLBCFG_CB_MAX_CLS, writeData, 1); // Allows up to 8 cells to be balanced at once
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f249 303a 	movw	r0, #37690	; 0x933a
 8001fc8:	f7ff fe2e 	bl	8001c28 <RAMRegisterWrite>
	// Min. cell voltage must be at least 2500mV for cell balancing to occur while charging or in relax mode
	format_uint16(writeData, 0x09C4);
 8001fcc:	463b      	mov	r3, r7
 8001fce:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe ffb6 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(SET_CLBCFG_CHG_MIN_V, writeData, 2);
 8001fd8:	463b      	mov	r3, r7
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f249 303b 	movw	r0, #37691	; 0x933b
 8001fe2:	f7ff fe21 	bl	8001c28 <RAMRegisterWrite>
	RAMRegisterWrite(SET_CLBCFG_RLX_MIN_V, writeData, 2);
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f249 303f 	movw	r0, #37695	; 0x933f
 8001ff0:	f7ff fe1a 	bl	8001c28 <RAMRegisterWrite>

	/**
	 * Power registers
	 */
	format_uint16(writeData, 0x0960);
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe ffa2 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(PWR_SHDN_BATT_V, writeData, 2); // If pack voltage falls below 24000mV, AFE enters SHUTDOWN mode
 8002000:	463b      	mov	r3, r7
 8002002:	2202      	movs	r2, #2
 8002004:	4619      	mov	r1, r3
 8002006:	f249 2041 	movw	r0, #37441	; 0x9241
 800200a:	f7ff fe0d 	bl	8001c28 <RAMRegisterWrite>
	format_uint16(writeData, 0x000A);
 800200e:	463b      	mov	r3, r7
 8002010:	210a      	movs	r1, #10
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe ff96 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(PWR_SLP_CURR, writeData, 2); // Current above 10mA will cause device to exit SLEEP mode
 8002018:	463b      	mov	r3, r7
 800201a:	2202      	movs	r2, #2
 800201c:	4619      	mov	r1, r3
 800201e:	f249 2048 	movw	r0, #37448	; 0x9248
 8002022:	f7ff fe01 	bl	8001c28 <RAMRegisterWrite>
	format_uint16(writeData, 0x0960);
 8002026:	463b      	mov	r3, r7
 8002028:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe ff89 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(PWR_SLP_CHG_V_THLD, writeData, 2); // If pack voltage falls below 24000mV, SLEEP mode is blocked when charger detected
 8002032:	463b      	mov	r3, r7
 8002034:	2202      	movs	r2, #2
 8002036:	4619      	mov	r1, r3
 8002038:	f249 204e 	movw	r0, #37454	; 0x924e
 800203c:	f7ff fdf4 	bl	8001c28 <RAMRegisterWrite>

	/**
	 * Protections registers (testing only)
	 */
	writeData[0] = 0x1A;
 8002040:	231a      	movs	r3, #26
 8002042:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_CUV_THLD, writeData, 1); // CUV triggered at 1.265V, cleared above 1.3662V
 8002044:	463b      	mov	r3, r7
 8002046:	2201      	movs	r2, #1
 8002048:	4619      	mov	r1, r3
 800204a:	f249 2075 	movw	r0, #37493	; 0x9275
 800204e:	f7ff fdeb 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x23;
 8002052:	2323      	movs	r3, #35	; 0x23
 8002054:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_COV_THLD, writeData, 1); // COV triggered at 1.771V, cleared below 1.6698V
 8002056:	463b      	mov	r3, r7
 8002058:	2201      	movs	r2, #1
 800205a:	4619      	mov	r1, r3
 800205c:	f249 2078 	movw	r0, #37496	; 0x9278
 8002060:	f7ff fde2 	bl	8001c28 <RAMRegisterWrite>
	 */
//	writeData[0] = 0x23;
//	RAMRegisterWrite(PROT_CUV_THLD, writeData, 1); // CUV triggered at 1.771V, cleared above 1.8732V
//	writeData[0] = 0x37;
//	RAMRegisterWrite(PROT_COV_THLD, writeData, 1); // COV triggered at 2.783V, cleared below 2.6818V
	writeData[0] = 0x08;
 8002064:	2308      	movs	r3, #8
 8002066:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCC_THLD, writeData, 1); // OCC triggered at 16A
 8002068:	463b      	mov	r3, r7
 800206a:	2201      	movs	r2, #1
 800206c:	4619      	mov	r1, r3
 800206e:	f249 2080 	movw	r0, #37504	; 0x9280
 8002072:	f7ff fdd9 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x15;
 8002076:	2315      	movs	r3, #21
 8002078:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD1_THLD, writeData, 1); // OCD1 triggered at 42A
 800207a:	463b      	mov	r3, r7
 800207c:	2201      	movs	r2, #1
 800207e:	4619      	mov	r1, r3
 8002080:	f249 2082 	movw	r0, #37506	; 0x9282
 8002084:	f7ff fdd0 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x64;
 8002088:	2364      	movs	r3, #100	; 0x64
 800208a:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD1_DLY, writeData, 1); // OCD1 triggered after 340ms delay
 800208c:	463b      	mov	r3, r7
 800208e:	2201      	movs	r2, #1
 8002090:	4619      	mov	r1, r3
 8002092:	f249 2083 	movw	r0, #37507	; 0x9283
 8002096:	f7ff fdc7 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x19;
 800209a:	2319      	movs	r3, #25
 800209c:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD2_THLD, writeData, 1); // OCD2 triggered at 50A
 800209e:	463b      	mov	r3, r7
 80020a0:	2201      	movs	r2, #1
 80020a2:	4619      	mov	r1, r3
 80020a4:	f249 2084 	movw	r0, #37508	; 0x9284
 80020a8:	f7ff fdbe 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x1C;
 80020ac:	231c      	movs	r3, #28
 80020ae:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_OCD2_DLY, writeData, 1); // OCD2 triggered after 100ms delay
 80020b0:	463b      	mov	r3, r7
 80020b2:	2201      	movs	r2, #1
 80020b4:	4619      	mov	r1, r3
 80020b6:	f249 2085 	movw	r0, #37509	; 0x9285
 80020ba:	f7ff fdb5 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0x03;
 80020be:	2303      	movs	r3, #3
 80020c0:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_SCD_THLD, writeData, 1); // SCD triggered at 60A
 80020c2:	463b      	mov	r3, r7
 80020c4:	2201      	movs	r2, #1
 80020c6:	4619      	mov	r1, r3
 80020c8:	f249 2086 	movw	r0, #37510	; 0x9286
 80020cc:	f7ff fdac 	bl	8001c28 <RAMRegisterWrite>
	RAMRegisterWrite(PROT_SCD_DLY, writeData, 1); // SCD triggered after 30µs delay
 80020d0:	463b      	mov	r3, r7
 80020d2:	2201      	movs	r2, #1
 80020d4:	4619      	mov	r1, r3
 80020d6:	f249 2087 	movw	r0, #37511	; 0x9287
 80020da:	f7ff fda5 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0xEC;
 80020de:	23ec      	movs	r3, #236	; 0xec
 80020e0:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_UTD_THLD, writeData, 1); // UTD triggered at -20ºC
 80020e2:	463b      	mov	r3, r7
 80020e4:	2201      	movs	r2, #1
 80020e6:	4619      	mov	r1, r3
 80020e8:	f249 20a9 	movw	r0, #37545	; 0x92a9
 80020ec:	f7ff fd9c 	bl	8001c28 <RAMRegisterWrite>
	RAMRegisterWrite(PROT_UTC_THLD, writeData, 1); // UTC triggered at -20ºC
 80020f0:	463b      	mov	r3, r7
 80020f2:	2201      	movs	r2, #1
 80020f4:	4619      	mov	r1, r3
 80020f6:	f249 20a6 	movw	r0, #37542	; 0x92a6
 80020fa:	f7ff fd95 	bl	8001c28 <RAMRegisterWrite>
	writeData[0] = 0xF1;
 80020fe:	23f1      	movs	r3, #241	; 0xf1
 8002100:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(PROT_UTD_RCVR, writeData, 1); // UTD cleared above -15ºC
 8002102:	463b      	mov	r3, r7
 8002104:	2201      	movs	r2, #1
 8002106:	4619      	mov	r1, r3
 8002108:	f249 20ab 	movw	r0, #37547	; 0x92ab
 800210c:	f7ff fd8c 	bl	8001c28 <RAMRegisterWrite>
	RAMRegisterWrite(PROT_UTC_RCVR, writeData, 1); // UTC cleared above -15ºC
 8002110:	463b      	mov	r3, r7
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	f249 20a8 	movw	r0, #37544	; 0x92a8
 800211a:	f7ff fd85 	bl	8001c28 <RAMRegisterWrite>
}
 800211e:	bf00      	nop
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <AFETransmitReadCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI read command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	4613      	mov	r3, r2
 8002134:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 800213a:	e01e      	b.n	800217a <AFETransmitReadCmd+0x52>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	2101      	movs	r1, #1
 8002140:	4813      	ldr	r0, [pc, #76]	; (8002190 <AFETransmitReadCmd+0x68>)
 8002142:	f002 fd37 	bl	8004bb4 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	b29b      	uxth	r3, r3
 800214a:	f04f 32ff 	mov.w	r2, #4294967295
 800214e:	9200      	str	r2, [sp, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	480f      	ldr	r0, [pc, #60]	; (8002194 <AFETransmitReadCmd+0x6c>)
 8002156:	f003 fe8a 	bl	8005e6e <HAL_SPI_TransmitReceive>

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		if (txBytes[0] == rxBytes[0]) commReceived = true;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d101      	bne.n	800216a <AFETransmitReadCmd+0x42>
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
		// TODO: implement CRC checking for received data

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	2101      	movs	r1, #1
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <AFETransmitReadCmd+0x68>)
 8002170:	f002 fd20 	bl	8004bb4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002174:	2001      	movs	r0, #1
 8002176:	f000 ff75 	bl	8003064 <HAL_Delay>
	while (!commReceived)
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	f083 0301 	eor.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1da      	bne.n	800213c <AFETransmitReadCmd+0x14>
	}

}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	48000400 	.word	0x48000400
 8002194:	20000078 	.word	0x20000078

08002198 <AFETransmitWriteCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI write command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	4613      	mov	r3, r2
 80021a4:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 80021aa:	e02e      	b.n	800220a <AFETransmitWriteCmd+0x72>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2101      	movs	r1, #1
 80021b0:	481b      	ldr	r0, [pc, #108]	; (8002220 <AFETransmitWriteCmd+0x88>)
 80021b2:	f002 fcff 	bl	8004bb4 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295
 80021be:	9200      	str	r2, [sp, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	4817      	ldr	r0, [pc, #92]	; (8002224 <AFETransmitWriteCmd+0x8c>)
 80021c6:	f003 fe52 	bl	8005e6e <HAL_SPI_TransmitReceive>

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
 80021ca:	2301      	movs	r3, #1
 80021cc:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	e00e      	b.n	80021f2 <AFETransmitWriteCmd+0x5a>
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	440b      	add	r3, r1
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <AFETransmitWriteCmd+0x54>
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	3301      	adds	r3, #1
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dbec      	blt.n	80021d4 <AFETransmitWriteCmd+0x3c>
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	2101      	movs	r1, #1
 80021fe:	4808      	ldr	r0, [pc, #32]	; (8002220 <AFETransmitWriteCmd+0x88>)
 8002200:	f002 fcd8 	bl	8004bb4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002204:	2001      	movs	r0, #1
 8002206:	f000 ff2d 	bl	8003064 <HAL_Delay>
	while (!commReceived)
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	f083 0301 	eor.w	r3, r3, #1
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1ca      	bne.n	80021ac <AFETransmitWriteCmd+0x14>
	}
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	48000400 	.word	0x48000400
 8002224:	20000078 	.word	0x20000078

08002228 <TransmitCellVoltages>:
/**
 * Helper function to transmit all the cell voltage readings over UART
 * @param volts Array containing the cell voltage readings
 * @param len Length of the provided array
 */
void TransmitCellVoltages(uint16_t *volts, uint8_t len) {
 8002228:	b580      	push	{r7, lr}
 800222a:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800222e:	af00      	add	r7, sp, #0
 8002230:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002234:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8002238:	6018      	str	r0, [r3, #0]
 800223a:	460a      	mov	r2, r1
 800223c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002240:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8002244:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0}; // Initialize buffer to store message
 8002246:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800224a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	3304      	adds	r3, #4
 8002254:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f004 ff0a 	bl	8007074 <memset>
	char temp[32]; // Temporary buffer for each line

	uint8_t lines = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
	uint8_t entriesPerLine = 5;
 8002266:	2305      	movs	r3, #5
 8002268:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f

	// Preparing a heading for the current reading
	snprintf(temp, sizeof(temp), "******** VOLTAGE ********\n\r");
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4a8c      	ldr	r2, [pc, #560]	; (80024a4 <TransmitCellVoltages+0x27c>)
 8002272:	2120      	movs	r1, #32
 8002274:	4618      	mov	r0, r3
 8002276:	f004 fec9 	bl	800700c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800227a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800227e:	4618      	mov	r0, r3
 8002280:	f7fd ffa6 	bl	80001d0 <strlen>
 8002284:	4603      	mov	r3, r0
 8002286:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800228a:	3303      	adds	r3, #3
 800228c:	f107 010c 	add.w	r1, r7, #12
 8002290:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002294:	461a      	mov	r2, r3
 8002296:	f004 fef5 	bl	8007084 <strncat>

	// Calculate how many lines to make based on number of voltage readings (8 readings per line max.)
	if (len % entriesPerLine == 0) lines = len / entriesPerLine;
 800229a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800229e:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 80022a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80022ac:	fb01 f202 	mul.w	r2, r1, r2
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <TransmitCellVoltages+0xa8>
 80022b8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80022bc:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
 80022ce:	e00c      	b.n	80022ea <TransmitCellVoltages+0xc2>
	else lines = len / entriesPerLine + 1;
 80022d0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80022d4:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f

	for (int i = 0; i < lines; i++) {
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80022f0:	e0bd      	b.n	800246e <TransmitCellVoltages+0x246>
		// First write out the cell numbers
		for (int j = 1; j <= entriesPerLine; j++) {
 80022f2:	2301      	movs	r3, #1
 80022f4:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80022f8:	e033      	b.n	8002362 <TransmitCellVoltages+0x13a>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 80022fa:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80022fe:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002302:	fb03 f202 	mul.w	r2, r3, r2
 8002306:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800230a:	441a      	add	r2, r3
 800230c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002310:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	dc2a      	bgt.n	8002370 <TransmitCellVoltages+0x148>
			snprintf(temp, sizeof(temp), "CV%d\t\t", (i*entriesPerLine + j));
 800231a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800231e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002322:	fb03 f202 	mul.w	r2, r3, r2
 8002326:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800232a:	4413      	add	r3, r2
 800232c:	f107 000c 	add.w	r0, r7, #12
 8002330:	4a5d      	ldr	r2, [pc, #372]	; (80024a8 <TransmitCellVoltages+0x280>)
 8002332:	2120      	movs	r1, #32
 8002334:	f004 fe6a 	bl	800700c <sniprintf>
			strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800233c:	4618      	mov	r0, r3
 800233e:	f7fd ff47 	bl	80001d0 <strlen>
 8002342:	4603      	mov	r3, r0
 8002344:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002348:	3303      	adds	r3, #3
 800234a:	f107 010c 	add.w	r1, r7, #12
 800234e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002352:	461a      	mov	r2, r3
 8002354:	f004 fe96 	bl	8007084 <strncat>
		for (int j = 1; j <= entriesPerLine; j++) {
 8002358:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800235c:	3301      	adds	r3, #1
 800235e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8002362:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8002366:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800236a:	429a      	cmp	r2, r3
 800236c:	ddc5      	ble.n	80022fa <TransmitCellVoltages+0xd2>
 800236e:	e000      	b.n	8002372 <TransmitCellVoltages+0x14a>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 8002370:	bf00      	nop
		}
		snprintf(temp, sizeof(temp), "\n\r");
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4a4d      	ldr	r2, [pc, #308]	; (80024ac <TransmitCellVoltages+0x284>)
 8002378:	2120      	movs	r1, #32
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fe46 	bl	800700c <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002384:	4618      	mov	r0, r3
 8002386:	f7fd ff23 	bl	80001d0 <strlen>
 800238a:	4603      	mov	r3, r0
 800238c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002390:	3303      	adds	r3, #3
 8002392:	f107 010c 	add.w	r1, r7, #12
 8002396:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800239a:	461a      	mov	r2, r3
 800239c:	f004 fe72 	bl	8007084 <strncat>
		// On the following line, write out the cell voltage readings
		for (int j = 1; j <= entriesPerLine; j++) {
 80023a0:	2301      	movs	r3, #1
 80023a2:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80023a6:	e03e      	b.n	8002426 <TransmitCellVoltages+0x1fe>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 80023a8:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80023ac:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80023b0:	fb03 f202 	mul.w	r2, r3, r2
 80023b4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80023b8:	441a      	add	r2, r3
 80023ba:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80023be:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dc35      	bgt.n	8002434 <TransmitCellVoltages+0x20c>
			snprintf(temp, sizeof(temp), "%dmV\t\t", volts[i*entriesPerLine + j - 1]);
 80023c8:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80023cc:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80023d0:	fb03 f202 	mul.w	r2, r3, r2
 80023d4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80023d8:	4413      	add	r3, r2
 80023da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80023de:	3b01      	subs	r3, #1
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80023e6:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	4413      	add	r3, r2
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	f107 000c 	add.w	r0, r7, #12
 80023f4:	4a2e      	ldr	r2, [pc, #184]	; (80024b0 <TransmitCellVoltages+0x288>)
 80023f6:	2120      	movs	r1, #32
 80023f8:	f004 fe08 	bl	800700c <sniprintf>
			strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80023fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002400:	4618      	mov	r0, r3
 8002402:	f7fd fee5 	bl	80001d0 <strlen>
 8002406:	4603      	mov	r3, r0
 8002408:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800240c:	3303      	adds	r3, #3
 800240e:	f107 010c 	add.w	r1, r7, #12
 8002412:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002416:	461a      	mov	r2, r3
 8002418:	f004 fe34 	bl	8007084 <strncat>
		for (int j = 1; j <= entriesPerLine; j++) {
 800241c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002420:	3301      	adds	r3, #1
 8002422:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8002426:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800242a:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 800242e:	429a      	cmp	r2, r3
 8002430:	ddba      	ble.n	80023a8 <TransmitCellVoltages+0x180>
 8002432:	e000      	b.n	8002436 <TransmitCellVoltages+0x20e>
			if ((i*entriesPerLine + j) > len) break; // Break once number of voltage readings has been reached
 8002434:	bf00      	nop
		}
		snprintf(temp, sizeof(temp), "\n\n\r");
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <TransmitCellVoltages+0x28c>)
 800243c:	2120      	movs	r1, #32
 800243e:	4618      	mov	r0, r3
 8002440:	f004 fde4 	bl	800700c <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002448:	4618      	mov	r0, r3
 800244a:	f7fd fec1 	bl	80001d0 <strlen>
 800244e:	4603      	mov	r3, r0
 8002450:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002454:	3303      	adds	r3, #3
 8002456:	f107 010c 	add.w	r1, r7, #12
 800245a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800245e:	461a      	mov	r2, r3
 8002460:	f004 fe10 	bl	8007084 <strncat>
	for (int i = 0; i < lines; i++) {
 8002464:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8002468:	3301      	adds	r3, #1
 800246a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800246e:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 8002472:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002476:	429a      	cmp	r2, r3
 8002478:	f6ff af3b 	blt.w	80022f2 <TransmitCellVoltages+0xca>
	}

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800247c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002480:	4618      	mov	r0, r3
 8002482:	f7fd fea5 	bl	80001d0 <strlen>
 8002486:	4603      	mov	r3, r0
 8002488:	b29a      	uxth	r2, r3
 800248a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	4809      	ldr	r0, [pc, #36]	; (80024b8 <TransmitCellVoltages+0x290>)
 8002494:	f004 f8c0 	bl	8006618 <HAL_UART_Transmit>
}
 8002498:	bf00      	nop
 800249a:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	08007e78 	.word	0x08007e78
 80024a8:	08007e94 	.word	0x08007e94
 80024ac:	08007e9c 	.word	0x08007e9c
 80024b0:	08007ea0 	.word	0x08007ea0
 80024b4:	08007e74 	.word	0x08007e74
 80024b8:	200000dc 	.word	0x200000dc

080024bc <TransmitCurrentReading>:

/**
 * Helper function to transmit the battery current reading over UART
 * @param current CC2 current reading - negative for discharging, positive for charging
 */
void TransmitCurrentReading(int16_t current) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0aa      	sub	sp, #168	; 0xa8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
	char buffer[128] = {0}; // Initialize buffer to store message
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ce:	227c      	movs	r2, #124	; 0x7c
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 fdce 	bl	8007074 <memset>
	char temp[32] = {0}; // Temporary buffer for each line
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
 80024ec:	615a      	str	r2, [r3, #20]
 80024ee:	619a      	str	r2, [r3, #24]

	// Preparing a heading for the current reading
	snprintf(temp, sizeof(temp), "******** CURRENT ********\n\r");
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	4a28      	ldr	r2, [pc, #160]	; (8002598 <TransmitCurrentReading+0xdc>)
 80024f6:	2120      	movs	r1, #32
 80024f8:	4618      	mov	r0, r3
 80024fa:	f004 fd87 	bl	800700c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 80024fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd fe64 	bl	80001d0 <strlen>
 8002508:	4603      	mov	r3, r0
 800250a:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 800250e:	f107 0108 	add.w	r1, r7, #8
 8002512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002516:	4618      	mov	r0, r3
 8002518:	f004 fdb4 	bl	8007084 <strncat>

	// Determine if charging or discharging based on current value
	if (current > 0) {
 800251c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002520:	2b00      	cmp	r3, #0
 8002522:	dd0c      	ble.n	800253e <TransmitCurrentReading+0x82>
		snprintf(temp, sizeof(temp), "CC2: Charging at %d mA\n\n\r", current*10);
 8002524:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	f107 0008 	add.w	r0, r7, #8
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <TransmitCurrentReading+0xe0>)
 8002536:	2120      	movs	r1, #32
 8002538:	f004 fd68 	bl	800700c <sniprintf>
 800253c:	e00b      	b.n	8002556 <TransmitCurrentReading+0x9a>
	}
	else {
		snprintf(temp, sizeof(temp), "CC2: Discharging at %d mA\n\n\r", current*(-10));
 800253e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002542:	f06f 0209 	mvn.w	r2, #9
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	f107 0008 	add.w	r0, r7, #8
 800254e:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <TransmitCurrentReading+0xe4>)
 8002550:	2120      	movs	r1, #32
 8002552:	f004 fd5b 	bl	800700c <sniprintf>
	}
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd fe38 	bl	80001d0 <strlen>
 8002560:	4603      	mov	r3, r0
 8002562:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 8002566:	f107 0108 	add.w	r1, r7, #8
 800256a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800256e:	4618      	mov	r0, r3
 8002570:	f004 fd88 	bl	8007084 <strncat>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fe29 	bl	80001d0 <strlen>
 800257e:	4603      	mov	r3, r0
 8002580:	b29a      	uxth	r2, r3
 8002582:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <TransmitCurrentReading+0xe8>)
 800258c:	f004 f844 	bl	8006618 <HAL_UART_Transmit>
}
 8002590:	bf00      	nop
 8002592:	37a8      	adds	r7, #168	; 0xa8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	08007eb8 	.word	0x08007eb8
 800259c:	08007ed4 	.word	0x08007ed4
 80025a0:	08007ef0 	.word	0x08007ef0
 80025a4:	200000dc 	.word	0x200000dc

080025a8 <TransmitTemperatures>:
/**
 * Helper function to transmit all the temperature readings over UART
 * @param temps Array containing the temperature readings
 * @param len Length of the provided array
 */
void TransmitTemperatures(int16_t *temps, uint8_t len) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 80025ae:	af02      	add	r7, sp, #8
 80025b0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80025b4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80025b8:	6018      	str	r0, [r3, #0]
 80025ba:	460a      	mov	r2, r1
 80025bc:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80025c0:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 80025c4:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0}; // Initialize buffer to store message
 80025c6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80025ca:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	3304      	adds	r3, #4
 80025d4:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f004 fd4a 	bl	8007074 <memset>
	char temp[32]; // Temporary buffer for each line

	// Separate variables for integer part and decimal part of temperature reading
	int16_t degC = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
	int16_t deg_int = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428
	int16_t deg_dec = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

	// Preparing a heading for the temperature readings
	snprintf(temp, sizeof(temp), "******** TEMPERATURE ********\n\r");
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <TransmitTemperatures+0x224>)
 80025f8:	2120      	movs	r1, #32
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 fd06 	bl	800700c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd fde3 	bl	80001d0 <strlen>
 800260a:	4603      	mov	r3, r0
 800260c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002610:	3303      	adds	r3, #3
 8002612:	f107 0108 	add.w	r1, r7, #8
 8002616:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800261a:	461a      	mov	r2, r3
 800261c:	f004 fd32 	bl	8007084 <strncat>

	// Tabulating the temperature sensors
	for (int i = 1; i <= len; i++) {
 8002620:	2301      	movs	r3, #1
 8002622:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8002626:	e01c      	b.n	8002662 <TransmitTemperatures+0xba>
		snprintf(temp, sizeof(temp), "TS%d\t\t", i);
 8002628:	f107 0008 	add.w	r0, r7, #8
 800262c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002630:	4a67      	ldr	r2, [pc, #412]	; (80027d0 <TransmitTemperatures+0x228>)
 8002632:	2120      	movs	r1, #32
 8002634:	f004 fcea 	bl	800700c <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002638:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd fdc7 	bl	80001d0 <strlen>
 8002642:	4603      	mov	r3, r0
 8002644:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002648:	3303      	adds	r3, #3
 800264a:	f107 0108 	add.w	r1, r7, #8
 800264e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002652:	461a      	mov	r2, r3
 8002654:	f004 fd16 	bl	8007084 <strncat>
	for (int i = 1; i <= len; i++) {
 8002658:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800265c:	3301      	adds	r3, #1
 800265e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8002662:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002666:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8002670:	429a      	cmp	r2, r3
 8002672:	ddd9      	ble.n	8002628 <TransmitTemperatures+0x80>
	}

	snprintf(temp, sizeof(temp), "\n\r");
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <TransmitTemperatures+0x22c>)
 800267a:	2120      	movs	r1, #32
 800267c:	4618      	mov	r0, r3
 800267e:	f004 fcc5 	bl	800700c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd fda2 	bl	80001d0 <strlen>
 800268c:	4603      	mov	r3, r0
 800268e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002692:	3303      	adds	r3, #3
 8002694:	f107 0108 	add.w	r1, r7, #8
 8002698:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800269c:	461a      	mov	r2, r3
 800269e:	f004 fcf1 	bl	8007084 <strncat>

	for (int i = 1; i <= len; i++) {
 80026a2:	2301      	movs	r3, #1
 80026a4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80026a8:	e05d      	b.n	8002766 <TransmitTemperatures+0x1be>
		// Convert from Kelvin into Celsius
		degC = temps[i-1] - 2731;
 80026aa:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80026ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80026b2:	3b01      	subs	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 80026ba:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
		deg_int = degC / 10;
 80026d2:	f9b7 342a 	ldrsh.w	r3, [r7, #1066]	; 0x42a
 80026d6:	4a40      	ldr	r2, [pc, #256]	; (80027d8 <TransmitTemperatures+0x230>)
 80026d8:	fb82 1203 	smull	r1, r2, r2, r3
 80026dc:	1092      	asrs	r2, r2, #2
 80026de:	17db      	asrs	r3, r3, #31
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428
		deg_dec = degC % 10;
 80026e6:	f9b7 242a 	ldrsh.w	r2, [r7, #1066]	; 0x42a
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <TransmitTemperatures+0x230>)
 80026ec:	fb83 1302 	smull	r1, r3, r3, r2
 80026f0:	1099      	asrs	r1, r3, #2
 80026f2:	17d3      	asrs	r3, r2, #31
 80026f4:	1ac9      	subs	r1, r1, r3
 80026f6:	460b      	mov	r3, r1
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
		// If temperature is negative, keep the decimal part positive
		if (degC < 0 && deg_dec != 0) deg_dec = abs(deg_dec);
 8002704:	f9b7 342a 	ldrsh.w	r3, [r7, #1066]	; 0x42a
 8002708:	2b00      	cmp	r3, #0
 800270a:	da0b      	bge.n	8002724 <TransmitTemperatures+0x17c>
 800270c:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <TransmitTemperatures+0x17c>
 8002714:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 8002718:	2b00      	cmp	r3, #0
 800271a:	bfb8      	it	lt
 800271c:	425b      	neglt	r3, r3
 800271e:	b29b      	uxth	r3, r3
 8002720:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

		snprintf(temp, sizeof(temp), "%d.%dºC\t\t", deg_int, deg_dec);
 8002724:	f9b7 2428 	ldrsh.w	r2, [r7, #1064]	; 0x428
 8002728:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 800272c:	f107 0008 	add.w	r0, r7, #8
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <TransmitTemperatures+0x234>)
 8002736:	2120      	movs	r1, #32
 8002738:	f004 fc68 	bl	800700c <sniprintf>
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800273c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd fd45 	bl	80001d0 <strlen>
 8002746:	4603      	mov	r3, r0
 8002748:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800274c:	3303      	adds	r3, #3
 800274e:	f107 0108 	add.w	r1, r7, #8
 8002752:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002756:	461a      	mov	r2, r3
 8002758:	f004 fc94 	bl	8007084 <strncat>
	for (int i = 1; i <= len; i++) {
 800275c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002760:	3301      	adds	r3, #1
 8002762:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8002766:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800276a:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8002774:	429a      	cmp	r2, r3
 8002776:	dd98      	ble.n	80026aa <TransmitTemperatures+0x102>
	}

	snprintf(temp, sizeof(temp), "\n\n\r");
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <TransmitTemperatures+0x238>)
 800277e:	2120      	movs	r1, #32
 8002780:	4618      	mov	r0, r3
 8002782:	f004 fc43 	bl	800700c <sniprintf>
	strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8002786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fd20 	bl	80001d0 <strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002796:	3303      	adds	r3, #3
 8002798:	f107 0108 	add.w	r1, r7, #8
 800279c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80027a0:	461a      	mov	r2, r3
 80027a2:	f004 fc6f 	bl	8007084 <strncat>

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80027a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fd10 	bl	80001d0 <strlen>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	4809      	ldr	r0, [pc, #36]	; (80027e4 <TransmitTemperatures+0x23c>)
 80027be:	f003 ff2b 	bl	8006618 <HAL_UART_Transmit>
}
 80027c2:	bf00      	nop
 80027c4:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	08007f10 	.word	0x08007f10
 80027d0:	08007f30 	.word	0x08007f30
 80027d4:	08007e9c 	.word	0x08007e9c
 80027d8:	66666667 	.word	0x66666667
 80027dc:	08007f38 	.word	0x08007f38
 80027e0:	08007e74 	.word	0x08007e74
 80027e4:	200000dc 	.word	0x200000dc

080027e8 <TransmitSafetyStatusA>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status A register
 */
void TransmitSafetyStatusA(void) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b098      	sub	sp, #96	; 0x60
 80027ec:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status A register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusA[1] = {0};
 80027ee:	2300      	movs	r3, #0
 80027f0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x03, statusA, 1);
 80027f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027f8:	2201      	movs	r2, #1
 80027fa:	4619      	mov	r1, r3
 80027fc:	2003      	movs	r0, #3
 80027fe:	f7ff f8bd 	bl	800197c <DirectCmdRead>

	// Short Circuit Discharge
	if (statusA[0] & (1 << 7)) {
 8002802:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002806:	b25b      	sxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	da0d      	bge.n	8002828 <TransmitSafetyStatusA+0x40>
		uint8_t msg[] = "SCD fault triggered! Discharging will be disabled for a moment...\n\r";
 800280c:	4a30      	ldr	r2, [pc, #192]	; (80028d0 <TransmitSafetyStatusA+0xe8>)
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	4611      	mov	r1, r2
 8002812:	2244      	movs	r2, #68	; 0x44
 8002814:	4618      	mov	r0, r3
 8002816:	f004 fc75 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800281a:	1d39      	adds	r1, r7, #4
 800281c:	f04f 33ff 	mov.w	r3, #4294967295
 8002820:	2243      	movs	r2, #67	; 0x43
 8002822:	482c      	ldr	r0, [pc, #176]	; (80028d4 <TransmitSafetyStatusA+0xec>)
 8002824:	f003 fef8 	bl	8006618 <HAL_UART_Transmit>
	}
	// Overcurrent in Discharge 1st Tier
	if (statusA[0] & (1 << 5)) {
 8002828:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00d      	beq.n	8002850 <TransmitSafetyStatusA+0x68>
		uint8_t msg[] = "OCD1 fault triggered! Discharging will be disabled for a moment...\n\r";
 8002834:	4a28      	ldr	r2, [pc, #160]	; (80028d8 <TransmitSafetyStatusA+0xf0>)
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	4611      	mov	r1, r2
 800283a:	2245      	movs	r2, #69	; 0x45
 800283c:	4618      	mov	r0, r3
 800283e:	f004 fc61 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002842:	1d39      	adds	r1, r7, #4
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	2244      	movs	r2, #68	; 0x44
 800284a:	4822      	ldr	r0, [pc, #136]	; (80028d4 <TransmitSafetyStatusA+0xec>)
 800284c:	f003 fee4 	bl	8006618 <HAL_UART_Transmit>
	}
	// Overcurrent in Charge
	if (statusA[0] & (1 << 4)) {
 8002850:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00d      	beq.n	8002878 <TransmitSafetyStatusA+0x90>
		uint8_t msg[] = "OCC fault triggered! Charging will be disabled for a moment...\n\r";
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <TransmitSafetyStatusA+0xf4>)
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	4611      	mov	r1, r2
 8002862:	2241      	movs	r2, #65	; 0x41
 8002864:	4618      	mov	r0, r3
 8002866:	f004 fc4d 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800286a:	1d39      	adds	r1, r7, #4
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	4818      	ldr	r0, [pc, #96]	; (80028d4 <TransmitSafetyStatusA+0xec>)
 8002874:	f003 fed0 	bl	8006618 <HAL_UART_Transmit>
	}
	// Cell Overvoltage
	if (statusA[0] & (1 << 3)) {
 8002878:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <TransmitSafetyStatusA+0xb8>
		uint8_t msg[] = "COV fault triggered! Charging will be disabled until voltage drops sufficiently.\n\r";
 8002884:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <TransmitSafetyStatusA+0xf8>)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	4611      	mov	r1, r2
 800288a:	2253      	movs	r2, #83	; 0x53
 800288c:	4618      	mov	r0, r3
 800288e:	f004 fc39 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002892:	1d39      	adds	r1, r7, #4
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
 8002898:	2252      	movs	r2, #82	; 0x52
 800289a:	480e      	ldr	r0, [pc, #56]	; (80028d4 <TransmitSafetyStatusA+0xec>)
 800289c:	f003 febc 	bl	8006618 <HAL_UART_Transmit>
	}
	// Cell Undervoltage
	if (statusA[0] & (1 << 2)) {
 80028a0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00d      	beq.n	80028c8 <TransmitSafetyStatusA+0xe0>
		uint8_t msg[] = "CUV fault triggered! Discharging will be disabled until voltage rises sufficiently.\n\r";
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <TransmitSafetyStatusA+0xfc>)
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	4611      	mov	r1, r2
 80028b2:	2256      	movs	r2, #86	; 0x56
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 fc25 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80028ba:	1d39      	adds	r1, r7, #4
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295
 80028c0:	2255      	movs	r2, #85	; 0x55
 80028c2:	4804      	ldr	r0, [pc, #16]	; (80028d4 <TransmitSafetyStatusA+0xec>)
 80028c4:	f003 fea8 	bl	8006618 <HAL_UART_Transmit>
	}
}
 80028c8:	bf00      	nop
 80028ca:	3760      	adds	r7, #96	; 0x60
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	08007f44 	.word	0x08007f44
 80028d4:	200000dc 	.word	0x200000dc
 80028d8:	08007f88 	.word	0x08007f88
 80028dc:	08007fd0 	.word	0x08007fd0
 80028e0:	08008014 	.word	0x08008014
 80028e4:	08008068 	.word	0x08008068

080028e8 <TransmitSafetyStatusB>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status B register
 */
void TransmitSafetyStatusB(void) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b098      	sub	sp, #96	; 0x60
 80028ec:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status B register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusB[1] = {0};
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x05, statusB, 1);
 80028f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028f8:	2201      	movs	r2, #1
 80028fa:	4619      	mov	r1, r3
 80028fc:	2005      	movs	r0, #5
 80028fe:	f7ff f83d 	bl	800197c <DirectCmdRead>

	// FET Overtemperature
	if (statusB[0] & (1 << 7)) {
 8002902:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002906:	b25b      	sxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	da0d      	bge.n	8002928 <TransmitSafetyStatusB+0x40>
		uint8_t msg[] = "OTF fault triggered! Discharging will be disabled for a moment...\n\r";
 800290c:	4a44      	ldr	r2, [pc, #272]	; (8002a20 <TransmitSafetyStatusB+0x138>)
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	4611      	mov	r1, r2
 8002912:	2244      	movs	r2, #68	; 0x44
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fbf5 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800291a:	1d39      	adds	r1, r7, #4
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	2243      	movs	r2, #67	; 0x43
 8002922:	4840      	ldr	r0, [pc, #256]	; (8002a24 <TransmitSafetyStatusB+0x13c>)
 8002924:	f003 fe78 	bl	8006618 <HAL_UART_Transmit>
	}
	// Internal Overtemperature
	if (statusB[0] & (1 << 6)) {
 8002928:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <TransmitSafetyStatusB+0x68>
		uint8_t msg[] = "OTINT fault triggered! All AFE operations will be disabled for a moment...\n\r";
 8002934:	4a3c      	ldr	r2, [pc, #240]	; (8002a28 <TransmitSafetyStatusB+0x140>)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4611      	mov	r1, r2
 800293a:	224d      	movs	r2, #77	; 0x4d
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fbe1 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002942:	1d39      	adds	r1, r7, #4
 8002944:	f04f 33ff 	mov.w	r3, #4294967295
 8002948:	224c      	movs	r2, #76	; 0x4c
 800294a:	4836      	ldr	r0, [pc, #216]	; (8002a24 <TransmitSafetyStatusB+0x13c>)
 800294c:	f003 fe64 	bl	8006618 <HAL_UART_Transmit>
	}
	// Overtemperature in Discharge
	if (statusB[0] & (1 << 5)) {
 8002950:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <TransmitSafetyStatusB+0x90>
		uint8_t msg[] = "OTD fault triggered! Discharging will be disabled for a moment...\n\r";
 800295c:	4a33      	ldr	r2, [pc, #204]	; (8002a2c <TransmitSafetyStatusB+0x144>)
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	4611      	mov	r1, r2
 8002962:	2244      	movs	r2, #68	; 0x44
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fbcd 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800296a:	1d39      	adds	r1, r7, #4
 800296c:	f04f 33ff 	mov.w	r3, #4294967295
 8002970:	2243      	movs	r2, #67	; 0x43
 8002972:	482c      	ldr	r0, [pc, #176]	; (8002a24 <TransmitSafetyStatusB+0x13c>)
 8002974:	f003 fe50 	bl	8006618 <HAL_UART_Transmit>
	}
	// Overtemperature in Charge
	if (statusB[0] & (1 << 4)) {
 8002978:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <TransmitSafetyStatusB+0xb8>
		uint8_t msg[] = "OTC fault triggered! Charging will be disabled for a moment...\n\r";
 8002984:	4a2a      	ldr	r2, [pc, #168]	; (8002a30 <TransmitSafetyStatusB+0x148>)
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	4611      	mov	r1, r2
 800298a:	2241      	movs	r2, #65	; 0x41
 800298c:	4618      	mov	r0, r3
 800298e:	f004 fbb9 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002992:	1d39      	adds	r1, r7, #4
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	4822      	ldr	r0, [pc, #136]	; (8002a24 <TransmitSafetyStatusB+0x13c>)
 800299c:	f003 fe3c 	bl	8006618 <HAL_UART_Transmit>
	}
	// Internal Undertemperature
	if (statusB[0] & (1 << 2)) {
 80029a0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00d      	beq.n	80029c8 <TransmitSafetyStatusB+0xe0>
		uint8_t msg[] = "UTINT fault triggered! All AFE operations will be disabled for a moment...\n\r";
 80029ac:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <TransmitSafetyStatusB+0x14c>)
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	4611      	mov	r1, r2
 80029b2:	224d      	movs	r2, #77	; 0x4d
 80029b4:	4618      	mov	r0, r3
 80029b6:	f004 fba5 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80029ba:	1d39      	adds	r1, r7, #4
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	224c      	movs	r2, #76	; 0x4c
 80029c2:	4818      	ldr	r0, [pc, #96]	; (8002a24 <TransmitSafetyStatusB+0x13c>)
 80029c4:	f003 fe28 	bl	8006618 <HAL_UART_Transmit>
	}
	// Undertemperature in Discharge
	if (statusB[0] & (1 << 1)) {
 80029c8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <TransmitSafetyStatusB+0x108>
		uint8_t msg[] = "UTD fault triggered! No operational changes, but prolonged operation is not advised.\n\r";
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <TransmitSafetyStatusB+0x150>)
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	4611      	mov	r1, r2
 80029da:	2257      	movs	r2, #87	; 0x57
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 fb91 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80029e2:	1d39      	adds	r1, r7, #4
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	2256      	movs	r2, #86	; 0x56
 80029ea:	480e      	ldr	r0, [pc, #56]	; (8002a24 <TransmitSafetyStatusB+0x13c>)
 80029ec:	f003 fe14 	bl	8006618 <HAL_UART_Transmit>
	}
	// Undertemperature in Charge
	if (statusB[0] & 0x01) {
 80029f0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <TransmitSafetyStatusB+0x130>
		uint8_t msg[] = "UTC fault triggered! No operational changes, but prolonged operation is not advised.\n\r";
 80029fc:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <TransmitSafetyStatusB+0x154>)
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	4611      	mov	r1, r2
 8002a02:	2257      	movs	r2, #87	; 0x57
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 fb7d 	bl	8007104 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002a0a:	1d39      	adds	r1, r7, #4
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a10:	2256      	movs	r2, #86	; 0x56
 8002a12:	4804      	ldr	r0, [pc, #16]	; (8002a24 <TransmitSafetyStatusB+0x13c>)
 8002a14:	f003 fe00 	bl	8006618 <HAL_UART_Transmit>
	}
}
 8002a18:	bf00      	nop
 8002a1a:	3760      	adds	r7, #96	; 0x60
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	080080c0 	.word	0x080080c0
 8002a24:	200000dc 	.word	0x200000dc
 8002a28:	08008104 	.word	0x08008104
 8002a2c:	08008154 	.word	0x08008154
 8002a30:	08008198 	.word	0x08008198
 8002a34:	080081dc 	.word	0x080081dc
 8002a38:	0800822c 	.word	0x0800822c
 8002a3c:	08008284 	.word	0x08008284

08002a40 <T4_Acquire>:

/**
 * Measures the thermistor connected to the STM32's ADC and converts the reading to a temperature
 * @return Temperature of the thermistor in degrees Celsius
 */
int16_t T4_Acquire(void) {
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
    float T4_volt = 0.0;
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
    float T4_res = 0.0;
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
    float T4_temp = 0.0;
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	607b      	str	r3, [r7, #4]
    int16_t T4 = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	82fb      	strh	r3, [r7, #22]

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8002a60:	485f      	ldr	r0, [pc, #380]	; (8002be0 <T4_Acquire+0x1a0>)
 8002a62:	f000 feb1 	bl	80037c8 <HAL_ADC_Start>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <T4_Acquire+0x30>
        // Start error
        Error_Handler();
 8002a6c:	f000 f8be 	bl	8002bec <Error_Handler>
    }

    // Poll for end of conversion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	485a      	ldr	r0, [pc, #360]	; (8002be0 <T4_Acquire+0x1a0>)
 8002a76:	f000 ff95 	bl	80039a4 <HAL_ADC_PollForConversion>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 808a 	bne.w	8002b96 <T4_Acquire+0x156>
        // Read the ADC conversion result (12-bit resolution)
        adcValue = HAL_ADC_GetValue(&hadc1);
 8002a82:	4857      	ldr	r0, [pc, #348]	; (8002be0 <T4_Acquire+0x1a0>)
 8002a84:	f001 f866 	bl	8003b54 <HAL_ADC_GetValue>
 8002a88:	6138      	str	r0, [r7, #16]

        // Convert ADC value to voltage (divide by max. ADC counts, multiply by VREF (3.3V))
        T4_volt = ((float)adcValue / 4095.0) * V_REF;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a94:	ee17 0a90 	vmov	r0, s15
 8002a98:	f7fd fd56 	bl	8000548 <__aeabi_f2d>
 8002a9c:	a342      	add	r3, pc, #264	; (adr r3, 8002ba8 <T4_Acquire+0x168>)
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f7fd fed3 	bl	800084c <__aeabi_ddiv>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	a340      	add	r3, pc, #256	; (adr r3, 8002bb0 <T4_Acquire+0x170>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fda0 	bl	80005f8 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f7fe f872 	bl	8000ba8 <__aeabi_d2f>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]
        // Calculate thermistor resistance based on voltage (voltage divider rearranged)
        T4_res = T4_PU_R * (T4_volt / (T4_PU_V - T4_volt));
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7fd fd3d 	bl	8000548 <__aeabi_f2d>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	460d      	mov	r5, r1
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7fd fd38 	bl	8000548 <__aeabi_f2d>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	a136      	add	r1, pc, #216	; (adr r1, 8002bb8 <T4_Acquire+0x178>)
 8002ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ae2:	f7fd fbd1 	bl	8000288 <__aeabi_dsub>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f7fd fead 	bl	800084c <__aeabi_ddiv>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	a331      	add	r3, pc, #196	; (adr r3, 8002bc0 <T4_Acquire+0x180>)
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f7fd fd7a 	bl	80005f8 <__aeabi_dmul>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fe f84c 	bl	8000ba8 <__aeabi_d2f>
 8002b10:	4603      	mov	r3, r0
 8002b12:	60bb      	str	r3, [r7, #8]
        // Using thermistor's beta value, calculate the temperature
        T4_temp = 1.0 / ((1.0 / 298.15) + (log(T4_res / T4_R0)) / T4_BETA);
 8002b14:	68b8      	ldr	r0, [r7, #8]
 8002b16:	f7fd fd17 	bl	8000548 <__aeabi_f2d>
 8002b1a:	a32b      	add	r3, pc, #172	; (adr r3, 8002bc8 <T4_Acquire+0x188>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fe94 	bl	800084c <__aeabi_ddiv>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	ec43 2b17 	vmov	d7, r2, r3
 8002b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b30:	eef0 0a67 	vmov.f32	s1, s15
 8002b34:	f004 ff38 	bl	80079a8 <log>
 8002b38:	ec51 0b10 	vmov	r0, r1, d0
 8002b3c:	a324      	add	r3, pc, #144	; (adr r3, 8002bd0 <T4_Acquire+0x190>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fe83 	bl	800084c <__aeabi_ddiv>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	a322      	add	r3, pc, #136	; (adr r3, 8002bd8 <T4_Acquire+0x198>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd fb9a 	bl	800028c <__adddf3>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	f04f 0000 	mov.w	r0, #0
 8002b60:	4920      	ldr	r1, [pc, #128]	; (8002be4 <T4_Acquire+0x1a4>)
 8002b62:	f7fd fe73 	bl	800084c <__aeabi_ddiv>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fe f81b 	bl	8000ba8 <__aeabi_d2f>
 8002b72:	4603      	mov	r3, r0
 8002b74:	607b      	str	r3, [r7, #4]
        // Convert value in Kelvin to 16-bit integer like the other temperature measurements (units of 0.1K)
        T4 = (int16_t)(T4_temp * 10.0);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd fce6 	bl	8000548 <__aeabi_f2d>
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <T4_Acquire+0x1a8>)
 8002b82:	f7fd fd39 	bl	80005f8 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fd ffe3 	bl	8000b58 <__aeabi_d2iz>
 8002b92:	4603      	mov	r3, r0
 8002b94:	82fb      	strh	r3, [r7, #22]
    }

    // Stop the ADC conversion
    HAL_ADC_Stop(&hadc1);
 8002b96:	4812      	ldr	r0, [pc, #72]	; (8002be0 <T4_Acquire+0x1a0>)
 8002b98:	f000 fed0 	bl	800393c <HAL_ADC_Stop>

    return T4;
 8002b9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	40affe00 	.word	0x40affe00
 8002bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bb4:	4000624d 	.word	0x4000624d
 8002bb8:	66666666 	.word	0x66666666
 8002bbc:	400a6666 	.word	0x400a6666
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	40d16200 	.word	0x40d16200
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	40c38800 	.word	0x40c38800
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	40aad600 	.word	0x40aad600
 8002bd8:	dcb5db83 	.word	0xdcb5db83
 8002bdc:	3f6b79e1 	.word	0x3f6b79e1
 8002be0:	20000164 	.word	0x20000164
 8002be4:	3ff00000 	.word	0x3ff00000
 8002be8:	40240000 	.word	0x40240000

08002bec <Error_Handler>:

/**
 * Error handler if a UART transmission error occurs
 * TODO: Implement this
 */
void Error_Handler(void) {
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
    // Stay in an infinite loop to allow for debugging
    while (1);
 8002bf0:	e7fe      	b.n	8002bf0 <Error_Handler+0x4>
	...

08002bf4 <HAL_GPIO_EXTI_Callback>:

/**
 * Callback function for handling an interrupt from a GPIO pin
 * @param GPIO_Pin The GPIO pin number where an interrupt was received
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
	uint8_t msg[] = "Interrupt! ";
 8002bfe:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002c00:	f107 030c 	add.w	r3, r7, #12
 8002c04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002c0a:	f107 010c 	add.w	r1, r7, #12
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	220b      	movs	r2, #11
 8002c14:	4807      	ldr	r0, [pc, #28]	; (8002c34 <HAL_GPIO_EXTI_Callback+0x40>)
 8002c16:	f003 fcff 	bl	8006618 <HAL_UART_Transmit>

	switch (GPIO_Pin) {
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d102      	bne.n	8002c26 <HAL_GPIO_EXTI_Callback+0x32>
	case GPIO_PIN_4:
		logAlertsFlag = true;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
	}
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	080082f0 	.word	0x080082f0
 8002c34:	200000dc 	.word	0x200000dc
 8002c38:	200001c9 	.word	0x200001c9

08002c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <HAL_MspInit+0x44>)
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <HAL_MspInit+0x44>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_MspInit+0x44>)
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <HAL_MspInit+0x44>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <HAL_MspInit+0x44>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6593      	str	r3, [r2, #88]	; 0x58
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_MspInit+0x44>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000

08002c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <HAL_ADC_MspInit+0x74>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d124      	bne.n	8002cf0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_ADC_MspInit+0x78>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_ADC_MspInit+0x78>)
 8002cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_ADC_MspInit+0x78>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <HAL_ADC_MspInit+0x78>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	4a0e      	ldr	r2, [pc, #56]	; (8002cfc <HAL_ADC_MspInit+0x78>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <HAL_ADC_MspInit+0x78>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002cda:	230b      	movs	r3, #11
 8002cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cec:	f001 fdf0 	bl	80048d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cf0:	bf00      	nop
 8002cf2:	3728      	adds	r7, #40	; 0x28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	50040000 	.word	0x50040000
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <HAL_SPI_MspInit+0x7c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d128      	bne.n	8002d74 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_SPI_MspInit+0x80>)
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <HAL_SPI_MspInit+0x80>)
 8002d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_SPI_MspInit+0x80>)
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_SPI_MspInit+0x80>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <HAL_SPI_MspInit+0x80>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_SPI_MspInit+0x80>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d52:	23e0      	movs	r3, #224	; 0xe0
 8002d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d62:	2305      	movs	r3, #5
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d70:	f001 fdae 	bl	80048d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d74:	bf00      	nop
 8002d76:	3728      	adds	r7, #40	; 0x28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40013000 	.word	0x40013000
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b096      	sub	sp, #88	; 0x58
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d9c:	f107 0310 	add.w	r3, r7, #16
 8002da0:	2234      	movs	r2, #52	; 0x34
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 f965 	bl	8007074 <memset>
  if(huart->Instance==USART1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_UART_MspInit+0xa4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d135      	bne.n	8002e20 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dbc:	f107 0310 	add.w	r3, r7, #16
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fe2b 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002dcc:	f7ff ff0e 	bl	8002bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_UART_MspInit+0xa8>)
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd4:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <HAL_UART_MspInit+0xa8>)
 8002dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dda:	6613      	str	r3, [r2, #96]	; 0x60
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <HAL_UART_MspInit+0xa8>)
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_UART_MspInit+0xa8>)
 8002dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dec:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <HAL_UART_MspInit+0xa8>)
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_UART_MspInit+0xa8>)
 8002df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e00:	23c0      	movs	r3, #192	; 0xc0
 8002e02:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e10:	2307      	movs	r3, #7
 8002e12:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <HAL_UART_MspInit+0xac>)
 8002e1c:	f001 fd58 	bl	80048d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e20:	bf00      	nop
 8002e22:	3758      	adds	r7, #88	; 0x58
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40013800 	.word	0x40013800
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	48000400 	.word	0x48000400

08002e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e38:	e7fe      	b.n	8002e38 <NMI_Handler+0x4>

08002e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <HardFault_Handler+0x4>

08002e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <MemManage_Handler+0x4>

08002e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e4a:	e7fe      	b.n	8002e4a <BusFault_Handler+0x4>

08002e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <UsageFault_Handler+0x4>

08002e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e80:	f000 f8d0 	bl	8003024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f001 fec3 	bl	8004c18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <_sbrk+0x5c>)
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <_sbrk+0x60>)
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <_sbrk+0x64>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <_sbrk+0x64>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <_sbrk+0x68>)
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <_sbrk+0x64>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d207      	bcs.n	8002ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec8:	f004 f8f0 	bl	80070ac <__errno>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	220c      	movs	r2, #12
 8002ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	e009      	b.n	8002eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <_sbrk+0x64>)
 8002ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eea:	68fb      	ldr	r3, [r7, #12]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	2000a000 	.word	0x2000a000
 8002ef8:	00000400 	.word	0x00000400
 8002efc:	200001cc 	.word	0x200001cc
 8002f00:	20000320 	.word	0x20000320

08002f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <SystemInit+0x20>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <SystemInit+0x20>)
 8002f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f2c:	f7ff ffea 	bl	8002f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f30:	480c      	ldr	r0, [pc, #48]	; (8002f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f32:	490d      	ldr	r1, [pc, #52]	; (8002f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f34:	4a0d      	ldr	r2, [pc, #52]	; (8002f6c <LoopForever+0xe>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f48:	4c0a      	ldr	r4, [pc, #40]	; (8002f74 <LoopForever+0x16>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f56:	f004 f8af 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f5a:	f7fe f871 	bl	8001040 <main>

08002f5e <LoopForever>:

LoopForever:
    b LoopForever
 8002f5e:	e7fe      	b.n	8002f5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f60:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002f6c:	08008388 	.word	0x08008388
  ldr r2, =_sbss
 8002f70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002f74:	2000031c 	.word	0x2000031c

08002f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f78:	e7fe      	b.n	8002f78 <ADC1_2_IRQHandler>

08002f7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f001 fc61 	bl	800484c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f8a:	200f      	movs	r0, #15
 8002f8c:	f000 f80e 	bl	8002fac <HAL_InitTick>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	71fb      	strb	r3, [r7, #7]
 8002f9a:	e001      	b.n	8002fa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f9c:	f7ff fe4e 	bl	8002c3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fb8:	4b17      	ldr	r3, [pc, #92]	; (8003018 <HAL_InitTick+0x6c>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d023      	beq.n	8003008 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_InitTick+0x70>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_InitTick+0x6c>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 fc6d 	bl	80048b6 <HAL_SYSTICK_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d809      	bhi.n	8002ffc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f001 fc37 	bl	8004862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ff4:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <HAL_InitTick+0x74>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e007      	b.n	800300c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	e004      	b.n	800300c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e001      	b.n	800300c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000008 	.word	0x20000008
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x20>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_IncTick+0x24>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HAL_IncTick+0x24>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000008 	.word	0x20000008
 8003048:	200001d0 	.word	0x200001d0

0800304c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return uwTick;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_GetTick+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	200001d0 	.word	0x200001d0

08003064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff ffee 	bl	800304c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d005      	beq.n	800308a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_Delay+0x44>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800308a:	bf00      	nop
 800308c:	f7ff ffde 	bl	800304c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8f7      	bhi.n	800308c <HAL_Delay+0x28>
  {
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000008 	.word	0x20000008

080030ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	609a      	str	r2, [r3, #8]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3360      	adds	r3, #96	; 0x60
 8003126:	461a      	mov	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <LL_ADC_SetOffset+0x44>)
 8003136:	4013      	ands	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	4313      	orrs	r3, r2
 8003144:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	03fff000 	.word	0x03fff000

0800315c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3360      	adds	r3, #96	; 0x60
 800316a:	461a      	mov	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3360      	adds	r3, #96	; 0x60
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	615a      	str	r2, [r3, #20]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3330      	adds	r3, #48	; 0x30
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	4413      	add	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	211f      	movs	r1, #31
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	401a      	ands	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	0e9b      	lsrs	r3, r3, #26
 8003242:	f003 011f 	and.w	r1, r3, #31
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	431a      	orrs	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003262:	b480      	push	{r7}
 8003264:	b087      	sub	sp, #28
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3314      	adds	r3, #20
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	0e5b      	lsrs	r3, r3, #25
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	0d1b      	lsrs	r3, r3, #20
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2107      	movs	r1, #7
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	401a      	ands	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	0d1b      	lsrs	r3, r3, #20
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	431a      	orrs	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0318 	and.w	r3, r3, #24
 80032da:	4908      	ldr	r1, [pc, #32]	; (80032fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80032dc:	40d9      	lsrs	r1, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	400b      	ands	r3, r1
 80032e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	0007ffff 	.word	0x0007ffff

08003300 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 031f 	and.w	r3, r3, #31
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6093      	str	r3, [r2, #8]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800336c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003370:	d101      	bne.n	8003376 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003398:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c0:	d101      	bne.n	80033c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800340c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003410:	f043 0202 	orr.w	r2, r3, #2
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <LL_ADC_IsEnabled+0x18>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <LL_ADC_IsEnabled+0x1a>
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d101      	bne.n	8003462 <LL_ADC_IsDisableOngoing+0x18>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <LL_ADC_IsDisableOngoing+0x1a>
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034ac:	f043 0210 	orr.w	r2, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d101      	bne.n	80034d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034fa:	f043 0220 	orr.w	r2, r3, #32
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b08      	cmp	r3, #8
 8003520:	d101      	bne.n	8003526 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e12b      	b.n	80037a6 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fb91 	bl	8002c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fef1 	bl	800335c <LL_ADC_IsDeepPowerDownEnabled>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fed7 	bl	8003338 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff0c 	bl	80033ac <LL_ADC_IsInternalRegulatorEnabled>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d115      	bne.n	80035c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fef0 	bl	8003384 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035a4:	4b82      	ldr	r3, [pc, #520]	; (80037b0 <HAL_ADC_Init+0x27c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	099b      	lsrs	r3, r3, #6
 80035aa:	4a82      	ldr	r2, [pc, #520]	; (80037b4 <HAL_ADC_Init+0x280>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	099b      	lsrs	r3, r3, #6
 80035b2:	3301      	adds	r3, #1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035b8:	e002      	b.n	80035c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3b01      	subs	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f9      	bne.n	80035ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff feee 	bl	80033ac <LL_ADC_IsInternalRegulatorEnabled>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10d      	bne.n	80035f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f043 0210 	orr.w	r2, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff62 	bl	80034c0 <LL_ADC_REG_IsConversionOngoing>
 80035fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 80c4 	bne.w	8003794 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 80c0 	bne.w	8003794 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800361c:	f043 0202 	orr.w	r2, r3, #2
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fefb 	bl	8003424 <LL_ADC_IsEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d110      	bne.n	8003656 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003634:	4860      	ldr	r0, [pc, #384]	; (80037b8 <HAL_ADC_Init+0x284>)
 8003636:	f7ff fef5 	bl	8003424 <LL_ADC_IsEnabled>
 800363a:	4604      	mov	r4, r0
 800363c:	485f      	ldr	r0, [pc, #380]	; (80037bc <HAL_ADC_Init+0x288>)
 800363e:	f7ff fef1 	bl	8003424 <LL_ADC_IsEnabled>
 8003642:	4603      	mov	r3, r0
 8003644:	4323      	orrs	r3, r4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d105      	bne.n	8003656 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4619      	mov	r1, r3
 8003650:	485b      	ldr	r0, [pc, #364]	; (80037c0 <HAL_ADC_Init+0x28c>)
 8003652:	f7ff fd2b 	bl	80030ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7e5b      	ldrb	r3, [r3, #25]
 800365a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003660:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003666:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800366c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003674:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	3b01      	subs	r3, #1
 800368a:	045b      	lsls	r3, r3, #17
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_ADC_Init+0x290>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	69b9      	ldr	r1, [r7, #24]
 80036be:	430b      	orrs	r3, r1
 80036c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff ff21 	bl	800350e <LL_ADC_INJ_IsConversionOngoing>
 80036cc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d13d      	bne.n	8003750 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d13a      	bne.n	8003750 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036de:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036e6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f6:	f023 0302 	bic.w	r3, r3, #2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	69b9      	ldr	r1, [r7, #24]
 8003700:	430b      	orrs	r3, r1
 8003702:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800370a:	2b01      	cmp	r3, #1
 800370c:	d118      	bne.n	8003740 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003718:	f023 0304 	bic.w	r3, r3, #4
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003724:	4311      	orrs	r1, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003730:	430a      	orrs	r2, r1
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	611a      	str	r2, [r3, #16]
 800373e:	e007      	b.n	8003750 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d10c      	bne.n	8003772 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f023 010f 	bic.w	r1, r3, #15
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	1e5a      	subs	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
 8003770:	e007      	b.n	8003782 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 020f 	bic.w	r2, r2, #15
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
 8003792:	e007      	b.n	80037a4 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	f043 0210 	orr.w	r2, r3, #16
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd90      	pop	{r4, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000000 	.word	0x20000000
 80037b4:	053e2d63 	.word	0x053e2d63
 80037b8:	50040000 	.word	0x50040000
 80037bc:	50040100 	.word	0x50040100
 80037c0:	50040300 	.word	0x50040300
 80037c4:	fff0c007 	.word	0xfff0c007

080037c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037d0:	4857      	ldr	r0, [pc, #348]	; (8003930 <HAL_ADC_Start+0x168>)
 80037d2:	f7ff fd95 	bl	8003300 <LL_ADC_GetMultimode>
 80037d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fe6f 	bl	80034c0 <LL_ADC_REG_IsConversionOngoing>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f040 809c 	bne.w	8003922 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_Start+0x30>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e097      	b.n	8003928 <HAL_ADC_Start+0x160>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fe6d 	bl	80044e0 <ADC_Enable>
 8003806:	4603      	mov	r3, r0
 8003808:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f040 8083 	bne.w	8003918 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a42      	ldr	r2, [pc, #264]	; (8003934 <HAL_ADC_Start+0x16c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d002      	beq.n	8003836 <HAL_ADC_Start+0x6e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	e000      	b.n	8003838 <HAL_ADC_Start+0x70>
 8003836:	4b40      	ldr	r3, [pc, #256]	; (8003938 <HAL_ADC_Start+0x170>)
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	4293      	cmp	r3, r2
 800383e:	d002      	beq.n	8003846 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d105      	bne.n	8003852 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385e:	d106      	bne.n	800386e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	f023 0206 	bic.w	r2, r3, #6
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	659a      	str	r2, [r3, #88]	; 0x58
 800386c:	e002      	b.n	8003874 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	221c      	movs	r2, #28
 800387a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <HAL_ADC_Start+0x16c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d002      	beq.n	8003894 <HAL_ADC_Start+0xcc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	e000      	b.n	8003896 <HAL_ADC_Start+0xce>
 8003894:	4b28      	ldr	r3, [pc, #160]	; (8003938 <HAL_ADC_Start+0x170>)
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	4293      	cmp	r3, r2
 800389c:	d008      	beq.n	80038b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d002      	beq.n	80038b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	d114      	bne.n	80038da <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fdcc 	bl	8003470 <LL_ADC_REG_StartConversion>
 80038d8:	e025      	b.n	8003926 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <HAL_ADC_Start+0x16c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d002      	beq.n	80038f6 <HAL_ADC_Start+0x12e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	e000      	b.n	80038f8 <HAL_ADC_Start+0x130>
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_ADC_Start+0x170>)
 80038f8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00f      	beq.n	8003926 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800390e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
 8003916:	e006      	b.n	8003926 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003920:	e001      	b.n	8003926 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003922:	2302      	movs	r3, #2
 8003924:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003926:	7dfb      	ldrb	r3, [r7, #23]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	50040300 	.word	0x50040300
 8003934:	50040100 	.word	0x50040100
 8003938:	50040000 	.word	0x50040000

0800393c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_ADC_Stop+0x16>
 800394e:	2302      	movs	r3, #2
 8003950:	e023      	b.n	800399a <HAL_ADC_Stop+0x5e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800395a:	2103      	movs	r1, #3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fd03 	bl	8004368 <ADC_ConversionStop>
 8003962:	4603      	mov	r3, r0
 8003964:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d111      	bne.n	8003990 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fe3d 	bl	80045ec <ADC_Disable>
 8003972:	4603      	mov	r3, r0
 8003974:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	f043 0201 	orr.w	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ae:	4866      	ldr	r0, [pc, #408]	; (8003b48 <HAL_ADC_PollForConversion+0x1a4>)
 80039b0:	f7ff fca6 	bl	8003300 <LL_ADC_GetMultimode>
 80039b4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d102      	bne.n	80039c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80039be:	2308      	movs	r3, #8
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e02a      	b.n	8003a1a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b05      	cmp	r3, #5
 80039ce:	d002      	beq.n	80039d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d111      	bne.n	80039fa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0a4      	b.n	8003b3e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80039f4:	2304      	movs	r3, #4
 80039f6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80039f8:	e00f      	b.n	8003a1a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80039fa:	4853      	ldr	r0, [pc, #332]	; (8003b48 <HAL_ADC_PollForConversion+0x1a4>)
 80039fc:	f7ff fc8e 	bl	800331c <LL_ADC_GetMultiDMATransfer>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	f043 0220 	orr.w	r2, r3, #32
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e093      	b.n	8003b3e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a16:	2304      	movs	r3, #4
 8003a18:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a1a:	f7ff fb17 	bl	800304c <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a20:	e021      	b.n	8003a66 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d01d      	beq.n	8003a66 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a2a:	f7ff fb0f 	bl	800304c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <HAL_ADC_PollForConversion+0x9c>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d112      	bne.n	8003a66 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f043 0204 	orr.w	r2, r3, #4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e06b      	b.n	8003b3e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0d6      	beq.n	8003a22 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fbad 	bl	80031e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01c      	beq.n	8003aca <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	7e5b      	ldrb	r3, [r3, #25]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d118      	bne.n	8003aca <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d111      	bne.n	8003aca <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d105      	bne.n	8003aca <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1f      	ldr	r2, [pc, #124]	; (8003b4c <HAL_ADC_PollForConversion+0x1a8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d002      	beq.n	8003ada <HAL_ADC_PollForConversion+0x136>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e000      	b.n	8003adc <HAL_ADC_PollForConversion+0x138>
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_ADC_PollForConversion+0x1ac>)
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d008      	beq.n	8003af6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d002      	beq.n	8003af6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b09      	cmp	r3, #9
 8003af4:	d104      	bne.n	8003b00 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e00c      	b.n	8003b1a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <HAL_ADC_PollForConversion+0x1a8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d002      	beq.n	8003b10 <HAL_ADC_PollForConversion+0x16c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	e000      	b.n	8003b12 <HAL_ADC_PollForConversion+0x16e>
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_ADC_PollForConversion+0x1ac>)
 8003b12:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d104      	bne.n	8003b2a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2208      	movs	r2, #8
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e008      	b.n	8003b3c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	220c      	movs	r2, #12
 8003b3a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	50040300 	.word	0x50040300
 8003b4c:	50040100 	.word	0x50040100
 8003b50:	50040000 	.word	0x50040000

08003b54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b0b6      	sub	sp, #216	; 0xd8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x22>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e3d5      	b.n	800433e <HAL_ADC_ConfigChannel+0x7ce>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fc8e 	bl	80034c0 <LL_ADC_REG_IsConversionOngoing>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 83ba 	bne.w	8004320 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b05      	cmp	r3, #5
 8003bba:	d824      	bhi.n	8003c06 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	3b02      	subs	r3, #2
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d81b      	bhi.n	8003bfe <HAL_ADC_ConfigChannel+0x8e>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_ADC_ConfigChannel+0x5c>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003be5 	.word	0x08003be5
 8003bd4:	08003bed 	.word	0x08003bed
 8003bd8:	08003bf5 	.word	0x08003bf5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003bdc:	230c      	movs	r3, #12
 8003bde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003be2:	e010      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003be4:	2312      	movs	r3, #18
 8003be6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003bea:	e00c      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003bec:	2318      	movs	r3, #24
 8003bee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003bf2:	e008      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003bfc:	e003      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003bfe:	2306      	movs	r3, #6
 8003c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c04:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003c14:	f7ff faf9 	bl	800320a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fc4f 	bl	80034c0 <LL_ADC_REG_IsConversionOngoing>
 8003c22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fc6f 	bl	800350e <LL_ADC_INJ_IsConversionOngoing>
 8003c30:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f040 81bf 	bne.w	8003fbc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 81ba 	bne.w	8003fbc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c50:	d10f      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f7ff fb00 	bl	8003262 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff faa7 	bl	80031be <LL_ADC_SetSamplingTimeCommonConfig>
 8003c70:	e00e      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f7ff faef 	bl	8003262 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fa97 	bl	80031be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	08db      	lsrs	r3, r3, #3
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6919      	ldr	r1, [r3, #16]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cc2:	f7ff fa27 	bl	8003114 <LL_ADC_SetOffset>
 8003cc6:	e179      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fa44 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x184>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fa39 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003cea:	4603      	mov	r3, r0
 8003cec:	0e9b      	lsrs	r3, r3, #26
 8003cee:	f003 021f 	and.w	r2, r3, #31
 8003cf2:	e01e      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x1c2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fa2e 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003d22:	2320      	movs	r3, #32
 8003d24:	e004      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003d26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d105      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x1da>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	0e9b      	lsrs	r3, r3, #26
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	e018      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x20c>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003d66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003d6e:	2320      	movs	r3, #32
 8003d70:	e004      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003d72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d106      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	2100      	movs	r1, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff f9fd 	bl	8003188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff f9e1 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x24a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff f9d6 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003db0:	4603      	mov	r3, r0
 8003db2:	0e9b      	lsrs	r3, r3, #26
 8003db4:	f003 021f 	and.w	r2, r3, #31
 8003db8:	e01e      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x288>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff f9cb 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dd0:	fa93 f3a3 	rbit	r3, r3
 8003dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003de0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003de8:	2320      	movs	r3, #32
 8003dea:	e004      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003dec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003df0:	fab3 f383 	clz	r3, r3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x2a0>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	0e9b      	lsrs	r3, r3, #26
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	e018      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x2d2>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003e34:	2320      	movs	r3, #32
 8003e36:	e004      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d106      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f99a 	bl	8003188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2102      	movs	r1, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff f97e 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x310>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff f973 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003e76:	4603      	mov	r3, r0
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	f003 021f 	and.w	r2, r3, #31
 8003e7e:	e01e      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x34e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2102      	movs	r1, #2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff f968 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003eae:	2320      	movs	r3, #32
 8003eb0:	e004      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x366>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	0e9b      	lsrs	r3, r3, #26
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	e014      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x390>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003eea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	e004      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003ef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d106      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff f93b 	bl	8003188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2103      	movs	r1, #3
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff f91f 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x3ce>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2103      	movs	r1, #3
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff f914 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003f34:	4603      	mov	r3, r0
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	f003 021f 	and.w	r2, r3, #31
 8003f3c:	e017      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x3fe>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2103      	movs	r1, #3
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff f909 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f58:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003f60:	2320      	movs	r3, #32
 8003f62:	e003      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d105      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x416>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	0e9b      	lsrs	r3, r3, #26
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	e011      	b.n	8003faa <HAL_ADC_ConfigChannel+0x43a>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f96:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	e003      	b.n	8003faa <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d106      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2103      	movs	r1, #3
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff f8e6 	bl	8003188 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fa2f 	bl	8003424 <LL_ADC_IsEnabled>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 813f 	bne.w	800424c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6819      	ldr	r1, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7ff f96c 	bl	80032b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a8e      	ldr	r2, [pc, #568]	; (8004220 <HAL_ADC_ConfigChannel+0x6b0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	f040 8130 	bne.w	800424c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10b      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x4a4>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	3301      	adds	r3, #1
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2b09      	cmp	r3, #9
 800400a:	bf94      	ite	ls
 800400c:	2301      	movls	r3, #1
 800400e:	2300      	movhi	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e019      	b.n	8004048 <HAL_ADC_ConfigChannel+0x4d8>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004024:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800402c:	2320      	movs	r3, #32
 800402e:	e003      	b.n	8004038 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	3301      	adds	r3, #1
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2b09      	cmp	r3, #9
 8004040:	bf94      	ite	ls
 8004042:	2301      	movls	r3, #1
 8004044:	2300      	movhi	r3, #0
 8004046:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004048:	2b00      	cmp	r3, #0
 800404a:	d079      	beq.n	8004140 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004054:	2b00      	cmp	r3, #0
 8004056:	d107      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x4f8>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	0e9b      	lsrs	r3, r3, #26
 800405e:	3301      	adds	r3, #1
 8004060:	069b      	lsls	r3, r3, #26
 8004062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004066:	e015      	b.n	8004094 <HAL_ADC_ConfigChannel+0x524>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004070:	fa93 f3a3 	rbit	r3, r3
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004078:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800407a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004080:	2320      	movs	r3, #32
 8004082:	e003      	b.n	800408c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	3301      	adds	r3, #1
 800408e:	069b      	lsls	r3, r3, #26
 8004090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x544>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	3301      	adds	r3, #1
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f303 	lsl.w	r3, r1, r3
 80040b2:	e017      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x574>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80040c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80040cc:	2320      	movs	r3, #32
 80040ce:	e003      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80040d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	3301      	adds	r3, #1
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	ea42 0103 	orr.w	r1, r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <HAL_ADC_ConfigChannel+0x59a>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	0e9b      	lsrs	r3, r3, #26
 80040fa:	3301      	adds	r3, #1
 80040fc:	f003 021f 	and.w	r2, r3, #31
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	051b      	lsls	r3, r3, #20
 8004108:	e018      	b.n	800413c <HAL_ADC_ConfigChannel+0x5cc>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004122:	2320      	movs	r3, #32
 8004124:	e003      	b.n	800412e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	3301      	adds	r3, #1
 8004130:	f003 021f 	and.w	r2, r3, #31
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800413c:	430b      	orrs	r3, r1
 800413e:	e080      	b.n	8004242 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004148:	2b00      	cmp	r3, #0
 800414a:	d107      	bne.n	800415c <HAL_ADC_ConfigChannel+0x5ec>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0e9b      	lsrs	r3, r3, #26
 8004152:	3301      	adds	r3, #1
 8004154:	069b      	lsls	r3, r3, #26
 8004156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415a:	e015      	b.n	8004188 <HAL_ADC_ConfigChannel+0x618>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e003      	b.n	8004180 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	3301      	adds	r3, #1
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x638>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0e9b      	lsrs	r3, r3, #26
 800419a:	3301      	adds	r3, #1
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	e017      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x668>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	61bb      	str	r3, [r7, #24]
  return result;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80041c0:	2320      	movs	r3, #32
 80041c2:	e003      	b.n	80041cc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	2101      	movs	r1, #1
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10d      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x694>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0e9b      	lsrs	r3, r3, #26
 80041ee:	3301      	adds	r3, #1
 80041f0:	f003 021f 	and.w	r2, r3, #31
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	3b1e      	subs	r3, #30
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004202:	e01d      	b.n	8004240 <HAL_ADC_ConfigChannel+0x6d0>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	fa93 f3a3 	rbit	r3, r3
 8004210:	60fb      	str	r3, [r7, #12]
  return result;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800421c:	2320      	movs	r3, #32
 800421e:	e005      	b.n	800422c <HAL_ADC_ConfigChannel+0x6bc>
 8004220:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	3b1e      	subs	r3, #30
 800423a:	051b      	lsls	r3, r3, #20
 800423c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004240:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004246:	4619      	mov	r1, r3
 8004248:	f7ff f80b 	bl	8003262 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <HAL_ADC_ConfigChannel+0x7d8>)
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d06c      	beq.n	8004332 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004258:	483c      	ldr	r0, [pc, #240]	; (800434c <HAL_ADC_ConfigChannel+0x7dc>)
 800425a:	f7fe ff4d 	bl	80030f8 <LL_ADC_GetCommonPathInternalCh>
 800425e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3a      	ldr	r2, [pc, #232]	; (8004350 <HAL_ADC_ConfigChannel+0x7e0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d127      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800426c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d121      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a35      	ldr	r2, [pc, #212]	; (8004354 <HAL_ADC_ConfigChannel+0x7e4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d157      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004286:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800428a:	4619      	mov	r1, r3
 800428c:	482f      	ldr	r0, [pc, #188]	; (800434c <HAL_ADC_ConfigChannel+0x7dc>)
 800428e:	f7fe ff20 	bl	80030d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004292:	4b31      	ldr	r3, [pc, #196]	; (8004358 <HAL_ADC_ConfigChannel+0x7e8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	4a30      	ldr	r2, [pc, #192]	; (800435c <HAL_ADC_ConfigChannel+0x7ec>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	099b      	lsrs	r3, r3, #6
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80042ac:	e002      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f9      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ba:	e03a      	b.n	8004332 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a27      	ldr	r2, [pc, #156]	; (8004360 <HAL_ADC_ConfigChannel+0x7f0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d113      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10d      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <HAL_ADC_ConfigChannel+0x7e4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d12a      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e4:	4619      	mov	r1, r3
 80042e6:	4819      	ldr	r0, [pc, #100]	; (800434c <HAL_ADC_ConfigChannel+0x7dc>)
 80042e8:	f7fe fef3 	bl	80030d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042ec:	e021      	b.n	8004332 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <HAL_ADC_ConfigChannel+0x7f4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d11c      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d116      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a12      	ldr	r2, [pc, #72]	; (8004354 <HAL_ADC_ConfigChannel+0x7e4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d111      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800430e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004312:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004316:	4619      	mov	r1, r3
 8004318:	480c      	ldr	r0, [pc, #48]	; (800434c <HAL_ADC_ConfigChannel+0x7dc>)
 800431a:	f7fe feda 	bl	80030d2 <LL_ADC_SetCommonPathInternalCh>
 800431e:	e008      	b.n	8004332 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800433a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800433e:	4618      	mov	r0, r3
 8004340:	37d8      	adds	r7, #216	; 0xd8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	80080000 	.word	0x80080000
 800434c:	50040300 	.word	0x50040300
 8004350:	c7520000 	.word	0xc7520000
 8004354:	50040000 	.word	0x50040000
 8004358:	20000000 	.word	0x20000000
 800435c:	053e2d63 	.word	0x053e2d63
 8004360:	cb840000 	.word	0xcb840000
 8004364:	80000001 	.word	0x80000001

08004368 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff f89e 	bl	80034c0 <LL_ADC_REG_IsConversionOngoing>
 8004384:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff f8bf 	bl	800350e <LL_ADC_INJ_IsConversionOngoing>
 8004390:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d103      	bne.n	80043a0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 8098 	beq.w	80044d0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d02a      	beq.n	8004404 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	7e5b      	ldrb	r3, [r3, #25]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d126      	bne.n	8004404 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7e1b      	ldrb	r3, [r3, #24]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d122      	bne.n	8004404 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80043be:	2301      	movs	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043c2:	e014      	b.n	80043ee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4a45      	ldr	r2, [pc, #276]	; (80044dc <ADC_ConversionStop+0x174>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d90d      	bls.n	80043e8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	f043 0210 	orr.w	r2, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	f043 0201 	orr.w	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e074      	b.n	80044d2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d1e3      	bne.n	80043c4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2240      	movs	r2, #64	; 0x40
 8004402:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d014      	beq.n	8004434 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f856 	bl	80034c0 <LL_ADC_REG_IsConversionOngoing>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff f813 	bl	800344a <LL_ADC_IsDisableOngoing>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff f832 	bl	8003498 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d014      	beq.n	8004464 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff f865 	bl	800350e <LL_ADC_INJ_IsConversionOngoing>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fffb 	bl	800344a <LL_ADC_IsDisableOngoing>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f841 	bl	80034e6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d005      	beq.n	8004476 <ADC_ConversionStop+0x10e>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d105      	bne.n	800447c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004470:	230c      	movs	r3, #12
 8004472:	617b      	str	r3, [r7, #20]
        break;
 8004474:	e005      	b.n	8004482 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004476:	2308      	movs	r3, #8
 8004478:	617b      	str	r3, [r7, #20]
        break;
 800447a:	e002      	b.n	8004482 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800447c:	2304      	movs	r3, #4
 800447e:	617b      	str	r3, [r7, #20]
        break;
 8004480:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004482:	f7fe fde3 	bl	800304c <HAL_GetTick>
 8004486:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004488:	e01b      	b.n	80044c2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800448a:	f7fe fddf 	bl	800304c <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b05      	cmp	r3, #5
 8004496:	d914      	bls.n	80044c2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	f043 0210 	orr.w	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e007      	b.n	80044d2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1dc      	bne.n	800448a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	a33fffff 	.word	0xa33fffff

080044e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe ff97 	bl	8003424 <LL_ADC_IsEnabled>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d169      	bne.n	80045d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	4b36      	ldr	r3, [pc, #216]	; (80045dc <ADC_Enable+0xfc>)
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f043 0210 	orr.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e055      	b.n	80045d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe ff52 	bl	80033d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004530:	482b      	ldr	r0, [pc, #172]	; (80045e0 <ADC_Enable+0x100>)
 8004532:	f7fe fde1 	bl	80030f8 <LL_ADC_GetCommonPathInternalCh>
 8004536:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004540:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <ADC_Enable+0x104>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	099b      	lsrs	r3, r3, #6
 8004546:	4a28      	ldr	r2, [pc, #160]	; (80045e8 <ADC_Enable+0x108>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	099b      	lsrs	r3, r3, #6
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800455a:	e002      	b.n	8004562 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	3b01      	subs	r3, #1
 8004560:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f9      	bne.n	800455c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004568:	f7fe fd70 	bl	800304c <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800456e:	e028      	b.n	80045c2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe ff55 	bl	8003424 <LL_ADC_IsEnabled>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe ff25 	bl	80033d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800458a:	f7fe fd5f 	bl	800304c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d914      	bls.n	80045c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d00d      	beq.n	80045c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	f043 0210 	orr.w	r2, r3, #16
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e007      	b.n	80045d2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d1cf      	bne.n	8004570 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	8000003f 	.word	0x8000003f
 80045e0:	50040300 	.word	0x50040300
 80045e4:	20000000 	.word	0x20000000
 80045e8:	053e2d63 	.word	0x053e2d63

080045ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe ff26 	bl	800344a <LL_ADC_IsDisableOngoing>
 80045fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe ff0d 	bl	8003424 <LL_ADC_IsEnabled>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d047      	beq.n	80046a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d144      	bne.n	80046a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030d 	and.w	r3, r3, #13
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10c      	bne.n	800463e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe fee7 	bl	80033fc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2203      	movs	r2, #3
 8004634:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004636:	f7fe fd09 	bl	800304c <HAL_GetTick>
 800463a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800463c:	e029      	b.n	8004692 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	f043 0210 	orr.w	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e023      	b.n	80046a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800465a:	f7fe fcf7 	bl	800304c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d914      	bls.n	8004692 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f043 0210 	orr.w	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1dc      	bne.n	800465a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <__NVIC_SetPriorityGrouping>:
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <__NVIC_SetPriorityGrouping+0x44>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046c8:	4013      	ands	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046de:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <__NVIC_SetPriorityGrouping+0x44>)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	60d3      	str	r3, [r2, #12]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <__NVIC_GetPriorityGrouping>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <__NVIC_GetPriorityGrouping+0x18>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	f003 0307 	and.w	r3, r3, #7
}
 8004702:	4618      	mov	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <__NVIC_EnableIRQ>:
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800471a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471e:	2b00      	cmp	r3, #0
 8004720:	db0b      	blt.n	800473a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	f003 021f 	and.w	r2, r3, #31
 8004728:	4907      	ldr	r1, [pc, #28]	; (8004748 <__NVIC_EnableIRQ+0x38>)
 800472a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2001      	movs	r0, #1
 8004732:	fa00 f202 	lsl.w	r2, r0, r2
 8004736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	e000e100 	.word	0xe000e100

0800474c <__NVIC_SetPriority>:
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475c:	2b00      	cmp	r3, #0
 800475e:	db0a      	blt.n	8004776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	490c      	ldr	r1, [pc, #48]	; (8004798 <__NVIC_SetPriority+0x4c>)
 8004766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476a:	0112      	lsls	r2, r2, #4
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	440b      	add	r3, r1
 8004770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004774:	e00a      	b.n	800478c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4908      	ldr	r1, [pc, #32]	; (800479c <__NVIC_SetPriority+0x50>)
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	3b04      	subs	r3, #4
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	440b      	add	r3, r1
 800478a:	761a      	strb	r2, [r3, #24]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000e100 	.word	0xe000e100
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f1c3 0307 	rsb	r3, r3, #7
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	bf28      	it	cs
 80047be:	2304      	movcs	r3, #4
 80047c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d902      	bls.n	80047d0 <NVIC_EncodePriority+0x30>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3b03      	subs	r3, #3
 80047ce:	e000      	b.n	80047d2 <NVIC_EncodePriority+0x32>
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43da      	mvns	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	401a      	ands	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047e8:	f04f 31ff 	mov.w	r1, #4294967295
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	43d9      	mvns	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f8:	4313      	orrs	r3, r2
         );
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3b01      	subs	r3, #1
 8004814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004818:	d301      	bcc.n	800481e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800481a:	2301      	movs	r3, #1
 800481c:	e00f      	b.n	800483e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800481e:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <SysTick_Config+0x40>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3b01      	subs	r3, #1
 8004824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004826:	210f      	movs	r1, #15
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	f7ff ff8e 	bl	800474c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <SysTick_Config+0x40>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004836:	4b04      	ldr	r3, [pc, #16]	; (8004848 <SysTick_Config+0x40>)
 8004838:	2207      	movs	r2, #7
 800483a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	e000e010 	.word	0xe000e010

0800484c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff29 	bl	80046ac <__NVIC_SetPriorityGrouping>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	4603      	mov	r3, r0
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004874:	f7ff ff3e 	bl	80046f4 <__NVIC_GetPriorityGrouping>
 8004878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	6978      	ldr	r0, [r7, #20]
 8004880:	f7ff ff8e 	bl	80047a0 <NVIC_EncodePriority>
 8004884:	4602      	mov	r2, r0
 8004886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ff5d 	bl	800474c <__NVIC_SetPriority>
}
 8004892:	bf00      	nop
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	4603      	mov	r3, r0
 80048a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff ff31 	bl	8004710 <__NVIC_EnableIRQ>
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff ffa2 	bl	8004808 <SysTick_Config>
 80048c4:	4603      	mov	r3, r0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048de:	e14e      	b.n	8004b7e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	2101      	movs	r1, #1
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ec:	4013      	ands	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 8140 	beq.w	8004b78 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d005      	beq.n	8004910 <HAL_GPIO_Init+0x40>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d130      	bne.n	8004972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	2203      	movs	r2, #3
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004946:	2201      	movs	r2, #1
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43db      	mvns	r3, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 0201 	and.w	r2, r3, #1
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b03      	cmp	r3, #3
 800497c:	d017      	beq.n	80049ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	2203      	movs	r2, #3
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4013      	ands	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d123      	bne.n	8004a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	08da      	lsrs	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3208      	adds	r2, #8
 80049c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	220f      	movs	r2, #15
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4013      	ands	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	08da      	lsrs	r2, r3, #3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3208      	adds	r2, #8
 80049fc:	6939      	ldr	r1, [r7, #16]
 80049fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 0203 	and.w	r2, r3, #3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 809a 	beq.w	8004b78 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a44:	4b55      	ldr	r3, [pc, #340]	; (8004b9c <HAL_GPIO_Init+0x2cc>)
 8004a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a48:	4a54      	ldr	r2, [pc, #336]	; (8004b9c <HAL_GPIO_Init+0x2cc>)
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	6613      	str	r3, [r2, #96]	; 0x60
 8004a50:	4b52      	ldr	r3, [pc, #328]	; (8004b9c <HAL_GPIO_Init+0x2cc>)
 8004a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a5c:	4a50      	ldr	r2, [pc, #320]	; (8004ba0 <HAL_GPIO_Init+0x2d0>)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	089b      	lsrs	r3, r3, #2
 8004a62:	3302      	adds	r3, #2
 8004a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	220f      	movs	r2, #15
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a86:	d013      	beq.n	8004ab0 <HAL_GPIO_Init+0x1e0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a46      	ldr	r2, [pc, #280]	; (8004ba4 <HAL_GPIO_Init+0x2d4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00d      	beq.n	8004aac <HAL_GPIO_Init+0x1dc>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a45      	ldr	r2, [pc, #276]	; (8004ba8 <HAL_GPIO_Init+0x2d8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d007      	beq.n	8004aa8 <HAL_GPIO_Init+0x1d8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a44      	ldr	r2, [pc, #272]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_GPIO_Init+0x1d4>
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e006      	b.n	8004ab2 <HAL_GPIO_Init+0x1e2>
 8004aa4:	2307      	movs	r3, #7
 8004aa6:	e004      	b.n	8004ab2 <HAL_GPIO_Init+0x1e2>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e002      	b.n	8004ab2 <HAL_GPIO_Init+0x1e2>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_GPIO_Init+0x1e2>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	f002 0203 	and.w	r2, r2, #3
 8004ab8:	0092      	lsls	r2, r2, #2
 8004aba:	4093      	lsls	r3, r2
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ac2:	4937      	ldr	r1, [pc, #220]	; (8004ba0 <HAL_GPIO_Init+0x2d0>)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	3302      	adds	r3, #2
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ad0:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_GPIO_Init+0x2e0>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4013      	ands	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004af4:	4a2e      	ldr	r2, [pc, #184]	; (8004bb0 <HAL_GPIO_Init+0x2e0>)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004afa:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <HAL_GPIO_Init+0x2e0>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	43db      	mvns	r3, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b1e:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <HAL_GPIO_Init+0x2e0>)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b24:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <HAL_GPIO_Init+0x2e0>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4013      	ands	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <HAL_GPIO_Init+0x2e0>)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004b4e:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <HAL_GPIO_Init+0x2e0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b72:	4a0f      	ldr	r2, [pc, #60]	; (8004bb0 <HAL_GPIO_Init+0x2e0>)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f47f aea9 	bne.w	80048e0 <HAL_GPIO_Init+0x10>
  }
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	48000400 	.word	0x48000400
 8004ba8:	48000800 	.word	0x48000800
 8004bac:	48000c00 	.word	0x48000c00
 8004bb0:	40010400 	.word	0x40010400

08004bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bc4:	787b      	ldrb	r3, [r7, #1]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bd0:	e002      	b.n	8004bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	041a      	lsls	r2, r3, #16
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	43d9      	mvns	r1, r3
 8004c02:	887b      	ldrh	r3, [r7, #2]
 8004c04:	400b      	ands	r3, r1
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d006      	beq.n	8004c3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c2e:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd ffdc 	bl	8002bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40010400 	.word	0x40010400

08004c48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40007000 	.word	0x40007000

08004c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c72:	d130      	bne.n	8004cd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c74:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c80:	d038      	beq.n	8004cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c82:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c8a:	4a1e      	ldr	r2, [pc, #120]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2232      	movs	r2, #50	; 0x32
 8004c98:	fb02 f303 	mul.w	r3, r2, r3
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	0c9b      	lsrs	r3, r3, #18
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca8:	e002      	b.n	8004cb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cb0:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbc:	d102      	bne.n	8004cc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f2      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d110      	bne.n	8004cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e00f      	b.n	8004cf6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce2:	d007      	beq.n	8004cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cec:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cf2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40007000 	.word	0x40007000
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	431bde83 	.word	0x431bde83

08004d10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d102      	bne.n	8004d24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f000 bc4f 	b.w	80055c2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d24:	4b97      	ldr	r3, [pc, #604]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 030c 	and.w	r3, r3, #12
 8004d2c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d2e:	4b95      	ldr	r3, [pc, #596]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80e6 	beq.w	8004f12 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4c>
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	2b0c      	cmp	r3, #12
 8004d50:	f040 808d 	bne.w	8004e6e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	f040 8089 	bne.w	8004e6e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d5c:	4b89      	ldr	r3, [pc, #548]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d006      	beq.n	8004d76 <HAL_RCC_OscConfig+0x66>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f000 bc26 	b.w	80055c2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d7a:	4b82      	ldr	r3, [pc, #520]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <HAL_RCC_OscConfig+0x80>
 8004d86:	4b7f      	ldr	r3, [pc, #508]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d8e:	e005      	b.n	8004d9c <HAL_RCC_OscConfig+0x8c>
 8004d90:	4b7c      	ldr	r3, [pc, #496]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d224      	bcs.n	8004dea <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fdd9 	bl	800595c <RCC_SetFlashLatencyFromMSIRange>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f000 bc06 	b.w	80055c2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004db6:	4b73      	ldr	r3, [pc, #460]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a72      	ldr	r2, [pc, #456]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004dbc:	f043 0308 	orr.w	r3, r3, #8
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b70      	ldr	r3, [pc, #448]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	496d      	ldr	r1, [pc, #436]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd4:	4b6b      	ldr	r3, [pc, #428]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	4968      	ldr	r1, [pc, #416]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]
 8004de8:	e025      	b.n	8004e36 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dea:	4b66      	ldr	r3, [pc, #408]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a65      	ldr	r2, [pc, #404]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004df0:	f043 0308 	orr.w	r3, r3, #8
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4b63      	ldr	r3, [pc, #396]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	4960      	ldr	r1, [pc, #384]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e08:	4b5e      	ldr	r3, [pc, #376]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	495b      	ldr	r1, [pc, #364]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fd98 	bl	800595c <RCC_SetFlashLatencyFromMSIRange>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e3c5      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e36:	f000 fccd 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	4b51      	ldr	r3, [pc, #324]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	4950      	ldr	r1, [pc, #320]	; (8004f88 <HAL_RCC_OscConfig+0x278>)
 8004e48:	5ccb      	ldrb	r3, [r1, r3]
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e52:	4a4e      	ldr	r2, [pc, #312]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004e54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e56:	4b4e      	ldr	r3, [pc, #312]	; (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe f8a6 	bl	8002fac <HAL_InitTick>
 8004e60:	4603      	mov	r3, r0
 8004e62:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d052      	beq.n	8004f10 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
 8004e6c:	e3a9      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d032      	beq.n	8004edc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e76:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a42      	ldr	r2, [pc, #264]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e82:	f7fe f8e3 	bl	800304c <HAL_GetTick>
 8004e86:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e8a:	f7fe f8df 	bl	800304c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e392      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e9c:	4b39      	ldr	r3, [pc, #228]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ea8:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a35      	ldr	r2, [pc, #212]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004eae:	f043 0308 	orr.w	r3, r3, #8
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b33      	ldr	r3, [pc, #204]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	4930      	ldr	r1, [pc, #192]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ec6:	4b2f      	ldr	r3, [pc, #188]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	492b      	ldr	r1, [pc, #172]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
 8004eda:	e01a      	b.n	8004f12 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004edc:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a28      	ldr	r2, [pc, #160]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ee8:	f7fe f8b0 	bl	800304c <HAL_GetTick>
 8004eec:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ef0:	f7fe f8ac 	bl	800304c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e35f      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f02:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x1e0>
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d073      	beq.n	8005006 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_OscConfig+0x220>
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	2b0c      	cmp	r3, #12
 8004f28:	d10e      	bne.n	8004f48 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d10b      	bne.n	8004f48 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f30:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d063      	beq.n	8005004 <HAL_RCC_OscConfig+0x2f4>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d15f      	bne.n	8005004 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e33c      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f50:	d106      	bne.n	8004f60 <HAL_RCC_OscConfig+0x250>
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a0b      	ldr	r2, [pc, #44]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e025      	b.n	8004fac <HAL_RCC_OscConfig+0x29c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f68:	d114      	bne.n	8004f94 <HAL_RCC_OscConfig+0x284>
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a05      	ldr	r2, [pc, #20]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a02      	ldr	r2, [pc, #8]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e013      	b.n	8004fac <HAL_RCC_OscConfig+0x29c>
 8004f84:	40021000 	.word	0x40021000
 8004f88:	080082fc 	.word	0x080082fc
 8004f8c:	20000000 	.word	0x20000000
 8004f90:	20000004 	.word	0x20000004
 8004f94:	4b8f      	ldr	r3, [pc, #572]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a8e      	ldr	r2, [pc, #568]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4b8c      	ldr	r3, [pc, #560]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a8b      	ldr	r2, [pc, #556]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d013      	beq.n	8004fdc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fe f84a 	bl	800304c <HAL_GetTick>
 8004fb8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fbc:	f7fe f846 	bl	800304c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	; 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e2f9      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fce:	4b81      	ldr	r3, [pc, #516]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x2ac>
 8004fda:	e014      	b.n	8005006 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fe f836 	bl	800304c <HAL_GetTick>
 8004fe0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fe f832 	bl	800304c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	; 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e2e5      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ff6:	4b77      	ldr	r3, [pc, #476]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2d4>
 8005002:	e000      	b.n	8005006 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d060      	beq.n	80050d4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	2b04      	cmp	r3, #4
 8005016:	d005      	beq.n	8005024 <HAL_RCC_OscConfig+0x314>
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d119      	bne.n	8005052 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d116      	bne.n	8005052 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005024:	4b6b      	ldr	r3, [pc, #428]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_OscConfig+0x32c>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e2c2      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503c:	4b65      	ldr	r3, [pc, #404]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	061b      	lsls	r3, r3, #24
 800504a:	4962      	ldr	r1, [pc, #392]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	4313      	orrs	r3, r2
 800504e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005050:	e040      	b.n	80050d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d023      	beq.n	80050a2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800505a:	4b5e      	ldr	r3, [pc, #376]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a5d      	ldr	r2, [pc, #372]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005066:	f7fd fff1 	bl	800304c <HAL_GetTick>
 800506a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800506e:	f7fd ffed 	bl	800304c <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e2a0      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005080:	4b54      	ldr	r3, [pc, #336]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800508c:	4b51      	ldr	r3, [pc, #324]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	061b      	lsls	r3, r3, #24
 800509a:	494e      	ldr	r1, [pc, #312]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]
 80050a0:	e018      	b.n	80050d4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050a2:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a4b      	ldr	r2, [pc, #300]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80050a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7fd ffcd 	bl	800304c <HAL_GetTick>
 80050b2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050b6:	f7fd ffc9 	bl	800304c <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e27c      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050c8:	4b42      	ldr	r3, [pc, #264]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8082 	beq.w	80051e6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d05f      	beq.n	80051aa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80050ea:	4b3a      	ldr	r3, [pc, #232]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d037      	beq.n	8005170 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d006      	beq.n	8005118 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e254      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01b      	beq.n	800515a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8005122:	4b2c      	ldr	r3, [pc, #176]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005128:	4a2a      	ldr	r2, [pc, #168]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005132:	f7fd ff8b 	bl	800304c <HAL_GetTick>
 8005136:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513a:	f7fd ff87 	bl	800304c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b11      	cmp	r3, #17
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e23a      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800514c:	4b21      	ldr	r3, [pc, #132]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800514e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1ef      	bne.n	800513a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800515c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005160:	f023 0210 	bic.w	r2, r3, #16
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	491a      	ldr	r1, [pc, #104]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005170:	4b18      	ldr	r3, [pc, #96]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005176:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005180:	f7fd ff64 	bl	800304c <HAL_GetTick>
 8005184:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005188:	f7fd ff60 	bl	800304c <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b11      	cmp	r3, #17
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e213      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800519a:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800519c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ef      	beq.n	8005188 <HAL_RCC_OscConfig+0x478>
 80051a8:	e01d      	b.n	80051e6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80051ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b0:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80051b2:	f023 0301 	bic.w	r3, r3, #1
 80051b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ba:	f7fd ff47 	bl	800304c <HAL_GetTick>
 80051be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c2:	f7fd ff43 	bl	800304c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b11      	cmp	r3, #17
 80051ce:	d903      	bls.n	80051d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e1f6      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
 80051d4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051d8:	4ba9      	ldr	r3, [pc, #676]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80051da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ed      	bne.n	80051c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80bd 	beq.w	800536e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051fa:	4ba1      	ldr	r3, [pc, #644]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10e      	bne.n	8005224 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005206:	4b9e      	ldr	r3, [pc, #632]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	4a9d      	ldr	r2, [pc, #628]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005210:	6593      	str	r3, [r2, #88]	; 0x58
 8005212:	4b9b      	ldr	r3, [pc, #620]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005224:	4b97      	ldr	r3, [pc, #604]	; (8005484 <HAL_RCC_OscConfig+0x774>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d118      	bne.n	8005262 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005230:	4b94      	ldr	r3, [pc, #592]	; (8005484 <HAL_RCC_OscConfig+0x774>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a93      	ldr	r2, [pc, #588]	; (8005484 <HAL_RCC_OscConfig+0x774>)
 8005236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523c:	f7fd ff06 	bl	800304c <HAL_GetTick>
 8005240:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005244:	f7fd ff02 	bl	800304c <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e1b5      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005256:	4b8b      	ldr	r3, [pc, #556]	; (8005484 <HAL_RCC_OscConfig+0x774>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d02c      	beq.n	80052c8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800526e:	4b84      	ldr	r3, [pc, #528]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005280:	497f      	ldr	r1, [pc, #508]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005294:	4b7a      	ldr	r3, [pc, #488]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	4a79      	ldr	r2, [pc, #484]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052a4:	4b76      	ldr	r3, [pc, #472]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	4a75      	ldr	r2, [pc, #468]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80052ac:	f043 0301 	orr.w	r3, r3, #1
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052b4:	e018      	b.n	80052e8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052b6:	4b72      	ldr	r3, [pc, #456]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80052b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052bc:	4a70      	ldr	r2, [pc, #448]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052c6:	e00f      	b.n	80052e8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052c8:	4b6d      	ldr	r3, [pc, #436]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ce:	4a6c      	ldr	r2, [pc, #432]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052d8:	4b69      	ldr	r3, [pc, #420]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	4a68      	ldr	r2, [pc, #416]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d016      	beq.n	800531e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7fd feac 	bl	800304c <HAL_GetTick>
 80052f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f8:	f7fd fea8 	bl	800304c <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	; 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e159      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800530e:	4b5c      	ldr	r3, [pc, #368]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0ed      	beq.n	80052f8 <HAL_RCC_OscConfig+0x5e8>
 800531c:	e01d      	b.n	800535a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531e:	f7fd fe95 	bl	800304c <HAL_GetTick>
 8005322:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005324:	e00a      	b.n	800533c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005326:	f7fd fe91 	bl	800304c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f241 3288 	movw	r2, #5000	; 0x1388
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e142      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800533c:	4b50      	ldr	r3, [pc, #320]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1ed      	bne.n	8005326 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800534a:	4b4d      	ldr	r3, [pc, #308]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	4a4b      	ldr	r2, [pc, #300]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800535a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800535e:	2b01      	cmp	r3, #1
 8005360:	d105      	bne.n	800536e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	4a46      	ldr	r2, [pc, #280]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800536c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d03c      	beq.n	80053f4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01c      	beq.n	80053bc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005388:	4a3d      	ldr	r2, [pc, #244]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005392:	f7fd fe5b 	bl	800304c <HAL_GetTick>
 8005396:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800539a:	f7fd fe57 	bl	800304c <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e10a      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ac:	4b34      	ldr	r3, [pc, #208]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80053ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0ef      	beq.n	800539a <HAL_RCC_OscConfig+0x68a>
 80053ba:	e01b      	b.n	80053f4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053bc:	4b30      	ldr	r3, [pc, #192]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80053be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053c2:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053cc:	f7fd fe3e 	bl	800304c <HAL_GetTick>
 80053d0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d4:	f7fd fe3a 	bl	800304c <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e0ed      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053e6:	4b26      	ldr	r3, [pc, #152]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 80053e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1ef      	bne.n	80053d4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 80e1 	beq.w	80055c0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	2b02      	cmp	r3, #2
 8005404:	f040 80b5 	bne.w	8005572 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005408:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f003 0203 	and.w	r2, r3, #3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	429a      	cmp	r2, r3
 800541a:	d124      	bne.n	8005466 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	3b01      	subs	r3, #1
 8005428:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d11b      	bne.n	8005466 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d113      	bne.n	8005466 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	3b01      	subs	r3, #1
 800544c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d109      	bne.n	8005466 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	3b01      	subs	r3, #1
 8005460:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d05f      	beq.n	8005526 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	2b0c      	cmp	r3, #12
 800546a:	d05a      	beq.n	8005522 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a03      	ldr	r2, [pc, #12]	; (8005480 <HAL_RCC_OscConfig+0x770>)
 8005472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005476:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005478:	f7fd fde8 	bl	800304c <HAL_GetTick>
 800547c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547e:	e00c      	b.n	800549a <HAL_RCC_OscConfig+0x78a>
 8005480:	40021000 	.word	0x40021000
 8005484:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005488:	f7fd fde0 	bl	800304c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e093      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800549a:	4b4c      	ldr	r3, [pc, #304]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a6:	4b49      	ldr	r3, [pc, #292]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	4b49      	ldr	r3, [pc, #292]	; (80055d0 <HAL_RCC_OscConfig+0x8c0>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b6:	3a01      	subs	r2, #1
 80054b8:	0112      	lsls	r2, r2, #4
 80054ba:	4311      	orrs	r1, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054c0:	0212      	lsls	r2, r2, #8
 80054c2:	4311      	orrs	r1, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054c8:	0852      	lsrs	r2, r2, #1
 80054ca:	3a01      	subs	r2, #1
 80054cc:	0552      	lsls	r2, r2, #21
 80054ce:	4311      	orrs	r1, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054d4:	0852      	lsrs	r2, r2, #1
 80054d6:	3a01      	subs	r2, #1
 80054d8:	0652      	lsls	r2, r2, #25
 80054da:	430a      	orrs	r2, r1
 80054dc:	493b      	ldr	r1, [pc, #236]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80054e2:	4b3a      	ldr	r3, [pc, #232]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a39      	ldr	r2, [pc, #228]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 80054e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ec:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054ee:	4b37      	ldr	r3, [pc, #220]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	4a36      	ldr	r2, [pc, #216]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 80054f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054fa:	f7fd fda7 	bl	800304c <HAL_GetTick>
 80054fe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005502:	f7fd fda3 	bl	800304c <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e056      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005514:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005520:	e04e      	b.n	80055c0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e04d      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005526:	4b29      	ldr	r3, [pc, #164]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d146      	bne.n	80055c0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a25      	ldr	r2, [pc, #148]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 8005538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800553e:	4b23      	ldr	r3, [pc, #140]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 8005544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005548:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800554a:	f7fd fd7f 	bl	800304c <HAL_GetTick>
 800554e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005552:	f7fd fd7b 	bl	800304c <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e02e      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005564:	4b19      	ldr	r3, [pc, #100]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCC_OscConfig+0x842>
 8005570:	e026      	b.n	80055c0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	2b0c      	cmp	r3, #12
 8005576:	d021      	beq.n	80055bc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005578:	4b14      	ldr	r3, [pc, #80]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a13      	ldr	r2, [pc, #76]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 800557e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fd fd62 	bl	800304c <HAL_GetTick>
 8005588:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558c:	f7fd fd5e 	bl	800304c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e011      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800559e:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	4a07      	ldr	r2, [pc, #28]	; (80055cc <HAL_RCC_OscConfig+0x8bc>)
 80055b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80055b4:	f023 0303 	bic.w	r3, r3, #3
 80055b8:	60d3      	str	r3, [r2, #12]
 80055ba:	e001      	b.n	80055c0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3728      	adds	r7, #40	; 0x28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000
 80055d0:	f99f808c 	.word	0xf99f808c

080055d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0e7      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b75      	ldr	r3, [pc, #468]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d910      	bls.n	8005618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 0207 	bic.w	r2, r3, #7
 80055fe:	4970      	ldr	r1, [pc, #448]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b6e      	ldr	r3, [pc, #440]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0cf      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d010      	beq.n	8005646 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	4b66      	ldr	r3, [pc, #408]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005630:	429a      	cmp	r2, r3
 8005632:	d908      	bls.n	8005646 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b63      	ldr	r3, [pc, #396]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4960      	ldr	r1, [pc, #384]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04c      	beq.n	80056ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565a:	4b5a      	ldr	r3, [pc, #360]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d121      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0a6      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005672:	4b54      	ldr	r3, [pc, #336]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d115      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e09a      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800568a:	4b4e      	ldr	r3, [pc, #312]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e08e      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800569a:	4b4a      	ldr	r3, [pc, #296]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e086      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056aa:	4b46      	ldr	r3, [pc, #280]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f023 0203 	bic.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4943      	ldr	r1, [pc, #268]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056bc:	f7fd fcc6 	bl	800304c <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	e00a      	b.n	80056da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c4:	f7fd fcc2 	bl	800304c <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e06e      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 020c 	and.w	r2, r3, #12
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d1eb      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005704:	429a      	cmp	r2, r3
 8005706:	d208      	bcs.n	800571a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005708:	4b2e      	ldr	r3, [pc, #184]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	492b      	ldr	r1, [pc, #172]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800571a:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d210      	bcs.n	800574a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005728:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 0207 	bic.w	r2, r3, #7
 8005730:	4923      	ldr	r1, [pc, #140]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e036      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4918      	ldr	r1, [pc, #96]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005774:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4910      	ldr	r1, [pc, #64]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005784:	4313      	orrs	r3, r2
 8005786:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005788:	f000 f824 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	490b      	ldr	r1, [pc, #44]	; (80057c8 <HAL_RCC_ClockConfig+0x1f4>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
 80057a4:	4a09      	ldr	r2, [pc, #36]	; (80057cc <HAL_RCC_ClockConfig+0x1f8>)
 80057a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <HAL_RCC_ClockConfig+0x1fc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fd fbfd 	bl	8002fac <HAL_InitTick>
 80057b2:	4603      	mov	r3, r0
 80057b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80057b6:	7afb      	ldrb	r3, [r7, #11]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40022000 	.word	0x40022000
 80057c4:	40021000 	.word	0x40021000
 80057c8:	080082fc 	.word	0x080082fc
 80057cc:	20000000 	.word	0x20000000
 80057d0:	20000004 	.word	0x20000004

080057d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e2:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ec:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_GetSysClockFreq+0x34>
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d121      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d11e      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005814:	4b31      	ldr	r3, [pc, #196]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e005      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005824:	4b2d      	ldr	r3, [pc, #180]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005830:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005838:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10d      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005844:	e00a      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b04      	cmp	r3, #4
 800584a:	d102      	bne.n	8005852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800584c:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e004      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d101      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005858:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800585a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b0c      	cmp	r3, #12
 8005860:	d134      	bne.n	80058cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d003      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0xa6>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d003      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0xac>
 8005878:	e005      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800587a:	4b1a      	ldr	r3, [pc, #104]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800587c:	617b      	str	r3, [r7, #20]
      break;
 800587e:	e005      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005880:	4b19      	ldr	r3, [pc, #100]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005882:	617b      	str	r3, [r7, #20]
      break;
 8005884:	e002      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	617b      	str	r3, [r7, #20]
      break;
 800588a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800588c:	4b13      	ldr	r3, [pc, #76]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	3301      	adds	r3, #1
 8005898:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	fb03 f202 	mul.w	r2, r3, r2
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	0e5b      	lsrs	r3, r3, #25
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	3301      	adds	r3, #1
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058cc:	69bb      	ldr	r3, [r7, #24]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3724      	adds	r7, #36	; 0x24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	08008314 	.word	0x08008314
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	007a1200 	.word	0x007a1200

080058ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <HAL_RCC_GetHCLKFreq+0x14>)
 80058f2:	681b      	ldr	r3, [r3, #0]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000000 	.word	0x20000000

08005904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005908:	f7ff fff0 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 800590c:	4602      	mov	r2, r0
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4904      	ldr	r1, [pc, #16]	; (800592c <HAL_RCC_GetPCLK1Freq+0x28>)
 800591a:	5ccb      	ldrb	r3, [r1, r3]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	0800830c 	.word	0x0800830c

08005930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005934:	f7ff ffda 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0adb      	lsrs	r3, r3, #11
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4904      	ldr	r1, [pc, #16]	; (8005958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40021000 	.word	0x40021000
 8005958:	0800830c 	.word	0x0800830c

0800595c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005968:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005974:	f7ff f968 	bl	8004c48 <HAL_PWREx_GetVoltageRange>
 8005978:	6178      	str	r0, [r7, #20]
 800597a:	e014      	b.n	80059a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005980:	4a24      	ldr	r2, [pc, #144]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005986:	6593      	str	r3, [r2, #88]	; 0x58
 8005988:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800598a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005994:	f7ff f958 	bl	8004c48 <HAL_PWREx_GetVoltageRange>
 8005998:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800599a:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ac:	d10b      	bne.n	80059c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d919      	bls.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2ba0      	cmp	r3, #160	; 0xa0
 80059b8:	d902      	bls.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059ba:	2302      	movs	r3, #2
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	e013      	b.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059c0:	2301      	movs	r3, #1
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	e010      	b.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d902      	bls.n	80059d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059cc:	2303      	movs	r3, #3
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	e00a      	b.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d102      	bne.n	80059de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059d8:	2302      	movs	r3, #2
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	e004      	b.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b70      	cmp	r3, #112	; 0x70
 80059e2:	d101      	bne.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059e4:	2301      	movs	r3, #1
 80059e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f023 0207 	bic.w	r2, r3, #7
 80059f0:	4909      	ldr	r1, [pc, #36]	; (8005a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d001      	beq.n	8005a0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40022000 	.word	0x40022000

08005a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a24:	2300      	movs	r3, #0
 8005a26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a28:	2300      	movs	r3, #0
 8005a2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 809e 	beq.w	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a3e:	4b46      	ldr	r3, [pc, #280]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00d      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a54:	4b40      	ldr	r3, [pc, #256]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a58:	4a3f      	ldr	r2, [pc, #252]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a60:	4b3d      	ldr	r3, [pc, #244]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a68:	60bb      	str	r3, [r7, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a70:	4b3a      	ldr	r3, [pc, #232]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a39      	ldr	r2, [pc, #228]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a7c:	f7fd fae6 	bl	800304c <HAL_GetTick>
 8005a80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a82:	e009      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a84:	f7fd fae2 	bl	800304c <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d902      	bls.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	74fb      	strb	r3, [r7, #19]
        break;
 8005a96:	e005      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a98:	4b30      	ldr	r3, [pc, #192]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ef      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005aa4:	7cfb      	ldrb	r3, [r7, #19]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d15a      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005aaa:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01e      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d019      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ac6:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ae2:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005af2:	4a19      	ldr	r2, [pc, #100]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d016      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fd faa2 	bl	800304c <HAL_GetTick>
 8005b08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b0a:	e00b      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0c:	f7fd fa9e 	bl	800304c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d902      	bls.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	74fb      	strb	r3, [r7, #19]
            break;
 8005b22:	e006      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b24:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0ec      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b38:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	4904      	ldr	r1, [pc, #16]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b4e:	e009      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	74bb      	strb	r3, [r7, #18]
 8005b54:	e006      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
 8005b62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b64:	7c7b      	ldrb	r3, [r7, #17]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6a:	4b6e      	ldr	r3, [pc, #440]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6e:	4a6d      	ldr	r2, [pc, #436]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b82:	4b68      	ldr	r3, [pc, #416]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b88:	f023 0203 	bic.w	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4964      	ldr	r1, [pc, #400]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ba4:	4b5f      	ldr	r3, [pc, #380]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005baa:	f023 020c 	bic.w	r2, r3, #12
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	495c      	ldr	r1, [pc, #368]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bc6:	4b57      	ldr	r3, [pc, #348]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4953      	ldr	r1, [pc, #332]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005be8:	4b4e      	ldr	r3, [pc, #312]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	494b      	ldr	r1, [pc, #300]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c0a:	4b46      	ldr	r3, [pc, #280]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	4942      	ldr	r1, [pc, #264]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c2c:	4b3d      	ldr	r3, [pc, #244]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	493a      	ldr	r1, [pc, #232]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c4e:	4b35      	ldr	r3, [pc, #212]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	4931      	ldr	r1, [pc, #196]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c70:	4b2c      	ldr	r3, [pc, #176]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	4929      	ldr	r1, [pc, #164]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c92:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4920      	ldr	r1, [pc, #128]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d015      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	4918      	ldr	r1, [pc, #96]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cd2:	d105      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cd4:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4a12      	ldr	r2, [pc, #72]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cde:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d015      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cec:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	490a      	ldr	r1, [pc, #40]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d0c:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4a04      	ldr	r2, [pc, #16]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d18:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40021000 	.word	0x40021000

08005d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e095      	b.n	8005e66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d4a:	d009      	beq.n	8005d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	61da      	str	r2, [r3, #28]
 8005d52:	e005      	b.n	8005d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc ffc0 	bl	8002d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005da0:	d902      	bls.n	8005da8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	e002      	b.n	8005dae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005db6:	d007      	beq.n	8005dc8 <HAL_SPI_Init+0xa0>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dc0:	d002      	beq.n	8005dc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	ea42 0103 	orr.w	r1, r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	0c1b      	lsrs	r3, r3, #16
 8005e24:	f003 0204 	and.w	r2, r3, #4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e44:	ea42 0103 	orr.w	r1, r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b08a      	sub	sp, #40	; 0x28
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x26>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e20a      	b.n	80062aa <HAL_SPI_TransmitReceive+0x43c>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e9c:	f7fd f8d6 	bl	800304c <HAL_GetTick>
 8005ea0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ea8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005eb4:	887b      	ldrh	r3, [r7, #2]
 8005eb6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eb8:	7efb      	ldrb	r3, [r7, #27]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d00e      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x6e>
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec4:	d106      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x66>
 8005ece:	7efb      	ldrb	r3, [r7, #27]
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d003      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005eda:	e1e0      	b.n	800629e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x80>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x80>
 8005ee8:	887b      	ldrh	r3, [r7, #2]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ef4:	e1d3      	b.n	800629e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d003      	beq.n	8005f0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2205      	movs	r2, #5
 8005f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	887a      	ldrh	r2, [r7, #2]
 8005f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	887a      	ldrh	r2, [r7, #2]
 8005f22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	887a      	ldrh	r2, [r7, #2]
 8005f30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	887a      	ldrh	r2, [r7, #2]
 8005f36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f4c:	d802      	bhi.n	8005f54 <HAL_SPI_TransmitReceive+0xe6>
 8005f4e:	8a3b      	ldrh	r3, [r7, #16]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d908      	bls.n	8005f66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f62:	605a      	str	r2, [r3, #4]
 8005f64:	e007      	b.n	8005f76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b40      	cmp	r3, #64	; 0x40
 8005f82:	d007      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f9c:	f240 8081 	bls.w	80060a2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x140>
 8005fa8:	8a7b      	ldrh	r3, [r7, #18]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d16d      	bne.n	800608a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	881a      	ldrh	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	1c9a      	adds	r2, r3, #2
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fd2:	e05a      	b.n	800608a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d11b      	bne.n	800601a <HAL_SPI_TransmitReceive+0x1ac>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d016      	beq.n	800601a <HAL_SPI_TransmitReceive+0x1ac>
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d113      	bne.n	800601a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	881a      	ldrh	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	1c9a      	adds	r2, r3, #2
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b01      	cmp	r3, #1
 8006026:	d11c      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x1f4>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d016      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	b292      	uxth	r2, r2
 8006040:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	1c9a      	adds	r2, r3, #2
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800605e:	2301      	movs	r3, #1
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006062:	f7fc fff3 	bl	800304c <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	429a      	cmp	r2, r3
 8006070:	d80b      	bhi.n	800608a <HAL_SPI_TransmitReceive+0x21c>
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d007      	beq.n	800608a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006088:	e109      	b.n	800629e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d19f      	bne.n	8005fd4 <HAL_SPI_TransmitReceive+0x166>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d199      	bne.n	8005fd4 <HAL_SPI_TransmitReceive+0x166>
 80060a0:	e0e3      	b.n	800626a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_SPI_TransmitReceive+0x244>
 80060aa:	8a7b      	ldrh	r3, [r7, #18]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	f040 80cf 	bne.w	8006250 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d912      	bls.n	80060e2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b02      	subs	r3, #2
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060e0:	e0b6      	b.n	8006250 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	330c      	adds	r3, #12
 80060ec:	7812      	ldrb	r2, [r2, #0]
 80060ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006108:	e0a2      	b.n	8006250 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b02      	cmp	r3, #2
 8006116:	d134      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x314>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d02f      	beq.n	8006182 <HAL_SPI_TransmitReceive+0x314>
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	2b01      	cmp	r3, #1
 8006126:	d12c      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d912      	bls.n	8006158 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	881a      	ldrh	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	1c9a      	adds	r2, r3, #2
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b02      	subs	r3, #2
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006156:	e012      	b.n	800617e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d148      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x3b4>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d042      	beq.n	8006222 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d923      	bls.n	80061f0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	b292      	uxth	r2, r2
 80061b4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	1c9a      	adds	r2, r3, #2
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b02      	subs	r3, #2
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d81f      	bhi.n	800621e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061ec:	605a      	str	r2, [r3, #4]
 80061ee:	e016      	b.n	800621e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f103 020c 	add.w	r2, r3, #12
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	7812      	ldrb	r2, [r2, #0]
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800621e:	2301      	movs	r3, #1
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006222:	f7fc ff13 	bl	800304c <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622e:	429a      	cmp	r2, r3
 8006230:	d803      	bhi.n	800623a <HAL_SPI_TransmitReceive+0x3cc>
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d102      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x3d2>
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2b00      	cmp	r3, #0
 800623e:	d107      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800624e:	e026      	b.n	800629e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	f47f af57 	bne.w	800610a <HAL_SPI_TransmitReceive+0x29c>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	f47f af50 	bne.w	800610a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f93e 	bl	80064f0 <SPI_EndRxTxTransaction>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006294:	e003      	b.n	800629e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3728      	adds	r7, #40	; 0x28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	4613      	mov	r3, r2
 80062c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062c4:	f7fc fec2 	bl	800304c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	4413      	add	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062d4:	f7fc feba 	bl	800304c <HAL_GetTick>
 80062d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062da:	4b39      	ldr	r3, [pc, #228]	; (80063c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	015b      	lsls	r3, r3, #5
 80062e0:	0d1b      	lsrs	r3, r3, #20
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	fb02 f303 	mul.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ea:	e054      	b.n	8006396 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d050      	beq.n	8006396 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062f4:	f7fc feaa 	bl	800304c <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	429a      	cmp	r2, r3
 8006302:	d902      	bls.n	800630a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d13d      	bne.n	8006386 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006318:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006322:	d111      	bne.n	8006348 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632c:	d004      	beq.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006336:	d107      	bne.n	8006348 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006346:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006350:	d10f      	bne.n	8006372 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006370:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e017      	b.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	3b01      	subs	r3, #1
 8006394:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4013      	ands	r3, r2
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	bf0c      	ite	eq
 80063a6:	2301      	moveq	r3, #1
 80063a8:	2300      	movne	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d19b      	bne.n	80062ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000000 	.word	0x20000000

080063c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	; 0x28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063d6:	f7fc fe39 	bl	800304c <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	1a9b      	subs	r3, r3, r2
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	4413      	add	r3, r2
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063e6:	f7fc fe31 	bl	800304c <HAL_GetTick>
 80063ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063f4:	4b3d      	ldr	r3, [pc, #244]	; (80064ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	0d1b      	lsrs	r3, r3, #20
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800640c:	e060      	b.n	80064d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006414:	d107      	bne.n	8006426 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006424:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d050      	beq.n	80064d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800642e:	f7fc fe0d 	bl	800304c <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	429a      	cmp	r2, r3
 800643c:	d902      	bls.n	8006444 <SPI_WaitFifoStateUntilTimeout+0x80>
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d13d      	bne.n	80064c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006452:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800645c:	d111      	bne.n	8006482 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006466:	d004      	beq.n	8006472 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006470:	d107      	bne.n	8006482 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006480:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648a:	d10f      	bne.n	80064ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e010      	b.n	80064e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4013      	ands	r3, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d196      	bne.n	800640e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3728      	adds	r7, #40	; 0x28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000000 	.word	0x20000000

080064f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff ff5b 	bl	80063c4 <SPI_WaitFifoStateUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006518:	f043 0220 	orr.w	r2, r3, #32
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e027      	b.n	8006574 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	2180      	movs	r1, #128	; 0x80
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff fec0 	bl	80062b4 <SPI_WaitFlagStateUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653e:	f043 0220 	orr.w	r2, r3, #32
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e014      	b.n	8006574 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff ff34 	bl	80063c4 <SPI_WaitFifoStateUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006566:	f043 0220 	orr.w	r2, r3, #32
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e000      	b.n	8006574 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e040      	b.n	8006610 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fc fbf0 	bl	8002d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2224      	movs	r2, #36	; 0x24
 80065a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0201 	bic.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fb0c 	bl	8006be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8af 	bl	800672c <UART_SetConfig>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e01b      	b.n	8006610 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fb8b 	bl	8006d24 <UART_CheckIdleState>
 800660e:	4603      	mov	r3, r0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	4613      	mov	r3, r2
 8006626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800662c:	2b20      	cmp	r3, #32
 800662e:	d178      	bne.n	8006722 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_UART_Transmit+0x24>
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e071      	b.n	8006724 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2221      	movs	r2, #33	; 0x21
 800664c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800664e:	f7fc fcfd 	bl	800304c <HAL_GetTick>
 8006652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	88fa      	ldrh	r2, [r7, #6]
 8006658:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666c:	d108      	bne.n	8006680 <HAL_UART_Transmit+0x68>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	e003      	b.n	8006688 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006684:	2300      	movs	r3, #0
 8006686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006688:	e030      	b.n	80066ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2200      	movs	r2, #0
 8006692:	2180      	movs	r1, #128	; 0x80
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fbed 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d004      	beq.n	80066aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e03c      	b.n	8006724 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	881a      	ldrh	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066bc:	b292      	uxth	r2, r2
 80066be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	3302      	adds	r3, #2
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e008      	b.n	80066da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	781a      	ldrb	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	b292      	uxth	r2, r2
 80066d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1c8      	bne.n	800668a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2200      	movs	r2, #0
 8006700:	2140      	movs	r1, #64	; 0x40
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 fbb6 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d004      	beq.n	8006718 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2220      	movs	r2, #32
 8006712:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e005      	b.n	8006724 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e000      	b.n	8006724 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006722:	2302      	movs	r3, #2
  }
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800672c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006730:	b08a      	sub	sp, #40	; 0x28
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	431a      	orrs	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	431a      	orrs	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	4313      	orrs	r3, r2
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b9e      	ldr	r3, [pc, #632]	; (80069d4 <UART_SetConfig+0x2a8>)
 800675c:	4013      	ands	r3, r2
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006764:	430b      	orrs	r3, r1
 8006766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a93      	ldr	r2, [pc, #588]	; (80069d8 <UART_SetConfig+0x2ac>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006794:	4313      	orrs	r3, r2
 8006796:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a8:	430a      	orrs	r2, r1
 80067aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a8a      	ldr	r2, [pc, #552]	; (80069dc <UART_SetConfig+0x2b0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d126      	bne.n	8006804 <UART_SetConfig+0xd8>
 80067b6:	4b8a      	ldr	r3, [pc, #552]	; (80069e0 <UART_SetConfig+0x2b4>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d81b      	bhi.n	80067fc <UART_SetConfig+0xd0>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <UART_SetConfig+0xa0>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067dd 	.word	0x080067dd
 80067d0:	080067ed 	.word	0x080067ed
 80067d4:	080067e5 	.word	0x080067e5
 80067d8:	080067f5 	.word	0x080067f5
 80067dc:	2301      	movs	r3, #1
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e2:	e0ab      	b.n	800693c <UART_SetConfig+0x210>
 80067e4:	2302      	movs	r3, #2
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ea:	e0a7      	b.n	800693c <UART_SetConfig+0x210>
 80067ec:	2304      	movs	r3, #4
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f2:	e0a3      	b.n	800693c <UART_SetConfig+0x210>
 80067f4:	2308      	movs	r3, #8
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fa:	e09f      	b.n	800693c <UART_SetConfig+0x210>
 80067fc:	2310      	movs	r3, #16
 80067fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006802:	e09b      	b.n	800693c <UART_SetConfig+0x210>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a76      	ldr	r2, [pc, #472]	; (80069e4 <UART_SetConfig+0x2b8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d138      	bne.n	8006880 <UART_SetConfig+0x154>
 800680e:	4b74      	ldr	r3, [pc, #464]	; (80069e0 <UART_SetConfig+0x2b4>)
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006814:	f003 030c 	and.w	r3, r3, #12
 8006818:	2b0c      	cmp	r3, #12
 800681a:	d82d      	bhi.n	8006878 <UART_SetConfig+0x14c>
 800681c:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <UART_SetConfig+0xf8>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006859 	.word	0x08006859
 8006828:	08006879 	.word	0x08006879
 800682c:	08006879 	.word	0x08006879
 8006830:	08006879 	.word	0x08006879
 8006834:	08006869 	.word	0x08006869
 8006838:	08006879 	.word	0x08006879
 800683c:	08006879 	.word	0x08006879
 8006840:	08006879 	.word	0x08006879
 8006844:	08006861 	.word	0x08006861
 8006848:	08006879 	.word	0x08006879
 800684c:	08006879 	.word	0x08006879
 8006850:	08006879 	.word	0x08006879
 8006854:	08006871 	.word	0x08006871
 8006858:	2300      	movs	r3, #0
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685e:	e06d      	b.n	800693c <UART_SetConfig+0x210>
 8006860:	2302      	movs	r3, #2
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006866:	e069      	b.n	800693c <UART_SetConfig+0x210>
 8006868:	2304      	movs	r3, #4
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	e065      	b.n	800693c <UART_SetConfig+0x210>
 8006870:	2308      	movs	r3, #8
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006876:	e061      	b.n	800693c <UART_SetConfig+0x210>
 8006878:	2310      	movs	r3, #16
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687e:	e05d      	b.n	800693c <UART_SetConfig+0x210>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a58      	ldr	r2, [pc, #352]	; (80069e8 <UART_SetConfig+0x2bc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d125      	bne.n	80068d6 <UART_SetConfig+0x1aa>
 800688a:	4b55      	ldr	r3, [pc, #340]	; (80069e0 <UART_SetConfig+0x2b4>)
 800688c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006890:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006894:	2b30      	cmp	r3, #48	; 0x30
 8006896:	d016      	beq.n	80068c6 <UART_SetConfig+0x19a>
 8006898:	2b30      	cmp	r3, #48	; 0x30
 800689a:	d818      	bhi.n	80068ce <UART_SetConfig+0x1a2>
 800689c:	2b20      	cmp	r3, #32
 800689e:	d00a      	beq.n	80068b6 <UART_SetConfig+0x18a>
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d814      	bhi.n	80068ce <UART_SetConfig+0x1a2>
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <UART_SetConfig+0x182>
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d008      	beq.n	80068be <UART_SetConfig+0x192>
 80068ac:	e00f      	b.n	80068ce <UART_SetConfig+0x1a2>
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b4:	e042      	b.n	800693c <UART_SetConfig+0x210>
 80068b6:	2302      	movs	r3, #2
 80068b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068bc:	e03e      	b.n	800693c <UART_SetConfig+0x210>
 80068be:	2304      	movs	r3, #4
 80068c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c4:	e03a      	b.n	800693c <UART_SetConfig+0x210>
 80068c6:	2308      	movs	r3, #8
 80068c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068cc:	e036      	b.n	800693c <UART_SetConfig+0x210>
 80068ce:	2310      	movs	r3, #16
 80068d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d4:	e032      	b.n	800693c <UART_SetConfig+0x210>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a3f      	ldr	r2, [pc, #252]	; (80069d8 <UART_SetConfig+0x2ac>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d12a      	bne.n	8006936 <UART_SetConfig+0x20a>
 80068e0:	4b3f      	ldr	r3, [pc, #252]	; (80069e0 <UART_SetConfig+0x2b4>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ee:	d01a      	beq.n	8006926 <UART_SetConfig+0x1fa>
 80068f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068f4:	d81b      	bhi.n	800692e <UART_SetConfig+0x202>
 80068f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068fa:	d00c      	beq.n	8006916 <UART_SetConfig+0x1ea>
 80068fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006900:	d815      	bhi.n	800692e <UART_SetConfig+0x202>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <UART_SetConfig+0x1e2>
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d008      	beq.n	800691e <UART_SetConfig+0x1f2>
 800690c:	e00f      	b.n	800692e <UART_SetConfig+0x202>
 800690e:	2300      	movs	r3, #0
 8006910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006914:	e012      	b.n	800693c <UART_SetConfig+0x210>
 8006916:	2302      	movs	r3, #2
 8006918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691c:	e00e      	b.n	800693c <UART_SetConfig+0x210>
 800691e:	2304      	movs	r3, #4
 8006920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006924:	e00a      	b.n	800693c <UART_SetConfig+0x210>
 8006926:	2308      	movs	r3, #8
 8006928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692c:	e006      	b.n	800693c <UART_SetConfig+0x210>
 800692e:	2310      	movs	r3, #16
 8006930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006934:	e002      	b.n	800693c <UART_SetConfig+0x210>
 8006936:	2310      	movs	r3, #16
 8006938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a25      	ldr	r2, [pc, #148]	; (80069d8 <UART_SetConfig+0x2ac>)
 8006942:	4293      	cmp	r3, r2
 8006944:	f040 808a 	bne.w	8006a5c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800694c:	2b08      	cmp	r3, #8
 800694e:	d824      	bhi.n	800699a <UART_SetConfig+0x26e>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x22c>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	0800697d 	.word	0x0800697d
 800695c:	0800699b 	.word	0x0800699b
 8006960:	08006985 	.word	0x08006985
 8006964:	0800699b 	.word	0x0800699b
 8006968:	0800698b 	.word	0x0800698b
 800696c:	0800699b 	.word	0x0800699b
 8006970:	0800699b 	.word	0x0800699b
 8006974:	0800699b 	.word	0x0800699b
 8006978:	08006993 	.word	0x08006993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800697c:	f7fe ffc2 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8006980:	61f8      	str	r0, [r7, #28]
        break;
 8006982:	e010      	b.n	80069a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006984:	4b19      	ldr	r3, [pc, #100]	; (80069ec <UART_SetConfig+0x2c0>)
 8006986:	61fb      	str	r3, [r7, #28]
        break;
 8006988:	e00d      	b.n	80069a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698a:	f7fe ff23 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 800698e:	61f8      	str	r0, [r7, #28]
        break;
 8006990:	e009      	b.n	80069a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006996:	61fb      	str	r3, [r7, #28]
        break;
 8006998:	e005      	b.n	80069a6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8109 	beq.w	8006bc0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	4613      	mov	r3, r2
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	4413      	add	r3, r2
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d305      	bcc.n	80069ca <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d912      	bls.n	80069f0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069d0:	e0f6      	b.n	8006bc0 <UART_SetConfig+0x494>
 80069d2:	bf00      	nop
 80069d4:	efff69f3 	.word	0xefff69f3
 80069d8:	40008000 	.word	0x40008000
 80069dc:	40013800 	.word	0x40013800
 80069e0:	40021000 	.word	0x40021000
 80069e4:	40004400 	.word	0x40004400
 80069e8:	40004800 	.word	0x40004800
 80069ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	2200      	movs	r2, #0
 80069f4:	461c      	mov	r4, r3
 80069f6:	4615      	mov	r5, r2
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	022b      	lsls	r3, r5, #8
 8006a02:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a06:	0222      	lsls	r2, r4, #8
 8006a08:	68f9      	ldr	r1, [r7, #12]
 8006a0a:	6849      	ldr	r1, [r1, #4]
 8006a0c:	0849      	lsrs	r1, r1, #1
 8006a0e:	2000      	movs	r0, #0
 8006a10:	4688      	mov	r8, r1
 8006a12:	4681      	mov	r9, r0
 8006a14:	eb12 0a08 	adds.w	sl, r2, r8
 8006a18:	eb43 0b09 	adc.w	fp, r3, r9
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2a:	4650      	mov	r0, sl
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	f7fa f90b 	bl	8000c48 <__aeabi_uldivmod>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4613      	mov	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a40:	d308      	bcc.n	8006a54 <UART_SetConfig+0x328>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a48:	d204      	bcs.n	8006a54 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	60da      	str	r2, [r3, #12]
 8006a52:	e0b5      	b.n	8006bc0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a5a:	e0b1      	b.n	8006bc0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a64:	d15d      	bne.n	8006b22 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d827      	bhi.n	8006abe <UART_SetConfig+0x392>
 8006a6e:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <UART_SetConfig+0x348>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006a99 	.word	0x08006a99
 8006a78:	08006aa1 	.word	0x08006aa1
 8006a7c:	08006aa9 	.word	0x08006aa9
 8006a80:	08006abf 	.word	0x08006abf
 8006a84:	08006aaf 	.word	0x08006aaf
 8006a88:	08006abf 	.word	0x08006abf
 8006a8c:	08006abf 	.word	0x08006abf
 8006a90:	08006abf 	.word	0x08006abf
 8006a94:	08006ab7 	.word	0x08006ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a98:	f7fe ff34 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8006a9c:	61f8      	str	r0, [r7, #28]
        break;
 8006a9e:	e014      	b.n	8006aca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa0:	f7fe ff46 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8006aa4:	61f8      	str	r0, [r7, #28]
        break;
 8006aa6:	e010      	b.n	8006aca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa8:	4b4c      	ldr	r3, [pc, #304]	; (8006bdc <UART_SetConfig+0x4b0>)
 8006aaa:	61fb      	str	r3, [r7, #28]
        break;
 8006aac:	e00d      	b.n	8006aca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aae:	f7fe fe91 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8006ab2:	61f8      	str	r0, [r7, #28]
        break;
 8006ab4:	e009      	b.n	8006aca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aba:	61fb      	str	r3, [r7, #28]
        break;
 8006abc:	e005      	b.n	8006aca <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d077      	beq.n	8006bc0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	005a      	lsls	r2, r3, #1
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	441a      	add	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b0f      	cmp	r3, #15
 8006aea:	d916      	bls.n	8006b1a <UART_SetConfig+0x3ee>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af2:	d212      	bcs.n	8006b1a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f023 030f 	bic.w	r3, r3, #15
 8006afc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	085b      	lsrs	r3, r3, #1
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	8afb      	ldrh	r3, [r7, #22]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	8afa      	ldrh	r2, [r7, #22]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e052      	b.n	8006bc0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b20:	e04e      	b.n	8006bc0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d827      	bhi.n	8006b7a <UART_SetConfig+0x44e>
 8006b2a:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <UART_SetConfig+0x404>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b5d 	.word	0x08006b5d
 8006b38:	08006b65 	.word	0x08006b65
 8006b3c:	08006b7b 	.word	0x08006b7b
 8006b40:	08006b6b 	.word	0x08006b6b
 8006b44:	08006b7b 	.word	0x08006b7b
 8006b48:	08006b7b 	.word	0x08006b7b
 8006b4c:	08006b7b 	.word	0x08006b7b
 8006b50:	08006b73 	.word	0x08006b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b54:	f7fe fed6 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8006b58:	61f8      	str	r0, [r7, #28]
        break;
 8006b5a:	e014      	b.n	8006b86 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b5c:	f7fe fee8 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8006b60:	61f8      	str	r0, [r7, #28]
        break;
 8006b62:	e010      	b.n	8006b86 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b64:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <UART_SetConfig+0x4b0>)
 8006b66:	61fb      	str	r3, [r7, #28]
        break;
 8006b68:	e00d      	b.n	8006b86 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6a:	f7fe fe33 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8006b6e:	61f8      	str	r0, [r7, #28]
        break;
 8006b70:	e009      	b.n	8006b86 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b76:	61fb      	str	r3, [r7, #28]
        break;
 8006b78:	e005      	b.n	8006b86 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b84:	bf00      	nop
    }

    if (pclk != 0U)
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d019      	beq.n	8006bc0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	085a      	lsrs	r2, r3, #1
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	441a      	add	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b0f      	cmp	r3, #15
 8006ba4:	d909      	bls.n	8006bba <UART_SetConfig+0x48e>
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d205      	bcs.n	8006bba <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60da      	str	r2, [r3, #12]
 8006bb8:	e002      	b.n	8006bc0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006bcc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3728      	adds	r7, #40	; 0x28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bda:	bf00      	nop
 8006bdc:	00f42400 	.word	0x00f42400

08006be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cde:	d10a      	bne.n	8006cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	605a      	str	r2, [r3, #4]
  }
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b098      	sub	sp, #96	; 0x60
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d34:	f7fc f98a 	bl	800304c <HAL_GetTick>
 8006d38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d12e      	bne.n	8006da6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d50:	2200      	movs	r2, #0
 8006d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f88c 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d021      	beq.n	8006da6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d76:	653b      	str	r3, [r7, #80]	; 0x50
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d80:	647b      	str	r3, [r7, #68]	; 0x44
 8006d82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e6      	bne.n	8006d62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e062      	b.n	8006e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d149      	bne.n	8006e48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f856 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d03c      	beq.n	8006e48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	623b      	str	r3, [r7, #32]
   return(result);
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dec:	633b      	str	r3, [r7, #48]	; 0x30
 8006dee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e6      	bne.n	8006dce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e20:	61fa      	str	r2, [r7, #28]
 8006e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	69b9      	ldr	r1, [r7, #24]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e011      	b.n	8006e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3758      	adds	r7, #88	; 0x58
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	4613      	mov	r3, r2
 8006e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e84:	e049      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8c:	d045      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8e:	f7fc f8dd 	bl	800304c <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d302      	bcc.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e048      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d031      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d110      	bne.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2208      	movs	r2, #8
 8006eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 f838 	bl	8006f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e029      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef4:	d111      	bne.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 f81e 	bl	8006f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e00f      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69da      	ldr	r2, [r3, #28]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	bf0c      	ite	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	2300      	movne	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d0a6      	beq.n	8006e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b095      	sub	sp, #84	; 0x54
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f68:	643b      	str	r3, [r7, #64]	; 0x40
 8006f6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e6      	bne.n	8006f4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e5      	bne.n	8006f7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d118      	bne.n	8006fea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f023 0310 	bic.w	r3, r3, #16
 8006fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6979      	ldr	r1, [r7, #20]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e6      	bne.n	8006fb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ffe:	bf00      	nop
 8007000:	3754      	adds	r7, #84	; 0x54
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <sniprintf>:
 800700c:	b40c      	push	{r2, r3}
 800700e:	b530      	push	{r4, r5, lr}
 8007010:	4b17      	ldr	r3, [pc, #92]	; (8007070 <sniprintf+0x64>)
 8007012:	1e0c      	subs	r4, r1, #0
 8007014:	681d      	ldr	r5, [r3, #0]
 8007016:	b09d      	sub	sp, #116	; 0x74
 8007018:	da08      	bge.n	800702c <sniprintf+0x20>
 800701a:	238b      	movs	r3, #139	; 0x8b
 800701c:	602b      	str	r3, [r5, #0]
 800701e:	f04f 30ff 	mov.w	r0, #4294967295
 8007022:	b01d      	add	sp, #116	; 0x74
 8007024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007028:	b002      	add	sp, #8
 800702a:	4770      	bx	lr
 800702c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007030:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007034:	bf14      	ite	ne
 8007036:	f104 33ff 	addne.w	r3, r4, #4294967295
 800703a:	4623      	moveq	r3, r4
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	9307      	str	r3, [sp, #28]
 8007040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007044:	9002      	str	r0, [sp, #8]
 8007046:	9006      	str	r0, [sp, #24]
 8007048:	f8ad 3016 	strh.w	r3, [sp, #22]
 800704c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800704e:	ab21      	add	r3, sp, #132	; 0x84
 8007050:	a902      	add	r1, sp, #8
 8007052:	4628      	mov	r0, r5
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	f000 f9b5 	bl	80073c4 <_svfiprintf_r>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	bfbc      	itt	lt
 800705e:	238b      	movlt	r3, #139	; 0x8b
 8007060:	602b      	strlt	r3, [r5, #0]
 8007062:	2c00      	cmp	r4, #0
 8007064:	d0dd      	beq.n	8007022 <sniprintf+0x16>
 8007066:	9b02      	ldr	r3, [sp, #8]
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	e7d9      	b.n	8007022 <sniprintf+0x16>
 800706e:	bf00      	nop
 8007070:	20000058 	.word	0x20000058

08007074 <memset>:
 8007074:	4402      	add	r2, r0
 8007076:	4603      	mov	r3, r0
 8007078:	4293      	cmp	r3, r2
 800707a:	d100      	bne.n	800707e <memset+0xa>
 800707c:	4770      	bx	lr
 800707e:	f803 1b01 	strb.w	r1, [r3], #1
 8007082:	e7f9      	b.n	8007078 <memset+0x4>

08007084 <strncat>:
 8007084:	b530      	push	{r4, r5, lr}
 8007086:	4604      	mov	r4, r0
 8007088:	7825      	ldrb	r5, [r4, #0]
 800708a:	4623      	mov	r3, r4
 800708c:	3401      	adds	r4, #1
 800708e:	2d00      	cmp	r5, #0
 8007090:	d1fa      	bne.n	8007088 <strncat+0x4>
 8007092:	3a01      	subs	r2, #1
 8007094:	d304      	bcc.n	80070a0 <strncat+0x1c>
 8007096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800709a:	f803 4b01 	strb.w	r4, [r3], #1
 800709e:	b904      	cbnz	r4, 80070a2 <strncat+0x1e>
 80070a0:	bd30      	pop	{r4, r5, pc}
 80070a2:	2a00      	cmp	r2, #0
 80070a4:	d1f5      	bne.n	8007092 <strncat+0xe>
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	e7f3      	b.n	8007092 <strncat+0xe>
	...

080070ac <__errno>:
 80070ac:	4b01      	ldr	r3, [pc, #4]	; (80070b4 <__errno+0x8>)
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000058 	.word	0x20000058

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4d0d      	ldr	r5, [pc, #52]	; (80070f0 <__libc_init_array+0x38>)
 80070bc:	4c0d      	ldr	r4, [pc, #52]	; (80070f4 <__libc_init_array+0x3c>)
 80070be:	1b64      	subs	r4, r4, r5
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	2600      	movs	r6, #0
 80070c4:	42a6      	cmp	r6, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	4d0b      	ldr	r5, [pc, #44]	; (80070f8 <__libc_init_array+0x40>)
 80070ca:	4c0c      	ldr	r4, [pc, #48]	; (80070fc <__libc_init_array+0x44>)
 80070cc:	f000 fe6e 	bl	8007dac <_init>
 80070d0:	1b64      	subs	r4, r4, r5
 80070d2:	10a4      	asrs	r4, r4, #2
 80070d4:	2600      	movs	r6, #0
 80070d6:	42a6      	cmp	r6, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e0:	4798      	blx	r3
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ea:	4798      	blx	r3
 80070ec:	3601      	adds	r6, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	08008380 	.word	0x08008380
 80070f4:	08008380 	.word	0x08008380
 80070f8:	08008380 	.word	0x08008380
 80070fc:	08008384 	.word	0x08008384

08007100 <__retarget_lock_acquire_recursive>:
 8007100:	4770      	bx	lr

08007102 <__retarget_lock_release_recursive>:
 8007102:	4770      	bx	lr

08007104 <memcpy>:
 8007104:	440a      	add	r2, r1
 8007106:	4291      	cmp	r1, r2
 8007108:	f100 33ff 	add.w	r3, r0, #4294967295
 800710c:	d100      	bne.n	8007110 <memcpy+0xc>
 800710e:	4770      	bx	lr
 8007110:	b510      	push	{r4, lr}
 8007112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800711a:	4291      	cmp	r1, r2
 800711c:	d1f9      	bne.n	8007112 <memcpy+0xe>
 800711e:	bd10      	pop	{r4, pc}

08007120 <_free_r>:
 8007120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007122:	2900      	cmp	r1, #0
 8007124:	d044      	beq.n	80071b0 <_free_r+0x90>
 8007126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800712a:	9001      	str	r0, [sp, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f1a1 0404 	sub.w	r4, r1, #4
 8007132:	bfb8      	it	lt
 8007134:	18e4      	addlt	r4, r4, r3
 8007136:	f000 f8df 	bl	80072f8 <__malloc_lock>
 800713a:	4a1e      	ldr	r2, [pc, #120]	; (80071b4 <_free_r+0x94>)
 800713c:	9801      	ldr	r0, [sp, #4]
 800713e:	6813      	ldr	r3, [r2, #0]
 8007140:	b933      	cbnz	r3, 8007150 <_free_r+0x30>
 8007142:	6063      	str	r3, [r4, #4]
 8007144:	6014      	str	r4, [r2, #0]
 8007146:	b003      	add	sp, #12
 8007148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800714c:	f000 b8da 	b.w	8007304 <__malloc_unlock>
 8007150:	42a3      	cmp	r3, r4
 8007152:	d908      	bls.n	8007166 <_free_r+0x46>
 8007154:	6825      	ldr	r5, [r4, #0]
 8007156:	1961      	adds	r1, r4, r5
 8007158:	428b      	cmp	r3, r1
 800715a:	bf01      	itttt	eq
 800715c:	6819      	ldreq	r1, [r3, #0]
 800715e:	685b      	ldreq	r3, [r3, #4]
 8007160:	1949      	addeq	r1, r1, r5
 8007162:	6021      	streq	r1, [r4, #0]
 8007164:	e7ed      	b.n	8007142 <_free_r+0x22>
 8007166:	461a      	mov	r2, r3
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	b10b      	cbz	r3, 8007170 <_free_r+0x50>
 800716c:	42a3      	cmp	r3, r4
 800716e:	d9fa      	bls.n	8007166 <_free_r+0x46>
 8007170:	6811      	ldr	r1, [r2, #0]
 8007172:	1855      	adds	r5, r2, r1
 8007174:	42a5      	cmp	r5, r4
 8007176:	d10b      	bne.n	8007190 <_free_r+0x70>
 8007178:	6824      	ldr	r4, [r4, #0]
 800717a:	4421      	add	r1, r4
 800717c:	1854      	adds	r4, r2, r1
 800717e:	42a3      	cmp	r3, r4
 8007180:	6011      	str	r1, [r2, #0]
 8007182:	d1e0      	bne.n	8007146 <_free_r+0x26>
 8007184:	681c      	ldr	r4, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	6053      	str	r3, [r2, #4]
 800718a:	440c      	add	r4, r1
 800718c:	6014      	str	r4, [r2, #0]
 800718e:	e7da      	b.n	8007146 <_free_r+0x26>
 8007190:	d902      	bls.n	8007198 <_free_r+0x78>
 8007192:	230c      	movs	r3, #12
 8007194:	6003      	str	r3, [r0, #0]
 8007196:	e7d6      	b.n	8007146 <_free_r+0x26>
 8007198:	6825      	ldr	r5, [r4, #0]
 800719a:	1961      	adds	r1, r4, r5
 800719c:	428b      	cmp	r3, r1
 800719e:	bf04      	itt	eq
 80071a0:	6819      	ldreq	r1, [r3, #0]
 80071a2:	685b      	ldreq	r3, [r3, #4]
 80071a4:	6063      	str	r3, [r4, #4]
 80071a6:	bf04      	itt	eq
 80071a8:	1949      	addeq	r1, r1, r5
 80071aa:	6021      	streq	r1, [r4, #0]
 80071ac:	6054      	str	r4, [r2, #4]
 80071ae:	e7ca      	b.n	8007146 <_free_r+0x26>
 80071b0:	b003      	add	sp, #12
 80071b2:	bd30      	pop	{r4, r5, pc}
 80071b4:	20000314 	.word	0x20000314

080071b8 <sbrk_aligned>:
 80071b8:	b570      	push	{r4, r5, r6, lr}
 80071ba:	4e0e      	ldr	r6, [pc, #56]	; (80071f4 <sbrk_aligned+0x3c>)
 80071bc:	460c      	mov	r4, r1
 80071be:	6831      	ldr	r1, [r6, #0]
 80071c0:	4605      	mov	r5, r0
 80071c2:	b911      	cbnz	r1, 80071ca <sbrk_aligned+0x12>
 80071c4:	f000 fba6 	bl	8007914 <_sbrk_r>
 80071c8:	6030      	str	r0, [r6, #0]
 80071ca:	4621      	mov	r1, r4
 80071cc:	4628      	mov	r0, r5
 80071ce:	f000 fba1 	bl	8007914 <_sbrk_r>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	d00a      	beq.n	80071ec <sbrk_aligned+0x34>
 80071d6:	1cc4      	adds	r4, r0, #3
 80071d8:	f024 0403 	bic.w	r4, r4, #3
 80071dc:	42a0      	cmp	r0, r4
 80071de:	d007      	beq.n	80071f0 <sbrk_aligned+0x38>
 80071e0:	1a21      	subs	r1, r4, r0
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 fb96 	bl	8007914 <_sbrk_r>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d101      	bne.n	80071f0 <sbrk_aligned+0x38>
 80071ec:	f04f 34ff 	mov.w	r4, #4294967295
 80071f0:	4620      	mov	r0, r4
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	20000318 	.word	0x20000318

080071f8 <_malloc_r>:
 80071f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071fc:	1ccd      	adds	r5, r1, #3
 80071fe:	f025 0503 	bic.w	r5, r5, #3
 8007202:	3508      	adds	r5, #8
 8007204:	2d0c      	cmp	r5, #12
 8007206:	bf38      	it	cc
 8007208:	250c      	movcc	r5, #12
 800720a:	2d00      	cmp	r5, #0
 800720c:	4607      	mov	r7, r0
 800720e:	db01      	blt.n	8007214 <_malloc_r+0x1c>
 8007210:	42a9      	cmp	r1, r5
 8007212:	d905      	bls.n	8007220 <_malloc_r+0x28>
 8007214:	230c      	movs	r3, #12
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	2600      	movs	r6, #0
 800721a:	4630      	mov	r0, r6
 800721c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007220:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80072f4 <_malloc_r+0xfc>
 8007224:	f000 f868 	bl	80072f8 <__malloc_lock>
 8007228:	f8d8 3000 	ldr.w	r3, [r8]
 800722c:	461c      	mov	r4, r3
 800722e:	bb5c      	cbnz	r4, 8007288 <_malloc_r+0x90>
 8007230:	4629      	mov	r1, r5
 8007232:	4638      	mov	r0, r7
 8007234:	f7ff ffc0 	bl	80071b8 <sbrk_aligned>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	4604      	mov	r4, r0
 800723c:	d155      	bne.n	80072ea <_malloc_r+0xf2>
 800723e:	f8d8 4000 	ldr.w	r4, [r8]
 8007242:	4626      	mov	r6, r4
 8007244:	2e00      	cmp	r6, #0
 8007246:	d145      	bne.n	80072d4 <_malloc_r+0xdc>
 8007248:	2c00      	cmp	r4, #0
 800724a:	d048      	beq.n	80072de <_malloc_r+0xe6>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	4631      	mov	r1, r6
 8007250:	4638      	mov	r0, r7
 8007252:	eb04 0903 	add.w	r9, r4, r3
 8007256:	f000 fb5d 	bl	8007914 <_sbrk_r>
 800725a:	4581      	cmp	r9, r0
 800725c:	d13f      	bne.n	80072de <_malloc_r+0xe6>
 800725e:	6821      	ldr	r1, [r4, #0]
 8007260:	1a6d      	subs	r5, r5, r1
 8007262:	4629      	mov	r1, r5
 8007264:	4638      	mov	r0, r7
 8007266:	f7ff ffa7 	bl	80071b8 <sbrk_aligned>
 800726a:	3001      	adds	r0, #1
 800726c:	d037      	beq.n	80072de <_malloc_r+0xe6>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	442b      	add	r3, r5
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	f8d8 3000 	ldr.w	r3, [r8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d038      	beq.n	80072ee <_malloc_r+0xf6>
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	42a2      	cmp	r2, r4
 8007280:	d12b      	bne.n	80072da <_malloc_r+0xe2>
 8007282:	2200      	movs	r2, #0
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	e00f      	b.n	80072a8 <_malloc_r+0xb0>
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	1b52      	subs	r2, r2, r5
 800728c:	d41f      	bmi.n	80072ce <_malloc_r+0xd6>
 800728e:	2a0b      	cmp	r2, #11
 8007290:	d917      	bls.n	80072c2 <_malloc_r+0xca>
 8007292:	1961      	adds	r1, r4, r5
 8007294:	42a3      	cmp	r3, r4
 8007296:	6025      	str	r5, [r4, #0]
 8007298:	bf18      	it	ne
 800729a:	6059      	strne	r1, [r3, #4]
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	bf08      	it	eq
 80072a0:	f8c8 1000 	streq.w	r1, [r8]
 80072a4:	5162      	str	r2, [r4, r5]
 80072a6:	604b      	str	r3, [r1, #4]
 80072a8:	4638      	mov	r0, r7
 80072aa:	f104 060b 	add.w	r6, r4, #11
 80072ae:	f000 f829 	bl	8007304 <__malloc_unlock>
 80072b2:	f026 0607 	bic.w	r6, r6, #7
 80072b6:	1d23      	adds	r3, r4, #4
 80072b8:	1af2      	subs	r2, r6, r3
 80072ba:	d0ae      	beq.n	800721a <_malloc_r+0x22>
 80072bc:	1b9b      	subs	r3, r3, r6
 80072be:	50a3      	str	r3, [r4, r2]
 80072c0:	e7ab      	b.n	800721a <_malloc_r+0x22>
 80072c2:	42a3      	cmp	r3, r4
 80072c4:	6862      	ldr	r2, [r4, #4]
 80072c6:	d1dd      	bne.n	8007284 <_malloc_r+0x8c>
 80072c8:	f8c8 2000 	str.w	r2, [r8]
 80072cc:	e7ec      	b.n	80072a8 <_malloc_r+0xb0>
 80072ce:	4623      	mov	r3, r4
 80072d0:	6864      	ldr	r4, [r4, #4]
 80072d2:	e7ac      	b.n	800722e <_malloc_r+0x36>
 80072d4:	4634      	mov	r4, r6
 80072d6:	6876      	ldr	r6, [r6, #4]
 80072d8:	e7b4      	b.n	8007244 <_malloc_r+0x4c>
 80072da:	4613      	mov	r3, r2
 80072dc:	e7cc      	b.n	8007278 <_malloc_r+0x80>
 80072de:	230c      	movs	r3, #12
 80072e0:	603b      	str	r3, [r7, #0]
 80072e2:	4638      	mov	r0, r7
 80072e4:	f000 f80e 	bl	8007304 <__malloc_unlock>
 80072e8:	e797      	b.n	800721a <_malloc_r+0x22>
 80072ea:	6025      	str	r5, [r4, #0]
 80072ec:	e7dc      	b.n	80072a8 <_malloc_r+0xb0>
 80072ee:	605b      	str	r3, [r3, #4]
 80072f0:	deff      	udf	#255	; 0xff
 80072f2:	bf00      	nop
 80072f4:	20000314 	.word	0x20000314

080072f8 <__malloc_lock>:
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <__malloc_lock+0x8>)
 80072fa:	f7ff bf01 	b.w	8007100 <__retarget_lock_acquire_recursive>
 80072fe:	bf00      	nop
 8007300:	20000310 	.word	0x20000310

08007304 <__malloc_unlock>:
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <__malloc_unlock+0x8>)
 8007306:	f7ff befc 	b.w	8007102 <__retarget_lock_release_recursive>
 800730a:	bf00      	nop
 800730c:	20000310 	.word	0x20000310

08007310 <__ssputs_r>:
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	688e      	ldr	r6, [r1, #8]
 8007316:	461f      	mov	r7, r3
 8007318:	42be      	cmp	r6, r7
 800731a:	680b      	ldr	r3, [r1, #0]
 800731c:	4682      	mov	sl, r0
 800731e:	460c      	mov	r4, r1
 8007320:	4690      	mov	r8, r2
 8007322:	d82c      	bhi.n	800737e <__ssputs_r+0x6e>
 8007324:	898a      	ldrh	r2, [r1, #12]
 8007326:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800732a:	d026      	beq.n	800737a <__ssputs_r+0x6a>
 800732c:	6965      	ldr	r5, [r4, #20]
 800732e:	6909      	ldr	r1, [r1, #16]
 8007330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007334:	eba3 0901 	sub.w	r9, r3, r1
 8007338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800733c:	1c7b      	adds	r3, r7, #1
 800733e:	444b      	add	r3, r9
 8007340:	106d      	asrs	r5, r5, #1
 8007342:	429d      	cmp	r5, r3
 8007344:	bf38      	it	cc
 8007346:	461d      	movcc	r5, r3
 8007348:	0553      	lsls	r3, r2, #21
 800734a:	d527      	bpl.n	800739c <__ssputs_r+0x8c>
 800734c:	4629      	mov	r1, r5
 800734e:	f7ff ff53 	bl	80071f8 <_malloc_r>
 8007352:	4606      	mov	r6, r0
 8007354:	b360      	cbz	r0, 80073b0 <__ssputs_r+0xa0>
 8007356:	6921      	ldr	r1, [r4, #16]
 8007358:	464a      	mov	r2, r9
 800735a:	f7ff fed3 	bl	8007104 <memcpy>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	6126      	str	r6, [r4, #16]
 800736c:	6165      	str	r5, [r4, #20]
 800736e:	444e      	add	r6, r9
 8007370:	eba5 0509 	sub.w	r5, r5, r9
 8007374:	6026      	str	r6, [r4, #0]
 8007376:	60a5      	str	r5, [r4, #8]
 8007378:	463e      	mov	r6, r7
 800737a:	42be      	cmp	r6, r7
 800737c:	d900      	bls.n	8007380 <__ssputs_r+0x70>
 800737e:	463e      	mov	r6, r7
 8007380:	6820      	ldr	r0, [r4, #0]
 8007382:	4632      	mov	r2, r6
 8007384:	4641      	mov	r1, r8
 8007386:	f000 faab 	bl	80078e0 <memmove>
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	1b9b      	subs	r3, r3, r6
 800738e:	60a3      	str	r3, [r4, #8]
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	4433      	add	r3, r6
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	2000      	movs	r0, #0
 8007398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739c:	462a      	mov	r2, r5
 800739e:	f000 fac9 	bl	8007934 <_realloc_r>
 80073a2:	4606      	mov	r6, r0
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d1e0      	bne.n	800736a <__ssputs_r+0x5a>
 80073a8:	6921      	ldr	r1, [r4, #16]
 80073aa:	4650      	mov	r0, sl
 80073ac:	f7ff feb8 	bl	8007120 <_free_r>
 80073b0:	230c      	movs	r3, #12
 80073b2:	f8ca 3000 	str.w	r3, [sl]
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	f04f 30ff 	mov.w	r0, #4294967295
 80073c2:	e7e9      	b.n	8007398 <__ssputs_r+0x88>

080073c4 <_svfiprintf_r>:
 80073c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c8:	4698      	mov	r8, r3
 80073ca:	898b      	ldrh	r3, [r1, #12]
 80073cc:	061b      	lsls	r3, r3, #24
 80073ce:	b09d      	sub	sp, #116	; 0x74
 80073d0:	4607      	mov	r7, r0
 80073d2:	460d      	mov	r5, r1
 80073d4:	4614      	mov	r4, r2
 80073d6:	d50e      	bpl.n	80073f6 <_svfiprintf_r+0x32>
 80073d8:	690b      	ldr	r3, [r1, #16]
 80073da:	b963      	cbnz	r3, 80073f6 <_svfiprintf_r+0x32>
 80073dc:	2140      	movs	r1, #64	; 0x40
 80073de:	f7ff ff0b 	bl	80071f8 <_malloc_r>
 80073e2:	6028      	str	r0, [r5, #0]
 80073e4:	6128      	str	r0, [r5, #16]
 80073e6:	b920      	cbnz	r0, 80073f2 <_svfiprintf_r+0x2e>
 80073e8:	230c      	movs	r3, #12
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	e0d0      	b.n	8007594 <_svfiprintf_r+0x1d0>
 80073f2:	2340      	movs	r3, #64	; 0x40
 80073f4:	616b      	str	r3, [r5, #20]
 80073f6:	2300      	movs	r3, #0
 80073f8:	9309      	str	r3, [sp, #36]	; 0x24
 80073fa:	2320      	movs	r3, #32
 80073fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007400:	f8cd 800c 	str.w	r8, [sp, #12]
 8007404:	2330      	movs	r3, #48	; 0x30
 8007406:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80075ac <_svfiprintf_r+0x1e8>
 800740a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800740e:	f04f 0901 	mov.w	r9, #1
 8007412:	4623      	mov	r3, r4
 8007414:	469a      	mov	sl, r3
 8007416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800741a:	b10a      	cbz	r2, 8007420 <_svfiprintf_r+0x5c>
 800741c:	2a25      	cmp	r2, #37	; 0x25
 800741e:	d1f9      	bne.n	8007414 <_svfiprintf_r+0x50>
 8007420:	ebba 0b04 	subs.w	fp, sl, r4
 8007424:	d00b      	beq.n	800743e <_svfiprintf_r+0x7a>
 8007426:	465b      	mov	r3, fp
 8007428:	4622      	mov	r2, r4
 800742a:	4629      	mov	r1, r5
 800742c:	4638      	mov	r0, r7
 800742e:	f7ff ff6f 	bl	8007310 <__ssputs_r>
 8007432:	3001      	adds	r0, #1
 8007434:	f000 80a9 	beq.w	800758a <_svfiprintf_r+0x1c6>
 8007438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800743a:	445a      	add	r2, fp
 800743c:	9209      	str	r2, [sp, #36]	; 0x24
 800743e:	f89a 3000 	ldrb.w	r3, [sl]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 80a1 	beq.w	800758a <_svfiprintf_r+0x1c6>
 8007448:	2300      	movs	r3, #0
 800744a:	f04f 32ff 	mov.w	r2, #4294967295
 800744e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007452:	f10a 0a01 	add.w	sl, sl, #1
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	9307      	str	r3, [sp, #28]
 800745a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800745e:	931a      	str	r3, [sp, #104]	; 0x68
 8007460:	4654      	mov	r4, sl
 8007462:	2205      	movs	r2, #5
 8007464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007468:	4850      	ldr	r0, [pc, #320]	; (80075ac <_svfiprintf_r+0x1e8>)
 800746a:	f7f8 feb9 	bl	80001e0 <memchr>
 800746e:	9a04      	ldr	r2, [sp, #16]
 8007470:	b9d8      	cbnz	r0, 80074aa <_svfiprintf_r+0xe6>
 8007472:	06d0      	lsls	r0, r2, #27
 8007474:	bf44      	itt	mi
 8007476:	2320      	movmi	r3, #32
 8007478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800747c:	0711      	lsls	r1, r2, #28
 800747e:	bf44      	itt	mi
 8007480:	232b      	movmi	r3, #43	; 0x2b
 8007482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007486:	f89a 3000 	ldrb.w	r3, [sl]
 800748a:	2b2a      	cmp	r3, #42	; 0x2a
 800748c:	d015      	beq.n	80074ba <_svfiprintf_r+0xf6>
 800748e:	9a07      	ldr	r2, [sp, #28]
 8007490:	4654      	mov	r4, sl
 8007492:	2000      	movs	r0, #0
 8007494:	f04f 0c0a 	mov.w	ip, #10
 8007498:	4621      	mov	r1, r4
 800749a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800749e:	3b30      	subs	r3, #48	; 0x30
 80074a0:	2b09      	cmp	r3, #9
 80074a2:	d94d      	bls.n	8007540 <_svfiprintf_r+0x17c>
 80074a4:	b1b0      	cbz	r0, 80074d4 <_svfiprintf_r+0x110>
 80074a6:	9207      	str	r2, [sp, #28]
 80074a8:	e014      	b.n	80074d4 <_svfiprintf_r+0x110>
 80074aa:	eba0 0308 	sub.w	r3, r0, r8
 80074ae:	fa09 f303 	lsl.w	r3, r9, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	46a2      	mov	sl, r4
 80074b8:	e7d2      	b.n	8007460 <_svfiprintf_r+0x9c>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	1d19      	adds	r1, r3, #4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	9103      	str	r1, [sp, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	bfbb      	ittet	lt
 80074c6:	425b      	neglt	r3, r3
 80074c8:	f042 0202 	orrlt.w	r2, r2, #2
 80074cc:	9307      	strge	r3, [sp, #28]
 80074ce:	9307      	strlt	r3, [sp, #28]
 80074d0:	bfb8      	it	lt
 80074d2:	9204      	strlt	r2, [sp, #16]
 80074d4:	7823      	ldrb	r3, [r4, #0]
 80074d6:	2b2e      	cmp	r3, #46	; 0x2e
 80074d8:	d10c      	bne.n	80074f4 <_svfiprintf_r+0x130>
 80074da:	7863      	ldrb	r3, [r4, #1]
 80074dc:	2b2a      	cmp	r3, #42	; 0x2a
 80074de:	d134      	bne.n	800754a <_svfiprintf_r+0x186>
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	1d1a      	adds	r2, r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	9203      	str	r2, [sp, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bfb8      	it	lt
 80074ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80074f0:	3402      	adds	r4, #2
 80074f2:	9305      	str	r3, [sp, #20]
 80074f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80075bc <_svfiprintf_r+0x1f8>
 80074f8:	7821      	ldrb	r1, [r4, #0]
 80074fa:	2203      	movs	r2, #3
 80074fc:	4650      	mov	r0, sl
 80074fe:	f7f8 fe6f 	bl	80001e0 <memchr>
 8007502:	b138      	cbz	r0, 8007514 <_svfiprintf_r+0x150>
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	eba0 000a 	sub.w	r0, r0, sl
 800750a:	2240      	movs	r2, #64	; 0x40
 800750c:	4082      	lsls	r2, r0
 800750e:	4313      	orrs	r3, r2
 8007510:	3401      	adds	r4, #1
 8007512:	9304      	str	r3, [sp, #16]
 8007514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007518:	4825      	ldr	r0, [pc, #148]	; (80075b0 <_svfiprintf_r+0x1ec>)
 800751a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800751e:	2206      	movs	r2, #6
 8007520:	f7f8 fe5e 	bl	80001e0 <memchr>
 8007524:	2800      	cmp	r0, #0
 8007526:	d038      	beq.n	800759a <_svfiprintf_r+0x1d6>
 8007528:	4b22      	ldr	r3, [pc, #136]	; (80075b4 <_svfiprintf_r+0x1f0>)
 800752a:	bb1b      	cbnz	r3, 8007574 <_svfiprintf_r+0x1b0>
 800752c:	9b03      	ldr	r3, [sp, #12]
 800752e:	3307      	adds	r3, #7
 8007530:	f023 0307 	bic.w	r3, r3, #7
 8007534:	3308      	adds	r3, #8
 8007536:	9303      	str	r3, [sp, #12]
 8007538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800753a:	4433      	add	r3, r6
 800753c:	9309      	str	r3, [sp, #36]	; 0x24
 800753e:	e768      	b.n	8007412 <_svfiprintf_r+0x4e>
 8007540:	fb0c 3202 	mla	r2, ip, r2, r3
 8007544:	460c      	mov	r4, r1
 8007546:	2001      	movs	r0, #1
 8007548:	e7a6      	b.n	8007498 <_svfiprintf_r+0xd4>
 800754a:	2300      	movs	r3, #0
 800754c:	3401      	adds	r4, #1
 800754e:	9305      	str	r3, [sp, #20]
 8007550:	4619      	mov	r1, r3
 8007552:	f04f 0c0a 	mov.w	ip, #10
 8007556:	4620      	mov	r0, r4
 8007558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800755c:	3a30      	subs	r2, #48	; 0x30
 800755e:	2a09      	cmp	r2, #9
 8007560:	d903      	bls.n	800756a <_svfiprintf_r+0x1a6>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0c6      	beq.n	80074f4 <_svfiprintf_r+0x130>
 8007566:	9105      	str	r1, [sp, #20]
 8007568:	e7c4      	b.n	80074f4 <_svfiprintf_r+0x130>
 800756a:	fb0c 2101 	mla	r1, ip, r1, r2
 800756e:	4604      	mov	r4, r0
 8007570:	2301      	movs	r3, #1
 8007572:	e7f0      	b.n	8007556 <_svfiprintf_r+0x192>
 8007574:	ab03      	add	r3, sp, #12
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	462a      	mov	r2, r5
 800757a:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <_svfiprintf_r+0x1f4>)
 800757c:	a904      	add	r1, sp, #16
 800757e:	4638      	mov	r0, r7
 8007580:	f3af 8000 	nop.w
 8007584:	1c42      	adds	r2, r0, #1
 8007586:	4606      	mov	r6, r0
 8007588:	d1d6      	bne.n	8007538 <_svfiprintf_r+0x174>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	065b      	lsls	r3, r3, #25
 800758e:	f53f af2d 	bmi.w	80073ec <_svfiprintf_r+0x28>
 8007592:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007594:	b01d      	add	sp, #116	; 0x74
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	ab03      	add	r3, sp, #12
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	462a      	mov	r2, r5
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <_svfiprintf_r+0x1f4>)
 80075a2:	a904      	add	r1, sp, #16
 80075a4:	4638      	mov	r0, r7
 80075a6:	f000 f879 	bl	800769c <_printf_i>
 80075aa:	e7eb      	b.n	8007584 <_svfiprintf_r+0x1c0>
 80075ac:	08008344 	.word	0x08008344
 80075b0:	0800834e 	.word	0x0800834e
 80075b4:	00000000 	.word	0x00000000
 80075b8:	08007311 	.word	0x08007311
 80075bc:	0800834a 	.word	0x0800834a

080075c0 <_printf_common>:
 80075c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c4:	4616      	mov	r6, r2
 80075c6:	4699      	mov	r9, r3
 80075c8:	688a      	ldr	r2, [r1, #8]
 80075ca:	690b      	ldr	r3, [r1, #16]
 80075cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075d0:	4293      	cmp	r3, r2
 80075d2:	bfb8      	it	lt
 80075d4:	4613      	movlt	r3, r2
 80075d6:	6033      	str	r3, [r6, #0]
 80075d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075dc:	4607      	mov	r7, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	b10a      	cbz	r2, 80075e6 <_printf_common+0x26>
 80075e2:	3301      	adds	r3, #1
 80075e4:	6033      	str	r3, [r6, #0]
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	0699      	lsls	r1, r3, #26
 80075ea:	bf42      	ittt	mi
 80075ec:	6833      	ldrmi	r3, [r6, #0]
 80075ee:	3302      	addmi	r3, #2
 80075f0:	6033      	strmi	r3, [r6, #0]
 80075f2:	6825      	ldr	r5, [r4, #0]
 80075f4:	f015 0506 	ands.w	r5, r5, #6
 80075f8:	d106      	bne.n	8007608 <_printf_common+0x48>
 80075fa:	f104 0a19 	add.w	sl, r4, #25
 80075fe:	68e3      	ldr	r3, [r4, #12]
 8007600:	6832      	ldr	r2, [r6, #0]
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	42ab      	cmp	r3, r5
 8007606:	dc26      	bgt.n	8007656 <_printf_common+0x96>
 8007608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800760c:	1e13      	subs	r3, r2, #0
 800760e:	6822      	ldr	r2, [r4, #0]
 8007610:	bf18      	it	ne
 8007612:	2301      	movne	r3, #1
 8007614:	0692      	lsls	r2, r2, #26
 8007616:	d42b      	bmi.n	8007670 <_printf_common+0xb0>
 8007618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800761c:	4649      	mov	r1, r9
 800761e:	4638      	mov	r0, r7
 8007620:	47c0      	blx	r8
 8007622:	3001      	adds	r0, #1
 8007624:	d01e      	beq.n	8007664 <_printf_common+0xa4>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	6922      	ldr	r2, [r4, #16]
 800762a:	f003 0306 	and.w	r3, r3, #6
 800762e:	2b04      	cmp	r3, #4
 8007630:	bf02      	ittt	eq
 8007632:	68e5      	ldreq	r5, [r4, #12]
 8007634:	6833      	ldreq	r3, [r6, #0]
 8007636:	1aed      	subeq	r5, r5, r3
 8007638:	68a3      	ldr	r3, [r4, #8]
 800763a:	bf0c      	ite	eq
 800763c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007640:	2500      	movne	r5, #0
 8007642:	4293      	cmp	r3, r2
 8007644:	bfc4      	itt	gt
 8007646:	1a9b      	subgt	r3, r3, r2
 8007648:	18ed      	addgt	r5, r5, r3
 800764a:	2600      	movs	r6, #0
 800764c:	341a      	adds	r4, #26
 800764e:	42b5      	cmp	r5, r6
 8007650:	d11a      	bne.n	8007688 <_printf_common+0xc8>
 8007652:	2000      	movs	r0, #0
 8007654:	e008      	b.n	8007668 <_printf_common+0xa8>
 8007656:	2301      	movs	r3, #1
 8007658:	4652      	mov	r2, sl
 800765a:	4649      	mov	r1, r9
 800765c:	4638      	mov	r0, r7
 800765e:	47c0      	blx	r8
 8007660:	3001      	adds	r0, #1
 8007662:	d103      	bne.n	800766c <_printf_common+0xac>
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766c:	3501      	adds	r5, #1
 800766e:	e7c6      	b.n	80075fe <_printf_common+0x3e>
 8007670:	18e1      	adds	r1, r4, r3
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	2030      	movs	r0, #48	; 0x30
 8007676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800767a:	4422      	add	r2, r4
 800767c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007684:	3302      	adds	r3, #2
 8007686:	e7c7      	b.n	8007618 <_printf_common+0x58>
 8007688:	2301      	movs	r3, #1
 800768a:	4622      	mov	r2, r4
 800768c:	4649      	mov	r1, r9
 800768e:	4638      	mov	r0, r7
 8007690:	47c0      	blx	r8
 8007692:	3001      	adds	r0, #1
 8007694:	d0e6      	beq.n	8007664 <_printf_common+0xa4>
 8007696:	3601      	adds	r6, #1
 8007698:	e7d9      	b.n	800764e <_printf_common+0x8e>
	...

0800769c <_printf_i>:
 800769c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a0:	7e0f      	ldrb	r7, [r1, #24]
 80076a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076a4:	2f78      	cmp	r7, #120	; 0x78
 80076a6:	4691      	mov	r9, r2
 80076a8:	4680      	mov	r8, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	469a      	mov	sl, r3
 80076ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076b2:	d807      	bhi.n	80076c4 <_printf_i+0x28>
 80076b4:	2f62      	cmp	r7, #98	; 0x62
 80076b6:	d80a      	bhi.n	80076ce <_printf_i+0x32>
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	f000 80d4 	beq.w	8007866 <_printf_i+0x1ca>
 80076be:	2f58      	cmp	r7, #88	; 0x58
 80076c0:	f000 80c0 	beq.w	8007844 <_printf_i+0x1a8>
 80076c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076cc:	e03a      	b.n	8007744 <_printf_i+0xa8>
 80076ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076d2:	2b15      	cmp	r3, #21
 80076d4:	d8f6      	bhi.n	80076c4 <_printf_i+0x28>
 80076d6:	a101      	add	r1, pc, #4	; (adr r1, 80076dc <_printf_i+0x40>)
 80076d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076dc:	08007735 	.word	0x08007735
 80076e0:	08007749 	.word	0x08007749
 80076e4:	080076c5 	.word	0x080076c5
 80076e8:	080076c5 	.word	0x080076c5
 80076ec:	080076c5 	.word	0x080076c5
 80076f0:	080076c5 	.word	0x080076c5
 80076f4:	08007749 	.word	0x08007749
 80076f8:	080076c5 	.word	0x080076c5
 80076fc:	080076c5 	.word	0x080076c5
 8007700:	080076c5 	.word	0x080076c5
 8007704:	080076c5 	.word	0x080076c5
 8007708:	0800784d 	.word	0x0800784d
 800770c:	08007775 	.word	0x08007775
 8007710:	08007807 	.word	0x08007807
 8007714:	080076c5 	.word	0x080076c5
 8007718:	080076c5 	.word	0x080076c5
 800771c:	0800786f 	.word	0x0800786f
 8007720:	080076c5 	.word	0x080076c5
 8007724:	08007775 	.word	0x08007775
 8007728:	080076c5 	.word	0x080076c5
 800772c:	080076c5 	.word	0x080076c5
 8007730:	0800780f 	.word	0x0800780f
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	1d1a      	adds	r2, r3, #4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	602a      	str	r2, [r5, #0]
 800773c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007744:	2301      	movs	r3, #1
 8007746:	e09f      	b.n	8007888 <_printf_i+0x1ec>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	682b      	ldr	r3, [r5, #0]
 800774c:	0607      	lsls	r7, r0, #24
 800774e:	f103 0104 	add.w	r1, r3, #4
 8007752:	6029      	str	r1, [r5, #0]
 8007754:	d501      	bpl.n	800775a <_printf_i+0xbe>
 8007756:	681e      	ldr	r6, [r3, #0]
 8007758:	e003      	b.n	8007762 <_printf_i+0xc6>
 800775a:	0646      	lsls	r6, r0, #25
 800775c:	d5fb      	bpl.n	8007756 <_printf_i+0xba>
 800775e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007762:	2e00      	cmp	r6, #0
 8007764:	da03      	bge.n	800776e <_printf_i+0xd2>
 8007766:	232d      	movs	r3, #45	; 0x2d
 8007768:	4276      	negs	r6, r6
 800776a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800776e:	485a      	ldr	r0, [pc, #360]	; (80078d8 <_printf_i+0x23c>)
 8007770:	230a      	movs	r3, #10
 8007772:	e012      	b.n	800779a <_printf_i+0xfe>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	6820      	ldr	r0, [r4, #0]
 8007778:	1d19      	adds	r1, r3, #4
 800777a:	6029      	str	r1, [r5, #0]
 800777c:	0605      	lsls	r5, r0, #24
 800777e:	d501      	bpl.n	8007784 <_printf_i+0xe8>
 8007780:	681e      	ldr	r6, [r3, #0]
 8007782:	e002      	b.n	800778a <_printf_i+0xee>
 8007784:	0641      	lsls	r1, r0, #25
 8007786:	d5fb      	bpl.n	8007780 <_printf_i+0xe4>
 8007788:	881e      	ldrh	r6, [r3, #0]
 800778a:	4853      	ldr	r0, [pc, #332]	; (80078d8 <_printf_i+0x23c>)
 800778c:	2f6f      	cmp	r7, #111	; 0x6f
 800778e:	bf0c      	ite	eq
 8007790:	2308      	moveq	r3, #8
 8007792:	230a      	movne	r3, #10
 8007794:	2100      	movs	r1, #0
 8007796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800779a:	6865      	ldr	r5, [r4, #4]
 800779c:	60a5      	str	r5, [r4, #8]
 800779e:	2d00      	cmp	r5, #0
 80077a0:	bfa2      	ittt	ge
 80077a2:	6821      	ldrge	r1, [r4, #0]
 80077a4:	f021 0104 	bicge.w	r1, r1, #4
 80077a8:	6021      	strge	r1, [r4, #0]
 80077aa:	b90e      	cbnz	r6, 80077b0 <_printf_i+0x114>
 80077ac:	2d00      	cmp	r5, #0
 80077ae:	d04b      	beq.n	8007848 <_printf_i+0x1ac>
 80077b0:	4615      	mov	r5, r2
 80077b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80077b6:	fb03 6711 	mls	r7, r3, r1, r6
 80077ba:	5dc7      	ldrb	r7, [r0, r7]
 80077bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077c0:	4637      	mov	r7, r6
 80077c2:	42bb      	cmp	r3, r7
 80077c4:	460e      	mov	r6, r1
 80077c6:	d9f4      	bls.n	80077b2 <_printf_i+0x116>
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d10b      	bne.n	80077e4 <_printf_i+0x148>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	07de      	lsls	r6, r3, #31
 80077d0:	d508      	bpl.n	80077e4 <_printf_i+0x148>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	6861      	ldr	r1, [r4, #4]
 80077d6:	4299      	cmp	r1, r3
 80077d8:	bfde      	ittt	le
 80077da:	2330      	movle	r3, #48	; 0x30
 80077dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077e4:	1b52      	subs	r2, r2, r5
 80077e6:	6122      	str	r2, [r4, #16]
 80077e8:	f8cd a000 	str.w	sl, [sp]
 80077ec:	464b      	mov	r3, r9
 80077ee:	aa03      	add	r2, sp, #12
 80077f0:	4621      	mov	r1, r4
 80077f2:	4640      	mov	r0, r8
 80077f4:	f7ff fee4 	bl	80075c0 <_printf_common>
 80077f8:	3001      	adds	r0, #1
 80077fa:	d14a      	bne.n	8007892 <_printf_i+0x1f6>
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	b004      	add	sp, #16
 8007802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	f043 0320 	orr.w	r3, r3, #32
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	4833      	ldr	r0, [pc, #204]	; (80078dc <_printf_i+0x240>)
 8007810:	2778      	movs	r7, #120	; 0x78
 8007812:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	6829      	ldr	r1, [r5, #0]
 800781a:	061f      	lsls	r7, r3, #24
 800781c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007820:	d402      	bmi.n	8007828 <_printf_i+0x18c>
 8007822:	065f      	lsls	r7, r3, #25
 8007824:	bf48      	it	mi
 8007826:	b2b6      	uxthmi	r6, r6
 8007828:	07df      	lsls	r7, r3, #31
 800782a:	bf48      	it	mi
 800782c:	f043 0320 	orrmi.w	r3, r3, #32
 8007830:	6029      	str	r1, [r5, #0]
 8007832:	bf48      	it	mi
 8007834:	6023      	strmi	r3, [r4, #0]
 8007836:	b91e      	cbnz	r6, 8007840 <_printf_i+0x1a4>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	f023 0320 	bic.w	r3, r3, #32
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	2310      	movs	r3, #16
 8007842:	e7a7      	b.n	8007794 <_printf_i+0xf8>
 8007844:	4824      	ldr	r0, [pc, #144]	; (80078d8 <_printf_i+0x23c>)
 8007846:	e7e4      	b.n	8007812 <_printf_i+0x176>
 8007848:	4615      	mov	r5, r2
 800784a:	e7bd      	b.n	80077c8 <_printf_i+0x12c>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	6826      	ldr	r6, [r4, #0]
 8007850:	6961      	ldr	r1, [r4, #20]
 8007852:	1d18      	adds	r0, r3, #4
 8007854:	6028      	str	r0, [r5, #0]
 8007856:	0635      	lsls	r5, r6, #24
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	d501      	bpl.n	8007860 <_printf_i+0x1c4>
 800785c:	6019      	str	r1, [r3, #0]
 800785e:	e002      	b.n	8007866 <_printf_i+0x1ca>
 8007860:	0670      	lsls	r0, r6, #25
 8007862:	d5fb      	bpl.n	800785c <_printf_i+0x1c0>
 8007864:	8019      	strh	r1, [r3, #0]
 8007866:	2300      	movs	r3, #0
 8007868:	6123      	str	r3, [r4, #16]
 800786a:	4615      	mov	r5, r2
 800786c:	e7bc      	b.n	80077e8 <_printf_i+0x14c>
 800786e:	682b      	ldr	r3, [r5, #0]
 8007870:	1d1a      	adds	r2, r3, #4
 8007872:	602a      	str	r2, [r5, #0]
 8007874:	681d      	ldr	r5, [r3, #0]
 8007876:	6862      	ldr	r2, [r4, #4]
 8007878:	2100      	movs	r1, #0
 800787a:	4628      	mov	r0, r5
 800787c:	f7f8 fcb0 	bl	80001e0 <memchr>
 8007880:	b108      	cbz	r0, 8007886 <_printf_i+0x1ea>
 8007882:	1b40      	subs	r0, r0, r5
 8007884:	6060      	str	r0, [r4, #4]
 8007886:	6863      	ldr	r3, [r4, #4]
 8007888:	6123      	str	r3, [r4, #16]
 800788a:	2300      	movs	r3, #0
 800788c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007890:	e7aa      	b.n	80077e8 <_printf_i+0x14c>
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	462a      	mov	r2, r5
 8007896:	4649      	mov	r1, r9
 8007898:	4640      	mov	r0, r8
 800789a:	47d0      	blx	sl
 800789c:	3001      	adds	r0, #1
 800789e:	d0ad      	beq.n	80077fc <_printf_i+0x160>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	079b      	lsls	r3, r3, #30
 80078a4:	d413      	bmi.n	80078ce <_printf_i+0x232>
 80078a6:	68e0      	ldr	r0, [r4, #12]
 80078a8:	9b03      	ldr	r3, [sp, #12]
 80078aa:	4298      	cmp	r0, r3
 80078ac:	bfb8      	it	lt
 80078ae:	4618      	movlt	r0, r3
 80078b0:	e7a6      	b.n	8007800 <_printf_i+0x164>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4632      	mov	r2, r6
 80078b6:	4649      	mov	r1, r9
 80078b8:	4640      	mov	r0, r8
 80078ba:	47d0      	blx	sl
 80078bc:	3001      	adds	r0, #1
 80078be:	d09d      	beq.n	80077fc <_printf_i+0x160>
 80078c0:	3501      	adds	r5, #1
 80078c2:	68e3      	ldr	r3, [r4, #12]
 80078c4:	9903      	ldr	r1, [sp, #12]
 80078c6:	1a5b      	subs	r3, r3, r1
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	dcf2      	bgt.n	80078b2 <_printf_i+0x216>
 80078cc:	e7eb      	b.n	80078a6 <_printf_i+0x20a>
 80078ce:	2500      	movs	r5, #0
 80078d0:	f104 0619 	add.w	r6, r4, #25
 80078d4:	e7f5      	b.n	80078c2 <_printf_i+0x226>
 80078d6:	bf00      	nop
 80078d8:	08008355 	.word	0x08008355
 80078dc:	08008366 	.word	0x08008366

080078e0 <memmove>:
 80078e0:	4288      	cmp	r0, r1
 80078e2:	b510      	push	{r4, lr}
 80078e4:	eb01 0402 	add.w	r4, r1, r2
 80078e8:	d902      	bls.n	80078f0 <memmove+0x10>
 80078ea:	4284      	cmp	r4, r0
 80078ec:	4623      	mov	r3, r4
 80078ee:	d807      	bhi.n	8007900 <memmove+0x20>
 80078f0:	1e43      	subs	r3, r0, #1
 80078f2:	42a1      	cmp	r1, r4
 80078f4:	d008      	beq.n	8007908 <memmove+0x28>
 80078f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078fe:	e7f8      	b.n	80078f2 <memmove+0x12>
 8007900:	4402      	add	r2, r0
 8007902:	4601      	mov	r1, r0
 8007904:	428a      	cmp	r2, r1
 8007906:	d100      	bne.n	800790a <memmove+0x2a>
 8007908:	bd10      	pop	{r4, pc}
 800790a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800790e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007912:	e7f7      	b.n	8007904 <memmove+0x24>

08007914 <_sbrk_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d06      	ldr	r5, [pc, #24]	; (8007930 <_sbrk_r+0x1c>)
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	4608      	mov	r0, r1
 800791e:	602b      	str	r3, [r5, #0]
 8007920:	f7fb faba 	bl	8002e98 <_sbrk>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_sbrk_r+0x1a>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_sbrk_r+0x1a>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	2000030c 	.word	0x2000030c

08007934 <_realloc_r>:
 8007934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007938:	4680      	mov	r8, r0
 800793a:	4614      	mov	r4, r2
 800793c:	460e      	mov	r6, r1
 800793e:	b921      	cbnz	r1, 800794a <_realloc_r+0x16>
 8007940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007944:	4611      	mov	r1, r2
 8007946:	f7ff bc57 	b.w	80071f8 <_malloc_r>
 800794a:	b92a      	cbnz	r2, 8007958 <_realloc_r+0x24>
 800794c:	f7ff fbe8 	bl	8007120 <_free_r>
 8007950:	4625      	mov	r5, r4
 8007952:	4628      	mov	r0, r5
 8007954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007958:	f000 f81b 	bl	8007992 <_malloc_usable_size_r>
 800795c:	4284      	cmp	r4, r0
 800795e:	4607      	mov	r7, r0
 8007960:	d802      	bhi.n	8007968 <_realloc_r+0x34>
 8007962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007966:	d812      	bhi.n	800798e <_realloc_r+0x5a>
 8007968:	4621      	mov	r1, r4
 800796a:	4640      	mov	r0, r8
 800796c:	f7ff fc44 	bl	80071f8 <_malloc_r>
 8007970:	4605      	mov	r5, r0
 8007972:	2800      	cmp	r0, #0
 8007974:	d0ed      	beq.n	8007952 <_realloc_r+0x1e>
 8007976:	42bc      	cmp	r4, r7
 8007978:	4622      	mov	r2, r4
 800797a:	4631      	mov	r1, r6
 800797c:	bf28      	it	cs
 800797e:	463a      	movcs	r2, r7
 8007980:	f7ff fbc0 	bl	8007104 <memcpy>
 8007984:	4631      	mov	r1, r6
 8007986:	4640      	mov	r0, r8
 8007988:	f7ff fbca 	bl	8007120 <_free_r>
 800798c:	e7e1      	b.n	8007952 <_realloc_r+0x1e>
 800798e:	4635      	mov	r5, r6
 8007990:	e7df      	b.n	8007952 <_realloc_r+0x1e>

08007992 <_malloc_usable_size_r>:
 8007992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007996:	1f18      	subs	r0, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	bfbc      	itt	lt
 800799c:	580b      	ldrlt	r3, [r1, r0]
 800799e:	18c0      	addlt	r0, r0, r3
 80079a0:	4770      	bx	lr
 80079a2:	0000      	movs	r0, r0
 80079a4:	0000      	movs	r0, r0
	...

080079a8 <log>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	ed2d 8b02 	vpush	{d8}
 80079ae:	ec55 4b10 	vmov	r4, r5, d0
 80079b2:	f000 f841 	bl	8007a38 <__ieee754_log>
 80079b6:	4622      	mov	r2, r4
 80079b8:	462b      	mov	r3, r5
 80079ba:	4620      	mov	r0, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	eeb0 8a40 	vmov.f32	s16, s0
 80079c2:	eef0 8a60 	vmov.f32	s17, s1
 80079c6:	f7f9 f8b1 	bl	8000b2c <__aeabi_dcmpun>
 80079ca:	b998      	cbnz	r0, 80079f4 <log+0x4c>
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	4620      	mov	r0, r4
 80079d2:	4629      	mov	r1, r5
 80079d4:	f7f9 f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 80079d8:	b960      	cbnz	r0, 80079f4 <log+0x4c>
 80079da:	2200      	movs	r2, #0
 80079dc:	2300      	movs	r3, #0
 80079de:	4620      	mov	r0, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	f7f9 f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80079e6:	b160      	cbz	r0, 8007a02 <log+0x5a>
 80079e8:	f7ff fb60 	bl	80070ac <__errno>
 80079ec:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007a18 <log+0x70>
 80079f0:	2322      	movs	r3, #34	; 0x22
 80079f2:	6003      	str	r3, [r0, #0]
 80079f4:	eeb0 0a48 	vmov.f32	s0, s16
 80079f8:	eef0 0a68 	vmov.f32	s1, s17
 80079fc:	ecbd 8b02 	vpop	{d8}
 8007a00:	bd38      	pop	{r3, r4, r5, pc}
 8007a02:	f7ff fb53 	bl	80070ac <__errno>
 8007a06:	ecbd 8b02 	vpop	{d8}
 8007a0a:	2321      	movs	r3, #33	; 0x21
 8007a0c:	6003      	str	r3, [r0, #0]
 8007a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a12:	4803      	ldr	r0, [pc, #12]	; (8007a20 <log+0x78>)
 8007a14:	f000 b808 	b.w	8007a28 <nan>
 8007a18:	00000000 	.word	0x00000000
 8007a1c:	fff00000 	.word	0xfff00000
 8007a20:	08008349 	.word	0x08008349
 8007a24:	00000000 	.word	0x00000000

08007a28 <nan>:
 8007a28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007a30 <nan+0x8>
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	00000000 	.word	0x00000000
 8007a34:	7ff80000 	.word	0x7ff80000

08007a38 <__ieee754_log>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	ec51 0b10 	vmov	r0, r1, d0
 8007a40:	ed2d 8b04 	vpush	{d8-d9}
 8007a44:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007a48:	b083      	sub	sp, #12
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	da29      	bge.n	8007aa2 <__ieee754_log+0x6a>
 8007a4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a52:	4303      	orrs	r3, r0
 8007a54:	ee10 2a10 	vmov	r2, s0
 8007a58:	d10c      	bne.n	8007a74 <__ieee754_log+0x3c>
 8007a5a:	49cf      	ldr	r1, [pc, #828]	; (8007d98 <__ieee754_log+0x360>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2000      	movs	r0, #0
 8007a62:	f7f8 fef3 	bl	800084c <__aeabi_ddiv>
 8007a66:	ec41 0b10 	vmov	d0, r0, r1
 8007a6a:	b003      	add	sp, #12
 8007a6c:	ecbd 8b04 	vpop	{d8-d9}
 8007a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a74:	2900      	cmp	r1, #0
 8007a76:	da05      	bge.n	8007a84 <__ieee754_log+0x4c>
 8007a78:	460b      	mov	r3, r1
 8007a7a:	f7f8 fc05 	bl	8000288 <__aeabi_dsub>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2300      	movs	r3, #0
 8007a82:	e7ee      	b.n	8007a62 <__ieee754_log+0x2a>
 8007a84:	4bc5      	ldr	r3, [pc, #788]	; (8007d9c <__ieee754_log+0x364>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	f7f8 fdb6 	bl	80005f8 <__aeabi_dmul>
 8007a8c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007a90:	460d      	mov	r5, r1
 8007a92:	4ac3      	ldr	r2, [pc, #780]	; (8007da0 <__ieee754_log+0x368>)
 8007a94:	4295      	cmp	r5, r2
 8007a96:	dd06      	ble.n	8007aa6 <__ieee754_log+0x6e>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	f7f8 fbf6 	bl	800028c <__adddf3>
 8007aa0:	e7e1      	b.n	8007a66 <__ieee754_log+0x2e>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e7f5      	b.n	8007a92 <__ieee754_log+0x5a>
 8007aa6:	152c      	asrs	r4, r5, #20
 8007aa8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007aac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007ab0:	441c      	add	r4, r3
 8007ab2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007ab6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007abe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8007ac2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8007ac6:	ea42 0105 	orr.w	r1, r2, r5
 8007aca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4bb4      	ldr	r3, [pc, #720]	; (8007da4 <__ieee754_log+0x36c>)
 8007ad2:	f7f8 fbd9 	bl	8000288 <__aeabi_dsub>
 8007ad6:	1cab      	adds	r3, r5, #2
 8007ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	4682      	mov	sl, r0
 8007ae0:	468b      	mov	fp, r1
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	dc53      	bgt.n	8007b90 <__ieee754_log+0x158>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f7f8 ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aee:	b1d0      	cbz	r0, 8007b26 <__ieee754_log+0xee>
 8007af0:	2c00      	cmp	r4, #0
 8007af2:	f000 8122 	beq.w	8007d3a <__ieee754_log+0x302>
 8007af6:	4620      	mov	r0, r4
 8007af8:	f7f8 fd14 	bl	8000524 <__aeabi_i2d>
 8007afc:	a390      	add	r3, pc, #576	; (adr r3, 8007d40 <__ieee754_log+0x308>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	4606      	mov	r6, r0
 8007b04:	460f      	mov	r7, r1
 8007b06:	f7f8 fd77 	bl	80005f8 <__aeabi_dmul>
 8007b0a:	a38f      	add	r3, pc, #572	; (adr r3, 8007d48 <__ieee754_log+0x310>)
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	4604      	mov	r4, r0
 8007b12:	460d      	mov	r5, r1
 8007b14:	4630      	mov	r0, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7f8 fd6e 	bl	80005f8 <__aeabi_dmul>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4620      	mov	r0, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	e7ba      	b.n	8007a9c <__ieee754_log+0x64>
 8007b26:	a38a      	add	r3, pc, #552	; (adr r3, 8007d50 <__ieee754_log+0x318>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	4650      	mov	r0, sl
 8007b2e:	4659      	mov	r1, fp
 8007b30:	f7f8 fd62 	bl	80005f8 <__aeabi_dmul>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	2000      	movs	r0, #0
 8007b3a:	499b      	ldr	r1, [pc, #620]	; (8007da8 <__ieee754_log+0x370>)
 8007b3c:	f7f8 fba4 	bl	8000288 <__aeabi_dsub>
 8007b40:	4652      	mov	r2, sl
 8007b42:	4606      	mov	r6, r0
 8007b44:	460f      	mov	r7, r1
 8007b46:	465b      	mov	r3, fp
 8007b48:	4650      	mov	r0, sl
 8007b4a:	4659      	mov	r1, fp
 8007b4c:	f7f8 fd54 	bl	80005f8 <__aeabi_dmul>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4630      	mov	r0, r6
 8007b56:	4639      	mov	r1, r7
 8007b58:	f7f8 fd4e 	bl	80005f8 <__aeabi_dmul>
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	460f      	mov	r7, r1
 8007b60:	b914      	cbnz	r4, 8007b68 <__ieee754_log+0x130>
 8007b62:	4632      	mov	r2, r6
 8007b64:	463b      	mov	r3, r7
 8007b66:	e0a2      	b.n	8007cae <__ieee754_log+0x276>
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f7f8 fcdb 	bl	8000524 <__aeabi_i2d>
 8007b6e:	a374      	add	r3, pc, #464	; (adr r3, 8007d40 <__ieee754_log+0x308>)
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	4680      	mov	r8, r0
 8007b76:	4689      	mov	r9, r1
 8007b78:	f7f8 fd3e 	bl	80005f8 <__aeabi_dmul>
 8007b7c:	a372      	add	r3, pc, #456	; (adr r3, 8007d48 <__ieee754_log+0x310>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	4604      	mov	r4, r0
 8007b84:	460d      	mov	r5, r1
 8007b86:	4640      	mov	r0, r8
 8007b88:	4649      	mov	r1, r9
 8007b8a:	f7f8 fd35 	bl	80005f8 <__aeabi_dmul>
 8007b8e:	e0a7      	b.n	8007ce0 <__ieee754_log+0x2a8>
 8007b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b94:	f7f8 fb7a 	bl	800028c <__adddf3>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4650      	mov	r0, sl
 8007b9e:	4659      	mov	r1, fp
 8007ba0:	f7f8 fe54 	bl	800084c <__aeabi_ddiv>
 8007ba4:	ec41 0b18 	vmov	d8, r0, r1
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f7f8 fcbb 	bl	8000524 <__aeabi_i2d>
 8007bae:	ec53 2b18 	vmov	r2, r3, d8
 8007bb2:	ec41 0b19 	vmov	d9, r0, r1
 8007bb6:	ec51 0b18 	vmov	r0, r1, d8
 8007bba:	f7f8 fd1d 	bl	80005f8 <__aeabi_dmul>
 8007bbe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8007bc2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4680      	mov	r8, r0
 8007bce:	4689      	mov	r9, r1
 8007bd0:	f7f8 fd12 	bl	80005f8 <__aeabi_dmul>
 8007bd4:	a360      	add	r3, pc, #384	; (adr r3, 8007d58 <__ieee754_log+0x320>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	4606      	mov	r6, r0
 8007bdc:	460f      	mov	r7, r1
 8007bde:	f7f8 fd0b 	bl	80005f8 <__aeabi_dmul>
 8007be2:	a35f      	add	r3, pc, #380	; (adr r3, 8007d60 <__ieee754_log+0x328>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fb50 	bl	800028c <__adddf3>
 8007bec:	4632      	mov	r2, r6
 8007bee:	463b      	mov	r3, r7
 8007bf0:	f7f8 fd02 	bl	80005f8 <__aeabi_dmul>
 8007bf4:	a35c      	add	r3, pc, #368	; (adr r3, 8007d68 <__ieee754_log+0x330>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f7f8 fb47 	bl	800028c <__adddf3>
 8007bfe:	4632      	mov	r2, r6
 8007c00:	463b      	mov	r3, r7
 8007c02:	f7f8 fcf9 	bl	80005f8 <__aeabi_dmul>
 8007c06:	a35a      	add	r3, pc, #360	; (adr r3, 8007d70 <__ieee754_log+0x338>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 fb3e 	bl	800028c <__adddf3>
 8007c10:	4642      	mov	r2, r8
 8007c12:	464b      	mov	r3, r9
 8007c14:	f7f8 fcf0 	bl	80005f8 <__aeabi_dmul>
 8007c18:	a357      	add	r3, pc, #348	; (adr r3, 8007d78 <__ieee754_log+0x340>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	4680      	mov	r8, r0
 8007c20:	4689      	mov	r9, r1
 8007c22:	4630      	mov	r0, r6
 8007c24:	4639      	mov	r1, r7
 8007c26:	f7f8 fce7 	bl	80005f8 <__aeabi_dmul>
 8007c2a:	a355      	add	r3, pc, #340	; (adr r3, 8007d80 <__ieee754_log+0x348>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fb2c 	bl	800028c <__adddf3>
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	f7f8 fcde 	bl	80005f8 <__aeabi_dmul>
 8007c3c:	a352      	add	r3, pc, #328	; (adr r3, 8007d88 <__ieee754_log+0x350>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f7f8 fb23 	bl	800028c <__adddf3>
 8007c46:	4632      	mov	r2, r6
 8007c48:	463b      	mov	r3, r7
 8007c4a:	f7f8 fcd5 	bl	80005f8 <__aeabi_dmul>
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4602      	mov	r2, r0
 8007c52:	4649      	mov	r1, r9
 8007c54:	4640      	mov	r0, r8
 8007c56:	f7f8 fb19 	bl	800028c <__adddf3>
 8007c5a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007c5e:	9b01      	ldr	r3, [sp, #4]
 8007c60:	3551      	adds	r5, #81	; 0x51
 8007c62:	431d      	orrs	r5, r3
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	4680      	mov	r8, r0
 8007c68:	4689      	mov	r9, r1
 8007c6a:	dd48      	ble.n	8007cfe <__ieee754_log+0x2c6>
 8007c6c:	4b4e      	ldr	r3, [pc, #312]	; (8007da8 <__ieee754_log+0x370>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4650      	mov	r0, sl
 8007c72:	4659      	mov	r1, fp
 8007c74:	f7f8 fcc0 	bl	80005f8 <__aeabi_dmul>
 8007c78:	4652      	mov	r2, sl
 8007c7a:	465b      	mov	r3, fp
 8007c7c:	f7f8 fcbc 	bl	80005f8 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4606      	mov	r6, r0
 8007c86:	460f      	mov	r7, r1
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f7f8 fafe 	bl	800028c <__adddf3>
 8007c90:	ec53 2b18 	vmov	r2, r3, d8
 8007c94:	f7f8 fcb0 	bl	80005f8 <__aeabi_dmul>
 8007c98:	4680      	mov	r8, r0
 8007c9a:	4689      	mov	r9, r1
 8007c9c:	b964      	cbnz	r4, 8007cb8 <__ieee754_log+0x280>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	f7f8 faef 	bl	8000288 <__aeabi_dsub>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	4650      	mov	r0, sl
 8007cb0:	4659      	mov	r1, fp
 8007cb2:	f7f8 fae9 	bl	8000288 <__aeabi_dsub>
 8007cb6:	e6d6      	b.n	8007a66 <__ieee754_log+0x2e>
 8007cb8:	a321      	add	r3, pc, #132	; (adr r3, 8007d40 <__ieee754_log+0x308>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	ec51 0b19 	vmov	r0, r1, d9
 8007cc2:	f7f8 fc99 	bl	80005f8 <__aeabi_dmul>
 8007cc6:	a320      	add	r3, pc, #128	; (adr r3, 8007d48 <__ieee754_log+0x310>)
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	4604      	mov	r4, r0
 8007cce:	460d      	mov	r5, r1
 8007cd0:	ec51 0b19 	vmov	r0, r1, d9
 8007cd4:	f7f8 fc90 	bl	80005f8 <__aeabi_dmul>
 8007cd8:	4642      	mov	r2, r8
 8007cda:	464b      	mov	r3, r9
 8007cdc:	f7f8 fad6 	bl	800028c <__adddf3>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	f7f8 face 	bl	8000288 <__aeabi_dsub>
 8007cec:	4652      	mov	r2, sl
 8007cee:	465b      	mov	r3, fp
 8007cf0:	f7f8 faca 	bl	8000288 <__aeabi_dsub>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	e7d9      	b.n	8007cb2 <__ieee754_log+0x27a>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4650      	mov	r0, sl
 8007d04:	4659      	mov	r1, fp
 8007d06:	f7f8 fabf 	bl	8000288 <__aeabi_dsub>
 8007d0a:	ec53 2b18 	vmov	r2, r3, d8
 8007d0e:	f7f8 fc73 	bl	80005f8 <__aeabi_dmul>
 8007d12:	4606      	mov	r6, r0
 8007d14:	460f      	mov	r7, r1
 8007d16:	2c00      	cmp	r4, #0
 8007d18:	f43f af23 	beq.w	8007b62 <__ieee754_log+0x12a>
 8007d1c:	a308      	add	r3, pc, #32	; (adr r3, 8007d40 <__ieee754_log+0x308>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	ec51 0b19 	vmov	r0, r1, d9
 8007d26:	f7f8 fc67 	bl	80005f8 <__aeabi_dmul>
 8007d2a:	a307      	add	r3, pc, #28	; (adr r3, 8007d48 <__ieee754_log+0x310>)
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	4604      	mov	r4, r0
 8007d32:	460d      	mov	r5, r1
 8007d34:	ec51 0b19 	vmov	r0, r1, d9
 8007d38:	e727      	b.n	8007b8a <__ieee754_log+0x152>
 8007d3a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007d90 <__ieee754_log+0x358>
 8007d3e:	e694      	b.n	8007a6a <__ieee754_log+0x32>
 8007d40:	fee00000 	.word	0xfee00000
 8007d44:	3fe62e42 	.word	0x3fe62e42
 8007d48:	35793c76 	.word	0x35793c76
 8007d4c:	3dea39ef 	.word	0x3dea39ef
 8007d50:	55555555 	.word	0x55555555
 8007d54:	3fd55555 	.word	0x3fd55555
 8007d58:	df3e5244 	.word	0xdf3e5244
 8007d5c:	3fc2f112 	.word	0x3fc2f112
 8007d60:	96cb03de 	.word	0x96cb03de
 8007d64:	3fc74664 	.word	0x3fc74664
 8007d68:	94229359 	.word	0x94229359
 8007d6c:	3fd24924 	.word	0x3fd24924
 8007d70:	55555593 	.word	0x55555593
 8007d74:	3fe55555 	.word	0x3fe55555
 8007d78:	d078c69f 	.word	0xd078c69f
 8007d7c:	3fc39a09 	.word	0x3fc39a09
 8007d80:	1d8e78af 	.word	0x1d8e78af
 8007d84:	3fcc71c5 	.word	0x3fcc71c5
 8007d88:	9997fa04 	.word	0x9997fa04
 8007d8c:	3fd99999 	.word	0x3fd99999
	...
 8007d98:	c3500000 	.word	0xc3500000
 8007d9c:	43500000 	.word	0x43500000
 8007da0:	7fefffff 	.word	0x7fefffff
 8007da4:	3ff00000 	.word	0x3ff00000
 8007da8:	3fe00000 	.word	0x3fe00000

08007dac <_init>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr

08007db8 <_fini>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr
