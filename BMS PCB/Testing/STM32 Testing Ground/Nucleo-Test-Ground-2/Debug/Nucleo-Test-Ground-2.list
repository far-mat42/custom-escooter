
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003984  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b6c  08003b6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b74  08003b74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08003b88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003b88  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf7e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aa5  00000000  00000000  0002bffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002daa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000868  00000000  00000000  0002e590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f03  00000000  00000000  0002edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfd3  00000000  00000000  00048cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1b37  00000000  00000000  00055cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c78  00000000  00000000  000f7808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  000fa480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003af8 	.word	0x08003af8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003af8 	.word	0x08003af8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <format_uint16>:
/**
 * Formats an unsigned 16-bit integer into the AFE's data buffer (little-endian byte order)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_uint16(uint8_t *dataArr, uint16_t data) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
	dataArr[0] = ((uint8_t)(data & 0xFF));
 80004d4:	887b      	ldrh	r3, [r7, #2]
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	701a      	strb	r2, [r3, #0]
	dataArr[1] = ((uint8_t)(data >> 8));
 80004dc:	887b      	ldrh	r3, [r7, #2]
 80004de:	0a1b      	lsrs	r3, r3, #8
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3301      	adds	r3, #1
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	701a      	strb	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <main>:
// Global handles
SPI_HandleTypeDef hspi1;
UART_HandleTypeDef huart1;

int main(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b0a3      	sub	sp, #140	; 0x8c
 80004fc:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 80004fe:	f000 fdca 	bl	8001096 <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 8000502:	f000 f8c9 	bl	8000698 <SystemClock_Config>

    // Initialize GPIO, SPI, UART
    GPIO_Init();
 8000506:	f000 f8ff 	bl	8000708 <GPIO_Init>
    SPI1_Init();
 800050a:	f000 f96b 	bl	80007e4 <SPI1_Init>
    USART1_Init();
 800050e:	f000 f9b1 	bl	8000874 <USART1_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 8000512:	2200      	movs	r2, #0
 8000514:	2120      	movs	r1, #32
 8000516:	485e      	ldr	r0, [pc, #376]	; (8000690 <main+0x198>)
 8000518:	f001 f8ae 	bl	8001678 <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 800051c:	2300      	movs	r3, #0
 800051e:	663b      	str	r3, [r7, #96]	; 0x60
 8000520:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
 8000530:	615a      	str	r2, [r3, #20]
 8000532:	619a      	str	r2, [r3, #24]

    uint16_t ctrlStatus = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    uint16_t cellVolt = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    uint16_t cellVolts[17] = {0};
 8000540:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000544:	2222      	movs	r2, #34	; 0x22
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f003 faa8 	bl	8003a9e <memset>
    uint16_t currentRead = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    uint8_t fetStatus = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    uint8_t safetyStatAlrt[6] = {0};
 800055a:	2300      	movs	r3, #0
 800055c:	637b      	str	r3, [r7, #52]	; 0x34
 800055e:	2300      	movs	r3, #0
 8000560:	873b      	strh	r3, [r7, #56]	; 0x38
    uint8_t cmdAddr = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    uint8_t writeData[32] = {0};
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	f107 0318 	add.w	r3, r7, #24
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
 800057e:	619a      	str	r2, [r3, #24]

    uint8_t msg[] = "Hello world!\n";
 8000580:	4b44      	ldr	r3, [pc, #272]	; (8000694 <main+0x19c>)
 8000582:	1d3c      	adds	r4, r7, #4
 8000584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000586:	c407      	stmia	r4!, {r0, r1, r2}
 8000588:	8023      	strh	r3, [r4, #0]

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 800058a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800058e:	2202      	movs	r2, #2
 8000590:	4619      	mov	r1, r3
 8000592:	2012      	movs	r0, #18
 8000594:	f000 f9dc 	bl	8000950 <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 8000598:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800059c:	2202      	movs	r2, #2
 800059e:	4619      	mov	r1, r3
 80005a0:	2057      	movs	r0, #87	; 0x57
 80005a2:	f000 fa67 	bl	8000a74 <SubCmdReadData>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80005a6:	2120      	movs	r1, #32
 80005a8:	4839      	ldr	r0, [pc, #228]	; (8000690 <main+0x198>)
 80005aa:	f001 f87d 	bl	80016a8 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80005ae:	20fa      	movs	r0, #250	; 0xfa
 80005b0:	f000 fde6 	bl	8001180 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80005b4:	2120      	movs	r1, #32
 80005b6:	4836      	ldr	r0, [pc, #216]	; (8000690 <main+0x198>)
 80005b8:	f001 f876 	bl	80016a8 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 80005bc:	f240 20ee 	movw	r0, #750	; 0x2ee
 80005c0:	f000 fdde 	bl	8001180 <HAL_Delay>

	// Disable SLEEP mode and disable FET_TEST mode if already in FET_TEST
	SubCmdNoData(0x009A);
 80005c4:	209a      	movs	r0, #154	; 0x9a
 80005c6:	f000 fa0d 	bl	80009e4 <SubCmdNoData>
	if (!(readData[0] & (1 << 4))) SubCmdNoData(0x0022);
 80005ca:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <main+0xe4>
 80005d6:	2022      	movs	r0, #34	; 0x22
 80005d8:	f000 fa04 	bl	80009e4 <SubCmdNoData>

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 80005dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005e0:	2202      	movs	r2, #2
 80005e2:	4619      	mov	r1, r3
 80005e4:	2012      	movs	r0, #18
 80005e6:	f000 f9b3 	bl	8000950 <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 80005ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005ee:	2202      	movs	r2, #2
 80005f0:	4619      	mov	r1, r3
 80005f2:	2057      	movs	r0, #87	; 0x57
 80005f4:	f000 fa3e 	bl	8000a74 <SubCmdReadData>

	// Enter CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
 80005f8:	2090      	movs	r0, #144	; 0x90
 80005fa:	f000 f9f3 	bl	80009e4 <SubCmdNoData>
	// Configuring Settings in RAM
	writeData[0] = 0x02;
 80005fe:	2302      	movs	r3, #2
 8000600:	753b      	strb	r3, [r7, #20]
	RAMRegisterWrite(PROT_SCD_THLD, writeData, 1); // Set SCD threshold to 40mV
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	f249 2086 	movw	r0, #37510	; 0x9286
 800060e:	f000 faad 	bl	8000b6c <RAMRegisterWrite>

	// Disable body diode protection
	writeData[0] = 0x0C;
 8000612:	230c      	movs	r3, #12
 8000614:	753b      	strb	r3, [r7, #20]
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	f249 3008 	movw	r0, #37640	; 0x9308
 8000622:	f000 faa3 	bl	8000b6c <RAMRegisterWrite>
	// Setting MFG Status Init to disable FET Test commands
	format_uint16(writeData, 0x0050);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2150      	movs	r1, #80	; 0x50
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff4b 	bl	80004c8 <format_uint16>
	RAMRegisterWrite(SET_MFG_STATUS_INIT, writeData, 2);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2202      	movs	r2, #2
 8000638:	4619      	mov	r1, r3
 800063a:	f249 3033 	movw	r0, #37683	; 0x9333
 800063e:	f000 fa95 	bl	8000b6c <RAMRegisterWrite>
	// Exit CONFIG_UPDATE mode, read manufacturing status register again
	SubCmdNoData(0x0092);
 8000642:	2092      	movs	r0, #146	; 0x92
 8000644:	f000 f9ce 	bl	80009e4 <SubCmdNoData>
	SubCmdReadData(0x0057, readData, 2);
 8000648:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800064c:	2202      	movs	r2, #2
 800064e:	4619      	mov	r1, r3
 8000650:	2057      	movs	r0, #87	; 0x57
 8000652:	f000 fa0f 	bl	8000a74 <SubCmdReadData>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000656:	2120      	movs	r1, #32
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <main+0x198>)
 800065a:	f001 f825 	bl	80016a8 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800065e:	20fa      	movs	r0, #250	; 0xfa
 8000660:	f000 fd8e 	bl	8001180 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000664:	2120      	movs	r1, #32
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <main+0x198>)
 8000668:	f001 f81e 	bl	80016a8 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 800066c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000670:	f000 fd86 	bl	8001180 <HAL_Delay>
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
//    	HAL_Delay(250);
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
//    	HAL_Delay(250);

    	UART_Transmit(msg, sizeof(msg) - 1);
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	210d      	movs	r1, #13
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fbcb 	bl	8000e14 <UART_Transmit>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800067e:	2120      	movs	r1, #32
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <main+0x198>)
 8000682:	f001 f811 	bl	80016a8 <HAL_GPIO_TogglePin>
    	HAL_Delay(1000);
 8000686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068a:	f000 fd79 	bl	8001180 <HAL_Delay>
    	UART_Transmit(msg, sizeof(msg) - 1);
 800068e:	e7f1      	b.n	8000674 <main+0x17c>
 8000690:	48000400 	.word	0x48000400
 8000694:	08003b10 	.word	0x08003b10

08000698 <SystemClock_Config>:

    }
}

void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	; 0x58
 800069c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 f9f9 	bl	8003a9e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006be:	f001 f81b 	bl	80016f8 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c2:	2310      	movs	r3, #16
 80006c4:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c6:	2301      	movs	r3, #1
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ce:	2360      	movs	r3, #96	; 0x60
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f862 	bl	80017a4 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006e0:	230f      	movs	r3, #15
 80006e2:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80006f4:	463b      	mov	r3, r7
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fcb5 	bl	8002068 <HAL_RCC_ClockConfig>
}
 80006fe:	bf00      	nop
 8000700:	3758      	adds	r7, #88	; 0x58
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <GPIO_Init>:

void GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b33      	ldr	r3, [pc, #204]	; (80007dc <GPIO_Init+0xd4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a32      	ldr	r2, [pc, #200]	; (80007dc <GPIO_Init+0xd4>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b30      	ldr	r3, [pc, #192]	; (80007dc <GPIO_Init+0xd4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <GPIO_Init+0xd4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <GPIO_Init+0xd4>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <GPIO_Init+0xd4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800074e:	2301      	movs	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000752:	2311      	movs	r3, #17
 8000754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075a:	2302      	movs	r3, #2
 800075c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	481e      	ldr	r0, [pc, #120]	; (80007e0 <GPIO_Init+0xd8>)
 8000766:	f000 fe15 	bl	8001394 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 800076a:	2201      	movs	r2, #1
 800076c:	2101      	movs	r1, #1
 800076e:	481c      	ldr	r0, [pc, #112]	; (80007e0 <GPIO_Init+0xd8>)
 8000770:	f000 ff82 	bl	8001678 <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000774:	2320      	movs	r3, #32
 8000776:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4815      	ldr	r0, [pc, #84]	; (80007e0 <GPIO_Init+0xd8>)
 800078c:	f000 fe02 	bl	8001394 <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000790:	23e0      	movs	r3, #224	; 0xe0
 8000792:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	2302      	movs	r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a0:	2305      	movs	r3, #5
 80007a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 fdf1 	bl	8001394 <HAL_GPIO_Init>

    // Configure PB6 (UART_TX), PB7 (UART_RX)
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80007b2:	23c0      	movs	r3, #192	; 0xc0
 80007b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Alternate function for USART1
 80007c2:	2307      	movs	r3, #7
 80007c4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <GPIO_Init+0xd8>)
 80007ce:	f000 fde1 	bl	8001394 <HAL_GPIO_Init>
}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400

080007e4 <SPI1_Init>:

void SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <SPI1_Init+0x84>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <SPI1_Init+0x84>)
 80007f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <SPI1_Init+0x84>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <SPI1_Init+0x88>)
 8000804:	4a1a      	ldr	r2, [pc, #104]	; (8000870 <SPI1_Init+0x8c>)
 8000806:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <SPI1_Init+0x88>)
 800080a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800080e:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <SPI1_Init+0x88>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <SPI1_Init+0x88>)
 8000818:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800081c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <SPI1_Init+0x88>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <SPI1_Init+0x88>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <SPI1_Init+0x88>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <SPI1_Init+0x88>)
 8000834:	2230      	movs	r2, #48	; 0x30
 8000836:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <SPI1_Init+0x88>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <SPI1_Init+0x88>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <SPI1_Init+0x88>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <SPI1_Init+0x88>)
 800084c:	2207      	movs	r2, #7
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <SPI1_Init+0x88>)
 8000852:	f001 ffb3 	bl	80027bc <HAL_SPI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d000      	beq.n	800085e <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 800085c:	e7fe      	b.n	800085c <SPI1_Init+0x78>
    }
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	20000028 	.word	0x20000028
 8000870:	40013000 	.word	0x40013000

08000874 <USART1_Init>:

void USART1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <USART1_Init+0x68>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <USART1_Init+0x68>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6613      	str	r3, [r2, #96]	; 0x60
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <USART1_Init+0x68>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

	// Configure UART peripheral
	huart1.Instance = USART1;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <USART1_Init+0x6c>)
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <USART1_Init+0x70>)
 8000896:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <USART1_Init+0x6c>)
 800089a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089e:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <USART1_Init+0x6c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <USART1_Init+0x6c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <USART1_Init+0x6c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <USART1_Init+0x6c>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <USART1_Init+0x6c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <USART1_Init+0x6c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <USART1_Init+0x6c>)
 80008c6:	f002 fba3 	bl	8003010 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d000      	beq.n	80008d2 <USART1_Init+0x5e>
	{
		// Initialization error
		while (1);
 80008d0:	e7fe      	b.n	80008d0 <USART1_Init+0x5c>
	}
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	2000008c 	.word	0x2000008c
 80008e4:	40013800 	.word	0x40013800

080008e8 <crc8>:

uint8_t crc8(uint8_t *data, size_t len)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]
    while (len--)
 80008f6:	e01e      	b.n	8000936 <crc8+0x4e>
    {
        crc ^= *data++;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	4053      	eors	r3, r2
 8000904:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8000906:	2300      	movs	r3, #0
 8000908:	73bb      	strb	r3, [r7, #14]
 800090a:	e011      	b.n	8000930 <crc8+0x48>
        {
            if (crc & 0x80)
 800090c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000910:	2b00      	cmp	r3, #0
 8000912:	da07      	bge.n	8000924 <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	b25b      	sxtb	r3, r3
 800091a:	f083 0307 	eor.w	r3, r3, #7
 800091e:	b25b      	sxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e002      	b.n	800092a <crc8+0x42>
            else
                crc <<= 1;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 800092a:	7bbb      	ldrb	r3, [r7, #14]
 800092c:	3301      	adds	r3, #1
 800092e:	73bb      	strb	r3, [r7, #14]
 8000930:	7bbb      	ldrb	r3, [r7, #14]
 8000932:	2b07      	cmp	r3, #7
 8000934:	d9ea      	bls.n	800090c <crc8+0x24>
    while (len--)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	1e5a      	subs	r2, r3, #1
 800093a:	603a      	str	r2, [r7, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1db      	bne.n	80008f8 <crc8+0x10>
        }
    }
    return crc;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <DirectCmdRead>:
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <DirectCmdRead+0x90>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	823b      	strh	r3, [r7, #16]
 8000966:	2300      	movs	r3, #0
 8000968:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <DirectCmdRead+0x90>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	81bb      	strh	r3, [r7, #12]
 8000970:	2300      	movs	r3, #0
 8000972:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	723b      	strb	r3, [r7, #8]
 8000978:	23ff      	movs	r3, #255	; 0xff
 800097a:	727b      	strb	r3, [r7, #9]
	uint8_t crcLower = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	74fb      	strb	r3, [r7, #19]
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e023      	b.n	80009ce <DirectCmdRead+0x7e>
	{
		fullCmd[0] = cmd + i; // Increment the address
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	4413      	add	r3, r2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	723b      	strb	r3, [r7, #8]
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	2102      	movs	r1, #2
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ffa5 	bl	80008e8 <crc8>
 800099e:	4603      	mov	r3, r0
 80009a0:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 80009a2:	7a3b      	ldrb	r3, [r7, #8]
 80009a4:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 80009a6:	7a7b      	ldrb	r3, [r7, #9]
 80009a8:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 80009aa:	7cfb      	ldrb	r3, [r7, #19]
 80009ac:	73bb      	strb	r3, [r7, #14]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 80009ae:	f107 0110 	add.w	r1, r7, #16
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2203      	movs	r2, #3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f9ab 	bl	8000d14 <AFETransmitReadCmd>
		returnData[i] = rxData[1]; // Save data byte received from last transaction
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	7c7a      	ldrb	r2, [r7, #17]
 80009c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	3301      	adds	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	dbd7      	blt.n	8000986 <DirectCmdRead+0x36>
	}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	08003b20 	.word	0x08003b20

080009e4 <SubCmdNoData>:
/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <SubCmdNoData+0x8c>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	833b      	strh	r3, [r7, #24]
 80009f4:	2300      	movs	r3, #0
 80009f6:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 80009f8:	23be      	movs	r3, #190	; 0xbe
 80009fa:	753b      	strb	r3, [r7, #20]
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2102      	movs	r1, #2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff6d 	bl	80008e8 <crc8>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8000a12:	23bf      	movs	r3, #191	; 0xbf
 8000a14:	743b      	strb	r3, [r7, #16]
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	2102      	movs	r1, #2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff5e 	bl	80008e8 <crc8>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	77bb      	strb	r3, [r7, #30]

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8000a30:	7d3b      	ldrb	r3, [r7, #20]
 8000a32:	733b      	strb	r3, [r7, #12]
 8000a34:	7d7b      	ldrb	r3, [r7, #21]
 8000a36:	737b      	strb	r3, [r7, #13]
 8000a38:	7ffb      	ldrb	r3, [r7, #31]
 8000a3a:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000a3c:	f107 0118 	add.w	r1, r7, #24
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2203      	movs	r2, #3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f99c 	bl	8000d84 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8000a4c:	7c3b      	ldrb	r3, [r7, #16]
 8000a4e:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 8000a50:	7c7b      	ldrb	r3, [r7, #17]
 8000a52:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 8000a54:	7fbb      	ldrb	r3, [r7, #30]
 8000a56:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000a58:	f107 0118 	add.w	r1, r7, #24
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2203      	movs	r2, #3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f98e 	bl	8000d84 <AFETransmitWriteCmd>
}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	08003b20 	.word	0x08003b20

08000a74 <SubCmdReadData>:
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	80fb      	strh	r3, [r7, #6]
 8000a80:	4613      	mov	r3, r2
 8000a82:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8000a84:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <SubCmdReadData+0xf4>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	83bb      	strh	r3, [r7, #28]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	77bb      	strb	r3, [r7, #30]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8000a8e:	23be      	movs	r3, #190	; 0xbe
 8000a90:	763b      	strb	r3, [r7, #24]
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff22 	bl	80008e8 <crc8>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8000aaa:	23bf      	movs	r3, #191	; 0xbf
 8000aac:	753b      	strb	r3, [r7, #20]
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2102      	movs	r1, #2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff12 	bl	80008e8 <crc8>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8000aca:	7e3b      	ldrb	r3, [r7, #24]
 8000acc:	743b      	strb	r3, [r7, #16]
 8000ace:	7e7b      	ldrb	r3, [r7, #25]
 8000ad0:	747b      	strb	r3, [r7, #17]
 8000ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ad6:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000ad8:	f107 011c 	add.w	r1, r7, #28
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f94e 	bl	8000d84 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8000ae8:	7d3b      	ldrb	r3, [r7, #20]
 8000aea:	743b      	strb	r3, [r7, #16]
	txData[1] = commandUpperAddr[1];
 8000aec:	7d7b      	ldrb	r3, [r7, #21]
 8000aee:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8000af0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000af4:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000af6:	f107 011c 	add.w	r1, r7, #28
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	2203      	movs	r2, #3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f93f 	bl	8000d84 <AFETransmitWriteCmd>

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 8000b06:	2300      	movs	r3, #0
 8000b08:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0e:	e022      	b.n	8000b56 <SubCmdReadData+0xe2>
		readData[0] = READ_DATA_BUFF_LSB + i;
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	3340      	adds	r3, #64	; 0x40
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	733b      	strb	r3, [r7, #12]
		readData[1] = 0xFF;
 8000b1a:	23ff      	movs	r3, #255	; 0xff
 8000b1c:	737b      	strb	r3, [r7, #13]

		txData[0] = readData[0];
 8000b1e:	7b3b      	ldrb	r3, [r7, #12]
 8000b20:	743b      	strb	r3, [r7, #16]
		txData[1] = readData[1];
 8000b22:	7b7b      	ldrb	r3, [r7, #13]
 8000b24:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(readData, 2);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fedb 	bl	80008e8 <crc8>
 8000b32:	4603      	mov	r3, r0
 8000b34:	74bb      	strb	r3, [r7, #18]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8000b36:	f107 011c 	add.w	r1, r7, #28
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2203      	movs	r2, #3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f8e7 	bl	8000d14 <AFETransmitReadCmd>

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	7f7a      	ldrb	r2, [r7, #29]
 8000b4e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	3301      	adds	r3, #1
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
 8000b56:	797b      	ldrb	r3, [r7, #5]
 8000b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dbd8      	blt.n	8000b10 <SubCmdReadData+0x9c>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08003b20 	.word	0x08003b20

08000b6c <RAMRegisterWrite>:
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	; 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	80fb      	strh	r3, [r7, #6]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8000b7c:	4b64      	ldr	r3, [pc, #400]	; (8000d10 <RAMRegisterWrite+0x1a4>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	83bb      	strh	r3, [r7, #28]
 8000b82:	2300      	movs	r3, #0
 8000b84:	77bb      	strb	r3, [r7, #30]
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
 8000b86:	23be      	movs	r3, #190	; 0xbe
 8000b88:	763b      	strb	r3, [r7, #24]
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(lowerAddr, 2);
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	2102      	movs	r1, #2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fea6 	bl	80008e8 <crc8>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
 8000ba2:	23bf      	movs	r3, #191	; 0xbf
 8000ba4:	753b      	strb	r3, [r7, #20]
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(upperAddr, 2);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe96 	bl	80008e8 <crc8>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
 8000bc2:	7e3b      	ldrb	r3, [r7, #24]
 8000bc4:	743b      	strb	r3, [r7, #16]
 8000bc6:	7e7b      	ldrb	r3, [r7, #25]
 8000bc8:	747b      	strb	r3, [r7, #17]
 8000bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bce:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000bd0:	f107 011c 	add.w	r1, r7, #28
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2203      	movs	r2, #3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f8d2 	bl	8000d84 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = upperAddr[0];
 8000be0:	7d3b      	ldrb	r3, [r7, #20]
 8000be2:	743b      	strb	r3, [r7, #16]
	txData[1] = upperAddr[1];
 8000be4:	7d7b      	ldrb	r3, [r7, #21]
 8000be6:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8000be8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000bec:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000bee:	f107 011c 	add.w	r1, r7, #28
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f8c3 	bl	8000d84 <AFETransmitWriteCmd>

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
 8000bfe:	2300      	movs	r3, #0
 8000c00:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c06:	e020      	b.n	8000c4a <RAMRegisterWrite+0xde>
	{
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
 8000c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	3b40      	subs	r3, #64	; 0x40
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	733b      	strb	r3, [r7, #12]
		writeBytes[1] = writeData[i];
 8000c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	737b      	strb	r3, [r7, #13]

		txData[0] = writeBytes[0];
 8000c1c:	7b3b      	ldrb	r3, [r7, #12]
 8000c1e:	743b      	strb	r3, [r7, #16]
		txData[1] = writeBytes[1];
 8000c20:	7b7b      	ldrb	r3, [r7, #13]
 8000c22:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fe5c 	bl	80008e8 <crc8>
 8000c30:	4603      	mov	r3, r0
 8000c32:	74bb      	strb	r3, [r7, #18]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000c34:	f107 011c 	add.w	r1, r7, #28
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f8a0 	bl	8000d84 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++)
 8000c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c46:	3301      	adds	r3, #1
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c4a:	797b      	ldrb	r3, [r7, #5]
 8000c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbda      	blt.n	8000c08 <RAMRegisterWrite+0x9c>
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c5c:	e00b      	b.n	8000c76 <RAMRegisterWrite+0x10a>
		checkSum += writeData[i];
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c6a:	4413      	add	r3, r2
 8000c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	3301      	adds	r3, #1
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
 8000c76:	797b      	ldrb	r3, [r7, #5]
 8000c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dbef      	blt.n	8000c5e <RAMRegisterWrite+0xf2>
	}
	checkSum += lowerAddr[1];
 8000c7e:	7e7a      	ldrb	r2, [r7, #25]
 8000c80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c84:	4413      	add	r3, r2
 8000c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum += upperAddr[1];
 8000c8a:	7d7a      	ldrb	r2, [r7, #21]
 8000c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c90:	4413      	add	r3, r2
 8000c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum = ~(checkSum);
 8000c96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
 8000ca0:	23e0      	movs	r3, #224	; 0xe0
 8000ca2:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = checkSum;
 8000ca4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ca8:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8000caa:	7b3b      	ldrb	r3, [r7, #12]
 8000cac:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8000cae:	7b7b      	ldrb	r3, [r7, #13]
 8000cb0:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fe15 	bl	80008e8 <crc8>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000cc2:	f107 011c 	add.w	r1, r7, #28
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f859 	bl	8000d84 <AFETransmitWriteCmd>

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
 8000cd2:	23e1      	movs	r3, #225	; 0xe1
 8000cd4:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes
 8000cd6:	797b      	ldrb	r3, [r7, #5]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8000cde:	7b3b      	ldrb	r3, [r7, #12]
 8000ce0:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8000ce2:	7b7b      	ldrb	r3, [r7, #13]
 8000ce4:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	2102      	movs	r1, #2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fdfb 	bl	80008e8 <crc8>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000cf6:	f107 011c 	add.w	r1, r7, #28
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2203      	movs	r2, #3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f83f 	bl	8000d84 <AFETransmitWriteCmd>
}
 8000d06:	bf00      	nop
 8000d08:	3730      	adds	r7, #48	; 0x30
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	08003b20 	.word	0x08003b20

08000d14 <AFETransmitReadCmd>:

void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8000d22:	2300      	movs	r3, #0
 8000d24:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8000d26:	e01e      	b.n	8000d66 <AFETransmitReadCmd+0x52>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <AFETransmitReadCmd+0x68>)
 8000d2e:	f000 fca3 	bl	8001678 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3a:	9200      	str	r2, [sp, #0]
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <AFETransmitReadCmd+0x6c>)
 8000d42:	f001 fdde 	bl	8002902 <HAL_SPI_TransmitReceive>

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		if (txBytes[0] == rxBytes[0]) commReceived = true;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d101      	bne.n	8000d56 <AFETransmitReadCmd+0x42>
 8000d52:	2301      	movs	r3, #1
 8000d54:	75fb      	strb	r3, [r7, #23]
		// TODO: implement CRC checking for received data

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4808      	ldr	r0, [pc, #32]	; (8000d7c <AFETransmitReadCmd+0x68>)
 8000d5c:	f000 fc8c 	bl	8001678 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f000 fa0d 	bl	8001180 <HAL_Delay>
	while (!commReceived)
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	f083 0301 	eor.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1da      	bne.n	8000d28 <AFETransmitReadCmd+0x14>
	}

}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	20000028 	.word	0x20000028

08000d84 <AFETransmitWriteCmd>:

void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8000d92:	2300      	movs	r3, #0
 8000d94:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8000d96:	e02e      	b.n	8000df6 <AFETransmitWriteCmd+0x72>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	481b      	ldr	r0, [pc, #108]	; (8000e0c <AFETransmitWriteCmd+0x88>)
 8000d9e:	f000 fc6b 	bl	8001678 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f04f 32ff 	mov.w	r2, #4294967295
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	4817      	ldr	r0, [pc, #92]	; (8000e10 <AFETransmitWriteCmd+0x8c>)
 8000db2:	f001 fda6 	bl	8002902 <HAL_SPI_TransmitReceive>

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
 8000db6:	2301      	movs	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	e00e      	b.n	8000dde <AFETransmitWriteCmd+0x5a>
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	440b      	add	r3, r1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d001      	beq.n	8000dd8 <AFETransmitWriteCmd+0x54>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dbec      	blt.n	8000dc0 <AFETransmitWriteCmd+0x3c>
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2101      	movs	r1, #1
 8000dea:	4808      	ldr	r0, [pc, #32]	; (8000e0c <AFETransmitWriteCmd+0x88>)
 8000dec:	f000 fc44 	bl	8001678 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 f9c5 	bl	8001180 <HAL_Delay>
	while (!commReceived)
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	f083 0301 	eor.w	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1ca      	bne.n	8000d98 <AFETransmitWriteCmd+0x14>
	}
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	20000028 	.word	0x20000028

08000e14 <UART_Transmit>:

    // Wait until not busy
    while (SPI1->SR & SPI_SR_BSY);
}

void UART_Transmit(uint8_t *data, uint8_t len) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
	if (HAL_UART_Transmit(&huart1, data, len, HAL_MAX_DELAY)) {
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <UART_Transmit+0x30>)
 8000e2c:	f002 f93e 	bl	80030ac <HAL_UART_Transmit>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <UART_Transmit+0x26>
		// Transmission error
		Error_Handler();
 8000e36:	f000 f807 	bl	8000e48 <Error_Handler>
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000008c 	.word	0x2000008c

08000e48 <Error_Handler>:

void Error_Handler(void) {
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
    // Stay in an infinite loop to allow for debugging
    while (1);
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x4>
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x44>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x44>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6613      	str	r3, [r2, #96]	; 0x60
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x44>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x44>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x44>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_SPI_MspInit+0x7c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d128      	bne.n	8000f0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000eea:	23c2      	movs	r3, #194	; 0xc2
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efa:	2305      	movs	r3, #5
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f000 fa44 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40013000 	.word	0x40013000
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b096      	sub	sp, #88	; 0x58
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2234      	movs	r2, #52	; 0x34
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fdae 	bl	8003a9e <memset>
  if(huart->Instance==USART1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <HAL_UART_MspInit+0xa4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d135      	bne.n	8000fb8 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 faa9 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f64:	f7ff ff70 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_UART_MspInit+0xa8>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6c:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <HAL_UART_MspInit+0xa8>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f72:	6613      	str	r3, [r2, #96]	; 0x60
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_UART_MspInit+0xa8>)
 8000f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_UART_MspInit+0xa8>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f84:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_UART_MspInit+0xa8>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_UART_MspInit+0xa8>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f98:	23c0      	movs	r3, #192	; 0xc0
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_UART_MspInit+0xac>)
 8000fb4:	f000 f9ee 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3758      	adds	r7, #88	; 0x58
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000400 	.word	0x48000400

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 f892 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800107c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001048:	f7ff ffea 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <LoopForever+0x6>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	; (8001084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <LoopForever+0xe>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	; (8001090 <LoopForever+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001072:	f002 fd1d 	bl	8003ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001076:	f7ff fa3f 	bl	80004f8 <main>

0800107a <LoopForever>:

LoopForever:
    b LoopForever
 800107a:	e7fe      	b.n	800107a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800107c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001088:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 800108c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001090:	20000118 	.word	0x20000118

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>

08001096 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f943 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	200f      	movs	r0, #15
 80010a8:	f000 f80e 	bl	80010c8 <HAL_InitTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e001      	b.n	80010bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010b8:	f7ff feca 	bl	8000e50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_InitTick+0x6c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d023      	beq.n	8001124 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_InitTick+0x70>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_InitTick+0x6c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f941 	bl	800137a <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10f      	bne.n	800111e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d809      	bhi.n	8001118 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f919 	bl	8001342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_InitTick+0x74>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e007      	b.n	8001128 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e004      	b.n	8001128 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e001      	b.n	8001128 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	20000000 	.word	0x20000000
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	20000114 	.word	0x20000114

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000114 	.word	0x20000114

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff47 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff5c 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff8e 	bl	8001280 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5d 	bl	800122c <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffb0 	bl	80012e8 <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	e14e      	b.n	8001642 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8140 	beq.w	800163c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d005      	beq.n	80013d4 <HAL_GPIO_Init+0x40>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d130      	bne.n	8001436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140a:	2201      	movs	r2, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	f003 0201 	and.w	r2, r3, #1
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b03      	cmp	r3, #3
 8001440:	d017      	beq.n	8001472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d123      	bne.n	80014c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0203 	and.w	r2, r3, #3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 809a 	beq.w	800163c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001508:	4b55      	ldr	r3, [pc, #340]	; (8001660 <HAL_GPIO_Init+0x2cc>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150c:	4a54      	ldr	r2, [pc, #336]	; (8001660 <HAL_GPIO_Init+0x2cc>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6613      	str	r3, [r2, #96]	; 0x60
 8001514:	4b52      	ldr	r3, [pc, #328]	; (8001660 <HAL_GPIO_Init+0x2cc>)
 8001516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001520:	4a50      	ldr	r2, [pc, #320]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800154a:	d013      	beq.n	8001574 <HAL_GPIO_Init+0x1e0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a46      	ldr	r2, [pc, #280]	; (8001668 <HAL_GPIO_Init+0x2d4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d00d      	beq.n	8001570 <HAL_GPIO_Init+0x1dc>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a45      	ldr	r2, [pc, #276]	; (800166c <HAL_GPIO_Init+0x2d8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d007      	beq.n	800156c <HAL_GPIO_Init+0x1d8>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a44      	ldr	r2, [pc, #272]	; (8001670 <HAL_GPIO_Init+0x2dc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_GPIO_Init+0x1d4>
 8001564:	2303      	movs	r3, #3
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x1e2>
 8001568:	2307      	movs	r3, #7
 800156a:	e004      	b.n	8001576 <HAL_GPIO_Init+0x1e2>
 800156c:	2302      	movs	r3, #2
 800156e:	e002      	b.n	8001576 <HAL_GPIO_Init+0x1e2>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_GPIO_Init+0x1e2>
 8001574:	2300      	movs	r3, #0
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	f002 0203 	and.w	r2, r2, #3
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	4093      	lsls	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001586:	4937      	ldr	r1, [pc, #220]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001594:	4b37      	ldr	r3, [pc, #220]	; (8001674 <HAL_GPIO_Init+0x2e0>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b8:	4a2e      	ldr	r2, [pc, #184]	; (8001674 <HAL_GPIO_Init+0x2e0>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015be:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_GPIO_Init+0x2e0>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_GPIO_Init+0x2e0>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_GPIO_Init+0x2e0>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <HAL_GPIO_Init+0x2e0>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_GPIO_Init+0x2e0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_GPIO_Init+0x2e0>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f47f aea9 	bne.w	80013a4 <HAL_GPIO_Init+0x10>
  }
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	48000c00 	.word	0x48000c00
 8001674:	40010400 	.word	0x40010400

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001694:	e002      	b.n	800169c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	041a      	lsls	r2, r3, #16
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	43d9      	mvns	r1, r3
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	400b      	ands	r3, r1
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40007000 	.word	0x40007000

080016f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001706:	d130      	bne.n	800176a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001714:	d038      	beq.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2232      	movs	r2, #50	; 0x32
 800172c:	fb02 f303 	mul.w	r3, r2, r3
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	3301      	adds	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173c:	e002      	b.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3b01      	subs	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001750:	d102      	bne.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f2      	bne.n	800173e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001764:	d110      	bne.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e00f      	b.n	800178a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001776:	d007      	beq.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001780:	4a05      	ldr	r2, [pc, #20]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40007000 	.word	0x40007000
 800179c:	20000000 	.word	0x20000000
 80017a0:	431bde83 	.word	0x431bde83

080017a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f000 bc4f 	b.w	8002056 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b8:	4b97      	ldr	r3, [pc, #604]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c2:	4b95      	ldr	r3, [pc, #596]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80e6 	beq.w	80019a6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4c>
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	f040 808d 	bne.w	8001902 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	f040 8089 	bne.w	8001902 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f0:	4b89      	ldr	r3, [pc, #548]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_RCC_OscConfig+0x66>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	f000 bc26 	b.w	8002056 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180e:	4b82      	ldr	r3, [pc, #520]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <HAL_RCC_OscConfig+0x80>
 800181a:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001822:	e005      	b.n	8001830 <HAL_RCC_OscConfig+0x8c>
 8001824:	4b7c      	ldr	r3, [pc, #496]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001830:	4293      	cmp	r3, r2
 8001832:	d224      	bcs.n	800187e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fdd9 	bl	80023f0 <RCC_SetFlashLatencyFromMSIRange>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	f000 bc06 	b.w	8002056 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184a:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a72      	ldr	r2, [pc, #456]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b70      	ldr	r3, [pc, #448]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	496d      	ldr	r1, [pc, #436]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001868:	4b6b      	ldr	r3, [pc, #428]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	4968      	ldr	r1, [pc, #416]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	e025      	b.n	80018ca <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187e:	4b66      	ldr	r3, [pc, #408]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a65      	ldr	r2, [pc, #404]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	4960      	ldr	r1, [pc, #384]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189c:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	495b      	ldr	r1, [pc, #364]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fd98 	bl	80023f0 <RCC_SetFlashLatencyFromMSIRange>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e3c5      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ca:	f000 fccd 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b51      	ldr	r3, [pc, #324]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	4950      	ldr	r1, [pc, #320]	; (8001a1c <HAL_RCC_OscConfig+0x278>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80018e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018ea:	4b4e      	ldr	r3, [pc, #312]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fbea 	bl	80010c8 <HAL_InitTick>
 80018f4:	4603      	mov	r3, r0
 80018f6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d052      	beq.n	80019a4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	e3a9      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d032      	beq.n	8001970 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800190a:	4b43      	ldr	r3, [pc, #268]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a42      	ldr	r2, [pc, #264]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001916:	f7ff fc27 	bl	8001168 <HAL_GetTick>
 800191a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800191e:	f7ff fc23 	bl	8001168 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e392      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a35      	ldr	r2, [pc, #212]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	4930      	ldr	r1, [pc, #192]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	492b      	ldr	r1, [pc, #172]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
 800196e:	e01a      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800197c:	f7ff fbf4 	bl	8001168 <HAL_GetTick>
 8001980:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001984:	f7ff fbf0 	bl	8001168 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e35f      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1e0>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d073      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_OscConfig+0x220>
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d10e      	bne.n	80019dc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d10b      	bne.n	80019dc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d063      	beq.n	8001a98 <HAL_RCC_OscConfig+0x2f4>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d15f      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e33c      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x250>
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e025      	b.n	8001a40 <HAL_RCC_OscConfig+0x29c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d114      	bne.n	8001a28 <HAL_RCC_OscConfig+0x284>
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a02      	ldr	r2, [pc, #8]	; (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e013      	b.n	8001a40 <HAL_RCC_OscConfig+0x29c>
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08003b24 	.word	0x08003b24
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004
 8001a28:	4b8f      	ldr	r3, [pc, #572]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a8e      	ldr	r2, [pc, #568]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a8b      	ldr	r2, [pc, #556]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb8e 	bl	8001168 <HAL_GetTick>
 8001a4c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fb8a 	bl	8001168 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e2f9      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a62:	4b81      	ldr	r3, [pc, #516]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x2ac>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fb7a 	bl	8001168 <HAL_GetTick>
 8001a74:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff fb76 	bl	8001168 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e2e5      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a8a:	4b77      	ldr	r3, [pc, #476]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2d4>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d060      	beq.n	8001b68 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x314>
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d119      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d116      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x32c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2c2      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	4962      	ldr	r1, [pc, #392]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae4:	e040      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d023      	beq.n	8001b36 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aee:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5d      	ldr	r2, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff fb35 	bl	8001168 <HAL_GetTick>
 8001afe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff fb31 	bl	8001168 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e2a0      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b14:	4b54      	ldr	r3, [pc, #336]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	494e      	ldr	r1, [pc, #312]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e018      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b36:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff fb11 	bl	8001168 <HAL_GetTick>
 8001b46:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fb0d 	bl	8001168 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e27c      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b5c:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8082 	beq.w	8001c7a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d05f      	beq.n	8001c3e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b84:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d037      	beq.n	8001c04 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e254      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01b      	beq.n	8001bee <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bc6:	f7ff facf 	bl	8001168 <HAL_GetTick>
 8001bca:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff facb 	bl	8001168 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b11      	cmp	r3, #17
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e23a      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ef      	bne.n	8001bce <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001bee:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf4:	f023 0210 	bic.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	491a      	ldr	r1, [pc, #104]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff faa8 	bl	8001168 <HAL_GetTick>
 8001c18:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff faa4 	bl	8001168 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b11      	cmp	r3, #17
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e213      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ef      	beq.n	8001c1c <HAL_RCC_OscConfig+0x478>
 8001c3c:	e01d      	b.n	8001c7a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c44:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7ff fa8b 	bl	8001168 <HAL_GetTick>
 8001c52:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c56:	f7ff fa87 	bl	8001168 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b11      	cmp	r3, #17
 8001c62:	d903      	bls.n	8001c6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1f6      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
 8001c68:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c6c:	4ba9      	ldr	r3, [pc, #676]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ed      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80bd 	beq.w	8001e02 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c8e:	4ba1      	ldr	r3, [pc, #644]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10e      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b9e      	ldr	r3, [pc, #632]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a9d      	ldr	r2, [pc, #628]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca6:	4b9b      	ldr	r3, [pc, #620]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb8:	4b97      	ldr	r3, [pc, #604]	; (8001f18 <HAL_RCC_OscConfig+0x774>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d118      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc4:	4b94      	ldr	r3, [pc, #592]	; (8001f18 <HAL_RCC_OscConfig+0x774>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a93      	ldr	r2, [pc, #588]	; (8001f18 <HAL_RCC_OscConfig+0x774>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fa4a 	bl	8001168 <HAL_GetTick>
 8001cd4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7ff fa46 	bl	8001168 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1b5      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cea:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x774>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001d02:	4b84      	ldr	r3, [pc, #528]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d14:	497f      	ldr	r1, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d28:	4b7a      	ldr	r3, [pc, #488]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	4a79      	ldr	r2, [pc, #484]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d38:	4b76      	ldr	r3, [pc, #472]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	4a75      	ldr	r2, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d48:	e018      	b.n	8001d7c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d4a:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	4a70      	ldr	r2, [pc, #448]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d5a:	e00f      	b.n	8001d7c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d5c:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	4a6c      	ldr	r2, [pc, #432]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d6c:	4b69      	ldr	r3, [pc, #420]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	4a68      	ldr	r2, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d016      	beq.n	8001db2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f9f0 	bl	8001168 <HAL_GetTick>
 8001d88:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7ff f9ec 	bl	8001168 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e159      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da2:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ed      	beq.n	8001d8c <HAL_RCC_OscConfig+0x5e8>
 8001db0:	e01d      	b.n	8001dee <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7ff f9d9 	bl	8001168 <HAL_GetTick>
 8001db6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff f9d5 	bl	8001168 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e142      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ed      	bne.n	8001dba <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001dde:	4b4d      	ldr	r3, [pc, #308]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d105      	bne.n	8001e02 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	4a46      	ldr	r2, [pc, #280]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d03c      	beq.n	8001e88 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1c:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff f99f 	bl	8001168 <HAL_GetTick>
 8001e2a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e2e:	f7ff f99b 	bl	8001168 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e10a      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ef      	beq.n	8001e2e <HAL_RCC_OscConfig+0x68a>
 8001e4e:	e01b      	b.n	8001e88 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e50:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e56:	4a2f      	ldr	r2, [pc, #188]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff f982 	bl	8001168 <HAL_GetTick>
 8001e64:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e68:	f7ff f97e 	bl	8001168 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e0ed      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ef      	bne.n	8001e68 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80e1 	beq.w	8002054 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f040 80b5 	bne.w	8002006 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d124      	bne.n	8001efa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d11b      	bne.n	8001efa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d113      	bne.n	8001efa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d109      	bne.n	8001efa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d05f      	beq.n	8001fba <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d05a      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <HAL_RCC_OscConfig+0x770>)
 8001f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f0c:	f7ff f92c 	bl	8001168 <HAL_GetTick>
 8001f10:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f12:	e00c      	b.n	8001f2e <HAL_RCC_OscConfig+0x78a>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff f924 	bl	8001168 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e093      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2e:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_RCC_OscConfig+0x8c0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f4a:	3a01      	subs	r2, #1
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f54:	0212      	lsls	r2, r2, #8
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f5c:	0852      	lsrs	r2, r2, #1
 8001f5e:	3a01      	subs	r2, #1
 8001f60:	0552      	lsls	r2, r2, #21
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f68:	0852      	lsrs	r2, r2, #1
 8001f6a:	3a01      	subs	r2, #1
 8001f6c:	0652      	lsls	r2, r2, #25
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	493b      	ldr	r1, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a39      	ldr	r2, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f80:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f82:	4b37      	ldr	r3, [pc, #220]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	4a36      	ldr	r2, [pc, #216]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f8e:	f7ff f8eb 	bl	8001168 <HAL_GetTick>
 8001f92:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff f8e7 	bl	8001168 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e056      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb4:	e04e      	b.n	8002054 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e04d      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d146      	bne.n	8002054 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fdc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fde:	f7ff f8c3 	bl	8001168 <HAL_GetTick>
 8001fe2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff f8bf 	bl	8001168 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e02e      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x842>
 8002004:	e026      	b.n	8002054 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	2b0c      	cmp	r3, #12
 800200a:	d021      	beq.n	8002050 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8002012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f8a6 	bl	8001168 <HAL_GetTick>
 800201c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f8a2 	bl	8001168 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e011      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_RCC_OscConfig+0x8bc>)
 8002044:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002048:	f023 0303 	bic.w	r3, r3, #3
 800204c:	60d3      	str	r3, [r2, #12]
 800204e:	e001      	b.n	8002054 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	f99f808c 	.word	0xf99f808c

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0e7      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b75      	ldr	r3, [pc, #468]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b72      	ldr	r3, [pc, #456]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4970      	ldr	r1, [pc, #448]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b6e      	ldr	r3, [pc, #440]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0cf      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d908      	bls.n	80020da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4960      	ldr	r1, [pc, #384]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d04c      	beq.n	8002180 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d121      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0a6      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002106:	4b54      	ldr	r3, [pc, #336]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e09a      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211e:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e08e      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e086      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b46      	ldr	r3, [pc, #280]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4943      	ldr	r1, [pc, #268]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002150:	f7ff f80a 	bl	8001168 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7ff f806 	bl	8001168 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e06e      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002198:	429a      	cmp	r2, r3
 800219a:	d208      	bcs.n	80021ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	492b      	ldr	r1, [pc, #172]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d210      	bcs.n	80021de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 0207 	bic.w	r2, r3, #7
 80021c4:	4923      	ldr	r1, [pc, #140]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e036      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	4918      	ldr	r1, [pc, #96]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4910      	ldr	r1, [pc, #64]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800221c:	f000 f824 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	490b      	ldr	r1, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x1f4>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800223a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1fc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe ff41 	bl	80010c8 <HAL_InitTick>
 8002246:	4603      	mov	r3, r0
 8002248:	72fb      	strb	r3, [r7, #11]

  return status;
 800224a:	7afb      	ldrb	r3, [r7, #11]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40022000 	.word	0x40022000
 8002258:	40021000 	.word	0x40021000
 800225c:	08003b24 	.word	0x08003b24
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x34>
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d121      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d11e      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e005      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022c4:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d102      	bne.n	80022e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_GetSysClockFreq+0x110>)
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e004      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_RCC_GetSysClockFreq+0x114>)
 80022ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d134      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0xa6>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d003      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0xac>
 800230c:	e005      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HAL_RCC_GetSysClockFreq+0x110>)
 8002310:	617b      	str	r3, [r7, #20]
      break;
 8002312:	e005      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_GetSysClockFreq+0x114>)
 8002316:	617b      	str	r3, [r7, #20]
      break;
 8002318:	e002      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	617b      	str	r3, [r7, #20]
      break;
 800231e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	3301      	adds	r3, #1
 800232c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	fb03 f202 	mul.w	r2, r3, r2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	0e5b      	lsrs	r3, r3, #25
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	3301      	adds	r3, #1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002360:	69bb      	ldr	r3, [r7, #24]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	08003b3c 	.word	0x08003b3c
 8002378:	00f42400 	.word	0x00f42400
 800237c:	007a1200 	.word	0x007a1200

08002380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCC_GetHCLKFreq+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800239c:	f7ff fff0 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4904      	ldr	r1, [pc, #16]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08003b34 	.word	0x08003b34

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023c8:	f7ff ffda 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0adb      	lsrs	r3, r3, #11
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08003b34 	.word	0x08003b34

080023f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023fc:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002408:	f7ff f968 	bl	80016dc <HAL_PWREx_GetVoltageRange>
 800240c:	6178      	str	r0, [r7, #20]
 800240e:	e014      	b.n	800243a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241a:	6593      	str	r3, [r2, #88]	; 0x58
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002428:	f7ff f958 	bl	80016dc <HAL_PWREx_GetVoltageRange>
 800242c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002440:	d10b      	bne.n	800245a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b80      	cmp	r3, #128	; 0x80
 8002446:	d919      	bls.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2ba0      	cmp	r3, #160	; 0xa0
 800244c:	d902      	bls.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800244e:	2302      	movs	r3, #2
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	e013      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002454:	2301      	movs	r3, #1
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e010      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b80      	cmp	r3, #128	; 0x80
 800245e:	d902      	bls.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002460:	2303      	movs	r3, #3
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	e00a      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b80      	cmp	r3, #128	; 0x80
 800246a:	d102      	bne.n	8002472 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800246c:	2302      	movs	r3, #2
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	e004      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b70      	cmp	r3, #112	; 0x70
 8002476:	d101      	bne.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002478:	2301      	movs	r3, #1
 800247a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 0207 	bic.w	r2, r3, #7
 8002484:	4909      	ldr	r1, [pc, #36]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40022000 	.word	0x40022000

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b8:	2300      	movs	r3, #0
 80024ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024bc:	2300      	movs	r3, #0
 80024be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 809e 	beq.w	800260a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024d2:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00d      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	4a3f      	ldr	r2, [pc, #252]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f2:	6593      	str	r3, [r2, #88]	; 0x58
 80024f4:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002500:	2301      	movs	r3, #1
 8002502:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002504:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a39      	ldr	r2, [pc, #228]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002510:	f7fe fe2a 	bl	8001168 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002516:	e009      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7fe fe26 	bl	8001168 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	74fb      	strb	r3, [r7, #19]
        break;
 800252a:	e005      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800252c:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d15a      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800253e:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002548:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01e      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d019      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002564:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002586:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d016      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fde6 	bl	8001168 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259e:	e00b      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f7fe fde2 	bl	8001168 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	74fb      	strb	r3, [r7, #19]
            break;
 80025b6:	e006      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0ec      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4904      	ldr	r1, [pc, #16]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025e2:	e009      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f8:	7c7b      	ldrb	r3, [r7, #17]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a6d      	ldr	r2, [pc, #436]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002616:	4b68      	ldr	r3, [pc, #416]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f023 0203 	bic.w	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4964      	ldr	r1, [pc, #400]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002638:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 020c 	bic.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	495c      	ldr	r1, [pc, #368]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800265a:	4b57      	ldr	r3, [pc, #348]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4953      	ldr	r1, [pc, #332]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800267c:	4b4e      	ldr	r3, [pc, #312]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	494b      	ldr	r1, [pc, #300]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800269e:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4942      	ldr	r1, [pc, #264]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026c0:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	493a      	ldr	r1, [pc, #232]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e2:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	4931      	ldr	r1, [pc, #196]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002704:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	4929      	ldr	r1, [pc, #164]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	4920      	ldr	r1, [pc, #128]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	4918      	ldr	r1, [pc, #96]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002766:	d105      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800276e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002772:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800279e:	d105      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e095      	b.n	80028fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d108      	bne.n	80027e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027de:	d009      	beq.n	80027f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
 80027e6:	e005      	b.n	80027f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fb42 	bl	8000e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800282a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002834:	d902      	bls.n	800283c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e002      	b.n	8002842 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800283c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002840:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800284a:	d007      	beq.n	800285c <HAL_SPI_Init+0xa0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002854:	d002      	beq.n	800285c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	ea42 0103 	orr.w	r1, r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	f003 0204 	and.w	r2, r3, #4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028d8:	ea42 0103 	orr.w	r1, r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b08a      	sub	sp, #40	; 0x28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002910:	2301      	movs	r3, #1
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x26>
 8002924:	2302      	movs	r3, #2
 8002926:	e20a      	b.n	8002d3e <HAL_SPI_TransmitReceive+0x43c>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002930:	f7fe fc1a 	bl	8001168 <HAL_GetTick>
 8002934:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800293c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002944:	887b      	ldrh	r3, [r7, #2]
 8002946:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800294c:	7efb      	ldrb	r3, [r7, #27]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d00e      	beq.n	8002970 <HAL_SPI_TransmitReceive+0x6e>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002958:	d106      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x66>
 8002962:	7efb      	ldrb	r3, [r7, #27]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d003      	beq.n	8002970 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002968:	2302      	movs	r3, #2
 800296a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800296e:	e1e0      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_SPI_TransmitReceive+0x80>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_SPI_TransmitReceive+0x80>
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002988:	e1d3      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b04      	cmp	r3, #4
 8002994:	d003      	beq.n	800299e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2205      	movs	r2, #5
 800299a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	887a      	ldrh	r2, [r7, #2]
 80029ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	887a      	ldrh	r2, [r7, #2]
 80029b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	887a      	ldrh	r2, [r7, #2]
 80029ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029e0:	d802      	bhi.n	80029e8 <HAL_SPI_TransmitReceive+0xe6>
 80029e2:	8a3b      	ldrh	r3, [r7, #16]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d908      	bls.n	80029fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	e007      	b.n	8002a0a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a08:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	d007      	beq.n	8002a28 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a30:	f240 8081 	bls.w	8002b36 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_SPI_TransmitReceive+0x140>
 8002a3c:	8a7b      	ldrh	r3, [r7, #18]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d16d      	bne.n	8002b1e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a66:	e05a      	b.n	8002b1e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d11b      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x1ac>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d016      	beq.n	8002aae <HAL_SPI_TransmitReceive+0x1ac>
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d113      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	881a      	ldrh	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	1c9a      	adds	r2, r3, #2
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d11c      	bne.n	8002af6 <HAL_SPI_TransmitReceive+0x1f4>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d016      	beq.n	8002af6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	1c9a      	adds	r2, r3, #2
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002af2:	2301      	movs	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002af6:	f7fe fb37 	bl	8001168 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d80b      	bhi.n	8002b1e <HAL_SPI_TransmitReceive+0x21c>
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d007      	beq.n	8002b1e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002b1c:	e109      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d19f      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x166>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d199      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x166>
 8002b34:	e0e3      	b.n	8002cfe <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_SPI_TransmitReceive+0x244>
 8002b3e:	8a7b      	ldrh	r3, [r7, #18]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f040 80cf 	bne.w	8002ce4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d912      	bls.n	8002b76 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	1c9a      	adds	r2, r3, #2
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b02      	subs	r3, #2
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b74:	e0b6      	b.n	8002ce4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b9c:	e0a2      	b.n	8002ce4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d134      	bne.n	8002c16 <HAL_SPI_TransmitReceive+0x314>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d02f      	beq.n	8002c16 <HAL_SPI_TransmitReceive+0x314>
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d12c      	bne.n	8002c16 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d912      	bls.n	8002bec <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	881a      	ldrh	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	1c9a      	adds	r2, r3, #2
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b02      	subs	r3, #2
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bea:	e012      	b.n	8002c12 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d148      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x3b4>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d042      	beq.n	8002cb6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d923      	bls.n	8002c84 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	b292      	uxth	r2, r2
 8002c48:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	1c9a      	adds	r2, r3, #2
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b02      	subs	r3, #2
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d81f      	bhi.n	8002cb2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	e016      	b.n	8002cb2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f103 020c 	add.w	r2, r3, #12
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cb6:	f7fe fa57 	bl	8001168 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d803      	bhi.n	8002cce <HAL_SPI_TransmitReceive+0x3cc>
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d102      	bne.n	8002cd4 <HAL_SPI_TransmitReceive+0x3d2>
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002ce2:	e026      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f47f af57 	bne.w	8002b9e <HAL_SPI_TransmitReceive+0x29c>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f af50 	bne.w	8002b9e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f93e 	bl	8002f84 <SPI_EndRxTxTransaction>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d28:	e003      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3728      	adds	r7, #40	; 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d58:	f7fe fa06 	bl	8001168 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4413      	add	r3, r2
 8002d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d68:	f7fe f9fe 	bl	8001168 <HAL_GetTick>
 8002d6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d6e:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	015b      	lsls	r3, r3, #5
 8002d74:	0d1b      	lsrs	r3, r3, #20
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d7e:	e054      	b.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d050      	beq.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d88:	f7fe f9ee 	bl	8001168 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d902      	bls.n	8002d9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d13d      	bne.n	8002e1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db6:	d111      	bne.n	8002ddc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc0:	d004      	beq.n	8002dcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dca:	d107      	bne.n	8002ddc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de4:	d10f      	bne.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e017      	b.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4013      	ands	r3, r2
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d19b      	bne.n	8002d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000000 	.word	0x20000000

08002e58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e6a:	f7fe f97d 	bl	8001168 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002e7a:	f7fe f975 	bl	8001168 <HAL_GetTick>
 8002e7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e88:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00da      	lsls	r2, r3, #3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	0d1b      	lsrs	r3, r3, #20
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ea0:	e060      	b.n	8002f64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ea8:	d107      	bne.n	8002eba <SPI_WaitFifoStateUntilTimeout+0x62>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d050      	beq.n	8002f64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ec2:	f7fe f951 	bl	8001168 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d902      	bls.n	8002ed8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d13d      	bne.n	8002f54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ee6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef0:	d111      	bne.n	8002f16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efa:	d004      	beq.n	8002f06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f04:	d107      	bne.n	8002f16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1e:	d10f      	bne.n	8002f40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e010      	b.n	8002f76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d196      	bne.n	8002ea2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3728      	adds	r7, #40	; 0x28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000

08002f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff ff5b 	bl	8002e58 <SPI_WaitFifoStateUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e027      	b.n	8003008 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fec0 	bl	8002d48 <SPI_WaitFlagStateUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd2:	f043 0220 	orr.w	r2, r3, #32
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e014      	b.n	8003008 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff ff34 	bl	8002e58 <SPI_WaitFifoStateUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e000      	b.n	8003008 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e040      	b.n	80030a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd ff72 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	; 0x24
 800303c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fb0c 	bl	8003674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8af 	bl	80031c0 <UART_SetConfig>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01b      	b.n	80030a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800307a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800308a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fb8b 	bl	80037b8 <UART_CheckIdleState>
 80030a2:	4603      	mov	r3, r0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d178      	bne.n	80031b6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_UART_Transmit+0x24>
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e071      	b.n	80031b8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2221      	movs	r2, #33	; 0x21
 80030e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e2:	f7fe f841 	bl	8001168 <HAL_GetTick>
 80030e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d108      	bne.n	8003114 <HAL_UART_Transmit+0x68>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e003      	b.n	800311c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800311c:	e030      	b.n	8003180 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2200      	movs	r2, #0
 8003126:	2180      	movs	r1, #128	; 0x80
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fbed 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e03c      	b.n	80031b8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	881a      	ldrh	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003150:	b292      	uxth	r2, r2
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	3302      	adds	r3, #2
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e008      	b.n	800316e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	b292      	uxth	r2, r2
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1c8      	bne.n	800311e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2200      	movs	r2, #0
 8003194:	2140      	movs	r1, #64	; 0x40
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fbb6 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e005      	b.n	80031b8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
  }
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c4:	b08a      	sub	sp, #40	; 0x28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	431a      	orrs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b9e      	ldr	r3, [pc, #632]	; (8003468 <UART_SetConfig+0x2a8>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a93      	ldr	r2, [pc, #588]	; (800346c <UART_SetConfig+0x2ac>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	4313      	orrs	r3, r2
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a8a      	ldr	r2, [pc, #552]	; (8003470 <UART_SetConfig+0x2b0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d126      	bne.n	8003298 <UART_SetConfig+0xd8>
 800324a:	4b8a      	ldr	r3, [pc, #552]	; (8003474 <UART_SetConfig+0x2b4>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b03      	cmp	r3, #3
 8003256:	d81b      	bhi.n	8003290 <UART_SetConfig+0xd0>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <UART_SetConfig+0xa0>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003271 	.word	0x08003271
 8003264:	08003281 	.word	0x08003281
 8003268:	08003279 	.word	0x08003279
 800326c:	08003289 	.word	0x08003289
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e0ab      	b.n	80033d0 <UART_SetConfig+0x210>
 8003278:	2302      	movs	r3, #2
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e0a7      	b.n	80033d0 <UART_SetConfig+0x210>
 8003280:	2304      	movs	r3, #4
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e0a3      	b.n	80033d0 <UART_SetConfig+0x210>
 8003288:	2308      	movs	r3, #8
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328e:	e09f      	b.n	80033d0 <UART_SetConfig+0x210>
 8003290:	2310      	movs	r3, #16
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003296:	e09b      	b.n	80033d0 <UART_SetConfig+0x210>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a76      	ldr	r2, [pc, #472]	; (8003478 <UART_SetConfig+0x2b8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d138      	bne.n	8003314 <UART_SetConfig+0x154>
 80032a2:	4b74      	ldr	r3, [pc, #464]	; (8003474 <UART_SetConfig+0x2b4>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b0c      	cmp	r3, #12
 80032ae:	d82d      	bhi.n	800330c <UART_SetConfig+0x14c>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <UART_SetConfig+0xf8>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032ed 	.word	0x080032ed
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	0800330d 	.word	0x0800330d
 80032c4:	0800330d 	.word	0x0800330d
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	0800330d 	.word	0x0800330d
 80032d0:	0800330d 	.word	0x0800330d
 80032d4:	0800330d 	.word	0x0800330d
 80032d8:	080032f5 	.word	0x080032f5
 80032dc:	0800330d 	.word	0x0800330d
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	0800330d 	.word	0x0800330d
 80032e8:	08003305 	.word	0x08003305
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f2:	e06d      	b.n	80033d0 <UART_SetConfig+0x210>
 80032f4:	2302      	movs	r3, #2
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e069      	b.n	80033d0 <UART_SetConfig+0x210>
 80032fc:	2304      	movs	r3, #4
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003302:	e065      	b.n	80033d0 <UART_SetConfig+0x210>
 8003304:	2308      	movs	r3, #8
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e061      	b.n	80033d0 <UART_SetConfig+0x210>
 800330c:	2310      	movs	r3, #16
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003312:	e05d      	b.n	80033d0 <UART_SetConfig+0x210>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a58      	ldr	r2, [pc, #352]	; (800347c <UART_SetConfig+0x2bc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d125      	bne.n	800336a <UART_SetConfig+0x1aa>
 800331e:	4b55      	ldr	r3, [pc, #340]	; (8003474 <UART_SetConfig+0x2b4>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003328:	2b30      	cmp	r3, #48	; 0x30
 800332a:	d016      	beq.n	800335a <UART_SetConfig+0x19a>
 800332c:	2b30      	cmp	r3, #48	; 0x30
 800332e:	d818      	bhi.n	8003362 <UART_SetConfig+0x1a2>
 8003330:	2b20      	cmp	r3, #32
 8003332:	d00a      	beq.n	800334a <UART_SetConfig+0x18a>
 8003334:	2b20      	cmp	r3, #32
 8003336:	d814      	bhi.n	8003362 <UART_SetConfig+0x1a2>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <UART_SetConfig+0x182>
 800333c:	2b10      	cmp	r3, #16
 800333e:	d008      	beq.n	8003352 <UART_SetConfig+0x192>
 8003340:	e00f      	b.n	8003362 <UART_SetConfig+0x1a2>
 8003342:	2300      	movs	r3, #0
 8003344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003348:	e042      	b.n	80033d0 <UART_SetConfig+0x210>
 800334a:	2302      	movs	r3, #2
 800334c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003350:	e03e      	b.n	80033d0 <UART_SetConfig+0x210>
 8003352:	2304      	movs	r3, #4
 8003354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003358:	e03a      	b.n	80033d0 <UART_SetConfig+0x210>
 800335a:	2308      	movs	r3, #8
 800335c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003360:	e036      	b.n	80033d0 <UART_SetConfig+0x210>
 8003362:	2310      	movs	r3, #16
 8003364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003368:	e032      	b.n	80033d0 <UART_SetConfig+0x210>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3f      	ldr	r2, [pc, #252]	; (800346c <UART_SetConfig+0x2ac>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d12a      	bne.n	80033ca <UART_SetConfig+0x20a>
 8003374:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <UART_SetConfig+0x2b4>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800337e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003382:	d01a      	beq.n	80033ba <UART_SetConfig+0x1fa>
 8003384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003388:	d81b      	bhi.n	80033c2 <UART_SetConfig+0x202>
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338e:	d00c      	beq.n	80033aa <UART_SetConfig+0x1ea>
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d815      	bhi.n	80033c2 <UART_SetConfig+0x202>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <UART_SetConfig+0x1e2>
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d008      	beq.n	80033b2 <UART_SetConfig+0x1f2>
 80033a0:	e00f      	b.n	80033c2 <UART_SetConfig+0x202>
 80033a2:	2300      	movs	r3, #0
 80033a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a8:	e012      	b.n	80033d0 <UART_SetConfig+0x210>
 80033aa:	2302      	movs	r3, #2
 80033ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b0:	e00e      	b.n	80033d0 <UART_SetConfig+0x210>
 80033b2:	2304      	movs	r3, #4
 80033b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b8:	e00a      	b.n	80033d0 <UART_SetConfig+0x210>
 80033ba:	2308      	movs	r3, #8
 80033bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c0:	e006      	b.n	80033d0 <UART_SetConfig+0x210>
 80033c2:	2310      	movs	r3, #16
 80033c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c8:	e002      	b.n	80033d0 <UART_SetConfig+0x210>
 80033ca:	2310      	movs	r3, #16
 80033cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a25      	ldr	r2, [pc, #148]	; (800346c <UART_SetConfig+0x2ac>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	f040 808a 	bne.w	80034f0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d824      	bhi.n	800342e <UART_SetConfig+0x26e>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <UART_SetConfig+0x22c>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	08003411 	.word	0x08003411
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	08003419 	.word	0x08003419
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	0800341f 	.word	0x0800341f
 8003400:	0800342f 	.word	0x0800342f
 8003404:	0800342f 	.word	0x0800342f
 8003408:	0800342f 	.word	0x0800342f
 800340c:	08003427 	.word	0x08003427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003410:	f7fe ffc2 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8003414:	61f8      	str	r0, [r7, #28]
        break;
 8003416:	e010      	b.n	800343a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <UART_SetConfig+0x2c0>)
 800341a:	61fb      	str	r3, [r7, #28]
        break;
 800341c:	e00d      	b.n	800343a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7fe ff23 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8003422:	61f8      	str	r0, [r7, #28]
        break;
 8003424:	e009      	b.n	800343a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e005      	b.n	800343a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8109 	beq.w	8003654 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	429a      	cmp	r2, r3
 800345c:	d912      	bls.n	8003484 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003464:	e0f6      	b.n	8003654 <UART_SetConfig+0x494>
 8003466:	bf00      	nop
 8003468:	efff69f3 	.word	0xefff69f3
 800346c:	40008000 	.word	0x40008000
 8003470:	40013800 	.word	0x40013800
 8003474:	40021000 	.word	0x40021000
 8003478:	40004400 	.word	0x40004400
 800347c:	40004800 	.word	0x40004800
 8003480:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2200      	movs	r2, #0
 8003488:	461c      	mov	r4, r3
 800348a:	4615      	mov	r5, r2
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	022b      	lsls	r3, r5, #8
 8003496:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800349a:	0222      	lsls	r2, r4, #8
 800349c:	68f9      	ldr	r1, [r7, #12]
 800349e:	6849      	ldr	r1, [r1, #4]
 80034a0:	0849      	lsrs	r1, r1, #1
 80034a2:	2000      	movs	r0, #0
 80034a4:	4688      	mov	r8, r1
 80034a6:	4681      	mov	r9, r0
 80034a8:	eb12 0a08 	adds.w	sl, r2, r8
 80034ac:	eb43 0b09 	adc.w	fp, r3, r9
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034be:	4650      	mov	r0, sl
 80034c0:	4659      	mov	r1, fp
 80034c2:	f7fc fe83 	bl	80001cc <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4613      	mov	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d4:	d308      	bcc.n	80034e8 <UART_SetConfig+0x328>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034dc:	d204      	bcs.n	80034e8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	e0b5      	b.n	8003654 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034ee:	e0b1      	b.n	8003654 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f8:	d15d      	bne.n	80035b6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80034fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d827      	bhi.n	8003552 <UART_SetConfig+0x392>
 8003502:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <UART_SetConfig+0x348>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	0800352d 	.word	0x0800352d
 800350c:	08003535 	.word	0x08003535
 8003510:	0800353d 	.word	0x0800353d
 8003514:	08003553 	.word	0x08003553
 8003518:	08003543 	.word	0x08003543
 800351c:	08003553 	.word	0x08003553
 8003520:	08003553 	.word	0x08003553
 8003524:	08003553 	.word	0x08003553
 8003528:	0800354b 	.word	0x0800354b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800352c:	f7fe ff34 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8003530:	61f8      	str	r0, [r7, #28]
        break;
 8003532:	e014      	b.n	800355e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003534:	f7fe ff46 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8003538:	61f8      	str	r0, [r7, #28]
        break;
 800353a:	e010      	b.n	800355e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800353c:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <UART_SetConfig+0x4b0>)
 800353e:	61fb      	str	r3, [r7, #28]
        break;
 8003540:	e00d      	b.n	800355e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003542:	f7fe fe91 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8003546:	61f8      	str	r0, [r7, #28]
        break;
 8003548:	e009      	b.n	800355e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	61fb      	str	r3, [r7, #28]
        break;
 8003550:	e005      	b.n	800355e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800355c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d077      	beq.n	8003654 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005a      	lsls	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	441a      	add	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b0f      	cmp	r3, #15
 800357e:	d916      	bls.n	80035ae <UART_SetConfig+0x3ee>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003586:	d212      	bcs.n	80035ae <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f023 030f 	bic.w	r3, r3, #15
 8003590:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	b29a      	uxth	r2, r3
 800359e:	8afb      	ldrh	r3, [r7, #22]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	8afa      	ldrh	r2, [r7, #22]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	e052      	b.n	8003654 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035b4:	e04e      	b.n	8003654 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d827      	bhi.n	800360e <UART_SetConfig+0x44e>
 80035be:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <UART_SetConfig+0x404>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	080035f1 	.word	0x080035f1
 80035cc:	080035f9 	.word	0x080035f9
 80035d0:	0800360f 	.word	0x0800360f
 80035d4:	080035ff 	.word	0x080035ff
 80035d8:	0800360f 	.word	0x0800360f
 80035dc:	0800360f 	.word	0x0800360f
 80035e0:	0800360f 	.word	0x0800360f
 80035e4:	08003607 	.word	0x08003607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e8:	f7fe fed6 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80035ec:	61f8      	str	r0, [r7, #28]
        break;
 80035ee:	e014      	b.n	800361a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f0:	f7fe fee8 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 80035f4:	61f8      	str	r0, [r7, #28]
        break;
 80035f6:	e010      	b.n	800361a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <UART_SetConfig+0x4b0>)
 80035fa:	61fb      	str	r3, [r7, #28]
        break;
 80035fc:	e00d      	b.n	800361a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fe:	f7fe fe33 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8003602:	61f8      	str	r0, [r7, #28]
        break;
 8003604:	e009      	b.n	800361a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360a:	61fb      	str	r3, [r7, #28]
        break;
 800360c:	e005      	b.n	800361a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003618:	bf00      	nop
    }

    if (pclk != 0U)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d019      	beq.n	8003654 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	085a      	lsrs	r2, r3, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	441a      	add	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003632:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b0f      	cmp	r3, #15
 8003638:	d909      	bls.n	800364e <UART_SetConfig+0x48e>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d205      	bcs.n	800364e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	e002      	b.n	8003654 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003660:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003664:	4618      	mov	r0, r3
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	00f42400 	.word	0x00f42400

08003674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01a      	beq.n	800378a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003772:	d10a      	bne.n	800378a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b098      	sub	sp, #96	; 0x60
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037c8:	f7fd fcce 	bl	8001168 <HAL_GetTick>
 80037cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d12e      	bne.n	800383a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f88c 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d021      	beq.n	800383a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380a:	653b      	str	r3, [r7, #80]	; 0x50
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003814:	647b      	str	r3, [r7, #68]	; 0x44
 8003816:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800381a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e6      	bne.n	80037f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e062      	b.n	8003900 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b04      	cmp	r3, #4
 8003846:	d149      	bne.n	80038dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003850:	2200      	movs	r2, #0
 8003852:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f856 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d03c      	beq.n	80038dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	623b      	str	r3, [r7, #32]
   return(result);
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
 8003882:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e6      	bne.n	8003862 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3308      	adds	r3, #8
 800389a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3308      	adds	r3, #8
 80038b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038b4:	61fa      	str	r2, [r7, #28]
 80038b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	617b      	str	r3, [r7, #20]
   return(result);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e5      	bne.n	8003894 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e011      	b.n	8003900 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3758      	adds	r7, #88	; 0x58
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003918:	e049      	b.n	80039ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d045      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7fd fc21 	bl	8001168 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <UART_WaitOnFlagUntilTimeout+0x30>
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e048      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d031      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d110      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2208      	movs	r2, #8
 800395e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f838 	bl	80039d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2208      	movs	r2, #8
 800396a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e029      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003988:	d111      	bne.n	80039ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f81e 	bl	80039d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e00f      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d0a6      	beq.n	800391a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b095      	sub	sp, #84	; 0x54
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fc:	643b      	str	r3, [r7, #64]	; 0x40
 80039fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e6      	bne.n	80039de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e5      	bne.n	8003a10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d118      	bne.n	8003a7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f023 0310 	bic.w	r3, r3, #16
 8003a60:	647b      	str	r3, [r7, #68]	; 0x44
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6979      	ldr	r1, [r7, #20]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	613b      	str	r3, [r7, #16]
   return(result);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e6      	bne.n	8003a4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a92:	bf00      	nop
 8003a94:	3754      	adds	r7, #84	; 0x54
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <memset>:
 8003a9e:	4402      	add	r2, r0
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d100      	bne.n	8003aa8 <memset+0xa>
 8003aa6:	4770      	bx	lr
 8003aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8003aac:	e7f9      	b.n	8003aa2 <memset+0x4>
	...

08003ab0 <__libc_init_array>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	4d0d      	ldr	r5, [pc, #52]	; (8003ae8 <__libc_init_array+0x38>)
 8003ab4:	4c0d      	ldr	r4, [pc, #52]	; (8003aec <__libc_init_array+0x3c>)
 8003ab6:	1b64      	subs	r4, r4, r5
 8003ab8:	10a4      	asrs	r4, r4, #2
 8003aba:	2600      	movs	r6, #0
 8003abc:	42a6      	cmp	r6, r4
 8003abe:	d109      	bne.n	8003ad4 <__libc_init_array+0x24>
 8003ac0:	4d0b      	ldr	r5, [pc, #44]	; (8003af0 <__libc_init_array+0x40>)
 8003ac2:	4c0c      	ldr	r4, [pc, #48]	; (8003af4 <__libc_init_array+0x44>)
 8003ac4:	f000 f818 	bl	8003af8 <_init>
 8003ac8:	1b64      	subs	r4, r4, r5
 8003aca:	10a4      	asrs	r4, r4, #2
 8003acc:	2600      	movs	r6, #0
 8003ace:	42a6      	cmp	r6, r4
 8003ad0:	d105      	bne.n	8003ade <__libc_init_array+0x2e>
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad8:	4798      	blx	r3
 8003ada:	3601      	adds	r6, #1
 8003adc:	e7ee      	b.n	8003abc <__libc_init_array+0xc>
 8003ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae2:	4798      	blx	r3
 8003ae4:	3601      	adds	r6, #1
 8003ae6:	e7f2      	b.n	8003ace <__libc_init_array+0x1e>
 8003ae8:	08003b74 	.word	0x08003b74
 8003aec:	08003b74 	.word	0x08003b74
 8003af0:	08003b74 	.word	0x08003b74
 8003af4:	08003b78 	.word	0x08003b78

08003af8 <_init>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr

08003b04 <_fini>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr
