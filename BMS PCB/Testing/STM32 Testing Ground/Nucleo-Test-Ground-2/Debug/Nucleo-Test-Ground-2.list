
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002870  08002870  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002870  08002870  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002870  08002870  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002884  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002884  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000671d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000140c  00000000  00000000  0002679c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00027ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000586  00000000  00000000  00028310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180f2  00000000  00000000  00028896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007f67  00000000  00000000  00040988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000979e4  00000000  00000000  000488ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ce4  00000000  00000000  000e02d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  000e1fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002814 	.word	0x08002814

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002814 	.word	0x08002814

080001cc <main>:

// Global SPI handle
SPI_HandleTypeDef hspi1;

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 80001d2:	f000 fa2e 	bl	8000632 <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 80001d6:	f000 f813 	bl	8000200 <SystemClock_Config>

    // Initialize GPIO and SPI
    GPIO_Init();
 80001da:	f000 f849 	bl	8000270 <GPIO_Init>
    SPI1_Init();
 80001de:	f000 f897 	bl	8000310 <SPI1_Init>

    while (1)
    {
    	// Enter Config Update Mode
    	ReadManufacturingStatusRegister();
 80001e2:	f000 f911 	bl	8000408 <ReadManufacturingStatusRegister>

    	for (int i = 0; i < 400000; i++) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	e002      	b.n	80001f2 <main+0x26>
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	3301      	adds	r3, #1
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a01      	ldr	r2, [pc, #4]	; (80001fc <main+0x30>)
 80001f6:	4293      	cmp	r3, r2
 80001f8:	ddf8      	ble.n	80001ec <main+0x20>
    	ReadManufacturingStatusRegister();
 80001fa:	e7f2      	b.n	80001e2 <main+0x16>
 80001fc:	00061a7f 	.word	0x00061a7f

08000200 <SystemClock_Config>:
    	}
    }
}

void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b096      	sub	sp, #88	; 0x58
 8000204:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	2244      	movs	r2, #68	; 0x44
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fad4 	bl	80027bc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	463b      	mov	r3, r7
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000222:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000226:	f000 fcf7 	bl	8000c18 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800022a:	2310      	movs	r3, #16
 800022c:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000232:	2300      	movs	r3, #0
 8000234:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000236:	2360      	movs	r3, #96	; 0x60
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023a:	2300      	movs	r3, #0
 800023c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800023e:	f107 0314 	add.w	r3, r7, #20
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fd3e 	bl	8000cc4 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000248:	230f      	movs	r3, #15
 800024a:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800024c:	2300      	movs	r3, #0
 800024e:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800025c:	463b      	mov	r3, r7
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f001 f991 	bl	8001588 <HAL_RCC_ClockConfig>
}
 8000266:	bf00      	nop
 8000268:	3758      	adds	r7, #88	; 0x58
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <GPIO_Init>:

void GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b24      	ldr	r3, [pc, #144]	; (8000308 <GPIO_Init+0x98>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027a:	4a23      	ldr	r2, [pc, #140]	; (8000308 <GPIO_Init+0x98>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <GPIO_Init+0x98>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800028e:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <GPIO_Init+0x98>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000292:	4a1d      	ldr	r2, [pc, #116]	; (8000308 <GPIO_Init+0x98>)
 8000294:	f043 0302 	orr.w	r3, r3, #2
 8000298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <GPIO_Init+0x98>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029e:	f003 0302 	and.w	r3, r3, #2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, push-pull)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002b6:	2301      	movs	r3, #1
 80002b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	4619      	mov	r1, r3
 80002cc:	480f      	ldr	r0, [pc, #60]	; (800030c <GPIO_Init+0x9c>)
 80002ce:	f000 fb0b 	bl	80008e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 80002d2:	2201      	movs	r2, #1
 80002d4:	2101      	movs	r1, #1
 80002d6:	480d      	ldr	r0, [pc, #52]	; (800030c <GPIO_Init+0x9c>)
 80002d8:	f000 fc78 	bl	8000bcc <HAL_GPIO_WritePin>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80002dc:	23e0      	movs	r3, #224	; 0xe0
 80002de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002e0:	2302      	movs	r3, #2
 80002e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002e8:	2302      	movs	r3, #2
 80002ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80002ec:	2305      	movs	r3, #5
 80002ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f0:	f107 030c 	add.w	r3, r7, #12
 80002f4:	4619      	mov	r1, r3
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fa:	f000 faf5 	bl	80008e8 <HAL_GPIO_Init>
}
 80002fe:	bf00      	nop
 8000300:	3720      	adds	r7, #32
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000
 800030c:	48000400 	.word	0x48000400

08000310 <SPI1_Init>:

void SPI1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <SPI1_Init+0x84>)
 8000318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800031a:	4a1e      	ldr	r2, [pc, #120]	; (8000394 <SPI1_Init+0x84>)
 800031c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000320:	6613      	str	r3, [r2, #96]	; 0x60
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <SPI1_Init+0x84>)
 8000324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <SPI1_Init+0x88>)
 8000330:	4a1a      	ldr	r2, [pc, #104]	; (800039c <SPI1_Init+0x8c>)
 8000332:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <SPI1_Init+0x88>)
 8000336:	f44f 7282 	mov.w	r2, #260	; 0x104
 800033a:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <SPI1_Init+0x88>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <SPI1_Init+0x88>)
 8000344:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000348:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <SPI1_Init+0x88>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <SPI1_Init+0x88>)
 8000352:	2200      	movs	r2, #0
 8000354:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <SPI1_Init+0x88>)
 8000358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800035c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <SPI1_Init+0x88>)
 8000360:	2228      	movs	r2, #40	; 0x28
 8000362:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <SPI1_Init+0x88>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SPI1_Init+0x88>)
 800036c:	2200      	movs	r2, #0
 800036e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <SPI1_Init+0x88>)
 8000372:	2200      	movs	r2, #0
 8000374:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <SPI1_Init+0x88>)
 8000378:	2207      	movs	r2, #7
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800037c:	4806      	ldr	r0, [pc, #24]	; (8000398 <SPI1_Init+0x88>)
 800037e:	f001 faef 	bl	8001960 <HAL_SPI_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d000      	beq.n	800038a <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 8000388:	e7fe      	b.n	8000388 <SPI1_Init+0x78>
    }
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	20000028 	.word	0x20000028
 800039c:	40013000 	.word	0x40013000

080003a0 <crc8>:

uint8_t crc8(uint8_t *data, size_t len)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]
    while (len--)
 80003ae:	e01e      	b.n	80003ee <crc8+0x4e>
    {
        crc ^= *data++;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	1c5a      	adds	r2, r3, #1
 80003b4:	607a      	str	r2, [r7, #4]
 80003b6:	781a      	ldrb	r2, [r3, #0]
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	4053      	eors	r3, r2
 80003bc:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 80003be:	2300      	movs	r3, #0
 80003c0:	73bb      	strb	r3, [r7, #14]
 80003c2:	e011      	b.n	80003e8 <crc8+0x48>
        {
            if (crc & 0x80)
 80003c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	da07      	bge.n	80003dc <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	b25b      	sxtb	r3, r3
 80003d2:	f083 0307 	eor.w	r3, r3, #7
 80003d6:	b25b      	sxtb	r3, r3
 80003d8:	73fb      	strb	r3, [r7, #15]
 80003da:	e002      	b.n	80003e2 <crc8+0x42>
            else
                crc <<= 1;
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 80003e2:	7bbb      	ldrb	r3, [r7, #14]
 80003e4:	3301      	adds	r3, #1
 80003e6:	73bb      	strb	r3, [r7, #14]
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	2b07      	cmp	r3, #7
 80003ec:	d9ea      	bls.n	80003c4 <crc8+0x24>
    while (len--)
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	1e5a      	subs	r2, r3, #1
 80003f2:	603a      	str	r2, [r7, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1db      	bne.n	80003b0 <crc8+0x10>
        }
    }
    return crc;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
	...

08000408 <ReadManufacturingStatusRegister>:
    // Pull NSS high
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
}

void ReadManufacturingStatusRegister(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
    uint8_t command[] = { 0x00, 0x57 }; // Command to read Manufacturing Status Register
 800040e:	f44f 43ae 	mov.w	r3, #22272	; 0x5700
 8000412:	813b      	strh	r3, [r7, #8]
    uint8_t crc = crc8(command, 2);
 8000414:	f107 0308 	add.w	r3, r7, #8
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffc0 	bl	80003a0 <crc8>
 8000420:	4603      	mov	r3, r0
 8000422:	73fb      	strb	r3, [r7, #15]
    uint8_t txData[] = { command[0], command[1], crc };
 8000424:	7a3b      	ldrb	r3, [r7, #8]
 8000426:	713b      	strb	r3, [r7, #4]
 8000428:	7a7b      	ldrb	r3, [r7, #9]
 800042a:	717b      	strb	r3, [r7, #5]
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	71bb      	strb	r3, [r7, #6]
    uint8_t rxData[3] = {0};
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <ReadManufacturingStatusRegister+0x88>)
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	803b      	strh	r3, [r7, #0]
 8000436:	2300      	movs	r3, #0
 8000438:	70bb      	strb	r3, [r7, #2]

    // Pull NSS low
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2101      	movs	r1, #1
 800043e:	4815      	ldr	r0, [pc, #84]	; (8000494 <ReadManufacturingStatusRegister+0x8c>)
 8000440:	f000 fbc4 	bl	8000bcc <HAL_GPIO_WritePin>

    // Transmit command
    HAL_SPI_Transmit(&hspi1, txData, sizeof(txData), HAL_MAX_DELAY);
 8000444:	1d39      	adds	r1, r7, #4
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	2203      	movs	r2, #3
 800044c:	4812      	ldr	r0, [pc, #72]	; (8000498 <ReadManufacturingStatusRegister+0x90>)
 800044e:	f001 fb2a 	bl	8001aa6 <HAL_SPI_Transmit>

    // Receive response
    HAL_SPI_Receive(&hspi1, rxData, sizeof(rxData), HAL_MAX_DELAY);
 8000452:	4639      	mov	r1, r7
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
 8000458:	2203      	movs	r2, #3
 800045a:	480f      	ldr	r0, [pc, #60]	; (8000498 <ReadManufacturingStatusRegister+0x90>)
 800045c:	f001 fc98 	bl	8001d90 <HAL_SPI_Receive>

    // Pull NSS high
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2101      	movs	r1, #1
 8000464:	480b      	ldr	r0, [pc, #44]	; (8000494 <ReadManufacturingStatusRegister+0x8c>)
 8000466:	f000 fbb1 	bl	8000bcc <HAL_GPIO_WritePin>

    // Process the received data
    uint8_t received_crc = rxData[2];
 800046a:	78bb      	ldrb	r3, [r7, #2]
 800046c:	73bb      	strb	r3, [r7, #14]
    uint8_t calculated_crc = crc8(rxData, 2);
 800046e:	463b      	mov	r3, r7
 8000470:	2102      	movs	r1, #2
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff94 	bl	80003a0 <crc8>
 8000478:	4603      	mov	r3, r0
 800047a:	737b      	strb	r3, [r7, #13]

    if (received_crc == calculated_crc)
 800047c:	7bba      	ldrb	r2, [r7, #14]
 800047e:	7b7b      	ldrb	r3, [r7, #13]
 8000480:	429a      	cmp	r2, r3
 8000482:	d101      	bne.n	8000488 <ReadManufacturingStatusRegister+0x80>
    {
        // CRC is valid, process the received data
        uint8_t manufacturing_status = rxData[1];
 8000484:	787b      	ldrb	r3, [r7, #1]
 8000486:	733b      	strb	r3, [r7, #12]
    }
    else
    {
        // CRC is invalid, handle the error
    }
}
 8000488:	bf00      	nop
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	0800282c 	.word	0x0800282c
 8000494:	48000400 	.word	0x48000400
 8000498:	20000028 	.word	0x20000028

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x44>)
 80004a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x44>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6613      	str	r3, [r2, #96]	; 0x60
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x44>)
 80004b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <HAL_MspInit+0x44>)
 80004bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <HAL_MspInit+0x44>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	6593      	str	r3, [r2, #88]	; 0x58
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_MspInit+0x44>)
 80004c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <HAL_SPI_MspInit+0x7c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d128      	bne.n	8000558 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_SPI_MspInit+0x80>)
 8000508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <HAL_SPI_MspInit+0x80>)
 800050c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000510:	6613      	str	r3, [r2, #96]	; 0x60
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_SPI_MspInit+0x80>)
 8000514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <HAL_SPI_MspInit+0x80>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <HAL_SPI_MspInit+0x80>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_SPI_MspInit+0x80>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000536:	23c2      	movs	r3, #194	; 0xc2
 8000538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000542:	2303      	movs	r3, #3
 8000544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000546:	2305      	movs	r3, #5
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f000 f9c8 	bl	80008e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000558:	bf00      	nop
 800055a:	3728      	adds	r7, #40	; 0x28
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40013000 	.word	0x40013000
 8000564:	40021000 	.word	0x40021000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler+0x4>

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler+0x4>

0800057a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <UsageFault_Handler+0x4>

08000586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f892 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <SystemInit+0x20>)
 80005c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c6:	4a05      	ldr	r2, [pc, #20]	; (80005dc <SystemInit+0x20>)
 80005c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000618 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e4:	f7ff ffea 	bl	80005bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060e:	f002 f8dd 	bl	80027cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000612:	f7ff fddb 	bl	80001cc <main>

08000616 <LoopForever>:

LoopForever:
    b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000618:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000624:	08002878 	.word	0x08002878
  ldr r2, =_sbss
 8000628:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800062c:	20000090 	.word	0x20000090

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>

08000632 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000638:	2300      	movs	r3, #0
 800063a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f91f 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000642:	200f      	movs	r0, #15
 8000644:	f000 f80e 	bl	8000664 <HAL_InitTick>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	e001      	b.n	8000658 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000654:	f7ff ff22 	bl	800049c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000658:	79fb      	ldrb	r3, [r7, #7]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <HAL_InitTick+0x6c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d023      	beq.n	80006c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <HAL_InitTick+0x70>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_InitTick+0x6c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	fbb3 f3f1 	udiv	r3, r3, r1
 800068a:	fbb2 f3f3 	udiv	r3, r2, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f91d 	bl	80008ce <HAL_SYSTICK_Config>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d10f      	bne.n	80006ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d809      	bhi.n	80006b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a0:	2200      	movs	r2, #0
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f000 f8f5 	bl	8000896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_InitTick+0x74>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e007      	b.n	80006c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e004      	b.n	80006c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e001      	b.n	80006c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c0:	2301      	movs	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_IncTick+0x20>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_IncTick+0x24>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_IncTick+0x24>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000008 	.word	0x20000008
 8000700:	2000008c 	.word	0x2000008c

08000704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <HAL_GetTick+0x14>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	2000008c 	.word	0x2000008c

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff47 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff5c 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffb0 	bl	800083c <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	e14e      	b.n	8000b96 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 8140 	beq.w	8000b90 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	2b01      	cmp	r3, #1
 800091a:	d005      	beq.n	8000928 <HAL_GPIO_Init+0x40>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	2b02      	cmp	r3, #2
 8000926:	d130      	bne.n	800098a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4313      	orrs	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800095e:	2201      	movs	r2, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	091b      	lsrs	r3, r3, #4
 8000974:	f003 0201 	and.w	r2, r3, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	2b03      	cmp	r3, #3
 8000994:	d017      	beq.n	80009c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d123      	bne.n	8000a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	6939      	ldr	r1, [r7, #16]
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0203 	and.w	r2, r3, #3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 809a 	beq.w	8000b90 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5c:	4b55      	ldr	r3, [pc, #340]	; (8000bb4 <HAL_GPIO_Init+0x2cc>)
 8000a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a60:	4a54      	ldr	r2, [pc, #336]	; (8000bb4 <HAL_GPIO_Init+0x2cc>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6613      	str	r3, [r2, #96]	; 0x60
 8000a68:	4b52      	ldr	r3, [pc, #328]	; (8000bb4 <HAL_GPIO_Init+0x2cc>)
 8000a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a74:	4a50      	ldr	r2, [pc, #320]	; (8000bb8 <HAL_GPIO_Init+0x2d0>)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a9e:	d013      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e0>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a46      	ldr	r2, [pc, #280]	; (8000bbc <HAL_GPIO_Init+0x2d4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d00d      	beq.n	8000ac4 <HAL_GPIO_Init+0x1dc>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a45      	ldr	r2, [pc, #276]	; (8000bc0 <HAL_GPIO_Init+0x2d8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d007      	beq.n	8000ac0 <HAL_GPIO_Init+0x1d8>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a44      	ldr	r2, [pc, #272]	; (8000bc4 <HAL_GPIO_Init+0x2dc>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d101      	bne.n	8000abc <HAL_GPIO_Init+0x1d4>
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x1e2>
 8000abc:	2307      	movs	r3, #7
 8000abe:	e004      	b.n	8000aca <HAL_GPIO_Init+0x1e2>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0x1e2>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <HAL_GPIO_Init+0x1e2>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	f002 0203 	and.w	r2, r2, #3
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ada:	4937      	ldr	r1, [pc, #220]	; (8000bb8 <HAL_GPIO_Init+0x2d0>)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ae8:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b0c:	4a2e      	ldr	r2, [pc, #184]	; (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b36:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f47f aea9 	bne.w	80008f8 <HAL_GPIO_Init+0x10>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000800 	.word	0x48000800
 8000bc4:	48000c00 	.word	0x48000c00
 8000bc8:	40010400 	.word	0x40010400

08000bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bdc:	787b      	ldrb	r3, [r7, #1]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000be8:	e002      	b.n	8000bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40007000 	.word	0x40007000

08000c18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c26:	d130      	bne.n	8000c8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c34:	d038      	beq.n	8000ca8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2232      	movs	r2, #50	; 0x32
 8000c4c:	fb02 f303 	mul.w	r3, r2, r3
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	0c9b      	lsrs	r3, r3, #18
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c5c:	e002      	b.n	8000c64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c70:	d102      	bne.n	8000c78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f2      	bne.n	8000c5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c84:	d110      	bne.n	8000ca8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e00f      	b.n	8000caa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c96:	d007      	beq.n	8000ca8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ca0:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40007000 	.word	0x40007000
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	431bde83 	.word	0x431bde83

08000cc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f000 bc4f 	b.w	8001576 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cd8:	4b97      	ldr	r3, [pc, #604]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ce2:	4b95      	ldr	r3, [pc, #596]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 80e6 	beq.w	8000ec6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cfa:	6a3b      	ldr	r3, [r7, #32]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d007      	beq.n	8000d10 <HAL_RCC_OscConfig+0x4c>
 8000d00:	6a3b      	ldr	r3, [r7, #32]
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	f040 808d 	bne.w	8000e22 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	f040 8089 	bne.w	8000e22 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d10:	4b89      	ldr	r3, [pc, #548]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <HAL_RCC_OscConfig+0x66>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	f000 bc26 	b.w	8001576 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d2e:	4b82      	ldr	r3, [pc, #520]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d004      	beq.n	8000d44 <HAL_RCC_OscConfig+0x80>
 8000d3a:	4b7f      	ldr	r3, [pc, #508]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d42:	e005      	b.n	8000d50 <HAL_RCC_OscConfig+0x8c>
 8000d44:	4b7c      	ldr	r3, [pc, #496]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d224      	bcs.n	8000d9e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fda1 	bl	80018a0 <RCC_SetFlashLatencyFromMSIRange>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	f000 bc06 	b.w	8001576 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d6a:	4b73      	ldr	r3, [pc, #460]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a72      	ldr	r2, [pc, #456]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b70      	ldr	r3, [pc, #448]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	496d      	ldr	r1, [pc, #436]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d88:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	4968      	ldr	r1, [pc, #416]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
 8000d9c:	e025      	b.n	8000dea <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d9e:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a65      	ldr	r2, [pc, #404]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	4b63      	ldr	r3, [pc, #396]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	4960      	ldr	r1, [pc, #384]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000db8:	4313      	orrs	r3, r2
 8000dba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dbc:	4b5e      	ldr	r3, [pc, #376]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	495b      	ldr	r1, [pc, #364]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d109      	bne.n	8000dea <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fd60 	bl	80018a0 <RCC_SetFlashLatencyFromMSIRange>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e3c5      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dea:	f000 fccd 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8000dee:	4602      	mov	r2, r0
 8000df0:	4b51      	ldr	r3, [pc, #324]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	4950      	ldr	r1, [pc, #320]	; (8000f3c <HAL_RCC_OscConfig+0x278>)
 8000dfc:	5ccb      	ldrb	r3, [r1, r3]
 8000dfe:	f003 031f 	and.w	r3, r3, #31
 8000e02:	fa22 f303 	lsr.w	r3, r2, r3
 8000e06:	4a4e      	ldr	r2, [pc, #312]	; (8000f40 <HAL_RCC_OscConfig+0x27c>)
 8000e08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e0a:	4b4e      	ldr	r3, [pc, #312]	; (8000f44 <HAL_RCC_OscConfig+0x280>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fc28 	bl	8000664 <HAL_InitTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d052      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	e3a9      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d032      	beq.n	8000e90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e2a:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e36:	f7ff fc65 	bl	8000704 <HAL_GetTick>
 8000e3a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fc61 	bl	8000704 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e392      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e50:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f0      	beq.n	8000e3e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a35      	ldr	r2, [pc, #212]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	4930      	ldr	r1, [pc, #192]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e76:	4313      	orrs	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	492b      	ldr	r1, [pc, #172]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	604b      	str	r3, [r1, #4]
 8000e8e:	e01a      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e90:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a28      	ldr	r2, [pc, #160]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000e96:	f023 0301 	bic.w	r3, r3, #1
 8000e9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fc32 	bl	8000704 <HAL_GetTick>
 8000ea0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fc2e 	bl	8000704 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e35f      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x1e0>
 8000ec2:	e000      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ec4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d073      	beq.n	8000fba <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d005      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x220>
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	2b0c      	cmp	r3, #12
 8000edc:	d10e      	bne.n	8000efc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d10b      	bne.n	8000efc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d063      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x2f4>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d15f      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e33c      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f04:	d106      	bne.n	8000f14 <HAL_RCC_OscConfig+0x250>
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e025      	b.n	8000f60 <HAL_RCC_OscConfig+0x29c>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f1c:	d114      	bne.n	8000f48 <HAL_RCC_OscConfig+0x284>
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a02      	ldr	r2, [pc, #8]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e013      	b.n	8000f60 <HAL_RCC_OscConfig+0x29c>
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	08002830 	.word	0x08002830
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000004 	.word	0x20000004
 8000f48:	4b8f      	ldr	r3, [pc, #572]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a8e      	ldr	r2, [pc, #568]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b8c      	ldr	r3, [pc, #560]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a8b      	ldr	r2, [pc, #556]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fbcc 	bl	8000704 <HAL_GetTick>
 8000f6c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fbc8 	bl	8000704 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e2f9      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f82:	4b81      	ldr	r3, [pc, #516]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x2ac>
 8000f8e:	e014      	b.n	8000fba <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f90:	f7ff fbb8 	bl	8000704 <HAL_GetTick>
 8000f94:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fbb4 	bl	8000704 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e2e5      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000faa:	4b77      	ldr	r3, [pc, #476]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x2d4>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d060      	beq.n	8001088 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d005      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x314>
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	2b0c      	cmp	r3, #12
 8000fd0:	d119      	bne.n	8001006 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d116      	bne.n	8001006 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd8:	4b6b      	ldr	r3, [pc, #428]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x32c>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e2c2      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff0:	4b65      	ldr	r3, [pc, #404]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	061b      	lsls	r3, r3, #24
 8000ffe:	4962      	ldr	r1, [pc, #392]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001004:	e040      	b.n	8001088 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d023      	beq.n	8001056 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100e:	4b5e      	ldr	r3, [pc, #376]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a5d      	ldr	r2, [pc, #372]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101a:	f7ff fb73 	bl	8000704 <HAL_GetTick>
 800101e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001022:	f7ff fb6f 	bl	8000704 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e2a0      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001034:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	061b      	lsls	r3, r3, #24
 800104e:	494e      	ldr	r1, [pc, #312]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
 8001054:	e018      	b.n	8001088 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001056:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001062:	f7ff fb4f 	bl	8000704 <HAL_GetTick>
 8001066:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff fb4b 	bl	8000704 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e27c      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800107c:	4b42      	ldr	r3, [pc, #264]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f0      	bne.n	800106a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 8082 	beq.w	800119a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d05f      	beq.n	800115e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800109e:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699a      	ldr	r2, [r3, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d037      	beq.n	8001124 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d006      	beq.n	80010cc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e254      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d01b      	beq.n	800110e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010dc:	4a2a      	ldr	r2, [pc, #168]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010e6:	f7ff fb0d 	bl	8000704 <HAL_GetTick>
 80010ea:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ee:	f7ff fb09 	bl	8000704 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b11      	cmp	r3, #17
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e23a      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1ef      	bne.n	80010ee <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001114:	f023 0210 	bic.w	r2, r3, #16
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	491a      	ldr	r1, [pc, #104]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	4313      	orrs	r3, r2
 8001120:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001134:	f7ff fae6 	bl	8000704 <HAL_GetTick>
 8001138:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fae2 	bl	8000704 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b11      	cmp	r3, #17
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e213      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0ef      	beq.n	800113c <HAL_RCC_OscConfig+0x478>
 800115c:	e01d      	b.n	800119a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116e:	f7ff fac9 	bl	8000704 <HAL_GetTick>
 8001172:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001174:	e00a      	b.n	800118c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001176:	f7ff fac5 	bl	8000704 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b11      	cmp	r3, #17
 8001182:	d903      	bls.n	800118c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e1f6      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
 8001188:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800118c:	4ba9      	ldr	r3, [pc, #676]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1ed      	bne.n	8001176 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80bd 	beq.w	8001322 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011ae:	4ba1      	ldr	r3, [pc, #644]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10e      	bne.n	80011d8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b9e      	ldr	r3, [pc, #632]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	4a9d      	ldr	r2, [pc, #628]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6593      	str	r3, [r2, #88]	; 0x58
 80011c6:	4b9b      	ldr	r3, [pc, #620]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d8:	4b97      	ldr	r3, [pc, #604]	; (8001438 <HAL_RCC_OscConfig+0x774>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d118      	bne.n	8001216 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e4:	4b94      	ldr	r3, [pc, #592]	; (8001438 <HAL_RCC_OscConfig+0x774>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a93      	ldr	r2, [pc, #588]	; (8001438 <HAL_RCC_OscConfig+0x774>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f0:	f7ff fa88 	bl	8000704 <HAL_GetTick>
 80011f4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f8:	f7ff fa84 	bl	8000704 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e1b5      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800120a:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <HAL_RCC_OscConfig+0x774>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d02c      	beq.n	800127c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001222:	4b84      	ldr	r3, [pc, #528]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001228:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001234:	497f      	ldr	r1, [pc, #508]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001236:	4313      	orrs	r3, r2
 8001238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d010      	beq.n	800126a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001248:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 800124a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124e:	4a79      	ldr	r2, [pc, #484]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001258:	4b76      	ldr	r3, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125e:	4a75      	ldr	r2, [pc, #468]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001268:	e018      	b.n	800129c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800126a:	4b72      	ldr	r3, [pc, #456]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 800126c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001270:	4a70      	ldr	r2, [pc, #448]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800127a:	e00f      	b.n	800129c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800127c:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 800127e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001282:	4a6c      	ldr	r2, [pc, #432]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800128c:	4b69      	ldr	r3, [pc, #420]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 800128e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001292:	4a68      	ldr	r2, [pc, #416]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001294:	f023 0304 	bic.w	r3, r3, #4
 8001298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d016      	beq.n	80012d2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a4:	f7ff fa2e 	bl	8000704 <HAL_GetTick>
 80012a8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012aa:	e00a      	b.n	80012c2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f7ff fa2a 	bl	8000704 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e159      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012c2:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 80012c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ed      	beq.n	80012ac <HAL_RCC_OscConfig+0x5e8>
 80012d0:	e01d      	b.n	800130e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d2:	f7ff fa17 	bl	8000704 <HAL_GetTick>
 80012d6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff fa13 	bl	8000704 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e142      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012f0:	4b50      	ldr	r3, [pc, #320]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 80012f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1ed      	bne.n	80012da <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80012fe:	4b4d      	ldr	r3, [pc, #308]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001304:	4a4b      	ldr	r2, [pc, #300]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800130a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800130e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001312:	2b01      	cmp	r3, #1
 8001314:	d105      	bne.n	8001322 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	4a46      	ldr	r2, [pc, #280]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 800131c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001320:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	2b00      	cmp	r3, #0
 800132c:	d03c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01c      	beq.n	8001370 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001336:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800133c:	4a3d      	ldr	r2, [pc, #244]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001346:	f7ff f9dd 	bl	8000704 <HAL_GetTick>
 800134a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800134e:	f7ff f9d9 	bl	8000704 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e10a      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0ef      	beq.n	800134e <HAL_RCC_OscConfig+0x68a>
 800136e:	e01b      	b.n	80013a8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001376:	4a2f      	ldr	r2, [pc, #188]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001380:	f7ff f9c0 	bl	8000704 <HAL_GetTick>
 8001384:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001388:	f7ff f9bc 	bl	8000704 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e0ed      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 800139c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ef      	bne.n	8001388 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80e1 	beq.w	8001574 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	f040 80b5 	bne.w	8001526 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d124      	bne.n	800141a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013da:	3b01      	subs	r3, #1
 80013dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	429a      	cmp	r2, r3
 80013e0:	d11b      	bne.n	800141a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d113      	bne.n	800141a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	3b01      	subs	r3, #1
 8001400:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d109      	bne.n	800141a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	085b      	lsrs	r3, r3, #1
 8001412:	3b01      	subs	r3, #1
 8001414:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d05f      	beq.n	80014da <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d05a      	beq.n	80014d6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a03      	ldr	r2, [pc, #12]	; (8001434 <HAL_RCC_OscConfig+0x770>)
 8001426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800142a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800142c:	f7ff f96a 	bl	8000704 <HAL_GetTick>
 8001430:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001432:	e00c      	b.n	800144e <HAL_RCC_OscConfig+0x78a>
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f962 	bl	8000704 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e093      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800144e:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145a:	4b49      	ldr	r3, [pc, #292]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	4b49      	ldr	r3, [pc, #292]	; (8001584 <HAL_RCC_OscConfig+0x8c0>)
 8001460:	4013      	ands	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800146a:	3a01      	subs	r2, #1
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	4311      	orrs	r1, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001474:	0212      	lsls	r2, r2, #8
 8001476:	4311      	orrs	r1, r2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800147c:	0852      	lsrs	r2, r2, #1
 800147e:	3a01      	subs	r2, #1
 8001480:	0552      	lsls	r2, r2, #21
 8001482:	4311      	orrs	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001488:	0852      	lsrs	r2, r2, #1
 800148a:	3a01      	subs	r2, #1
 800148c:	0652      	lsls	r2, r2, #25
 800148e:	430a      	orrs	r2, r1
 8001490:	493b      	ldr	r1, [pc, #236]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 8001492:	4313      	orrs	r3, r2
 8001494:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001496:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a39      	ldr	r2, [pc, #228]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 800149c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014a2:	4b37      	ldr	r3, [pc, #220]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	4a36      	ldr	r2, [pc, #216]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 80014a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ac:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014ae:	f7ff f929 	bl	8000704 <HAL_GetTick>
 80014b2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff f925 	bl	8000704 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e056      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d4:	e04e      	b.n	8001574 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e04d      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d146      	bne.n	8001574 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a25      	ldr	r2, [pc, #148]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 80014ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014f0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 80014f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014fc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014fe:	f7ff f901 	bl	8000704 <HAL_GetTick>
 8001502:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff f8fd 	bl	8000704 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e02e      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x842>
 8001524:	e026      	b.n	8001574 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	2b0c      	cmp	r3, #12
 800152a:	d021      	beq.n	8001570 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 8001532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff f8e4 	bl	8000704 <HAL_GetTick>
 800153c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff f8e0 	bl	8000704 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e011      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_RCC_OscConfig+0x8bc>)
 8001564:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001568:	f023 0303 	bic.w	r3, r3, #3
 800156c:	60d3      	str	r3, [r2, #12]
 800156e:	e001      	b.n	8001574 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	f99f808c 	.word	0xf99f808c

08001588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0e7      	b.n	800176c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b75      	ldr	r3, [pc, #468]	; (8001774 <HAL_RCC_ClockConfig+0x1ec>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d910      	bls.n	80015cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b72      	ldr	r3, [pc, #456]	; (8001774 <HAL_RCC_ClockConfig+0x1ec>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 0207 	bic.w	r2, r3, #7
 80015b2:	4970      	ldr	r1, [pc, #448]	; (8001774 <HAL_RCC_ClockConfig+0x1ec>)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b6e      	ldr	r3, [pc, #440]	; (8001774 <HAL_RCC_ClockConfig+0x1ec>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0cf      	b.n	800176c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d010      	beq.n	80015fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d908      	bls.n	80015fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e8:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4960      	ldr	r1, [pc, #384]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d04c      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160e:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d121      	bne.n	800165e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0a6      	b.n	800176c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001626:	4b54      	ldr	r3, [pc, #336]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d115      	bne.n	800165e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e09a      	b.n	800176c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e08e      	b.n	800176c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e086      	b.n	800176c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800165e:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f023 0203 	bic.w	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4943      	ldr	r1, [pc, #268]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 800166c:	4313      	orrs	r3, r2
 800166e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001670:	f7ff f848 	bl	8000704 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	e00a      	b.n	800168e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff f844 	bl	8000704 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e06e      	b.n	800176c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 020c 	and.w	r2, r3, #12
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d1eb      	bne.n	8001678 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d010      	beq.n	80016ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d208      	bcs.n	80016ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	492b      	ldr	r1, [pc, #172]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <HAL_RCC_ClockConfig+0x1ec>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d210      	bcs.n	80016fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_RCC_ClockConfig+0x1ec>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 0207 	bic.w	r2, r3, #7
 80016e4:	4923      	ldr	r1, [pc, #140]	; (8001774 <HAL_RCC_ClockConfig+0x1ec>)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_RCC_ClockConfig+0x1ec>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e036      	b.n	800176c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	4918      	ldr	r1, [pc, #96]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d009      	beq.n	800173c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4910      	ldr	r1, [pc, #64]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 8001738:	4313      	orrs	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800173c:	f000 f824 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_RCC_ClockConfig+0x1f0>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	490b      	ldr	r1, [pc, #44]	; (800177c <HAL_RCC_ClockConfig+0x1f4>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1f8>)
 800175a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1fc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe ff7f 	bl	8000664 <HAL_InitTick>
 8001766:	4603      	mov	r3, r0
 8001768:	72fb      	strb	r3, [r7, #11]

  return status;
 800176a:	7afb      	ldrb	r3, [r7, #11]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40022000 	.word	0x40022000
 8001778:	40021000 	.word	0x40021000
 800177c:	08002830 	.word	0x08002830
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a0:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x34>
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d121      	bne.n	80017fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d11e      	bne.n	80017fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e005      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017e4:	4a2b      	ldr	r2, [pc, #172]	; (8001894 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10d      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d102      	bne.n	8001806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_RCC_GetSysClockFreq+0x110>)
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	e004      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d101      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_RCC_GetSysClockFreq+0x114>)
 800180e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d134      	bne.n	8001880 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d003      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0xa6>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d003      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0xac>
 800182c:	e005      	b.n	800183a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_RCC_GetSysClockFreq+0x110>)
 8001830:	617b      	str	r3, [r7, #20]
      break;
 8001832:	e005      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_GetSysClockFreq+0x114>)
 8001836:	617b      	str	r3, [r7, #20]
      break;
 8001838:	e002      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	617b      	str	r3, [r7, #20]
      break;
 800183e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	3301      	adds	r3, #1
 800184c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	fb03 f202 	mul.w	r2, r3, r2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_RCC_GetSysClockFreq+0x108>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	0e5b      	lsrs	r3, r3, #25
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	3301      	adds	r3, #1
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001880:	69bb      	ldr	r3, [r7, #24]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	08002840 	.word	0x08002840
 8001898:	00f42400 	.word	0x00f42400
 800189c:	007a1200 	.word	0x007a1200

080018a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018b8:	f7ff f9a0 	bl	8000bfc <HAL_PWREx_GetVoltageRange>
 80018bc:	6178      	str	r0, [r7, #20]
 80018be:	e014      	b.n	80018ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	4a24      	ldr	r2, [pc, #144]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6593      	str	r3, [r2, #88]	; 0x58
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018d8:	f7ff f990 	bl	8000bfc <HAL_PWREx_GetVoltageRange>
 80018dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f0:	d10b      	bne.n	800190a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b80      	cmp	r3, #128	; 0x80
 80018f6:	d919      	bls.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2ba0      	cmp	r3, #160	; 0xa0
 80018fc:	d902      	bls.n	8001904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018fe:	2302      	movs	r3, #2
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	e013      	b.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001904:	2301      	movs	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	e010      	b.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b80      	cmp	r3, #128	; 0x80
 800190e:	d902      	bls.n	8001916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001910:	2303      	movs	r3, #3
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	e00a      	b.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d102      	bne.n	8001922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800191c:	2302      	movs	r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e004      	b.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b70      	cmp	r3, #112	; 0x70
 8001926:	d101      	bne.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001928:	2301      	movs	r3, #1
 800192a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0207 	bic.w	r2, r3, #7
 8001934:	4909      	ldr	r1, [pc, #36]	; (800195c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	40022000 	.word	0x40022000

08001960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e095      	b.n	8001a9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	d108      	bne.n	800198c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001982:	d009      	beq.n	8001998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
 800198a:	e005      	b.n	8001998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe fd96 	bl	80004e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019d8:	d902      	bls.n	80019e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e002      	b.n	80019e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80019e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80019ee:	d007      	beq.n	8001a00 <HAL_SPI_Init+0xa0>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019f8:	d002      	beq.n	8001a00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	ea42 0103 	orr.w	r1, r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	0c1b      	lsrs	r3, r3, #16
 8001a5c:	f003 0204 	and.w	r2, r3, #4
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001a7c:	ea42 0103 	orr.w	r1, r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b088      	sub	sp, #32
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_SPI_Transmit+0x22>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e15f      	b.n	8001d88 <HAL_SPI_Transmit+0x2e2>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ad0:	f7fe fe18 	bl	8000704 <HAL_GetTick>
 8001ad4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d002      	beq.n	8001aec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001aea:	e148      	b.n	8001d7e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <HAL_SPI_Transmit+0x52>
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001afc:	e13f      	b.n	8001d7e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2203      	movs	r2, #3
 8001b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	88fa      	ldrh	r2, [r7, #6]
 8001b16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b48:	d10f      	bne.n	8001b6a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b74:	2b40      	cmp	r3, #64	; 0x40
 8001b76:	d007      	beq.n	8001b88 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b90:	d94f      	bls.n	8001c32 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_SPI_Transmit+0xfa>
 8001b9a:	8afb      	ldrh	r3, [r7, #22]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d142      	bne.n	8001c26 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	881a      	ldrh	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	1c9a      	adds	r2, r3, #2
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bc4:	e02f      	b.n	8001c26 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d112      	bne.n	8001bfa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	1c9a      	adds	r2, r3, #2
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bf8:	e015      	b.n	8001c26 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bfa:	f7fe fd83 	bl	8000704 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d803      	bhi.n	8001c12 <HAL_SPI_Transmit+0x16c>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d102      	bne.n	8001c18 <HAL_SPI_Transmit+0x172>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d106      	bne.n	8001c26 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001c24:	e0ab      	b.n	8001d7e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ca      	bne.n	8001bc6 <HAL_SPI_Transmit+0x120>
 8001c30:	e080      	b.n	8001d34 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_SPI_Transmit+0x19a>
 8001c3a:	8afb      	ldrh	r3, [r7, #22]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d174      	bne.n	8001d2a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d912      	bls.n	8001c70 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	881a      	ldrh	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	1c9a      	adds	r2, r3, #2
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b02      	subs	r3, #2
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c6e:	e05c      	b.n	8001d2a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	7812      	ldrb	r2, [r2, #0]
 8001c7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001c96:	e048      	b.n	8001d2a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d12b      	bne.n	8001cfe <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d912      	bls.n	8001cd6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc0:	1c9a      	adds	r2, r3, #2
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b02      	subs	r3, #2
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cd4:	e029      	b.n	8001d2a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	330c      	adds	r3, #12
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cfc:	e015      	b.n	8001d2a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cfe:	f7fe fd01 	bl	8000704 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d803      	bhi.n	8001d16 <HAL_SPI_Transmit+0x270>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d102      	bne.n	8001d1c <HAL_SPI_Transmit+0x276>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d106      	bne.n	8001d2a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001d28:	e029      	b.n	8001d7e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1b1      	bne.n	8001c98 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fcf9 	bl	8002730 <SPI_EndRxTxTransaction>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	77fb      	strb	r3, [r7, #31]
 8001d74:	e003      	b.n	8001d7e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d002      	beq.n	8001db6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
 8001db2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001db4:	e11a      	b.n	8001fec <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dbe:	d112      	bne.n	8001de6 <HAL_SPI_Receive+0x56>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10e      	bne.n	8001de6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001dd0:	88fa      	ldrh	r2, [r7, #6]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f90e 	bl	8001ffe <HAL_SPI_TransmitReceive>
 8001de2:	4603      	mov	r3, r0
 8001de4:	e107      	b.n	8001ff6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_SPI_Receive+0x64>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e100      	b.n	8001ff6 <HAL_SPI_Receive+0x266>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dfc:	f7fe fc82 	bl	8000704 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_SPI_Receive+0x7e>
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e12:	e0eb      	b.n	8001fec <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2204      	movs	r2, #4
 8001e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	88fa      	ldrh	r2, [r7, #6]
 8001e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e5e:	d908      	bls.n	8001e72 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	e007      	b.n	8001e82 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e80:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e8a:	d10f      	bne.n	8001eac <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d007      	beq.n	8001eca <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ed2:	d86f      	bhi.n	8001fb4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ed4:	e034      	b.n	8001f40 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d117      	bne.n	8001f14 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f103 020c 	add.w	r2, r3, #12
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001f12:	e015      	b.n	8001f40 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f14:	f7fe fbf6 	bl	8000704 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d803      	bhi.n	8001f2c <HAL_SPI_Receive+0x19c>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2a:	d102      	bne.n	8001f32 <HAL_SPI_Receive+0x1a2>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001f3e:	e055      	b.n	8001fec <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1c4      	bne.n	8001ed6 <HAL_SPI_Receive+0x146>
 8001f4c:	e038      	b.n	8001fc0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d115      	bne.n	8001f88 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	b292      	uxth	r2, r2
 8001f68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	1c9a      	adds	r2, r3, #2
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001f86:	e015      	b.n	8001fb4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f88:	f7fe fbbc 	bl	8000704 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d803      	bhi.n	8001fa0 <HAL_SPI_Receive+0x210>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9e:	d102      	bne.n	8001fa6 <HAL_SPI_Receive+0x216>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001fb2:	e01b      	b.n	8001fec <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1c6      	bne.n	8001f4e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	6839      	ldr	r1, [r7, #0]
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fb5b 	bl	8002680 <SPI_EndRxTransaction>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
 8001fe2:	e003      	b.n	8001fec <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b08a      	sub	sp, #40	; 0x28
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800200c:	2301      	movs	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_SPI_TransmitReceive+0x26>
 8002020:	2302      	movs	r3, #2
 8002022:	e20a      	b.n	800243a <HAL_SPI_TransmitReceive+0x43c>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800202c:	f7fe fb6a 	bl	8000704 <HAL_GetTick>
 8002030:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002038:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002048:	7efb      	ldrb	r3, [r7, #27]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d00e      	beq.n	800206c <HAL_SPI_TransmitReceive+0x6e>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002054:	d106      	bne.n	8002064 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <HAL_SPI_TransmitReceive+0x66>
 800205e:	7efb      	ldrb	r3, [r7, #27]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d003      	beq.n	800206c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002064:	2302      	movs	r3, #2
 8002066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800206a:	e1e0      	b.n	800242e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_SPI_TransmitReceive+0x80>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_SPI_TransmitReceive+0x80>
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002084:	e1d3      	b.n	800242e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b04      	cmp	r3, #4
 8002090:	d003      	beq.n	800209a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2205      	movs	r2, #5
 8002096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	887a      	ldrh	r2, [r7, #2]
 80020aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	887a      	ldrh	r2, [r7, #2]
 80020c6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020dc:	d802      	bhi.n	80020e4 <HAL_SPI_TransmitReceive+0xe6>
 80020de:	8a3b      	ldrh	r3, [r7, #16]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d908      	bls.n	80020f6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	e007      	b.n	8002106 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002104:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002110:	2b40      	cmp	r3, #64	; 0x40
 8002112:	d007      	beq.n	8002124 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800212c:	f240 8081 	bls.w	8002232 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_SPI_TransmitReceive+0x140>
 8002138:	8a7b      	ldrh	r3, [r7, #18]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d16d      	bne.n	800221a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	1c9a      	adds	r2, r3, #2
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002162:	e05a      	b.n	800221a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b02      	cmp	r3, #2
 8002170:	d11b      	bne.n	80021aa <HAL_SPI_TransmitReceive+0x1ac>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d016      	beq.n	80021aa <HAL_SPI_TransmitReceive+0x1ac>
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	2b01      	cmp	r3, #1
 8002180:	d113      	bne.n	80021aa <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002192:	1c9a      	adds	r2, r3, #2
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d11c      	bne.n	80021f2 <HAL_SPI_TransmitReceive+0x1f4>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d016      	beq.n	80021f2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	b292      	uxth	r2, r2
 80021d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	1c9a      	adds	r2, r3, #2
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021ee:	2301      	movs	r3, #1
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021f2:	f7fe fa87 	bl	8000704 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fe:	429a      	cmp	r2, r3
 8002200:	d80b      	bhi.n	800221a <HAL_SPI_TransmitReceive+0x21c>
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d007      	beq.n	800221a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002218:	e109      	b.n	800242e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d19f      	bne.n	8002164 <HAL_SPI_TransmitReceive+0x166>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d199      	bne.n	8002164 <HAL_SPI_TransmitReceive+0x166>
 8002230:	e0e3      	b.n	80023fa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_SPI_TransmitReceive+0x244>
 800223a:	8a7b      	ldrh	r3, [r7, #18]
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 80cf 	bne.w	80023e0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d912      	bls.n	8002272 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	881a      	ldrh	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	1c9a      	adds	r2, r3, #2
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b02      	subs	r3, #2
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002270:	e0b6      	b.n	80023e0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	330c      	adds	r3, #12
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002298:	e0a2      	b.n	80023e0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d134      	bne.n	8002312 <HAL_SPI_TransmitReceive+0x314>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d02f      	beq.n	8002312 <HAL_SPI_TransmitReceive+0x314>
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d12c      	bne.n	8002312 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d912      	bls.n	80022e8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	1c9a      	adds	r2, r3, #2
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b02      	subs	r3, #2
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022e6:	e012      	b.n	800230e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	330c      	adds	r3, #12
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d148      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x3b4>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d042      	beq.n	80023b2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d923      	bls.n	8002380 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	b292      	uxth	r2, r2
 8002344:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	1c9a      	adds	r2, r3, #2
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b02      	subs	r3, #2
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d81f      	bhi.n	80023ae <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	e016      	b.n	80023ae <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f103 020c 	add.w	r2, r3, #12
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023ae:	2301      	movs	r3, #1
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023b2:	f7fe f9a7 	bl	8000704 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023be:	429a      	cmp	r2, r3
 80023c0:	d803      	bhi.n	80023ca <HAL_SPI_TransmitReceive+0x3cc>
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d102      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x3d2>
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80023de:	e026      	b.n	800242e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f47f af57 	bne.w	800229a <HAL_SPI_TransmitReceive+0x29c>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f47f af50 	bne.w	800229a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f996 	bl	8002730 <SPI_EndRxTxTransaction>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002424:	e003      	b.n	800242e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800243a:	4618      	mov	r0, r3
 800243c:	3728      	adds	r7, #40	; 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002454:	f7fe f956 	bl	8000704 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002464:	f7fe f94e 	bl	8000704 <HAL_GetTick>
 8002468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800246a:	4b39      	ldr	r3, [pc, #228]	; (8002550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	015b      	lsls	r3, r3, #5
 8002470:	0d1b      	lsrs	r3, r3, #20
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800247a:	e054      	b.n	8002526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002482:	d050      	beq.n	8002526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002484:	f7fe f93e 	bl	8000704 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	429a      	cmp	r2, r3
 8002492:	d902      	bls.n	800249a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d13d      	bne.n	8002516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024b2:	d111      	bne.n	80024d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024bc:	d004      	beq.n	80024c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d107      	bne.n	80024d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e0:	d10f      	bne.n	8002502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e017      	b.n	8002546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3b01      	subs	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4013      	ands	r3, r2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	429a      	cmp	r2, r3
 8002542:	d19b      	bne.n	800247c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000000 	.word	0x20000000

08002554 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002566:	f7fe f8cd 	bl	8000704 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002576:	f7fe f8c5 	bl	8000704 <HAL_GetTick>
 800257a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	330c      	adds	r3, #12
 8002582:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002584:	4b3d      	ldr	r3, [pc, #244]	; (800267c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00da      	lsls	r2, r3, #3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	0d1b      	lsrs	r3, r3, #20
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800259c:	e060      	b.n	8002660 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025a4:	d107      	bne.n	80025b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d104      	bne.n	80025b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d050      	beq.n	8002660 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025be:	f7fe f8a1 	bl	8000704 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d902      	bls.n	80025d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d13d      	bne.n	8002650 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ec:	d111      	bne.n	8002612 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f6:	d004      	beq.n	8002602 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002600:	d107      	bne.n	8002612 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002610:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	d10f      	bne.n	800263c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800263a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e010      	b.n	8002672 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	3b01      	subs	r3, #1
 800265e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d196      	bne.n	800259e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3728      	adds	r7, #40	; 0x28
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002694:	d111      	bne.n	80026ba <SPI_EndRxTransaction+0x3a>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269e:	d004      	beq.n	80026aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a8:	d107      	bne.n	80026ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2180      	movs	r1, #128	; 0x80
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff febd 	bl	8002444 <SPI_WaitFlagStateUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e023      	b.n	8002728 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026e8:	d11d      	bne.n	8002726 <SPI_EndRxTransaction+0xa6>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f2:	d004      	beq.n	80026fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	d113      	bne.n	8002726 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2200      	movs	r2, #0
 8002706:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff ff22 	bl	8002554 <SPI_WaitFifoStateUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e000      	b.n	8002728 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff ff03 	bl	8002554 <SPI_WaitFifoStateUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e027      	b.n	80027b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff fe68 	bl	8002444 <SPI_WaitFlagStateUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e014      	b.n	80027b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fedc 	bl	8002554 <SPI_WaitFifoStateUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e000      	b.n	80027b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <memset>:
 80027bc:	4402      	add	r2, r0
 80027be:	4603      	mov	r3, r0
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d100      	bne.n	80027c6 <memset+0xa>
 80027c4:	4770      	bx	lr
 80027c6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ca:	e7f9      	b.n	80027c0 <memset+0x4>

080027cc <__libc_init_array>:
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	4d0d      	ldr	r5, [pc, #52]	; (8002804 <__libc_init_array+0x38>)
 80027d0:	4c0d      	ldr	r4, [pc, #52]	; (8002808 <__libc_init_array+0x3c>)
 80027d2:	1b64      	subs	r4, r4, r5
 80027d4:	10a4      	asrs	r4, r4, #2
 80027d6:	2600      	movs	r6, #0
 80027d8:	42a6      	cmp	r6, r4
 80027da:	d109      	bne.n	80027f0 <__libc_init_array+0x24>
 80027dc:	4d0b      	ldr	r5, [pc, #44]	; (800280c <__libc_init_array+0x40>)
 80027de:	4c0c      	ldr	r4, [pc, #48]	; (8002810 <__libc_init_array+0x44>)
 80027e0:	f000 f818 	bl	8002814 <_init>
 80027e4:	1b64      	subs	r4, r4, r5
 80027e6:	10a4      	asrs	r4, r4, #2
 80027e8:	2600      	movs	r6, #0
 80027ea:	42a6      	cmp	r6, r4
 80027ec:	d105      	bne.n	80027fa <__libc_init_array+0x2e>
 80027ee:	bd70      	pop	{r4, r5, r6, pc}
 80027f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f4:	4798      	blx	r3
 80027f6:	3601      	adds	r6, #1
 80027f8:	e7ee      	b.n	80027d8 <__libc_init_array+0xc>
 80027fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fe:	4798      	blx	r3
 8002800:	3601      	adds	r6, #1
 8002802:	e7f2      	b.n	80027ea <__libc_init_array+0x1e>
 8002804:	08002870 	.word	0x08002870
 8002808:	08002870 	.word	0x08002870
 800280c:	08002870 	.word	0x08002870
 8002810:	08002874 	.word	0x08002874

08002814 <_init>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	bf00      	nop
 8002818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281a:	bc08      	pop	{r3}
 800281c:	469e      	mov	lr, r3
 800281e:	4770      	bx	lr

08002820 <_fini>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	bf00      	nop
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr
