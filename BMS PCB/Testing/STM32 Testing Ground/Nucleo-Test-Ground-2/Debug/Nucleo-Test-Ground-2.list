
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068fc  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee4  08006ee4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eec  08006eec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000005c  08006f50  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08006f50  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fac0  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ecd  00000000  00000000  0002fb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00031a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a72  00000000  00000000  000327e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cc0b  00000000  00000000  0003325a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000faf6  00000000  00000000  0004fe65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be0d9  00000000  00000000  0005f95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d44  00000000  00000000  0011da34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  00121778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a74 	.word	0x08006a74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006a74 	.word	0x08006a74

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b970 	b.w	8000e90 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4694      	mov	ip, r2
 8000bdc:	d965      	bls.n	8000caa <__udivmoddi4+0xe2>
 8000bde:	fab2 f382 	clz	r3, r2
 8000be2:	b143      	cbz	r3, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be8:	f1c3 0220 	rsb	r2, r3, #32
 8000bec:	409f      	lsls	r7, r3
 8000bee:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf2:	4317      	orrs	r7, r2
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfa:	fa1f f58c 	uxth.w	r5, ip
 8000bfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c02:	0c22      	lsrs	r2, r4, #16
 8000c04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c0c:	fb01 f005 	mul.w	r0, r1, r5
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c14:	eb1c 0202 	adds.w	r2, ip, r2
 8000c18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c1c:	f080 811c 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f240 8119 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c26:	3902      	subs	r1, #2
 8000c28:	4462      	add	r2, ip
 8000c2a:	1a12      	subs	r2, r2, r0
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3a:	fb00 f505 	mul.w	r5, r0, r5
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x90>
 8000c42:	eb1c 0404 	adds.w	r4, ip, r4
 8000c46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4a:	f080 8107 	bcs.w	8000e5c <__udivmoddi4+0x294>
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	f240 8104 	bls.w	8000e5c <__udivmoddi4+0x294>
 8000c54:	4464      	add	r4, ip
 8000c56:	3802      	subs	r0, #2
 8000c58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11e      	cbz	r6, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40dc      	lsrs	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0xbc>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ed 	beq.w	8000e52 <__udivmoddi4+0x28a>
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	fab3 f183 	clz	r1, r3
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d149      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	d302      	bcc.n	8000c96 <__udivmoddi4+0xce>
 8000c90:	4282      	cmp	r2, r0
 8000c92:	f200 80f8 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000c96:	1a84      	subs	r4, r0, r2
 8000c98:	eb65 0203 	sbc.w	r2, r5, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d0e2      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca8:	e7df      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000caa:	b902      	cbnz	r2, 8000cae <__udivmoddi4+0xe6>
 8000cac:	deff      	udf	#255	; 0xff
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cb8:	1a8a      	subs	r2, r1, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ccc:	0c22      	lsrs	r2, r4, #16
 8000cce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd2:	fb0e f005 	mul.w	r0, lr, r5
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cda:	eb1c 0202 	adds.w	r2, ip, r2
 8000cde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000cea:	4645      	mov	r5, r8
 8000cec:	1a12      	subs	r2, r2, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2c2>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d1e:	e79f      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d20:	f1c1 0720 	rsb	r7, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	40fd      	lsrs	r5, r7
 8000d38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3c:	4323      	orrs	r3, r4
 8000d3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4a:	0c1c      	lsrs	r4, r3, #16
 8000d4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d50:	fb08 f50e 	mul.w	r5, r8, lr
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	42a5      	cmp	r5, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	b29d      	uxth	r5, r3
 8000d7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d80:	fb09 4413 	mls	r4, r9, r3, r4
 8000d84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da6:	fba3 9502 	umull	r9, r5, r3, r2
 8000daa:	eba4 040e 	sub.w	r4, r4, lr
 8000dae:	42ac      	cmp	r4, r5
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46ae      	mov	lr, r5
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x29c>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x298>
 8000db8:	b156      	cbz	r6, 8000dd0 <__udivmoddi4+0x208>
 8000dba:	ebb0 0208 	subs.w	r2, r0, r8
 8000dbe:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc6:	40ca      	lsrs	r2, r1
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	4317      	orrs	r7, r2
 8000dcc:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	f1c3 0120 	rsb	r1, r3, #32
 8000ddc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de0:	fa20 f201 	lsr.w	r2, r0, r1
 8000de4:	fa25 f101 	lsr.w	r1, r5, r1
 8000de8:	409d      	lsls	r5, r3
 8000dea:	432a      	orrs	r2, r5
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dfc:	0c11      	lsrs	r1, r2, #16
 8000dfe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e02:	fb00 f50e 	mul.w	r5, r0, lr
 8000e06:	428d      	cmp	r5, r1
 8000e08:	fa04 f403 	lsl.w	r4, r4, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x258>
 8000e0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	428d      	cmp	r5, r1
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1b49      	subs	r1, r1, r5
 8000e22:	b292      	uxth	r2, r2
 8000e24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e28:	fb07 1115 	mls	r1, r7, r5, r1
 8000e2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e30:	fb05 f10e 	mul.w	r1, r5, lr
 8000e34:	4291      	cmp	r1, r2
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x282>
 8000e38:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e46:	3d02      	subs	r5, #2
 8000e48:	4462      	add	r2, ip
 8000e4a:	1a52      	subs	r2, r2, r1
 8000e4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0xfc>
 8000e52:	4631      	mov	r1, r6
 8000e54:	4630      	mov	r0, r6
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000e58:	4639      	mov	r1, r7
 8000e5a:	e6e6      	b.n	8000c2a <__udivmoddi4+0x62>
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	e6fb      	b.n	8000c58 <__udivmoddi4+0x90>
 8000e60:	4548      	cmp	r0, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e70:	4645      	mov	r5, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e74:	462b      	mov	r3, r5
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x258>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3d02      	subs	r5, #2
 8000e82:	4462      	add	r2, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x124>
 8000e86:	4608      	mov	r0, r1
 8000e88:	e70a      	b.n	8000ca0 <__udivmoddi4+0xd8>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x14e>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <format_uint16>:
/**
 * Formats an unsigned 16-bit integer into the AFE's data buffer (little-endian byte order)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_uint16(uint8_t *dataArr, uint16_t data) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
	dataArr[0] = ((uint8_t)(data & 0xFF));
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	701a      	strb	r2, [r3, #0]
	dataArr[1] = ((uint8_t)(data >> 8));
 8000ea8:	887b      	ldrh	r3, [r7, #2]
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	701a      	strb	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <format_int16>:
/**
 * Formats a signed 16-bit integer into the AFE's data buffer (little-endian byte order, 2's complement)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_int16(uint8_t *dataArr, int data) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
	if (data < 0) format_uint16(dataArr, (~(abs(data)) + 1));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da0b      	bge.n	8000eea <format_int16+0x28>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bfb8      	it	lt
 8000ed8:	425b      	neglt	r3, r3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	425b      	negs	r3, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffd6 	bl	8000e94 <format_uint16>
	else format_uint16(dataArr, data);
}
 8000ee8:	e005      	b.n	8000ef6 <format_int16+0x34>
	else format_uint16(dataArr, data);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4619      	mov	r1, r3
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffcf 	bl	8000e94 <format_uint16>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <main>:

// Global variables - used for ISRs to raise flags
bool logDataFlag = 0;
bool logAlertsFlag = 0;

int main(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0bc      	sub	sp, #240	; 0xf0
 8000f94:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 8000f96:	f001 fae2 	bl	800255e <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 8000f9a:	f000 fa67 	bl	800146c <SystemClock_Config>

    // Initialize GPIO, SPI, UART, TIM1, ADC1
    GPIO_Init();
 8000f9e:	f000 fa9d 	bl	80014dc <GPIO_Init>
    SPI1_Init();
 8000fa2:	f000 fb35 	bl	8001610 <SPI1_Init>
    USART1_Init();
 8000fa6:	f000 fb7b 	bl	80016a0 <USART1_Init>
    TIM1_Init();
 8000faa:	f000 fbb3 	bl	8001714 <TIM1_Init>
    ADC1_Init();
 8000fae:	f000 fbf5 	bl	800179c <ADC1_Init>

    // Start the logging timer
    TIM1->CR1 |= TIM_CR1_CEN;
 8000fb2:	4bcf      	ldr	r3, [pc, #828]	; (80012f0 <main+0x360>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4ace      	ldr	r2, [pc, #824]	; (80012f0 <main+0x360>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	48cc      	ldr	r0, [pc, #816]	; (80012f4 <main+0x364>)
 8000fc4:	f003 f8e8 	bl	8004198 <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000fce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	619a      	str	r2, [r3, #24]

    uint16_t ctrlStatus = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
    uint16_t cellVolt = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
    uint16_t cellVolts[17] = {0};
 8000fee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ff2:	2222      	movs	r2, #34	; 0x22
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 faf9 	bl	80065ee <memset>
    int16_t cellGains[16] = {12000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11900};
 8000ffc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001000:	2220      	movs	r2, #32
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f005 faf2 	bl	80065ee <memset>
 800100a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800100e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8001012:	f642 637c 	movw	r3, #11900	; 0x2e7c
 8001016:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    uint32_t MCUTemperature = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    int16_t AFETemperature = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    int16_t temperatures[4] = {0};
 8001026:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
    uint16_t currentRead = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
    uint8_t fetStatus = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    uint8_t cmdAddr = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6

    uint8_t writeData[32] = {0};
 8001042:	2300      	movs	r3, #0
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
 8001046:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	619a      	str	r2, [r3, #24]

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 800105a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800105e:	2202      	movs	r2, #2
 8001060:	4619      	mov	r1, r3
 8001062:	2012      	movs	r0, #18
 8001064:	f000 fc32 	bl	80018cc <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 8001068:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800106c:	2202      	movs	r2, #2
 800106e:	4619      	mov	r1, r3
 8001070:	2057      	movs	r0, #87	; 0x57
 8001072:	f000 fd05 	bl	8001a80 <SubCmdReadData>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001076:	2120      	movs	r1, #32
 8001078:	489e      	ldr	r0, [pc, #632]	; (80012f4 <main+0x364>)
 800107a:	f003 f8a5 	bl	80041c8 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800107e:	20fa      	movs	r0, #250	; 0xfa
 8001080:	f001 fae2 	bl	8002648 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001084:	2120      	movs	r1, #32
 8001086:	489b      	ldr	r0, [pc, #620]	; (80012f4 <main+0x364>)
 8001088:	f003 f89e 	bl	80041c8 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 800108c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001090:	f001 fada 	bl	8002648 <HAL_Delay>

	// Disable SLEEP mode and disable FET_TEST mode if already in FET_TEST
	SubCmdNoData(0x009A);
 8001094:	209a      	movs	r0, #154	; 0x9a
 8001096:	f000 fcab 	bl	80019f0 <SubCmdNoData>
	if (!(readData[0] & (1 << 4))) SubCmdNoData(0x0022);
 800109a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <main+0x11c>
 80010a6:	2022      	movs	r0, #34	; 0x22
 80010a8:	f000 fca2 	bl	80019f0 <SubCmdNoData>

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 80010ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010b0:	2202      	movs	r2, #2
 80010b2:	4619      	mov	r1, r3
 80010b4:	2012      	movs	r0, #18
 80010b6:	f000 fc09 	bl	80018cc <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 80010ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010be:	2202      	movs	r2, #2
 80010c0:	4619      	mov	r1, r3
 80010c2:	2057      	movs	r0, #87	; 0x57
 80010c4:	f000 fcdc 	bl	8001a80 <SubCmdReadData>

	// Enter CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
 80010c8:	2090      	movs	r0, #144	; 0x90
 80010ca:	f000 fc91 	bl	80019f0 <SubCmdNoData>
	// Wait for Battery Status to confirm transition to CONFIG_UPDATE mode
	do {
		DirectCmdRead(0x12, readData, 2);
 80010ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010d2:	2202      	movs	r2, #2
 80010d4:	4619      	mov	r1, r3
 80010d6:	2012      	movs	r0, #18
 80010d8:	f000 fbf8 	bl	80018cc <DirectCmdRead>
	} while (!(readData[0] & 0x01));
 80010dc:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f2      	beq.n	80010ce <main+0x13e>

	// Configuring Settings in RAM
	writeData[0] = 0x02;
 80010e8:	2302      	movs	r3, #2
 80010ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(PROT_SCD_THLD, writeData, 1); // Set SCD threshold to 40mV
 80010ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f249 2086 	movw	r0, #37510	; 0x9286
 80010fa:	f000 fd3d 	bl	8001b78 <RAMRegisterWrite>

	// Disable body diode protection
	writeData[0] = 0x0C;
 80010fe:	230c      	movs	r3, #12
 8001100:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1);
 8001104:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	f249 3008 	movw	r0, #37640	; 0x9308
 8001110:	f000 fd32 	bl	8001b78 <RAMRegisterWrite>

	// Enable protection to be tested: CUV, COV
	writeData[0] = 0x8C;
 8001114:	238c      	movs	r3, #140	; 0x8c
 8001116:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(SET_PROT_ENPROT_A, writeData, 1); // Enable protection
 800111a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f249 2061 	movw	r0, #37473	; 0x9261
 8001126:	f000 fd27 	bl	8001b78 <RAMRegisterWrite>
	writeData[0] = 0x14; // 1.012V, cleared above 1.1132V
 800112a:	2314      	movs	r3, #20
 800112c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(PROT_CUV_THLD, writeData, 1);
 8001130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001134:	2201      	movs	r2, #1
 8001136:	4619      	mov	r1, r3
 8001138:	f249 2075 	movw	r0, #37493	; 0x9275
 800113c:	f000 fd1c 	bl	8001b78 <RAMRegisterWrite>
	writeData[0] = 0x20; // 1.6192V, cleared below 1.518V
 8001140:	2320      	movs	r3, #32
 8001142:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(PROT_COV_THLD, writeData, 1);
 8001146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800114a:	2201      	movs	r2, #1
 800114c:	4619      	mov	r1, r3
 800114e:	f249 2078 	movw	r0, #37496	; 0x9278
 8001152:	f000 fd11 	bl	8001b78 <RAMRegisterWrite>

	// Set calibration gain values for all cell voltages
	for (int i = 0; i < 16; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800115c:	e020      	b.n	80011a0 <main+0x210>
		format_int16(writeData, cellGains[i]);
 800115e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	33f0      	adds	r3, #240	; 0xf0
 8001166:	443b      	add	r3, r7
 8001168:	f933 3c80 	ldrsh.w	r3, [r3, #-128]
 800116c:	461a      	mov	r2, r3
 800116e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fea4 	bl	8000ec2 <format_int16>
		RAMRegisterWrite(CAL_GAIN_CL1 + i*2, writeData, 2);
 800117a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800117e:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8001182:	3340      	adds	r3, #64	; 0x40
 8001184:	b29b      	uxth	r3, r3
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b29b      	uxth	r3, r3
 800118a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800118e:	2202      	movs	r2, #2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fcf1 	bl	8001b78 <RAMRegisterWrite>
	for (int i = 0; i < 16; i++) {
 8001196:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800119a:	3301      	adds	r3, #1
 800119c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80011a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	ddda      	ble.n	800115e <main+0x1ce>
	}

	// Configure TS pins
	writeData[0] = 0x07; // Thermistor temperature, for cell AFETemperature protection
 80011a8:	2307      	movs	r3, #7
 80011aa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(SET_CONF_TS1_CFG, writeData, 1);
 80011ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	f249 20fd 	movw	r0, #37629	; 0x92fd
 80011ba:	f000 fcdd 	bl	8001b78 <RAMRegisterWrite>
	RAMRegisterWrite(SET_CONF_TS2_CFG, writeData, 1);
 80011be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	f249 20fe 	movw	r0, #37630	; 0x92fe
 80011ca:	f000 fcd5 	bl	8001b78 <RAMRegisterWrite>
	writeData[0] = 0x0F; // Thermistor temperature, for FET AFETemperature protection
 80011ce:	230f      	movs	r3, #15
 80011d0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(SET_CONF_TS3_CFG, writeData, 1);
 80011d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	f249 20ff 	movw	r0, #37631	; 0x92ff
 80011e0:	f000 fcca 	bl	8001b78 <RAMRegisterWrite>

	// Configure ALERT pin
	writeData[0] = 0x2A;
 80011e4:	232a      	movs	r3, #42	; 0x2a
 80011e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(SET_CONF_ALERT_CFG, writeData, 1);
 80011ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ee:	2201      	movs	r2, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	f249 20fc 	movw	r0, #37628	; 0x92fc
 80011f6:	f000 fcbf 	bl	8001b78 <RAMRegisterWrite>

	// Setting MFG Status Init to disable FET Test commands
	format_uint16(writeData, 0x0050);
 80011fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011fe:	2150      	movs	r1, #80	; 0x50
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fe47 	bl	8000e94 <format_uint16>
	RAMRegisterWrite(SET_MFG_STATUS_INIT, writeData, 2);
 8001206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800120a:	2202      	movs	r2, #2
 800120c:	4619      	mov	r1, r3
 800120e:	f249 3033 	movw	r0, #37683	; 0x9333
 8001212:	f000 fcb1 	bl	8001b78 <RAMRegisterWrite>
	// Exit CONFIG_UPDATE mode, disable SLEEP mode, read manufacturing status register again
	SubCmdNoData(0x0092);
 8001216:	2092      	movs	r0, #146	; 0x92
 8001218:	f000 fbea 	bl	80019f0 <SubCmdNoData>
	SubCmdNoData(0x009A);
 800121c:	209a      	movs	r0, #154	; 0x9a
 800121e:	f000 fbe7 	bl	80019f0 <SubCmdNoData>
	SubCmdReadData(0x0057, readData, 2);
 8001222:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001226:	2202      	movs	r2, #2
 8001228:	4619      	mov	r1, r3
 800122a:	2057      	movs	r0, #87	; 0x57
 800122c:	f000 fc28 	bl	8001a80 <SubCmdReadData>
	// Read battery status register
	DirectCmdRead(0x12, readData, 2);
 8001230:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001234:	2202      	movs	r2, #2
 8001236:	4619      	mov	r1, r3
 8001238:	2012      	movs	r0, #18
 800123a:	f000 fb47 	bl	80018cc <DirectCmdRead>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800123e:	2120      	movs	r1, #32
 8001240:	482c      	ldr	r0, [pc, #176]	; (80012f4 <main+0x364>)
 8001242:	f002 ffc1 	bl	80041c8 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001246:	20fa      	movs	r0, #250	; 0xfa
 8001248:	f001 f9fe 	bl	8002648 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800124c:	2120      	movs	r1, #32
 800124e:	4829      	ldr	r0, [pc, #164]	; (80012f4 <main+0x364>)
 8001250:	f002 ffba 	bl	80041c8 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 8001254:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001258:	f001 f9f6 	bl	8002648 <HAL_Delay>

	// Clear bits in the alarm registers
	writeData[0] = 0xFF;
 800125c:	23ff      	movs	r3, #255	; 0xff
 800125e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	writeData[1] = 0xFE;
 8001262:	23fe      	movs	r3, #254	; 0xfe
 8001264:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	DirectCmdWrite(0xE2, writeData, 2);
 8001268:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126c:	2202      	movs	r2, #2
 800126e:	4619      	mov	r1, r3
 8001270:	20e2      	movs	r0, #226	; 0xe2
 8001272:	f000 fb75 	bl	8001960 <DirectCmdWrite>
    	// Read the control status register
//    	DirectCmdRead(0x02, readData, 2);
//    	ctrlStatus = (readData[0]) + (readData[1] << 8);

    	// Check if flag to log data was raised
    	if (logDataFlag) {
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <main+0x368>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8096 	beq.w	80013ac <main+0x41c>
    		logDataFlag = false; // Clear the flag
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <main+0x368>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
    		// Read the cell voltage for all 16 cells and then the pack voltage
			for (int i = 0; i < 17; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800128c:	e027      	b.n	80012de <main+0x34e>
				cmdAddr = 0x14 + 2*i;
 800128e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001292:	330a      	adds	r3, #10
 8001294:	b2db      	uxtb	r3, r3
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
				DirectCmdRead(cmdAddr, readData, 2);
 800129c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80012a0:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80012a4:	2202      	movs	r2, #2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fb10 	bl	80018cc <DirectCmdRead>
				// Combine the 2 8-bit cell voltage bytes into a single 16-byte variable
				cellVolt = (readData[0]) + (readData[1] << 8);
 80012ac:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4413      	add	r3, r2
 80012be:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
				cellVolts[i] = cellVolt;
 80012c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	33f0      	adds	r3, #240	; 0xf0
 80012ca:	443b      	add	r3, r7
 80012cc:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 80012d0:	f823 2c60 	strh.w	r2, [r3, #-96]
			for (int i = 0; i < 17; i++) {
 80012d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80012d8:	3301      	adds	r3, #1
 80012da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80012de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80012e2:	2b10      	cmp	r3, #16
 80012e4:	ddd3      	ble.n	800128e <main+0x2fe>
			}

			// Read the AFETemperature measured at TS1-3
			for (int i = 0; i < 3; i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80012ec:	e02f      	b.n	800134e <main+0x3be>
 80012ee:	bf00      	nop
 80012f0:	40012c00 	.word	0x40012c00
 80012f4:	48000400 	.word	0x48000400
 80012f8:	200001c8 	.word	0x200001c8
				cmdAddr = 0x70 + 2*i;
 80012fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001300:	3338      	adds	r3, #56	; 0x38
 8001302:	b2db      	uxtb	r3, r3
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
				DirectCmdRead(cmdAddr, readData, 2);
 800130a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800130e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001312:	2202      	movs	r2, #2
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fad9 	bl	80018cc <DirectCmdRead>
				AFETemperature = (readData[0]) + (readData[1] << 8);
 800131a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800131e:	b29a      	uxth	r2, r3
 8001320:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001324:	b29b      	uxth	r3, r3
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b29b      	uxth	r3, r3
 800132a:	4413      	add	r3, r2
 800132c:	b29b      	uxth	r3, r3
 800132e:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
				temperatures[i] = AFETemperature;
 8001332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	33f0      	adds	r3, #240	; 0xf0
 800133a:	443b      	add	r3, r7
 800133c:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 8001340:	f823 2c88 	strh.w	r2, [r3, #-136]
			for (int i = 0; i < 3; i++) {
 8001344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001348:	3301      	adds	r3, #1
 800134a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800134e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001352:	2b02      	cmp	r3, #2
 8001354:	ddd2      	ble.n	80012fc <main+0x36c>
			}
			// Calculate temperature measured by MCU's ADC
			MCUTemperature = T4_Acquire();
 8001356:	f000 fe9b 	bl	8002090 <T4_Acquire>
 800135a:	4603      	mov	r3, r0
 800135c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			temperatures[3] = MCUTemperature;
 8001360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001364:	b21b      	sxth	r3, r3
 8001366:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

//			TransmitCellVoltages(cellVolts, 17);
//			TransmitTemperatures(temperatures, 4);
			TransmitSafetyStatusA();
 800136a:	f000 fd59 	bl	8001e20 <TransmitSafetyStatusA>
			TransmitSafetyStatusB();
 800136e:	f000 fddd 	bl	8001f2c <TransmitSafetyStatusB>

			// Read the CC2 current and FET status
			DirectCmdRead(0x3A, readData, 2);
 8001372:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001376:	2202      	movs	r2, #2
 8001378:	4619      	mov	r1, r3
 800137a:	203a      	movs	r0, #58	; 0x3a
 800137c:	f000 faa6 	bl	80018cc <DirectCmdRead>
			currentRead = (readData[0]) + (readData[1] << 8);
 8001380:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001384:	b29a      	uxth	r2, r3
 8001386:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800138a:	b29b      	uxth	r3, r3
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			DirectCmdRead(0x7F, readData, 1);
 8001396:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800139a:	2201      	movs	r2, #1
 800139c:	4619      	mov	r1, r3
 800139e:	207f      	movs	r0, #127	; 0x7f
 80013a0:	f000 fa94 	bl	80018cc <DirectCmdRead>
			fetStatus = readData[0];
 80013a4:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80013a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    	}

    	// Check if flag indicating a fault occurred was raised
    	if (logAlertsFlag) {
 80013ac:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <main+0x4d0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f43f af60 	beq.w	8001276 <main+0x2e6>
    		logAlertsFlag = false;
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <main+0x4d0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
			// Read the Alarm Status register to figure out what's causing the alert
    		DirectCmdRead(0x62, readData, 2);
 80013bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013c0:	2202      	movs	r2, #2
 80013c2:	4619      	mov	r1, r3
 80013c4:	2062      	movs	r0, #98	; 0x62
 80013c6:	f000 fa81 	bl	80018cc <DirectCmdRead>
    		writeData[0] = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    		writeData[1] = 0x00;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    		// Check each bit and determine where to look for the cause of the alert
    		// Safety status B/C
    		if (readData[1] & (1 << 7)) {
 80013d6:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da08      	bge.n	80013f2 <main+0x462>
    			TransmitSafetyStatusB();
 80013e0:	f000 fda4 	bl	8001f2c <TransmitSafetyStatusB>
    			// No need to check safety status C as no protections there are enabled
    			writeData[1] |= (1 << 7);
 80013e4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80013e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    		}
    		// Safety status A
    		if (readData[1] & (1 << 6)) {
 80013f2:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80013f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <main+0x480>
    			TransmitSafetyStatusA();
 80013fe:	f000 fd0f 	bl	8001e20 <TransmitSafetyStatusA>
    			writeData[1] |= (1 << 6);
 8001402:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    		}
    		// Permanent failure
    		if (readData[1] & (1 << 5)) {
 8001410:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	2b00      	cmp	r3, #0
 800141a:	d012      	beq.n	8001442 <main+0x4b2>
    			// If there's a permanent failure, continuously transmit a distress signal
    			uint8_t msg[] = "Permanent failure! All BMS operations halted, requesting attention...";
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <main+0x4d4>)
 800141e:	463b      	mov	r3, r7
 8001420:	4611      	mov	r1, r2
 8001422:	2246      	movs	r2, #70	; 0x46
 8001424:	4618      	mov	r0, r3
 8001426:	f005 f915 	bl	8006654 <memcpy>
    			while (1) {
    				HAL_Delay(10000);
 800142a:	f242 7010 	movw	r0, #10000	; 0x2710
 800142e:	f001 f90b 	bl	8002648 <HAL_Delay>
    				HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001432:	4639      	mov	r1, r7
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	2245      	movs	r2, #69	; 0x45
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <main+0x4d8>)
 800143c:	f004 fbde 	bl	8005bfc <HAL_UART_Transmit>
    				HAL_Delay(10000);
 8001440:	e7f3      	b.n	800142a <main+0x49a>
    			}
    		}
    		// Clear the bits for the received safety statuses, as well as the masked safety alerts
//    		writeData[1] |= 0x18;
    		writeData[0] = 0xFF;
 8001442:	23ff      	movs	r3, #255	; 0xff
 8001444:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    		writeData[1] = 0xFE;
 8001448:	23fe      	movs	r3, #254	; 0xfe
 800144a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    		DirectCmdWrite(0xE2, writeData, 2);
 800144e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001452:	2202      	movs	r2, #2
 8001454:	4619      	mov	r1, r3
 8001456:	20e2      	movs	r0, #226	; 0xe2
 8001458:	f000 fa82 	bl	8001960 <DirectCmdWrite>
    	if (logDataFlag) {
 800145c:	e70b      	b.n	8001276 <main+0x2e6>
 800145e:	bf00      	nop
 8001460:	200001c9 	.word	0x200001c9
 8001464:	08006a8c 	.word	0x08006a8c
 8001468:	200000dc 	.word	0x200000dc

0800146c <SystemClock_Config>:
}

/**
 * Configures the clocks for the STM32
 */
void SystemClock_Config(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b096      	sub	sp, #88	; 0x58
 8001470:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2244      	movs	r2, #68	; 0x44
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f005 f8b7 	bl	80065ee <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001492:	f002 fed9 	bl	8004248 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001496:	2310      	movs	r3, #16
 8001498:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800149a:	2301      	movs	r3, #1
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014a2:	2360      	movs	r3, #96	; 0x60
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 ff20 	bl	80042f4 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b4:	230f      	movs	r3, #15
 80014b6:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80014c8:	463b      	mov	r3, r7
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fb73 	bl	8004bb8 <HAL_RCC_ClockConfig>
}
 80014d2:	bf00      	nop
 80014d4:	3758      	adds	r7, #88	; 0x58
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <GPIO_Init>:

/**
 * Initializes all GPIO pins
 */
void GPIO_Init(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b49      	ldr	r3, [pc, #292]	; (8001608 <GPIO_Init+0x12c>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a48      	ldr	r2, [pc, #288]	; (8001608 <GPIO_Init+0x12c>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b46      	ldr	r3, [pc, #280]	; (8001608 <GPIO_Init+0x12c>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b43      	ldr	r3, [pc, #268]	; (8001608 <GPIO_Init+0x12c>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a42      	ldr	r2, [pc, #264]	; (8001608 <GPIO_Init+0x12c>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b40      	ldr	r3, [pc, #256]	; (8001608 <GPIO_Init+0x12c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <GPIO_Init+0x12c>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <GPIO_Init+0x12c>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6613      	str	r3, [r2, #96]	; 0x60
 800151e:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <GPIO_Init+0x12c>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153a:	2301      	movs	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800153e:	2311      	movs	r3, #17
 8001540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4619      	mov	r1, r3
 8001550:	482e      	ldr	r0, [pc, #184]	; (800160c <GPIO_Init+0x130>)
 8001552:	f002 fcaf 	bl	8003eb4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 8001556:	2201      	movs	r2, #1
 8001558:	2101      	movs	r1, #1
 800155a:	482c      	ldr	r0, [pc, #176]	; (800160c <GPIO_Init+0x130>)
 800155c:	f002 fe1c 	bl	8004198 <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001560:	2320      	movs	r3, #32
 8001562:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4825      	ldr	r0, [pc, #148]	; (800160c <GPIO_Init+0x130>)
 8001578:	f002 fc9c 	bl	8003eb4 <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800157c:	23e0      	movs	r3, #224	; 0xe0
 800157e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158c:	2305      	movs	r3, #5
 800158e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	4619      	mov	r1, r3
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f002 fc8b 	bl	8003eb4 <HAL_GPIO_Init>

    // Configure PB6 (UART_TX), PB7 (UART_RX)
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800159e:	23c0      	movs	r3, #192	; 0xc0
 80015a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Alternate function for USART1
 80015ae:	2307      	movs	r3, #7
 80015b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4814      	ldr	r0, [pc, #80]	; (800160c <GPIO_Init+0x130>)
 80015ba:	f002 fc7b 	bl	8003eb4 <HAL_GPIO_Init>

	// Configure PA4 (AFE ALERT pin) as an external interrupt
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015be:	2310      	movs	r3, #16
 80015c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4619      	mov	r1, r3
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f002 fc6d 	bl	8003eb4 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	200a      	movs	r0, #10
 80015e0:	f002 fc31 	bl	8003e46 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015e4:	200a      	movs	r0, #10
 80015e6:	f002 fc4a 	bl	8003e7e <HAL_NVIC_EnableIRQ>

	// Configure PA1 (T4 pin) as an analog input
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015ea:	2302      	movs	r3, #2
 80015ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f002 fc5a 	bl	8003eb4 <HAL_GPIO_Init>
}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	48000400 	.word	0x48000400

08001610 <SPI1_Init>:

// Initializes the SPI1 peripheral in master mode
void SPI1_Init(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <SPI1_Init+0x84>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <SPI1_Init+0x84>)
 800161c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001620:	6613      	str	r3, [r2, #96]	; 0x60
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <SPI1_Init+0x84>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <SPI1_Init+0x88>)
 8001630:	4a1a      	ldr	r2, [pc, #104]	; (800169c <SPI1_Init+0x8c>)
 8001632:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <SPI1_Init+0x88>)
 8001636:	f44f 7282 	mov.w	r2, #260	; 0x104
 800163a:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <SPI1_Init+0x88>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <SPI1_Init+0x88>)
 8001644:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001648:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <SPI1_Init+0x88>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <SPI1_Init+0x88>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <SPI1_Init+0x88>)
 8001658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <SPI1_Init+0x88>)
 8001660:	2228      	movs	r2, #40	; 0x28
 8001662:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <SPI1_Init+0x88>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <SPI1_Init+0x88>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <SPI1_Init+0x88>)
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <SPI1_Init+0x88>)
 8001678:	2207      	movs	r2, #7
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <SPI1_Init+0x88>)
 800167e:	f003 fe45 	bl	800530c <HAL_SPI_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d000      	beq.n	800168a <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 8001688:	e7fe      	b.n	8001688 <SPI1_Init+0x78>
    }
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	20000078 	.word	0x20000078
 800169c:	40013000 	.word	0x40013000

080016a0 <USART1_Init>:

/**
 * Initializes the USART1 peripheral in UART TX/RX mode
 */
void USART1_Init(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <USART1_Init+0x68>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <USART1_Init+0x68>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6613      	str	r3, [r2, #96]	; 0x60
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <USART1_Init+0x68>)
 80016b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

	// Configure UART peripheral
	huart1.Instance = USART1;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <USART1_Init+0x6c>)
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <USART1_Init+0x70>)
 80016c2:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <USART1_Init+0x6c>)
 80016c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016ca:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <USART1_Init+0x6c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <USART1_Init+0x6c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <USART1_Init+0x6c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <USART1_Init+0x6c>)
 80016e0:	220c      	movs	r2, #12
 80016e2:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <USART1_Init+0x6c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <USART1_Init+0x6c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <USART1_Init+0x6c>)
 80016f2:	f004 fa35 	bl	8005b60 <HAL_UART_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d000      	beq.n	80016fe <USART1_Init+0x5e>
	{
		// Initialization error
		while (1);
 80016fc:	e7fe      	b.n	80016fc <USART1_Init+0x5c>
	}
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	200000dc 	.word	0x200000dc
 8001710:	40013800 	.word	0x40013800

08001714 <TIM1_Init>:

/**
 * Initializes the TIM1 peripheral with interrupts enabled
 */
void TIM1_Init(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Enable TIM1 clock
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <TIM1_Init+0x4c>)
 800171a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171c:	4a10      	ldr	r2, [pc, #64]	; (8001760 <TIM1_Init+0x4c>)
 800171e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001722:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->PSC = 2000 - 1; // Given 2MHz clock, 2000 cycles for 1ms
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <TIM1_Init+0x50>)
 8001726:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 2000 - 1; // Generate interrupt every 2000ms (2s)
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <TIM1_Init+0x50>)
 800172e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <TIM1_Init+0x50>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <TIM1_Init+0x50>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0); // Set TIM1 interrupt priority
 8001740:	2100      	movs	r1, #0
 8001742:	2019      	movs	r0, #25
 8001744:	f7ff fbfa 	bl	8000f3c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); // Enable TIM1 interrupt
 8001748:	2019      	movs	r0, #25
 800174a:	f7ff fbd9 	bl	8000f00 <__NVIC_EnableIRQ>

	TIM1->CR1 |= TIM_CR1_CEN; // Enable TIM1
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <TIM1_Init+0x50>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <TIM1_Init+0x50>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6013      	str	r3, [r2, #0]
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	40012c00 	.word	0x40012c00

08001768 <TIM1_UP_TIM16_IRQHandler>:

/**
 * Defining the ISR for the STM32 timers
 */
void TIM1_UP_TIM16_IRQHandler(void) {
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	// Check if UIF flag is set for TIM1
	if (TIM1->SR & TIM_SR_UIF) {
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <TIM1_UP_TIM16_IRQHandler+0x22>
		logDataFlag = true; // Raise a flag to log data from the AFE
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~TIM_SR_UIF; // Clear UIF flag
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6113      	str	r3, [r2, #16]
	}
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40012c00 	.word	0x40012c00
 8001798:	200001c8 	.word	0x200001c8

0800179c <ADC1_Init>:

void ADC1_Init(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	615a      	str	r2, [r3, #20]

    // Enable the clock for ADC1
    __HAL_RCC_ADC_CLK_ENABLE();
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <ADC1_Init+0xb8>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	4a26      	ldr	r2, [pc, #152]	; (8001854 <ADC1_Init+0xb8>)
 80017ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <ADC1_Init+0xb8>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]

    // Configure the ADC peripheral
    hadc1.Instance = ADC1;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <ADC1_Init+0xbc>)
 80017ce:	4a23      	ldr	r2, [pc, #140]	; (800185c <ADC1_Init+0xc0>)
 80017d0:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <ADC1_Init+0xbc>)
 80017d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017d8:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;  // 12-bit resolution
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <ADC1_Init+0xbc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;  // Right data alignment
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <ADC1_Init+0xbc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;  // Single channel
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <ADC1_Init+0xbc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;  // End of conversion flag after each conversion
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <ADC1_Init+0xbc>)
 80017ee:	2204      	movs	r2, #4
 80017f0:	615a      	str	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;  // Single conversion mode
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <ADC1_Init+0xbc>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;  // Single conversion
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <ADC1_Init+0xbc>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <ADC1_Init+0xbc>)
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;  // Start conversion by software
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <ADC1_Init+0xbc>)
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <ADC1_Init+0xbc>)
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <ADC1_Init+0xbc>)
 8001816:	2200      	movs	r2, #0
 8001818:	635a      	str	r2, [r3, #52]	; 0x34

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800181a:	480f      	ldr	r0, [pc, #60]	; (8001858 <ADC1_Init+0xbc>)
 800181c:	f001 f97c 	bl	8002b18 <HAL_ADC_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <ADC1_Init+0x8e>
        // Initialization error
        Error_Handler();
 8001826:	f000 fd09 	bl	800223c <Error_Handler>
    }

    // Configure the ADC regular channel (PA1 = ADC_CHANNEL_6)
    sConfig.Channel = ADC_CHANNEL_6;
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <ADC1_Init+0xc4>)
 800182c:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800182e:	2306      	movs	r3, #6
 8001830:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;  // Sample time (adjust as necessary)
 8001832:	2304      	movs	r3, #4
 8001834:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4619      	mov	r1, r3
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <ADC1_Init+0xbc>)
 800183e:	f001 fc89 	bl	8003154 <HAL_ADC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <ADC1_Init+0xb0>
        // Channel configuration error
        Error_Handler();
 8001848:	f000 fcf8 	bl	800223c <Error_Handler>
    }
}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	20000164 	.word	0x20000164
 800185c:	50040000 	.word	0x50040000
 8001860:	19200040 	.word	0x19200040

08001864 <crc8>:
/**
 * Calculates a CRC value according to the polynomial x^8 + x^2 + x + 1
 * @param data Pointer to an array storing the data bytes that will be transmitted
 * @param len Number of bytes that will be transmitted
 */
uint8_t crc8(uint8_t *data, size_t len) {
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
    while (len--)
 8001872:	e01e      	b.n	80018b2 <crc8+0x4e>
    {
        crc ^= *data++;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	4053      	eors	r3, r2
 8001880:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8001882:	2300      	movs	r3, #0
 8001884:	73bb      	strb	r3, [r7, #14]
 8001886:	e011      	b.n	80018ac <crc8+0x48>
        {
            if (crc & 0x80)
 8001888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188c:	2b00      	cmp	r3, #0
 800188e:	da07      	bge.n	80018a0 <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	b25b      	sxtb	r3, r3
 8001896:	f083 0307 	eor.w	r3, r3, #7
 800189a:	b25b      	sxtb	r3, r3
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	e002      	b.n	80018a6 <crc8+0x42>
            else
                crc <<= 1;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	3301      	adds	r3, #1
 80018aa:	73bb      	strb	r3, [r7, #14]
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	2b07      	cmp	r3, #7
 80018b0:	d9ea      	bls.n	8001888 <crc8+0x24>
    while (len--)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	603a      	str	r2, [r7, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1db      	bne.n	8001874 <crc8+0x10>
        }
    }
    return crc;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <DirectCmdRead>:
 * Sends a direct command to the AFE and reads the data that is output
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	4613      	mov	r3, r2
 80018da:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <DirectCmdRead+0x90>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	823b      	strh	r3, [r7, #16]
 80018e2:	2300      	movs	r3, #0
 80018e4:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <DirectCmdRead+0x90>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	81bb      	strh	r3, [r7, #12]
 80018ec:	2300      	movs	r3, #0
 80018ee:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	723b      	strb	r3, [r7, #8]
 80018f4:	23ff      	movs	r3, #255	; 0xff
 80018f6:	727b      	strb	r3, [r7, #9]
	uint8_t crcLower = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	74fb      	strb	r3, [r7, #19]
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e023      	b.n	800194a <DirectCmdRead+0x7e>
	{
		fullCmd[0] = cmd + i; // Increment the address
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	4413      	add	r3, r2
 800190a:	b2db      	uxtb	r3, r3
 800190c:	723b      	strb	r3, [r7, #8]
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	2102      	movs	r1, #2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ffa5 	bl	8001864 <crc8>
 800191a:	4603      	mov	r3, r0
 800191c:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 800191e:	7a3b      	ldrb	r3, [r7, #8]
 8001920:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 8001922:	7a7b      	ldrb	r3, [r7, #9]
 8001924:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 8001926:	7cfb      	ldrb	r3, [r7, #19]
 8001928:	73bb      	strb	r3, [r7, #14]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 800192a:	f107 0110 	add.w	r1, r7, #16
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	2203      	movs	r2, #3
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f9f3 	bl	8001d20 <AFETransmitReadCmd>
		returnData[i] = rxData[1]; // Save data byte received from last transaction
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	4413      	add	r3, r2
 8001940:	7c7a      	ldrb	r2, [r7, #17]
 8001942:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbd7      	blt.n	8001902 <DirectCmdRead+0x36>
	}
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	08006ad4 	.word	0x08006ad4

08001960 <DirectCmdWrite>:
 * Sends a direct command to the AFE and writes the provided data to it
 * @param cmd The address byte for the command
 * @param writeData Pointer to the 8-bit integer array containing the data to write
 * @param len Number of bytes to write to the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdWrite(uint8_t cmd, uint8_t *writeData, uint8_t len) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <DirectCmdWrite+0x8c>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	823b      	strh	r3, [r7, #16]
 8001976:	2300      	movs	r3, #0
 8001978:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <DirectCmdWrite+0x8c>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	81bb      	strh	r3, [r7, #12]
 8001980:	2300      	movs	r3, #0
 8001982:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[2] = {0};
 8001984:	2300      	movs	r3, #0
 8001986:	813b      	strh	r3, [r7, #8]
	uint8_t crcLower = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	74fb      	strb	r3, [r7, #19]

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++) {
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e023      	b.n	80019da <DirectCmdWrite+0x7a>
		fullCmd[0] = cmd + i;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4413      	add	r3, r2
 800199a:	b2db      	uxtb	r3, r3
 800199c:	723b      	strb	r3, [r7, #8]
		fullCmd[1] = writeData[i];
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	727b      	strb	r3, [r7, #9]
		crcLower = crc8(fullCmd, 2);
 80019a8:	f107 0308 	add.w	r3, r7, #8
 80019ac:	2102      	movs	r1, #2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff58 	bl	8001864 <crc8>
 80019b4:	4603      	mov	r3, r0
 80019b6:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 80019b8:	7a3b      	ldrb	r3, [r7, #8]
 80019ba:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 80019bc:	7a7b      	ldrb	r3, [r7, #9]
 80019be:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	73bb      	strb	r3, [r7, #14]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 80019c4:	f107 0110 	add.w	r1, r7, #16
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2203      	movs	r2, #3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f9de 	bl	8001d90 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++) {
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbd7      	blt.n	8001992 <DirectCmdWrite+0x32>
	}
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	08006ad4 	.word	0x08006ad4

080019f0 <SubCmdNoData>:

/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <SubCmdNoData+0x8c>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	833b      	strh	r3, [r7, #24]
 8001a00:	2300      	movs	r3, #0
 8001a02:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001a04:	23be      	movs	r3, #190	; 0xbe
 8001a06:	753b      	strb	r3, [r7, #20]
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	2102      	movs	r1, #2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff25 	bl	8001864 <crc8>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001a1e:	23bf      	movs	r3, #191	; 0xbf
 8001a20:	743b      	strb	r3, [r7, #16]
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2102      	movs	r1, #2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff16 	bl	8001864 <crc8>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	77bb      	strb	r3, [r7, #30]

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001a3c:	7d3b      	ldrb	r3, [r7, #20]
 8001a3e:	733b      	strb	r3, [r7, #12]
 8001a40:	7d7b      	ldrb	r3, [r7, #21]
 8001a42:	737b      	strb	r3, [r7, #13]
 8001a44:	7ffb      	ldrb	r3, [r7, #31]
 8001a46:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001a48:	f107 0118 	add.w	r1, r7, #24
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2203      	movs	r2, #3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f99c 	bl	8001d90 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001a58:	7c3b      	ldrb	r3, [r7, #16]
 8001a5a:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 8001a5c:	7c7b      	ldrb	r3, [r7, #17]
 8001a5e:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 8001a60:	7fbb      	ldrb	r3, [r7, #30]
 8001a62:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001a64:	f107 0118 	add.w	r1, r7, #24
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f98e 	bl	8001d90 <AFETransmitWriteCmd>
}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	08006ad4 	.word	0x08006ad4

08001a80 <SubCmdReadData>:
 * Sends a sub-command to the AFE and reads the data that is output
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	80fb      	strh	r3, [r7, #6]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <SubCmdReadData+0xf4>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	83bb      	strh	r3, [r7, #28]
 8001a96:	2300      	movs	r3, #0
 8001a98:	77bb      	strb	r3, [r7, #30]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001a9a:	23be      	movs	r3, #190	; 0xbe
 8001a9c:	763b      	strb	r3, [r7, #24]
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff feda 	bl	8001864 <crc8>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001ab6:	23bf      	movs	r3, #191	; 0xbf
 8001ab8:	753b      	strb	r3, [r7, #20]
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff feca 	bl	8001864 <crc8>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001ad6:	7e3b      	ldrb	r3, [r7, #24]
 8001ad8:	743b      	strb	r3, [r7, #16]
 8001ada:	7e7b      	ldrb	r3, [r7, #25]
 8001adc:	747b      	strb	r3, [r7, #17]
 8001ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ae2:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001ae4:	f107 011c 	add.w	r1, r7, #28
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2203      	movs	r2, #3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f94e 	bl	8001d90 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001af4:	7d3b      	ldrb	r3, [r7, #20]
 8001af6:	743b      	strb	r3, [r7, #16]
	txData[1] = commandUpperAddr[1];
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
 8001afa:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001afc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b00:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001b02:	f107 011c 	add.w	r1, r7, #28
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 f93f 	bl	8001d90 <AFETransmitWriteCmd>

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 8001b12:	2300      	movs	r3, #0
 8001b14:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	e022      	b.n	8001b62 <SubCmdReadData+0xe2>
		readData[0] = READ_DATA_BUFF_LSB + i;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3340      	adds	r3, #64	; 0x40
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	733b      	strb	r3, [r7, #12]
		readData[1] = 0xFF;
 8001b26:	23ff      	movs	r3, #255	; 0xff
 8001b28:	737b      	strb	r3, [r7, #13]

		txData[0] = readData[0];
 8001b2a:	7b3b      	ldrb	r3, [r7, #12]
 8001b2c:	743b      	strb	r3, [r7, #16]
		txData[1] = readData[1];
 8001b2e:	7b7b      	ldrb	r3, [r7, #13]
 8001b30:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(readData, 2);
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	2102      	movs	r1, #2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe93 	bl	8001864 <crc8>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	74bb      	strb	r3, [r7, #18]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8001b42:	f107 011c 	add.w	r1, r7, #28
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 f8e7 	bl	8001d20 <AFETransmitReadCmd>

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	7f7a      	ldrb	r2, [r7, #29]
 8001b5a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	3301      	adds	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	797b      	ldrb	r3, [r7, #5]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	429a      	cmp	r2, r3
 8001b68:	dbd8      	blt.n	8001b1c <SubCmdReadData+0x9c>
	}
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	08006ad4 	.word	0x08006ad4

08001b78 <RAMRegisterWrite>:
 * Might remove this function, it's exactly the same as the SubCmd read data function
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	; 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	80fb      	strh	r3, [r7, #6]
 8001b84:	4613      	mov	r3, r2
 8001b86:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001b88:	4b64      	ldr	r3, [pc, #400]	; (8001d1c <RAMRegisterWrite+0x1a4>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	83bb      	strh	r3, [r7, #28]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	77bb      	strb	r3, [r7, #30]
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
 8001b92:	23be      	movs	r3, #190	; 0xbe
 8001b94:	763b      	strb	r3, [r7, #24]
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(lowerAddr, 2);
 8001b9c:	f107 0318 	add.w	r3, r7, #24
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fe5e 	bl	8001864 <crc8>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
 8001bae:	23bf      	movs	r3, #191	; 0xbf
 8001bb0:	753b      	strb	r3, [r7, #20]
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(upperAddr, 2);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fe4e 	bl	8001864 <crc8>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
 8001bce:	7e3b      	ldrb	r3, [r7, #24]
 8001bd0:	743b      	strb	r3, [r7, #16]
 8001bd2:	7e7b      	ldrb	r3, [r7, #25]
 8001bd4:	747b      	strb	r3, [r7, #17]
 8001bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bda:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001bdc:	f107 011c 	add.w	r1, r7, #28
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	2203      	movs	r2, #3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f8d2 	bl	8001d90 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = upperAddr[0];
 8001bec:	7d3b      	ldrb	r3, [r7, #20]
 8001bee:	743b      	strb	r3, [r7, #16]
	txData[1] = upperAddr[1];
 8001bf0:	7d7b      	ldrb	r3, [r7, #21]
 8001bf2:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001bf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001bf8:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001bfa:	f107 011c 	add.w	r1, r7, #28
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2203      	movs	r2, #3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f8c3 	bl	8001d90 <AFETransmitWriteCmd>

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c12:	e020      	b.n	8001c56 <RAMRegisterWrite+0xde>
	{
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3b40      	subs	r3, #64	; 0x40
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	733b      	strb	r3, [r7, #12]
		writeBytes[1] = writeData[i];
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	737b      	strb	r3, [r7, #13]

		txData[0] = writeBytes[0];
 8001c28:	7b3b      	ldrb	r3, [r7, #12]
 8001c2a:	743b      	strb	r3, [r7, #16]
		txData[1] = writeBytes[1];
 8001c2c:	7b7b      	ldrb	r3, [r7, #13]
 8001c2e:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2102      	movs	r1, #2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fe14 	bl	8001864 <crc8>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	74bb      	strb	r3, [r7, #18]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001c40:	f107 011c 	add.w	r1, r7, #28
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2203      	movs	r2, #3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f8a0 	bl	8001d90 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++)
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	3301      	adds	r3, #1
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c56:	797b      	ldrb	r3, [r7, #5]
 8001c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dbda      	blt.n	8001c14 <RAMRegisterWrite+0x9c>
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	e00b      	b.n	8001c82 <RAMRegisterWrite+0x10a>
		checkSum += writeData[i];
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c76:	4413      	add	r3, r2
 8001c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	3301      	adds	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	797b      	ldrb	r3, [r7, #5]
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dbef      	blt.n	8001c6a <RAMRegisterWrite+0xf2>
	}
	checkSum += lowerAddr[1];
 8001c8a:	7e7a      	ldrb	r2, [r7, #25]
 8001c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c90:	4413      	add	r3, r2
 8001c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum += upperAddr[1];
 8001c96:	7d7a      	ldrb	r2, [r7, #21]
 8001c98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum = ~(checkSum);
 8001ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
 8001cac:	23e0      	movs	r3, #224	; 0xe0
 8001cae:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = checkSum;
 8001cb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cb4:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001cb6:	7b3b      	ldrb	r3, [r7, #12]
 8001cb8:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001cba:	7b7b      	ldrb	r3, [r7, #13]
 8001cbc:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fdcd 	bl	8001864 <crc8>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001cce:	f107 011c 	add.w	r1, r7, #28
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f859 	bl	8001d90 <AFETransmitWriteCmd>

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
 8001cde:	23e1      	movs	r3, #225	; 0xe1
 8001ce0:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes
 8001ce2:	797b      	ldrb	r3, [r7, #5]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001cea:	7b3b      	ldrb	r3, [r7, #12]
 8001cec:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001cee:	7b7b      	ldrb	r3, [r7, #13]
 8001cf0:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fdb3 	bl	8001864 <crc8>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001d02:	f107 011c 	add.w	r1, r7, #28
 8001d06:	f107 0310 	add.w	r3, r7, #16
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f83f 	bl	8001d90 <AFETransmitWriteCmd>
}
 8001d12:	bf00      	nop
 8001d14:	3730      	adds	r7, #48	; 0x30
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	08006ad4 	.word	0x08006ad4

08001d20 <AFETransmitReadCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI read command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8001d32:	e01e      	b.n	8001d72 <AFETransmitReadCmd+0x52>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2101      	movs	r1, #1
 8001d38:	4813      	ldr	r0, [pc, #76]	; (8001d88 <AFETransmitReadCmd+0x68>)
 8001d3a:	f002 fa2d 	bl	8004198 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f04f 32ff 	mov.w	r2, #4294967295
 8001d46:	9200      	str	r2, [sp, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	480f      	ldr	r0, [pc, #60]	; (8001d8c <AFETransmitReadCmd+0x6c>)
 8001d4e:	f003 fb80 	bl	8005452 <HAL_SPI_TransmitReceive>

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		if (txBytes[0] == rxBytes[0]) commReceived = true;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d101      	bne.n	8001d62 <AFETransmitReadCmd+0x42>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
		// TODO: implement CRC checking for received data

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2101      	movs	r1, #1
 8001d66:	4808      	ldr	r0, [pc, #32]	; (8001d88 <AFETransmitReadCmd+0x68>)
 8001d68:	f002 fa16 	bl	8004198 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f000 fc6b 	bl	8002648 <HAL_Delay>
	while (!commReceived)
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	f083 0301 	eor.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1da      	bne.n	8001d34 <AFETransmitReadCmd+0x14>
	}

}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	20000078 	.word	0x20000078

08001d90 <AFETransmitWriteCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI write command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8001da2:	e02e      	b.n	8001e02 <AFETransmitWriteCmd+0x72>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2101      	movs	r1, #1
 8001da8:	481b      	ldr	r0, [pc, #108]	; (8001e18 <AFETransmitWriteCmd+0x88>)
 8001daa:	f002 f9f5 	bl	8004198 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f04f 32ff 	mov.w	r2, #4294967295
 8001db6:	9200      	str	r2, [sp, #0]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	4817      	ldr	r0, [pc, #92]	; (8001e1c <AFETransmitWriteCmd+0x8c>)
 8001dbe:	f003 fb48 	bl	8005452 <HAL_SPI_TransmitReceive>

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	e00e      	b.n	8001dea <AFETransmitWriteCmd+0x5a>
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781a      	ldrb	r2, [r3, #0]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	440b      	add	r3, r1
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <AFETransmitWriteCmd+0x54>
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	3301      	adds	r3, #1
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbec      	blt.n	8001dcc <AFETransmitWriteCmd+0x3c>
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2101      	movs	r1, #1
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <AFETransmitWriteCmd+0x88>)
 8001df8:	f002 f9ce 	bl	8004198 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f000 fc23 	bl	8002648 <HAL_Delay>
	while (!commReceived)
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	f083 0301 	eor.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ca      	bne.n	8001da4 <AFETransmitWriteCmd+0x14>
	}
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	20000078 	.word	0x20000078

08001e20 <TransmitSafetyStatusA>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status A register
 */
void TransmitSafetyStatusA(void) {
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b098      	sub	sp, #96	; 0x60
 8001e24:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status A register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusA[1] = {0};
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x03, statusA, 1);
 8001e2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e30:	2201      	movs	r2, #1
 8001e32:	4619      	mov	r1, r3
 8001e34:	2003      	movs	r0, #3
 8001e36:	f7ff fd49 	bl	80018cc <DirectCmdRead>

	// Short Circuit Discharge
	if (statusA[0] & (1 << 7)) {
 8001e3a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001e3e:	b25b      	sxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da0d      	bge.n	8001e60 <TransmitSafetyStatusA+0x40>
		uint8_t msg[] = "SCD fault triggered! Discharging will be disabled for a moment...\n";
 8001e44:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <TransmitSafetyStatusA+0xf4>)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	4611      	mov	r1, r2
 8001e4a:	2243      	movs	r2, #67	; 0x43
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 fc01 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001e52:	1d39      	adds	r1, r7, #4
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	2242      	movs	r2, #66	; 0x42
 8001e5a:	482f      	ldr	r0, [pc, #188]	; (8001f18 <TransmitSafetyStatusA+0xf8>)
 8001e5c:	f003 fece 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Overcurrent in Discharge 1st Tier
	if (statusA[0] & (1 << 5)) {
 8001e60:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <TransmitSafetyStatusA+0x68>
		uint8_t msg[] = "OCD1 fault triggered! Discharging will be disabled for a moment...\n";
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <TransmitSafetyStatusA+0xfc>)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	4611      	mov	r1, r2
 8001e72:	2244      	movs	r2, #68	; 0x44
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fbed 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001e7a:	1d39      	adds	r1, r7, #4
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	2243      	movs	r2, #67	; 0x43
 8001e82:	4825      	ldr	r0, [pc, #148]	; (8001f18 <TransmitSafetyStatusA+0xf8>)
 8001e84:	f003 feba 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Overcurrent in Charge
	if (statusA[0] & (1 << 4)) {
 8001e88:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <TransmitSafetyStatusA+0x9c>
		uint8_t msg[] = "OCC fault triggered! Charging will be disabled for a moment...\n";
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <TransmitSafetyStatusA+0x100>)
 8001e96:	1d3c      	adds	r4, r7, #4
 8001e98:	461d      	mov	r5, r3
 8001e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001eae:	1d39      	adds	r1, r7, #4
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	223f      	movs	r2, #63	; 0x3f
 8001eb6:	4818      	ldr	r0, [pc, #96]	; (8001f18 <TransmitSafetyStatusA+0xf8>)
 8001eb8:	f003 fea0 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Cell Overvoltage
	if (statusA[0] & (1 << 3)) {
 8001ebc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00d      	beq.n	8001ee4 <TransmitSafetyStatusA+0xc4>
		uint8_t msg[] = "COV fault triggered! Charging will be disabled until voltage drops sufficiently.\n";
 8001ec8:	4a16      	ldr	r2, [pc, #88]	; (8001f24 <TransmitSafetyStatusA+0x104>)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4611      	mov	r1, r2
 8001ece:	2252      	movs	r2, #82	; 0x52
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f004 fbbf 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001ed6:	1d39      	adds	r1, r7, #4
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	2251      	movs	r2, #81	; 0x51
 8001ede:	480e      	ldr	r0, [pc, #56]	; (8001f18 <TransmitSafetyStatusA+0xf8>)
 8001ee0:	f003 fe8c 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Cell Undervoltage
	if (statusA[0] & (1 << 2)) {
 8001ee4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <TransmitSafetyStatusA+0xec>
		uint8_t msg[] = "CUV fault triggered! Discharging will be disabled until voltage rises sufficiently.\n";
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <TransmitSafetyStatusA+0x108>)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	2255      	movs	r2, #85	; 0x55
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 fbab 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001efe:	1d39      	adds	r1, r7, #4
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	2254      	movs	r2, #84	; 0x54
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <TransmitSafetyStatusA+0xf8>)
 8001f08:	f003 fe78 	bl	8005bfc <HAL_UART_Transmit>
	}
}
 8001f0c:	bf00      	nop
 8001f0e:	3760      	adds	r7, #96	; 0x60
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bdb0      	pop	{r4, r5, r7, pc}
 8001f14:	08006b08 	.word	0x08006b08
 8001f18:	200000dc 	.word	0x200000dc
 8001f1c:	08006b4c 	.word	0x08006b4c
 8001f20:	08006b90 	.word	0x08006b90
 8001f24:	08006bd0 	.word	0x08006bd0
 8001f28:	08006c24 	.word	0x08006c24

08001f2c <TransmitSafetyStatusB>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status B register
 */
void TransmitSafetyStatusB(void) {
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b098      	sub	sp, #96	; 0x60
 8001f30:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status B register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusB[1] = {0};
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x05, statusB, 1);
 8001f38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	2005      	movs	r0, #5
 8001f42:	f7ff fcc3 	bl	80018cc <DirectCmdRead>

	// FET Overtemperature
	if (statusB[0] & (1 << 7)) {
 8001f46:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da0d      	bge.n	8001f6c <TransmitSafetyStatusB+0x40>
		uint8_t msg[] = "OTF fault triggered! Discharging will be disabled for a moment...\n";
 8001f50:	4a47      	ldr	r2, [pc, #284]	; (8002070 <TransmitSafetyStatusB+0x144>)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	4611      	mov	r1, r2
 8001f56:	2243      	movs	r2, #67	; 0x43
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f004 fb7b 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001f5e:	1d39      	adds	r1, r7, #4
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	2242      	movs	r2, #66	; 0x42
 8001f66:	4843      	ldr	r0, [pc, #268]	; (8002074 <TransmitSafetyStatusB+0x148>)
 8001f68:	f003 fe48 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Internal Overtemperature
	if (statusB[0] & (1 << 6)) {
 8001f6c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00d      	beq.n	8001f94 <TransmitSafetyStatusB+0x68>
		uint8_t msg[] = "OTINT fault triggered! All AFE operations will be disabled for a moment...\n";
 8001f78:	4a3f      	ldr	r2, [pc, #252]	; (8002078 <TransmitSafetyStatusB+0x14c>)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	224c      	movs	r2, #76	; 0x4c
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 fb67 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001f86:	1d39      	adds	r1, r7, #4
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	224b      	movs	r2, #75	; 0x4b
 8001f8e:	4839      	ldr	r0, [pc, #228]	; (8002074 <TransmitSafetyStatusB+0x148>)
 8001f90:	f003 fe34 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Overtemperature in Discharge
	if (statusB[0] & (1 << 5)) {
 8001f94:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <TransmitSafetyStatusB+0x90>
		uint8_t msg[] = "OTD fault triggered! Discharging will be disabled for a moment...\n";
 8001fa0:	4a36      	ldr	r2, [pc, #216]	; (800207c <TransmitSafetyStatusB+0x150>)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	2243      	movs	r2, #67	; 0x43
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 fb53 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001fae:	1d39      	adds	r1, r7, #4
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	2242      	movs	r2, #66	; 0x42
 8001fb6:	482f      	ldr	r0, [pc, #188]	; (8002074 <TransmitSafetyStatusB+0x148>)
 8001fb8:	f003 fe20 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Overtemperature in Charge
	if (statusB[0] & (1 << 4)) {
 8001fbc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <TransmitSafetyStatusB+0xc4>
		uint8_t msg[] = "OTC fault triggered! Charging will be disabled for a moment...\n";
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <TransmitSafetyStatusB+0x154>)
 8001fca:	1d3c      	adds	r4, r7, #4
 8001fcc:	461d      	mov	r5, r3
 8001fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001fe2:	1d39      	adds	r1, r7, #4
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe8:	223f      	movs	r2, #63	; 0x3f
 8001fea:	4822      	ldr	r0, [pc, #136]	; (8002074 <TransmitSafetyStatusB+0x148>)
 8001fec:	f003 fe06 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Internal Undertemperature
	if (statusB[0] & (1 << 2)) {
 8001ff0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00d      	beq.n	8002018 <TransmitSafetyStatusB+0xec>
		uint8_t msg[] = "UTINT fault triggered! All AFE operations will be disabled for a moment...\n";
 8001ffc:	4a21      	ldr	r2, [pc, #132]	; (8002084 <TransmitSafetyStatusB+0x158>)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	4611      	mov	r1, r2
 8002002:	224c      	movs	r2, #76	; 0x4c
 8002004:	4618      	mov	r0, r3
 8002006:	f004 fb25 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800200a:	1d39      	adds	r1, r7, #4
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
 8002010:	224b      	movs	r2, #75	; 0x4b
 8002012:	4818      	ldr	r0, [pc, #96]	; (8002074 <TransmitSafetyStatusB+0x148>)
 8002014:	f003 fdf2 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Undertemperature in Discharge
	if (statusB[0] & (1 << 1)) {
 8002018:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <TransmitSafetyStatusB+0x114>
		uint8_t msg[] = "UTD fault triggered! No operational changes, but prolonged operation is not advised.\n";
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <TransmitSafetyStatusB+0x15c>)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	4611      	mov	r1, r2
 800202a:	2256      	movs	r2, #86	; 0x56
 800202c:	4618      	mov	r0, r3
 800202e:	f004 fb11 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002032:	1d39      	adds	r1, r7, #4
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
 8002038:	2255      	movs	r2, #85	; 0x55
 800203a:	480e      	ldr	r0, [pc, #56]	; (8002074 <TransmitSafetyStatusB+0x148>)
 800203c:	f003 fdde 	bl	8005bfc <HAL_UART_Transmit>
	}
	// Undertemperature in Charge
	if (statusB[0] & 0x01) {
 8002040:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <TransmitSafetyStatusB+0x13c>
		uint8_t msg[] = "UTC fault triggered! No operational changes, but prolonged operation is not advised.\n";
 800204c:	4a0f      	ldr	r2, [pc, #60]	; (800208c <TransmitSafetyStatusB+0x160>)
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	4611      	mov	r1, r2
 8002052:	2256      	movs	r2, #86	; 0x56
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fafd 	bl	8006654 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800205a:	1d39      	adds	r1, r7, #4
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	2255      	movs	r2, #85	; 0x55
 8002062:	4804      	ldr	r0, [pc, #16]	; (8002074 <TransmitSafetyStatusB+0x148>)
 8002064:	f003 fdca 	bl	8005bfc <HAL_UART_Transmit>
	}
}
 8002068:	bf00      	nop
 800206a:	3760      	adds	r7, #96	; 0x60
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}
 8002070:	08006c7c 	.word	0x08006c7c
 8002074:	200000dc 	.word	0x200000dc
 8002078:	08006cc0 	.word	0x08006cc0
 800207c:	08006d0c 	.word	0x08006d0c
 8002080:	08006d50 	.word	0x08006d50
 8002084:	08006d90 	.word	0x08006d90
 8002088:	08006ddc 	.word	0x08006ddc
 800208c:	08006e34 	.word	0x08006e34

08002090 <T4_Acquire>:

int16_t T4_Acquire(void) {
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
    float T4_volt = 0.0;
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
    float T4_res = 0.0;
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
    float T4_temp = 0.0;
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
    int16_t T4 = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	82fb      	strh	r3, [r7, #22]

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80020b0:	485f      	ldr	r0, [pc, #380]	; (8002230 <T4_Acquire+0x1a0>)
 80020b2:	f000 fe7b 	bl	8002dac <HAL_ADC_Start>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <T4_Acquire+0x30>
        // Start error
        Error_Handler();
 80020bc:	f000 f8be 	bl	800223c <Error_Handler>
    }

    // Poll for end of conversion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	485a      	ldr	r0, [pc, #360]	; (8002230 <T4_Acquire+0x1a0>)
 80020c6:	f000 ff5f 	bl	8002f88 <HAL_ADC_PollForConversion>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 808a 	bne.w	80021e6 <T4_Acquire+0x156>
        // Read the ADC conversion result (12-bit resolution)
        adcValue = HAL_ADC_GetValue(&hadc1);
 80020d2:	4857      	ldr	r0, [pc, #348]	; (8002230 <T4_Acquire+0x1a0>)
 80020d4:	f001 f830 	bl	8003138 <HAL_ADC_GetValue>
 80020d8:	6138      	str	r0, [r7, #16]

        // Convert ADC value to voltage (divide by max. ADC counts, multiply by VREF (3.3V))
        T4_volt = ((float)adcValue / 4095.0) * V_REF;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e4:	ee17 0a90 	vmov	r0, s15
 80020e8:	f7fe f9d6 	bl	8000498 <__aeabi_f2d>
 80020ec:	a342      	add	r3, pc, #264	; (adr r3, 80021f8 <T4_Acquire+0x168>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe fb53 	bl	800079c <__aeabi_ddiv>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	a340      	add	r3, pc, #256	; (adr r3, 8002200 <T4_Acquire+0x170>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fa20 	bl	8000548 <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fcf2 	bl	8000af8 <__aeabi_d2f>
 8002114:	4603      	mov	r3, r0
 8002116:	60fb      	str	r3, [r7, #12]
        // Calculate thermistor resistance based on voltage (voltage divider rearranged)
        T4_res = T4_PU_R * (T4_volt / (T4_PU_V - T4_volt));
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7fe f9bd 	bl	8000498 <__aeabi_f2d>
 800211e:	4604      	mov	r4, r0
 8002120:	460d      	mov	r5, r1
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f7fe f9b8 	bl	8000498 <__aeabi_f2d>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	a136      	add	r1, pc, #216	; (adr r1, 8002208 <T4_Acquire+0x178>)
 800212e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002132:	f7fe f851 	bl	80001d8 <__aeabi_dsub>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4620      	mov	r0, r4
 800213c:	4629      	mov	r1, r5
 800213e:	f7fe fb2d 	bl	800079c <__aeabi_ddiv>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	a331      	add	r3, pc, #196	; (adr r3, 8002210 <T4_Acquire+0x180>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe f9fa 	bl	8000548 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fccc 	bl	8000af8 <__aeabi_d2f>
 8002160:	4603      	mov	r3, r0
 8002162:	60bb      	str	r3, [r7, #8]
        // Using thermistor's beta value, calculate the temperature
        T4_temp = 1.0 / ((1.0 / 298.15) + (log(T4_res / T4_R0)) / T4_BETA);
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	f7fe f997 	bl	8000498 <__aeabi_f2d>
 800216a:	a32b      	add	r3, pc, #172	; (adr r3, 8002218 <T4_Acquire+0x188>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe fb14 	bl	800079c <__aeabi_ddiv>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	ec43 2b17 	vmov	d7, r2, r3
 800217c:	eeb0 0a47 	vmov.f32	s0, s14
 8002180:	eef0 0a67 	vmov.f32	s1, s15
 8002184:	f004 fa74 	bl	8006670 <log>
 8002188:	ec51 0b10 	vmov	r0, r1, d0
 800218c:	a324      	add	r3, pc, #144	; (adr r3, 8002220 <T4_Acquire+0x190>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe fb03 	bl	800079c <__aeabi_ddiv>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	a322      	add	r3, pc, #136	; (adr r3, 8002228 <T4_Acquire+0x198>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe f81a 	bl	80001dc <__adddf3>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	f04f 0000 	mov.w	r0, #0
 80021b0:	4920      	ldr	r1, [pc, #128]	; (8002234 <T4_Acquire+0x1a4>)
 80021b2:	f7fe faf3 	bl	800079c <__aeabi_ddiv>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fc9b 	bl	8000af8 <__aeabi_d2f>
 80021c2:	4603      	mov	r3, r0
 80021c4:	607b      	str	r3, [r7, #4]
        // Convert value in Kelvin to 16-bit integer like the other temperature measurements (units of 0.1K)
        T4 = (int16_t)(T4_temp * 10.0);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe f966 	bl	8000498 <__aeabi_f2d>
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <T4_Acquire+0x1a8>)
 80021d2:	f7fe f9b9 	bl	8000548 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fc63 	bl	8000aa8 <__aeabi_d2iz>
 80021e2:	4603      	mov	r3, r0
 80021e4:	82fb      	strh	r3, [r7, #22]
    }

    // Stop the ADC conversion
    HAL_ADC_Stop(&hadc1);
 80021e6:	4812      	ldr	r0, [pc, #72]	; (8002230 <T4_Acquire+0x1a0>)
 80021e8:	f000 fe9a 	bl	8002f20 <HAL_ADC_Stop>

    return T4;
 80021ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bdb0      	pop	{r4, r5, r7, pc}
 80021f8:	00000000 	.word	0x00000000
 80021fc:	40affe00 	.word	0x40affe00
 8002200:	d2f1a9fc 	.word	0xd2f1a9fc
 8002204:	4000624d 	.word	0x4000624d
 8002208:	66666666 	.word	0x66666666
 800220c:	400a6666 	.word	0x400a6666
 8002210:	00000000 	.word	0x00000000
 8002214:	40d16200 	.word	0x40d16200
 8002218:	00000000 	.word	0x00000000
 800221c:	40c38800 	.word	0x40c38800
 8002220:	00000000 	.word	0x00000000
 8002224:	40aad600 	.word	0x40aad600
 8002228:	dcb5db83 	.word	0xdcb5db83
 800222c:	3f6b79e1 	.word	0x3f6b79e1
 8002230:	20000164 	.word	0x20000164
 8002234:	3ff00000 	.word	0x3ff00000
 8002238:	40240000 	.word	0x40240000

0800223c <Error_Handler>:

/**
 * Error handler if a UART transmission error occurs
 * TODO: Implement this
 */
void Error_Handler(void) {
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
    // Stay in an infinite loop to allow for debugging
    while (1);
 8002240:	e7fe      	b.n	8002240 <Error_Handler+0x4>
	...

08002244 <HAL_GPIO_EXTI_Callback>:

/**
 * Callback function for handling an interrupt from a GPIO pin
 * @param GPIO_Pin The GPIO pin number where an interrupt was received
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
	uint8_t msg[] = "Interrupt! ";
 800224e:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	ca07      	ldmia	r2, {r0, r1, r2}
 8002256:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800225a:	f107 010c 	add.w	r1, r7, #12
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	220b      	movs	r2, #11
 8002264:	4807      	ldr	r0, [pc, #28]	; (8002284 <HAL_GPIO_EXTI_Callback+0x40>)
 8002266:	f003 fcc9 	bl	8005bfc <HAL_UART_Transmit>

	switch (GPIO_Pin) {
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	2b10      	cmp	r3, #16
 800226e:	d102      	bne.n	8002276 <HAL_GPIO_EXTI_Callback+0x32>
	case GPIO_PIN_4:
		logAlertsFlag = true;
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_GPIO_EXTI_Callback+0x44>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
	}
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	08006e8c 	.word	0x08006e8c
 8002284:	200000dc 	.word	0x200000dc
 8002288:	200001c9 	.word	0x200001c9

0800228c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_MspInit+0x44>)
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_MspInit+0x44>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6613      	str	r3, [r2, #96]	; 0x60
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_MspInit+0x44>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_MspInit+0x44>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_MspInit+0x44>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6593      	str	r3, [r2, #88]	; 0x58
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_MspInit+0x44>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a15      	ldr	r2, [pc, #84]	; (8002348 <HAL_ADC_MspInit+0x74>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d124      	bne.n	8002340 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_ADC_MspInit+0x78>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <HAL_ADC_MspInit+0x78>)
 80022fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_ADC_MspInit+0x78>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_ADC_MspInit+0x78>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_ADC_MspInit+0x78>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_ADC_MspInit+0x78>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002326:	2310      	movs	r3, #16
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800232a:	230b      	movs	r3, #11
 800232c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233c:	f001 fdba 	bl	8003eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	50040000 	.word	0x50040000
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_SPI_MspInit+0x7c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d128      	bne.n	80023c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_SPI_MspInit+0x80>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <HAL_SPI_MspInit+0x80>)
 8002378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800237c:	6613      	str	r3, [r2, #96]	; 0x60
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_SPI_MspInit+0x80>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_SPI_MspInit+0x80>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_SPI_MspInit+0x80>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_SPI_MspInit+0x80>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023a2:	23e0      	movs	r3, #224	; 0xe0
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023b2:	2305      	movs	r3, #5
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f001 fd78 	bl	8003eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40013000 	.word	0x40013000
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b096      	sub	sp, #88	; 0x58
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	2234      	movs	r2, #52	; 0x34
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 f8fa 	bl	80065ee <memset>
  if(huart->Instance==USART1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <HAL_UART_MspInit+0xa4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d135      	bne.n	8002470 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002404:	2301      	movs	r3, #1
 8002406:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4618      	mov	r0, r3
 8002412:	f002 fdf5 	bl	8005000 <HAL_RCCEx_PeriphCLKConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800241c:	f7ff ff0e 	bl	800223c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_UART_MspInit+0xa8>)
 8002422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002424:	4a15      	ldr	r2, [pc, #84]	; (800247c <HAL_UART_MspInit+0xa8>)
 8002426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242a:	6613      	str	r3, [r2, #96]	; 0x60
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_UART_MspInit+0xa8>)
 800242e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_UART_MspInit+0xa8>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	4a0f      	ldr	r2, [pc, #60]	; (800247c <HAL_UART_MspInit+0xa8>)
 800243e:	f043 0302 	orr.w	r3, r3, #2
 8002442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_UART_MspInit+0xa8>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002450:	23c0      	movs	r3, #192	; 0xc0
 8002452:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002460:	2307      	movs	r3, #7
 8002462:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002468:	4619      	mov	r1, r3
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <HAL_UART_MspInit+0xac>)
 800246c:	f001 fd22 	bl	8003eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3758      	adds	r7, #88	; 0x58
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40013800 	.word	0x40013800
 800247c:	40021000 	.word	0x40021000
 8002480:	48000400 	.word	0x48000400

08002484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002488:	e7fe      	b.n	8002488 <NMI_Handler+0x4>

0800248a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <HardFault_Handler+0x4>

08002490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <MemManage_Handler+0x4>

08002496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <BusFault_Handler+0x4>

0800249c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <UsageFault_Handler+0x4>

080024a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d0:	f000 f89a 	bl	8002608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024dc:	2002      	movs	r0, #2
 80024de:	f001 fe8d 	bl	80041fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <SystemInit+0x20>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <SystemInit+0x20>)
 80024f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800250c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002544 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002510:	f7ff ffea 	bl	80024e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <LoopForever+0x6>)
  ldr r1, =_edata
 8002516:	490d      	ldr	r1, [pc, #52]	; (800254c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <LoopForever+0xe>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800251c:	e002      	b.n	8002524 <LoopCopyDataInit>

0800251e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002522:	3304      	adds	r3, #4

08002524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002528:	d3f9      	bcc.n	800251e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800252c:	4c0a      	ldr	r4, [pc, #40]	; (8002558 <LoopForever+0x16>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002530:	e001      	b.n	8002536 <LoopFillZerobss>

08002532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002534:	3204      	adds	r2, #4

08002536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002538:	d3fb      	bcc.n	8002532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800253a:	f004 f867 	bl	800660c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800253e:	f7fe fd27 	bl	8000f90 <main>

08002542 <LoopForever>:

LoopForever:
    b LoopForever
 8002542:	e7fe      	b.n	8002542 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002544:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800254c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002550:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8002554:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002558:	20000308 	.word	0x20000308

0800255c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800255c:	e7fe      	b.n	800255c <ADC1_2_IRQHandler>

0800255e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f001 fc61 	bl	8003e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800256e:	200f      	movs	r0, #15
 8002570:	f000 f80e 	bl	8002590 <HAL_InitTick>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	71fb      	strb	r3, [r7, #7]
 800257e:	e001      	b.n	8002584 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002580:	f7ff fe84 	bl	800228c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002584:	79fb      	ldrb	r3, [r7, #7]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_InitTick+0x6c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d023      	beq.n	80025ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025a4:	4b16      	ldr	r3, [pc, #88]	; (8002600 <HAL_InitTick+0x70>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_InitTick+0x6c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 fc6d 	bl	8003e9a <HAL_SYSTICK_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d809      	bhi.n	80025e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f001 fc37 	bl	8003e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_InitTick+0x74>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e007      	b.n	80025f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e004      	b.n	80025f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e001      	b.n	80025f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000008 	.word	0x20000008
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004

08002608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_IncTick+0x20>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_IncTick+0x24>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4413      	add	r3, r2
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_IncTick+0x24>)
 800261a:	6013      	str	r3, [r2, #0]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000008 	.word	0x20000008
 800262c:	200001cc 	.word	0x200001cc

08002630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return uwTick;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_GetTick+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	200001cc 	.word	0x200001cc

08002648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff ffee 	bl	8002630 <HAL_GetTick>
 8002654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d005      	beq.n	800266e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_Delay+0x44>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800266e:	bf00      	nop
 8002670:	f7ff ffde 	bl	8002630 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d8f7      	bhi.n	8002670 <HAL_Delay+0x28>
  {
  }
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000008 	.word	0x20000008

08002690 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	609a      	str	r2, [r3, #8]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	609a      	str	r2, [r3, #8]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3360      	adds	r3, #96	; 0x60
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <LL_ADC_SetOffset+0x44>)
 800271a:	4013      	ands	r3, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	4313      	orrs	r3, r2
 8002728:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002730:	bf00      	nop
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	03fff000 	.word	0x03fff000

08002740 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3360      	adds	r3, #96	; 0x60
 800274e:	461a      	mov	r2, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3360      	adds	r3, #96	; 0x60
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	431a      	orrs	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	615a      	str	r2, [r3, #20]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b087      	sub	sp, #28
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3330      	adds	r3, #48	; 0x30
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	4413      	add	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	211f      	movs	r1, #31
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	f003 011f 	and.w	r1, r3, #31
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	431a      	orrs	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002846:	b480      	push	{r7}
 8002848:	b087      	sub	sp, #28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3314      	adds	r3, #20
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	0e5b      	lsrs	r3, r3, #25
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	4413      	add	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	0d1b      	lsrs	r3, r3, #20
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2107      	movs	r1, #7
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	0d1b      	lsrs	r3, r3, #20
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	431a      	orrs	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002890:	bf00      	nop
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	43db      	mvns	r3, r3
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0318 	and.w	r3, r3, #24
 80028be:	4908      	ldr	r1, [pc, #32]	; (80028e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028c0:	40d9      	lsrs	r1, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	400b      	ands	r3, r1
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	431a      	orrs	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	0007ffff 	.word	0x0007ffff

080028e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 031f 	and.w	r3, r3, #31
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800292c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6093      	str	r3, [r2, #8]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002954:	d101      	bne.n	800295a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800297c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029a4:	d101      	bne.n	80029aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029f4:	f043 0202 	orr.w	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <LL_ADC_IsEnabled+0x18>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <LL_ADC_IsEnabled+0x1a>
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d101      	bne.n	8002a46 <LL_ADC_IsDisableOngoing+0x18>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <LL_ADC_IsDisableOngoing+0x1a>
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a68:	f043 0204 	orr.w	r2, r3, #4
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a90:	f043 0210 	orr.w	r2, r3, #16
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d101      	bne.n	8002abc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ada:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ade:	f043 0220 	orr.w	r2, r3, #32
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d101      	bne.n	8002b0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e12b      	b.n	8002d8a <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fbc7 	bl	80022d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fef1 	bl	8002940 <LL_ADC_IsDeepPowerDownEnabled>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fed7 	bl	800291c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff0c 	bl	8002990 <LL_ADC_IsInternalRegulatorEnabled>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d115      	bne.n	8002baa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fef0 	bl	8002968 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b88:	4b82      	ldr	r3, [pc, #520]	; (8002d94 <HAL_ADC_Init+0x27c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	4a82      	ldr	r2, [pc, #520]	; (8002d98 <HAL_ADC_Init+0x280>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	099b      	lsrs	r3, r3, #6
 8002b96:	3301      	adds	r3, #1
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b9c:	e002      	b.n	8002ba4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f9      	bne.n	8002b9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff feee 	bl	8002990 <LL_ADC_IsInternalRegulatorEnabled>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f043 0210 	orr.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff62 	bl	8002aa4 <LL_ADC_REG_IsConversionOngoing>
 8002be0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 80c4 	bne.w	8002d78 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 80c0 	bne.w	8002d78 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c00:	f043 0202 	orr.w	r2, r3, #2
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fefb 	bl	8002a08 <LL_ADC_IsEnabled>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d110      	bne.n	8002c3a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c18:	4860      	ldr	r0, [pc, #384]	; (8002d9c <HAL_ADC_Init+0x284>)
 8002c1a:	f7ff fef5 	bl	8002a08 <LL_ADC_IsEnabled>
 8002c1e:	4604      	mov	r4, r0
 8002c20:	485f      	ldr	r0, [pc, #380]	; (8002da0 <HAL_ADC_Init+0x288>)
 8002c22:	f7ff fef1 	bl	8002a08 <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4323      	orrs	r3, r4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4619      	mov	r1, r3
 8002c34:	485b      	ldr	r0, [pc, #364]	; (8002da4 <HAL_ADC_Init+0x28c>)
 8002c36:	f7ff fd2b 	bl	8002690 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7e5b      	ldrb	r3, [r3, #25]
 8002c3e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c44:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c4a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c50:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c58:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d106      	bne.n	8002c76 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	045b      	lsls	r3, r3, #17
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_ADC_Init+0x290>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	69b9      	ldr	r1, [r7, #24]
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff21 	bl	8002af2 <LL_ADC_INJ_IsConversionOngoing>
 8002cb0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d13d      	bne.n	8002d34 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d13a      	bne.n	8002d34 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cc2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cda:	f023 0302 	bic.w	r3, r3, #2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d118      	bne.n	8002d24 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d08:	4311      	orrs	r1, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d0e:	4311      	orrs	r1, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d14:	430a      	orrs	r2, r1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	611a      	str	r2, [r3, #16]
 8002d22:	e007      	b.n	8002d34 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10c      	bne.n	8002d56 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f023 010f 	bic.w	r1, r3, #15
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	1e5a      	subs	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
 8002d54:	e007      	b.n	8002d66 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 020f 	bic.w	r2, r2, #15
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
 8002d76:	e007      	b.n	8002d88 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	f043 0210 	orr.w	r2, r3, #16
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	; 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd90      	pop	{r4, r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000000 	.word	0x20000000
 8002d98:	053e2d63 	.word	0x053e2d63
 8002d9c:	50040000 	.word	0x50040000
 8002da0:	50040100 	.word	0x50040100
 8002da4:	50040300 	.word	0x50040300
 8002da8:	fff0c007 	.word	0xfff0c007

08002dac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002db4:	4857      	ldr	r0, [pc, #348]	; (8002f14 <HAL_ADC_Start+0x168>)
 8002db6:	f7ff fd95 	bl	80028e4 <LL_ADC_GetMultimode>
 8002dba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fe6f 	bl	8002aa4 <LL_ADC_REG_IsConversionOngoing>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 809c 	bne.w	8002f06 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_Start+0x30>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e097      	b.n	8002f0c <HAL_ADC_Start+0x160>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fe6d 	bl	8003ac4 <ADC_Enable>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 8083 	bne.w	8002efc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a42      	ldr	r2, [pc, #264]	; (8002f18 <HAL_ADC_Start+0x16c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d002      	beq.n	8002e1a <HAL_ADC_Start+0x6e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	e000      	b.n	8002e1c <HAL_ADC_Start+0x70>
 8002e1a:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <HAL_ADC_Start+0x170>)
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d002      	beq.n	8002e2a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e42:	d106      	bne.n	8002e52 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	f023 0206 	bic.w	r2, r3, #6
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e50:	e002      	b.n	8002e58 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	221c      	movs	r2, #28
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <HAL_ADC_Start+0x16c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d002      	beq.n	8002e78 <HAL_ADC_Start+0xcc>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e000      	b.n	8002e7a <HAL_ADC_Start+0xce>
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_ADC_Start+0x170>)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d008      	beq.n	8002e94 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d002      	beq.n	8002e94 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	d114      	bne.n	8002ebe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fdcc 	bl	8002a54 <LL_ADC_REG_StartConversion>
 8002ebc:	e025      	b.n	8002f0a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <HAL_ADC_Start+0x16c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d002      	beq.n	8002eda <HAL_ADC_Start+0x12e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	e000      	b.n	8002edc <HAL_ADC_Start+0x130>
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_ADC_Start+0x170>)
 8002edc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00f      	beq.n	8002f0a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ef2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
 8002efa:	e006      	b.n	8002f0a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f04:	e001      	b.n	8002f0a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	50040300 	.word	0x50040300
 8002f18:	50040100 	.word	0x50040100
 8002f1c:	50040000 	.word	0x50040000

08002f20 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_ADC_Stop+0x16>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e023      	b.n	8002f7e <HAL_ADC_Stop+0x5e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f3e:	2103      	movs	r1, #3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fd03 	bl	800394c <ADC_ConversionStop>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fe3d 	bl	8003bd0 <ADC_Disable>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f92:	4866      	ldr	r0, [pc, #408]	; (800312c <HAL_ADC_PollForConversion+0x1a4>)
 8002f94:	f7ff fca6 	bl	80028e4 <LL_ADC_GetMultimode>
 8002f98:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d102      	bne.n	8002fa8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e02a      	b.n	8002ffe <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d002      	beq.n	8002fba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	d111      	bne.n	8002fde <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0a4      	b.n	8003122 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002fd8:	2304      	movs	r3, #4
 8002fda:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002fdc:	e00f      	b.n	8002ffe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fde:	4853      	ldr	r0, [pc, #332]	; (800312c <HAL_ADC_PollForConversion+0x1a4>)
 8002fe0:	f7ff fc8e 	bl	8002900 <LL_ADC_GetMultiDMATransfer>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f043 0220 	orr.w	r2, r3, #32
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e093      	b.n	8003122 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ffe:	f7ff fb17 	bl	8002630 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003004:	e021      	b.n	800304a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d01d      	beq.n	800304a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800300e:	f7ff fb0f 	bl	8002630 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <HAL_ADC_PollForConversion+0x9c>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d112      	bne.n	800304a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f043 0204 	orr.w	r2, r3, #4
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e06b      	b.n	8003122 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0d6      	beq.n	8003006 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fbad 	bl	80027c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01c      	beq.n	80030ae <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7e5b      	ldrb	r3, [r3, #25]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d118      	bne.n	80030ae <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b08      	cmp	r3, #8
 8003088:	d111      	bne.n	80030ae <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_ADC_PollForConversion+0x1a8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d002      	beq.n	80030be <HAL_ADC_PollForConversion+0x136>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	e000      	b.n	80030c0 <HAL_ADC_PollForConversion+0x138>
 80030be:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_ADC_PollForConversion+0x1ac>)
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d008      	beq.n	80030da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d002      	beq.n	80030da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b09      	cmp	r3, #9
 80030d8:	d104      	bne.n	80030e4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e00c      	b.n	80030fe <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a11      	ldr	r2, [pc, #68]	; (8003130 <HAL_ADC_PollForConversion+0x1a8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d002      	beq.n	80030f4 <HAL_ADC_PollForConversion+0x16c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	e000      	b.n	80030f6 <HAL_ADC_PollForConversion+0x16e>
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <HAL_ADC_PollForConversion+0x1ac>)
 80030f6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d104      	bne.n	800310e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2208      	movs	r2, #8
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e008      	b.n	8003120 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d103      	bne.n	8003120 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	220c      	movs	r2, #12
 800311e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	50040300 	.word	0x50040300
 8003130:	50040100 	.word	0x50040100
 8003134:	50040000 	.word	0x50040000

08003138 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0b6      	sub	sp, #216	; 0xd8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x22>
 8003172:	2302      	movs	r3, #2
 8003174:	e3d5      	b.n	8003922 <HAL_ADC_ConfigChannel+0x7ce>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fc8e 	bl	8002aa4 <LL_ADC_REG_IsConversionOngoing>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 83ba 	bne.w	8003904 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d824      	bhi.n	80031ea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	3b02      	subs	r3, #2
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d81b      	bhi.n	80031e2 <HAL_ADC_ConfigChannel+0x8e>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <HAL_ADC_ConfigChannel+0x5c>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031c1 	.word	0x080031c1
 80031b4:	080031c9 	.word	0x080031c9
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031d9 	.word	0x080031d9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80031c0:	230c      	movs	r3, #12
 80031c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80031c6:	e010      	b.n	80031ea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80031c8:	2312      	movs	r3, #18
 80031ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80031ce:	e00c      	b.n	80031ea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80031d0:	2318      	movs	r3, #24
 80031d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80031d6:	e008      	b.n	80031ea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80031d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80031e0:	e003      	b.n	80031ea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80031e2:	2306      	movs	r3, #6
 80031e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80031e8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80031f8:	f7ff faf9 	bl	80027ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fc4f 	bl	8002aa4 <LL_ADC_REG_IsConversionOngoing>
 8003206:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fc6f 	bl	8002af2 <LL_ADC_INJ_IsConversionOngoing>
 8003214:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003218:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800321c:	2b00      	cmp	r3, #0
 800321e:	f040 81bf 	bne.w	80035a0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 81ba 	bne.w	80035a0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003234:	d10f      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2200      	movs	r2, #0
 8003240:	4619      	mov	r1, r3
 8003242:	f7ff fb00 	bl	8002846 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff faa7 	bl	80027a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003254:	e00e      	b.n	8003274 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	461a      	mov	r2, r3
 8003264:	f7ff faef 	bl	8002846 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fa97 	bl	80027a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	08db      	lsrs	r3, r3, #3
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d00a      	beq.n	80032ac <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6919      	ldr	r1, [r3, #16]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a6:	f7ff fa27 	bl	80026f8 <LL_ADC_SetOffset>
 80032aa:	e179      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2100      	movs	r1, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fa44 	bl	8002740 <LL_ADC_GetOffsetChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x184>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fa39 	bl	8002740 <LL_ADC_GetOffsetChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	f003 021f 	and.w	r2, r3, #31
 80032d6:	e01e      	b.n	8003316 <HAL_ADC_ConfigChannel+0x1c2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fa2e 	bl	8002740 <LL_ADC_GetOffsetChannel>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e004      	b.n	8003314 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800330a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_ADC_ConfigChannel+0x1da>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	e018      	b.n	8003360 <HAL_ADC_ConfigChannel+0x20c>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800334a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003352:	2320      	movs	r3, #32
 8003354:	e004      	b.n	8003360 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003356:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003360:	429a      	cmp	r2, r3
 8003362:	d106      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f9fd 	bl	800276c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f9e1 	bl	8002740 <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <HAL_ADC_ConfigChannel+0x24a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff f9d6 	bl	8002740 <LL_ADC_GetOffsetChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	0e9b      	lsrs	r3, r3, #26
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	e01e      	b.n	80033dc <HAL_ADC_ConfigChannel+0x288>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2101      	movs	r1, #1
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f9cb 	bl	8002740 <LL_ADC_GetOffsetChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80033bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80033c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e004      	b.n	80033da <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80033d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x2a0>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0e9b      	lsrs	r3, r3, #26
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	e018      	b.n	8003426 <HAL_ADC_ConfigChannel+0x2d2>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800340c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e004      	b.n	8003426 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800341c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003426:	429a      	cmp	r2, r3
 8003428:	d106      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f99a 	bl	800276c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2102      	movs	r1, #2
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f97e 	bl	8002740 <LL_ADC_GetOffsetChannel>
 8003444:	4603      	mov	r3, r0
 8003446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x310>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2102      	movs	r1, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff f973 	bl	8002740 <LL_ADC_GetOffsetChannel>
 800345a:	4603      	mov	r3, r0
 800345c:	0e9b      	lsrs	r3, r3, #26
 800345e:	f003 021f 	and.w	r2, r3, #31
 8003462:	e01e      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x34e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff f968 	bl	8002740 <LL_ADC_GetOffsetChannel>
 8003470:	4603      	mov	r3, r0
 8003472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800348a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e004      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x366>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0e9b      	lsrs	r3, r3, #26
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	e014      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x390>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80034c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80034ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80034d6:	2320      	movs	r3, #32
 80034d8:	e004      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80034da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d106      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2102      	movs	r1, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff f93b 	bl	800276c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2103      	movs	r1, #3
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff f91f 	bl	8002740 <LL_ADC_GetOffsetChannel>
 8003502:	4603      	mov	r3, r0
 8003504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x3ce>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2103      	movs	r1, #3
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff f914 	bl	8002740 <LL_ADC_GetOffsetChannel>
 8003518:	4603      	mov	r3, r0
 800351a:	0e9b      	lsrs	r3, r3, #26
 800351c:	f003 021f 	and.w	r2, r3, #31
 8003520:	e017      	b.n	8003552 <HAL_ADC_ConfigChannel+0x3fe>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2103      	movs	r1, #3
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f909 	bl	8002740 <LL_ADC_GetOffsetChannel>
 800352e:	4603      	mov	r3, r0
 8003530:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800353a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800353e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e003      	b.n	8003550 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355a:	2b00      	cmp	r3, #0
 800355c:	d105      	bne.n	800356a <HAL_ADC_ConfigChannel+0x416>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	e011      	b.n	800358e <HAL_ADC_ConfigChannel+0x43a>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800357a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800357c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003582:	2320      	movs	r3, #32
 8003584:	e003      	b.n	800358e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800358e:	429a      	cmp	r2, r3
 8003590:	d106      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	2103      	movs	r1, #3
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f8e6 	bl	800276c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fa2f 	bl	8002a08 <LL_ADC_IsEnabled>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 813f 	bne.w	8003830 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	461a      	mov	r2, r3
 80035c0:	f7ff f96c 	bl	800289c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a8e      	ldr	r2, [pc, #568]	; (8003804 <HAL_ADC_ConfigChannel+0x6b0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	f040 8130 	bne.w	8003830 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x4a4>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0e9b      	lsrs	r3, r3, #26
 80035e6:	3301      	adds	r3, #1
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2b09      	cmp	r3, #9
 80035ee:	bf94      	ite	ls
 80035f0:	2301      	movls	r3, #1
 80035f2:	2300      	movhi	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e019      	b.n	800362c <HAL_ADC_ConfigChannel+0x4d8>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003608:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800360a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003610:	2320      	movs	r3, #32
 8003612:	e003      	b.n	800361c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2b09      	cmp	r3, #9
 8003624:	bf94      	ite	ls
 8003626:	2301      	movls	r3, #1
 8003628:	2300      	movhi	r3, #0
 800362a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362c:	2b00      	cmp	r3, #0
 800362e:	d079      	beq.n	8003724 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_ADC_ConfigChannel+0x4f8>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0e9b      	lsrs	r3, r3, #26
 8003642:	3301      	adds	r3, #1
 8003644:	069b      	lsls	r3, r3, #26
 8003646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800364a:	e015      	b.n	8003678 <HAL_ADC_ConfigChannel+0x524>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800365a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e003      	b.n	8003670 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3301      	adds	r3, #1
 8003672:	069b      	lsls	r3, r3, #26
 8003674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x544>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	e017      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x574>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e003      	b.n	80036bc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80036b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	ea42 0103 	orr.w	r1, r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x59a>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	051b      	lsls	r3, r3, #20
 80036ec:	e018      	b.n	8003720 <HAL_ADC_ConfigChannel+0x5cc>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003706:	2320      	movs	r3, #32
 8003708:	e003      	b.n	8003712 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003720:	430b      	orrs	r3, r1
 8003722:	e080      	b.n	8003826 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x5ec>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0e9b      	lsrs	r3, r3, #26
 8003736:	3301      	adds	r3, #1
 8003738:	069b      	lsls	r3, r3, #26
 800373a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373e:	e015      	b.n	800376c <HAL_ADC_ConfigChannel+0x618>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003758:	2320      	movs	r3, #32
 800375a:	e003      	b.n	8003764 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	3301      	adds	r3, #1
 8003766:	069b      	lsls	r3, r3, #26
 8003768:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_ADC_ConfigChannel+0x638>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	3301      	adds	r3, #1
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	2101      	movs	r1, #1
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	e017      	b.n	80037bc <HAL_ADC_ConfigChannel+0x668>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	61bb      	str	r3, [r7, #24]
  return result;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	2101      	movs	r1, #1
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	ea42 0103 	orr.w	r1, r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10d      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x694>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	3301      	adds	r3, #1
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	3b1e      	subs	r3, #30
 80037e0:	051b      	lsls	r3, r3, #20
 80037e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e6:	e01d      	b.n	8003824 <HAL_ADC_ConfigChannel+0x6d0>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	60fb      	str	r3, [r7, #12]
  return result;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003800:	2320      	movs	r3, #32
 8003802:	e005      	b.n	8003810 <HAL_ADC_ConfigChannel+0x6bc>
 8003804:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3301      	adds	r3, #1
 8003812:	f003 021f 	and.w	r2, r3, #31
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	3b1e      	subs	r3, #30
 800381e:	051b      	lsls	r3, r3, #20
 8003820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003824:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382a:	4619      	mov	r1, r3
 800382c:	f7ff f80b 	bl	8002846 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b3d      	ldr	r3, [pc, #244]	; (800392c <HAL_ADC_ConfigChannel+0x7d8>)
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d06c      	beq.n	8003916 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800383c:	483c      	ldr	r0, [pc, #240]	; (8003930 <HAL_ADC_ConfigChannel+0x7dc>)
 800383e:	f7fe ff4d 	bl	80026dc <LL_ADC_GetCommonPathInternalCh>
 8003842:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a3a      	ldr	r2, [pc, #232]	; (8003934 <HAL_ADC_ConfigChannel+0x7e0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d127      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d121      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a35      	ldr	r2, [pc, #212]	; (8003938 <HAL_ADC_ConfigChannel+0x7e4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d157      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800386a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800386e:	4619      	mov	r1, r3
 8003870:	482f      	ldr	r0, [pc, #188]	; (8003930 <HAL_ADC_ConfigChannel+0x7dc>)
 8003872:	f7fe ff20 	bl	80026b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003876:	4b31      	ldr	r3, [pc, #196]	; (800393c <HAL_ADC_ConfigChannel+0x7e8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	4a30      	ldr	r2, [pc, #192]	; (8003940 <HAL_ADC_ConfigChannel+0x7ec>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003890:	e002      	b.n	8003898 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	3b01      	subs	r3, #1
 8003896:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f9      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800389e:	e03a      	b.n	8003916 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a27      	ldr	r2, [pc, #156]	; (8003944 <HAL_ADC_ConfigChannel+0x7f0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d113      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <HAL_ADC_ConfigChannel+0x7e4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d12a      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c8:	4619      	mov	r1, r3
 80038ca:	4819      	ldr	r0, [pc, #100]	; (8003930 <HAL_ADC_ConfigChannel+0x7dc>)
 80038cc:	f7fe fef3 	bl	80026b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038d0:	e021      	b.n	8003916 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <HAL_ADC_ConfigChannel+0x7f4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d11c      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d116      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a12      	ldr	r2, [pc, #72]	; (8003938 <HAL_ADC_ConfigChannel+0x7e4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d111      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038fa:	4619      	mov	r1, r3
 80038fc:	480c      	ldr	r0, [pc, #48]	; (8003930 <HAL_ADC_ConfigChannel+0x7dc>)
 80038fe:	f7fe feda 	bl	80026b6 <LL_ADC_SetCommonPathInternalCh>
 8003902:	e008      	b.n	8003916 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800391e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003922:	4618      	mov	r0, r3
 8003924:	37d8      	adds	r7, #216	; 0xd8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	80080000 	.word	0x80080000
 8003930:	50040300 	.word	0x50040300
 8003934:	c7520000 	.word	0xc7520000
 8003938:	50040000 	.word	0x50040000
 800393c:	20000000 	.word	0x20000000
 8003940:	053e2d63 	.word	0x053e2d63
 8003944:	cb840000 	.word	0xcb840000
 8003948:	80000001 	.word	0x80000001

0800394c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff f89e 	bl	8002aa4 <LL_ADC_REG_IsConversionOngoing>
 8003968:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff f8bf 	bl	8002af2 <LL_ADC_INJ_IsConversionOngoing>
 8003974:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8098 	beq.w	8003ab4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d02a      	beq.n	80039e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	7e5b      	ldrb	r3, [r3, #25]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d126      	bne.n	80039e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	7e1b      	ldrb	r3, [r3, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d122      	bne.n	80039e8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039a6:	e014      	b.n	80039d2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4a45      	ldr	r2, [pc, #276]	; (8003ac0 <ADC_ConversionStop+0x174>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d90d      	bls.n	80039cc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f043 0210 	orr.w	r2, r3, #16
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e074      	b.n	8003ab6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d1e3      	bne.n	80039a8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d014      	beq.n	8003a18 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff f856 	bl	8002aa4 <LL_ADC_REG_IsConversionOngoing>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f813 	bl	8002a2e <LL_ADC_IsDisableOngoing>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d104      	bne.n	8003a18 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff f832 	bl	8002a7c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d014      	beq.n	8003a48 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff f865 	bl	8002af2 <LL_ADC_INJ_IsConversionOngoing>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fffb 	bl	8002a2e <LL_ADC_IsDisableOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f841 	bl	8002aca <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d005      	beq.n	8003a5a <ADC_ConversionStop+0x10e>
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d105      	bne.n	8003a60 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a54:	230c      	movs	r3, #12
 8003a56:	617b      	str	r3, [r7, #20]
        break;
 8003a58:	e005      	b.n	8003a66 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	617b      	str	r3, [r7, #20]
        break;
 8003a5e:	e002      	b.n	8003a66 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003a60:	2304      	movs	r3, #4
 8003a62:	617b      	str	r3, [r7, #20]
        break;
 8003a64:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003a66:	f7fe fde3 	bl	8002630 <HAL_GetTick>
 8003a6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a6c:	e01b      	b.n	8003aa6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a6e:	f7fe fddf 	bl	8002630 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	d914      	bls.n	8003aa6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00d      	beq.n	8003aa6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	f043 0210 	orr.w	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e007      	b.n	8003ab6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1dc      	bne.n	8003a6e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	a33fffff 	.word	0xa33fffff

08003ac4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe ff97 	bl	8002a08 <LL_ADC_IsEnabled>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d169      	bne.n	8003bb4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	4b36      	ldr	r3, [pc, #216]	; (8003bc0 <ADC_Enable+0xfc>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	f043 0210 	orr.w	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	f043 0201 	orr.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e055      	b.n	8003bb6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe ff52 	bl	80029b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b14:	482b      	ldr	r0, [pc, #172]	; (8003bc4 <ADC_Enable+0x100>)
 8003b16:	f7fe fde1 	bl	80026dc <LL_ADC_GetCommonPathInternalCh>
 8003b1a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <ADC_Enable+0x104>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <ADC_Enable+0x108>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	4613      	mov	r3, r2
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b3e:	e002      	b.n	8003b46 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f9      	bne.n	8003b40 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b4c:	f7fe fd70 	bl	8002630 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b52:	e028      	b.n	8003ba6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe ff55 	bl	8002a08 <LL_ADC_IsEnabled>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d104      	bne.n	8003b6e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe ff25 	bl	80029b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b6e:	f7fe fd5f 	bl	8002630 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d914      	bls.n	8003ba6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d00d      	beq.n	8003ba6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	f043 0210 	orr.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e007      	b.n	8003bb6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d1cf      	bne.n	8003b54 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	8000003f 	.word	0x8000003f
 8003bc4:	50040300 	.word	0x50040300
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	053e2d63 	.word	0x053e2d63

08003bd0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe ff26 	bl	8002a2e <LL_ADC_IsDisableOngoing>
 8003be2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe ff0d 	bl	8002a08 <LL_ADC_IsEnabled>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d047      	beq.n	8003c84 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d144      	bne.n	8003c84 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030d 	and.w	r3, r3, #13
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d10c      	bne.n	8003c22 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe fee7 	bl	80029e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2203      	movs	r2, #3
 8003c18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c1a:	f7fe fd09 	bl	8002630 <HAL_GetTick>
 8003c1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c20:	e029      	b.n	8003c76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	f043 0210 	orr.w	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e023      	b.n	8003c86 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c3e:	f7fe fcf7 	bl	8002630 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d914      	bls.n	8003c76 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f043 0210 	orr.w	r2, r3, #16
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e007      	b.n	8003c86 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1dc      	bne.n	8003c3e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <__NVIC_SetPriorityGrouping>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cac:	4013      	ands	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc2:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	60d3      	str	r3, [r2, #12]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <__NVIC_GetPriorityGrouping>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cdc:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f003 0307 	and.w	r3, r3, #7
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <__NVIC_EnableIRQ>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	db0b      	blt.n	8003d1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	f003 021f 	and.w	r2, r3, #31
 8003d0c:	4907      	ldr	r1, [pc, #28]	; (8003d2c <__NVIC_EnableIRQ+0x38>)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2001      	movs	r0, #1
 8003d16:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	e000e100 	.word	0xe000e100

08003d30 <__NVIC_SetPriority>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	6039      	str	r1, [r7, #0]
 8003d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	db0a      	blt.n	8003d5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	490c      	ldr	r1, [pc, #48]	; (8003d7c <__NVIC_SetPriority+0x4c>)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	0112      	lsls	r2, r2, #4
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	440b      	add	r3, r1
 8003d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d58:	e00a      	b.n	8003d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	4908      	ldr	r1, [pc, #32]	; (8003d80 <__NVIC_SetPriority+0x50>)
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	3b04      	subs	r3, #4
 8003d68:	0112      	lsls	r2, r2, #4
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	761a      	strb	r2, [r3, #24]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000e100 	.word	0xe000e100
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b089      	sub	sp, #36	; 0x24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f1c3 0307 	rsb	r3, r3, #7
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	bf28      	it	cs
 8003da2:	2304      	movcs	r3, #4
 8003da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d902      	bls.n	8003db4 <NVIC_EncodePriority+0x30>
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3b03      	subs	r3, #3
 8003db2:	e000      	b.n	8003db6 <NVIC_EncodePriority+0x32>
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	43d9      	mvns	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	4313      	orrs	r3, r2
         );
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3724      	adds	r7, #36	; 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dfc:	d301      	bcc.n	8003e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00f      	b.n	8003e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <SysTick_Config+0x40>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e0a:	210f      	movs	r1, #15
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	f7ff ff8e 	bl	8003d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <SysTick_Config+0x40>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <SysTick_Config+0x40>)
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	e000e010 	.word	0xe000e010

08003e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff29 	bl	8003c90 <__NVIC_SetPriorityGrouping>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e58:	f7ff ff3e 	bl	8003cd8 <__NVIC_GetPriorityGrouping>
 8003e5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7ff ff8e 	bl	8003d84 <NVIC_EncodePriority>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff5d 	bl	8003d30 <__NVIC_SetPriority>
}
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff ff31 	bl	8003cf4 <__NVIC_EnableIRQ>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff ffa2 	bl	8003dec <SysTick_Config>
 8003ea8:	4603      	mov	r3, r0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec2:	e14e      	b.n	8004162 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8140 	beq.w	800415c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d005      	beq.n	8003ef4 <HAL_GPIO_Init+0x40>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d130      	bne.n	8003f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	f003 0201 	and.w	r2, r3, #1
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d017      	beq.n	8003f92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d123      	bne.n	8003fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	08da      	lsrs	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3208      	adds	r2, #8
 8003fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	220f      	movs	r2, #15
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	08da      	lsrs	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3208      	adds	r2, #8
 8003fe0:	6939      	ldr	r1, [r7, #16]
 8003fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0203 	and.w	r2, r3, #3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 809a 	beq.w	800415c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004028:	4b55      	ldr	r3, [pc, #340]	; (8004180 <HAL_GPIO_Init+0x2cc>)
 800402a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402c:	4a54      	ldr	r2, [pc, #336]	; (8004180 <HAL_GPIO_Init+0x2cc>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6613      	str	r3, [r2, #96]	; 0x60
 8004034:	4b52      	ldr	r3, [pc, #328]	; (8004180 <HAL_GPIO_Init+0x2cc>)
 8004036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004040:	4a50      	ldr	r2, [pc, #320]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	3302      	adds	r3, #2
 8004048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	220f      	movs	r2, #15
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800406a:	d013      	beq.n	8004094 <HAL_GPIO_Init+0x1e0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a46      	ldr	r2, [pc, #280]	; (8004188 <HAL_GPIO_Init+0x2d4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00d      	beq.n	8004090 <HAL_GPIO_Init+0x1dc>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a45      	ldr	r2, [pc, #276]	; (800418c <HAL_GPIO_Init+0x2d8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <HAL_GPIO_Init+0x1d8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a44      	ldr	r2, [pc, #272]	; (8004190 <HAL_GPIO_Init+0x2dc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_GPIO_Init+0x1d4>
 8004084:	2303      	movs	r3, #3
 8004086:	e006      	b.n	8004096 <HAL_GPIO_Init+0x1e2>
 8004088:	2307      	movs	r3, #7
 800408a:	e004      	b.n	8004096 <HAL_GPIO_Init+0x1e2>
 800408c:	2302      	movs	r3, #2
 800408e:	e002      	b.n	8004096 <HAL_GPIO_Init+0x1e2>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_GPIO_Init+0x1e2>
 8004094:	2300      	movs	r3, #0
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	f002 0203 	and.w	r2, r2, #3
 800409c:	0092      	lsls	r2, r2, #2
 800409e:	4093      	lsls	r3, r2
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040a6:	4937      	ldr	r1, [pc, #220]	; (8004184 <HAL_GPIO_Init+0x2d0>)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	3302      	adds	r3, #2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040b4:	4b37      	ldr	r3, [pc, #220]	; (8004194 <HAL_GPIO_Init+0x2e0>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	43db      	mvns	r3, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040d8:	4a2e      	ldr	r2, [pc, #184]	; (8004194 <HAL_GPIO_Init+0x2e0>)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040de:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_GPIO_Init+0x2e0>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004102:	4a24      	ldr	r2, [pc, #144]	; (8004194 <HAL_GPIO_Init+0x2e0>)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004108:	4b22      	ldr	r3, [pc, #136]	; (8004194 <HAL_GPIO_Init+0x2e0>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	43db      	mvns	r3, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800412c:	4a19      	ldr	r2, [pc, #100]	; (8004194 <HAL_GPIO_Init+0x2e0>)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <HAL_GPIO_Init+0x2e0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43db      	mvns	r3, r3
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004156:	4a0f      	ldr	r2, [pc, #60]	; (8004194 <HAL_GPIO_Init+0x2e0>)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	3301      	adds	r3, #1
 8004160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f aea9 	bne.w	8003ec4 <HAL_GPIO_Init+0x10>
  }
}
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40021000 	.word	0x40021000
 8004184:	40010000 	.word	0x40010000
 8004188:	48000400 	.word	0x48000400
 800418c:	48000800 	.word	0x48000800
 8004190:	48000c00 	.word	0x48000c00
 8004194:	40010400 	.word	0x40010400

08004198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
 80041a4:	4613      	mov	r3, r2
 80041a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041a8:	787b      	ldrb	r3, [r7, #1]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041b4:	e002      	b.n	80041bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041da:	887a      	ldrh	r2, [r7, #2]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4013      	ands	r3, r2
 80041e0:	041a      	lsls	r2, r3, #16
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	43d9      	mvns	r1, r3
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	400b      	ands	r3, r1
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004212:	4a05      	ldr	r2, [pc, #20]	; (8004228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe f812 	bl	8002244 <HAL_GPIO_EXTI_Callback>
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40010400 	.word	0x40010400

0800422c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <HAL_PWREx_GetVoltageRange+0x18>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40007000 	.word	0x40007000

08004248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004256:	d130      	bne.n	80042ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004258:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004264:	d038      	beq.n	80042d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800426e:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004274:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004276:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2232      	movs	r2, #50	; 0x32
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	0c9b      	lsrs	r3, r3, #18
 8004288:	3301      	adds	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800428c:	e002      	b.n	8004294 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3b01      	subs	r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a0:	d102      	bne.n	80042a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f2      	bne.n	800428e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b4:	d110      	bne.n	80042d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e00f      	b.n	80042da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c6:	d007      	beq.n	80042d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042d0:	4a05      	ldr	r2, [pc, #20]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40007000 	.word	0x40007000
 80042ec:	20000000 	.word	0x20000000
 80042f0:	431bde83 	.word	0x431bde83

080042f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f000 bc4f 	b.w	8004ba6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004308:	4b97      	ldr	r3, [pc, #604]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004312:	4b95      	ldr	r3, [pc, #596]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80e6 	beq.w	80044f6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <HAL_RCC_OscConfig+0x4c>
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2b0c      	cmp	r3, #12
 8004334:	f040 808d 	bne.w	8004452 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b01      	cmp	r3, #1
 800433c:	f040 8089 	bne.w	8004452 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004340:	4b89      	ldr	r3, [pc, #548]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d006      	beq.n	800435a <HAL_RCC_OscConfig+0x66>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f000 bc26 	b.w	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435e:	4b82      	ldr	r3, [pc, #520]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <HAL_RCC_OscConfig+0x80>
 800436a:	4b7f      	ldr	r3, [pc, #508]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004372:	e005      	b.n	8004380 <HAL_RCC_OscConfig+0x8c>
 8004374:	4b7c      	ldr	r3, [pc, #496]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004380:	4293      	cmp	r3, r2
 8004382:	d224      	bcs.n	80043ce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fdd9 	bl	8004f40 <RCC_SetFlashLatencyFromMSIRange>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f000 bc06 	b.w	8004ba6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800439a:	4b73      	ldr	r3, [pc, #460]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a72      	ldr	r2, [pc, #456]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043a0:	f043 0308 	orr.w	r3, r3, #8
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b70      	ldr	r3, [pc, #448]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	496d      	ldr	r1, [pc, #436]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b8:	4b6b      	ldr	r3, [pc, #428]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	4968      	ldr	r1, [pc, #416]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
 80043cc:	e025      	b.n	800441a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ce:	4b66      	ldr	r3, [pc, #408]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a65      	ldr	r2, [pc, #404]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043d4:	f043 0308 	orr.w	r3, r3, #8
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b63      	ldr	r3, [pc, #396]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	4960      	ldr	r1, [pc, #384]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ec:	4b5e      	ldr	r3, [pc, #376]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	495b      	ldr	r1, [pc, #364]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fd98 	bl	8004f40 <RCC_SetFlashLatencyFromMSIRange>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e3c5      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800441a:	f000 fccd 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 800441e:	4602      	mov	r2, r0
 8004420:	4b51      	ldr	r3, [pc, #324]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	4950      	ldr	r1, [pc, #320]	; (800456c <HAL_RCC_OscConfig+0x278>)
 800442c:	5ccb      	ldrb	r3, [r1, r3]
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	4a4e      	ldr	r2, [pc, #312]	; (8004570 <HAL_RCC_OscConfig+0x27c>)
 8004438:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800443a:	4b4e      	ldr	r3, [pc, #312]	; (8004574 <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe f8a6 	bl	8002590 <HAL_InitTick>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d052      	beq.n	80044f4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	e3a9      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d032      	beq.n	80044c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800445a:	4b43      	ldr	r3, [pc, #268]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a42      	ldr	r2, [pc, #264]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004466:	f7fe f8e3 	bl	8002630 <HAL_GetTick>
 800446a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800446e:	f7fe f8df 	bl	8002630 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e392      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004480:	4b39      	ldr	r3, [pc, #228]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800448c:	4b36      	ldr	r3, [pc, #216]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a35      	ldr	r2, [pc, #212]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004492:	f043 0308 	orr.w	r3, r3, #8
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4b33      	ldr	r3, [pc, #204]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	4930      	ldr	r1, [pc, #192]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044aa:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	492b      	ldr	r1, [pc, #172]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
 80044be:	e01a      	b.n	80044f6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044c0:	4b29      	ldr	r3, [pc, #164]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a28      	ldr	r2, [pc, #160]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044cc:	f7fe f8b0 	bl	8002630 <HAL_GetTick>
 80044d0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044d4:	f7fe f8ac 	bl	8002630 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e35f      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x1e0>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d073      	beq.n	80045ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d005      	beq.n	8004514 <HAL_RCC_OscConfig+0x220>
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d10e      	bne.n	800452c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d10b      	bne.n	800452c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	4b14      	ldr	r3, [pc, #80]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d063      	beq.n	80045e8 <HAL_RCC_OscConfig+0x2f4>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d15f      	bne.n	80045e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e33c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004534:	d106      	bne.n	8004544 <HAL_RCC_OscConfig+0x250>
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a0b      	ldr	r2, [pc, #44]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e025      	b.n	8004590 <HAL_RCC_OscConfig+0x29c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800454c:	d114      	bne.n	8004578 <HAL_RCC_OscConfig+0x284>
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a05      	ldr	r2, [pc, #20]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b03      	ldr	r3, [pc, #12]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a02      	ldr	r2, [pc, #8]	; (8004568 <HAL_RCC_OscConfig+0x274>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e013      	b.n	8004590 <HAL_RCC_OscConfig+0x29c>
 8004568:	40021000 	.word	0x40021000
 800456c:	08006e98 	.word	0x08006e98
 8004570:	20000000 	.word	0x20000000
 8004574:	20000004 	.word	0x20000004
 8004578:	4b8f      	ldr	r3, [pc, #572]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a8e      	ldr	r2, [pc, #568]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b8c      	ldr	r3, [pc, #560]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a8b      	ldr	r2, [pc, #556]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d013      	beq.n	80045c0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe f84a 	bl	8002630 <HAL_GetTick>
 800459c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fe f846 	bl	8002630 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e2f9      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b2:	4b81      	ldr	r3, [pc, #516]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x2ac>
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fe f836 	bl	8002630 <HAL_GetTick>
 80045c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c8:	f7fe f832 	bl	8002630 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	; 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e2e5      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045da:	4b77      	ldr	r3, [pc, #476]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x2d4>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d060      	beq.n	80046b8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_OscConfig+0x314>
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d119      	bne.n	8004636 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d116      	bne.n	8004636 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004608:	4b6b      	ldr	r3, [pc, #428]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_OscConfig+0x32c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e2c2      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004620:	4b65      	ldr	r3, [pc, #404]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	4962      	ldr	r1, [pc, #392]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004634:	e040      	b.n	80046b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d023      	beq.n	8004686 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463e:	4b5e      	ldr	r3, [pc, #376]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a5d      	ldr	r2, [pc, #372]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fd fff1 	bl	8002630 <HAL_GetTick>
 800464e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004652:	f7fd ffed 	bl	8002630 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e2a0      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004664:	4b54      	ldr	r3, [pc, #336]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b51      	ldr	r3, [pc, #324]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	494e      	ldr	r1, [pc, #312]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
 8004684:	e018      	b.n	80046b8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b4c      	ldr	r3, [pc, #304]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a4b      	ldr	r2, [pc, #300]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7fd ffcd 	bl	8002630 <HAL_GetTick>
 8004696:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469a:	f7fd ffc9 	bl	8002630 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e27c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ac:	4b42      	ldr	r3, [pc, #264]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8082 	beq.w	80047ca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d05f      	beq.n	800478e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80046ce:	4b3a      	ldr	r3, [pc, #232]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 80046d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d037      	beq.n	8004754 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e254      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01b      	beq.n	800473e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004706:	4b2c      	ldr	r3, [pc, #176]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004716:	f7fd ff8b 	bl	8002630 <HAL_GetTick>
 800471a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471e:	f7fd ff87 	bl	8002630 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b11      	cmp	r3, #17
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e23a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004730:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1ef      	bne.n	800471e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800473e:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004744:	f023 0210 	bic.w	r2, r3, #16
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	491a      	ldr	r1, [pc, #104]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004754:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd ff64 	bl	8002630 <HAL_GetTick>
 8004768:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476c:	f7fd ff60 	bl	8002630 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b11      	cmp	r3, #17
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e213      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800477e:	4b0e      	ldr	r3, [pc, #56]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ef      	beq.n	800476c <HAL_RCC_OscConfig+0x478>
 800478c:	e01d      	b.n	80047ca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004794:	4a08      	ldr	r2, [pc, #32]	; (80047b8 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479e:	f7fd ff47 	bl	8002630 <HAL_GetTick>
 80047a2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a6:	f7fd ff43 	bl	8002630 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b11      	cmp	r3, #17
 80047b2:	d903      	bls.n	80047bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e1f6      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
 80047b8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047bc:	4ba9      	ldr	r3, [pc, #676]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80047be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ed      	bne.n	80047a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80bd 	beq.w	8004952 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047de:	4ba1      	ldr	r3, [pc, #644]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10e      	bne.n	8004808 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	4b9e      	ldr	r3, [pc, #632]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	4a9d      	ldr	r2, [pc, #628]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6593      	str	r3, [r2, #88]	; 0x58
 80047f6:	4b9b      	ldr	r3, [pc, #620]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004808:	4b97      	ldr	r3, [pc, #604]	; (8004a68 <HAL_RCC_OscConfig+0x774>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d118      	bne.n	8004846 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004814:	4b94      	ldr	r3, [pc, #592]	; (8004a68 <HAL_RCC_OscConfig+0x774>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a93      	ldr	r2, [pc, #588]	; (8004a68 <HAL_RCC_OscConfig+0x774>)
 800481a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004820:	f7fd ff06 	bl	8002630 <HAL_GetTick>
 8004824:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004828:	f7fd ff02 	bl	8002630 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e1b5      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483a:	4b8b      	ldr	r3, [pc, #556]	; (8004a68 <HAL_RCC_OscConfig+0x774>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d02c      	beq.n	80048ac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004852:	4b84      	ldr	r3, [pc, #528]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	497f      	ldr	r1, [pc, #508]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d010      	beq.n	800489a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004878:	4b7a      	ldr	r3, [pc, #488]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	4a79      	ldr	r2, [pc, #484]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004880:	f043 0304 	orr.w	r3, r3, #4
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004888:	4b76      	ldr	r3, [pc, #472]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	4a75      	ldr	r2, [pc, #468]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004898:	e018      	b.n	80048cc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800489a:	4b72      	ldr	r3, [pc, #456]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	4a70      	ldr	r2, [pc, #448]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048aa:	e00f      	b.n	80048cc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048ac:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	4a6c      	ldr	r2, [pc, #432]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048bc:	4b69      	ldr	r3, [pc, #420]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	4a68      	ldr	r2, [pc, #416]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80048c4:	f023 0304 	bic.w	r3, r3, #4
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d016      	beq.n	8004902 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fd feac 	bl	8002630 <HAL_GetTick>
 80048d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048da:	e00a      	b.n	80048f2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fd fea8 	bl	8002630 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e159      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f2:	4b5c      	ldr	r3, [pc, #368]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0ed      	beq.n	80048dc <HAL_RCC_OscConfig+0x5e8>
 8004900:	e01d      	b.n	800493e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004902:	f7fd fe95 	bl	8002630 <HAL_GetTick>
 8004906:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f7fd fe91 	bl	8002630 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e142      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004920:	4b50      	ldr	r3, [pc, #320]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1ed      	bne.n	800490a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800492e:	4b4d      	ldr	r3, [pc, #308]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004934:	4a4b      	ldr	r2, [pc, #300]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800493a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800493e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494a:	4a46      	ldr	r2, [pc, #280]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 800494c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004950:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d03c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01c      	beq.n	80049a0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004966:	4b3f      	ldr	r3, [pc, #252]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800496c:	4a3d      	ldr	r2, [pc, #244]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004976:	f7fd fe5b 	bl	8002630 <HAL_GetTick>
 800497a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800497e:	f7fd fe57 	bl	8002630 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e10a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004990:	4b34      	ldr	r3, [pc, #208]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0ef      	beq.n	800497e <HAL_RCC_OscConfig+0x68a>
 800499e:	e01b      	b.n	80049d8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049a0:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80049a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049a6:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fd fe3e 	bl	8002630 <HAL_GetTick>
 80049b4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b8:	f7fd fe3a 	bl	8002630 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0ed      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049ca:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80049cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ef      	bne.n	80049b8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80e1 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	f040 80b5 	bne.w	8004b56 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049ec:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f003 0203 	and.w	r2, r3, #3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d124      	bne.n	8004a4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d11b      	bne.n	8004a4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d113      	bne.n	8004a4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	3b01      	subs	r3, #1
 8004a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d05f      	beq.n	8004b0a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	d05a      	beq.n	8004b06 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a03      	ldr	r2, [pc, #12]	; (8004a64 <HAL_RCC_OscConfig+0x770>)
 8004a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a5c:	f7fd fde8 	bl	8002630 <HAL_GetTick>
 8004a60:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a62:	e00c      	b.n	8004a7e <HAL_RCC_OscConfig+0x78a>
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fd fde0 	bl	8002630 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e093      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a7e:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a8a:	4b49      	ldr	r3, [pc, #292]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	4b49      	ldr	r3, [pc, #292]	; (8004bb4 <HAL_RCC_OscConfig+0x8c0>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	0112      	lsls	r2, r2, #4
 8004a9e:	4311      	orrs	r1, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa4:	0212      	lsls	r2, r2, #8
 8004aa6:	4311      	orrs	r1, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004aac:	0852      	lsrs	r2, r2, #1
 8004aae:	3a01      	subs	r2, #1
 8004ab0:	0552      	lsls	r2, r2, #21
 8004ab2:	4311      	orrs	r1, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ab8:	0852      	lsrs	r2, r2, #1
 8004aba:	3a01      	subs	r2, #1
 8004abc:	0652      	lsls	r2, r2, #25
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	493b      	ldr	r1, [pc, #236]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ac6:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a39      	ldr	r2, [pc, #228]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ad2:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	4a36      	ldr	r2, [pc, #216]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004ad8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004adc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ade:	f7fd fda7 	bl	8002630 <HAL_GetTick>
 8004ae2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae6:	f7fd fda3 	bl	8002630 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e056      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af8:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b04:	e04e      	b.n	8004ba4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e04d      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0a:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d146      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b16:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a25      	ldr	r2, [pc, #148]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b20:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b22:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b2e:	f7fd fd7f 	bl	8002630 <HAL_GetTick>
 8004b32:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fd fd7b 	bl	8002630 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e02e      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x842>
 8004b54:	e026      	b.n	8004ba4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	2b0c      	cmp	r3, #12
 8004b5a:	d021      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5c:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fd fd62 	bl	8002630 <HAL_GetTick>
 8004b6c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fd fd5e 	bl	8002630 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e011      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4a07      	ldr	r2, [pc, #28]	; (8004bb0 <HAL_RCC_OscConfig+0x8bc>)
 8004b94:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	60d3      	str	r3, [r2, #12]
 8004b9e:	e001      	b.n	8004ba4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3728      	adds	r7, #40	; 0x28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	f99f808c 	.word	0xf99f808c

08004bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0e7      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bcc:	4b75      	ldr	r3, [pc, #468]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d910      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4b72      	ldr	r3, [pc, #456]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 0207 	bic.w	r2, r3, #7
 8004be2:	4970      	ldr	r1, [pc, #448]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b6e      	ldr	r3, [pc, #440]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0cf      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d010      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	4b66      	ldr	r3, [pc, #408]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d908      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c18:	4b63      	ldr	r3, [pc, #396]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4960      	ldr	r1, [pc, #384]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d04c      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c3e:	4b5a      	ldr	r3, [pc, #360]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d121      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e0a6      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d107      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c56:	4b54      	ldr	r3, [pc, #336]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d115      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e09a      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c6e:	4b4e      	ldr	r3, [pc, #312]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e08e      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c7e:	4b4a      	ldr	r3, [pc, #296]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e086      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c8e:	4b46      	ldr	r3, [pc, #280]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f023 0203 	bic.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4943      	ldr	r1, [pc, #268]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca0:	f7fd fcc6 	bl	8002630 <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fd fcc2 	bl	8002630 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e06e      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	4b3a      	ldr	r3, [pc, #232]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 020c 	and.w	r2, r3, #12
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d1eb      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d208      	bcs.n	8004cfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cec:	4b2e      	ldr	r3, [pc, #184]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	492b      	ldr	r1, [pc, #172]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfe:	4b29      	ldr	r3, [pc, #164]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d210      	bcs.n	8004d2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0c:	4b25      	ldr	r3, [pc, #148]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 0207 	bic.w	r2, r3, #7
 8004d14:	4923      	ldr	r1, [pc, #140]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1c:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d001      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e036      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d3a:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	4918      	ldr	r1, [pc, #96]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d58:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4910      	ldr	r1, [pc, #64]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d6c:	f000 f824 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	490b      	ldr	r1, [pc, #44]	; (8004dac <HAL_RCC_ClockConfig+0x1f4>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
 8004d88:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <HAL_RCC_ClockConfig+0x1fc>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fd fbfd 	bl	8002590 <HAL_InitTick>
 8004d96:	4603      	mov	r3, r0
 8004d98:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40022000 	.word	0x40022000
 8004da8:	40021000 	.word	0x40021000
 8004dac:	08006e98 	.word	0x08006e98
 8004db0:	20000000 	.word	0x20000000
 8004db4:	20000004 	.word	0x20000004

08004db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b089      	sub	sp, #36	; 0x24
 8004dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc6:	4b3e      	ldr	r3, [pc, #248]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0x34>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d121      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d11e      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dec:	4b34      	ldr	r3, [pc, #208]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004df8:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	e005      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e14:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10d      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d102      	bne.n	8004e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e30:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e004      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e3c:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d134      	bne.n	8004eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e46:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d003      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0xac>
 8004e5c:	e005      	b.n	8004e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e60:	617b      	str	r3, [r7, #20]
      break;
 8004e62:	e005      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e66:	617b      	str	r3, [r7, #20]
      break;
 8004e68:	e002      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	617b      	str	r3, [r7, #20]
      break;
 8004e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e70:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e7e:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	fb03 f202 	mul.w	r2, r3, r2
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	0e5b      	lsrs	r3, r3, #25
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3724      	adds	r7, #36	; 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	08006eb0 	.word	0x08006eb0
 8004ec8:	00f42400 	.word	0x00f42400
 8004ecc:	007a1200 	.word	0x007a1200

08004ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000000 	.word	0x20000000

08004ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004eec:	f7ff fff0 	bl	8004ed0 <HAL_RCC_GetHCLKFreq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	4904      	ldr	r1, [pc, #16]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004efe:	5ccb      	ldrb	r3, [r1, r3]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	08006ea8 	.word	0x08006ea8

08004f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f18:	f7ff ffda 	bl	8004ed0 <HAL_RCC_GetHCLKFreq>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	0adb      	lsrs	r3, r3, #11
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	4904      	ldr	r1, [pc, #16]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f2a:	5ccb      	ldrb	r3, [r1, r3]
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	08006ea8 	.word	0x08006ea8

08004f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f58:	f7ff f968 	bl	800422c <HAL_PWREx_GetVoltageRange>
 8004f5c:	6178      	str	r0, [r7, #20]
 8004f5e:	e014      	b.n	8004f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f6c:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f78:	f7ff f958 	bl	800422c <HAL_PWREx_GetVoltageRange>
 8004f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	4a1d      	ldr	r2, [pc, #116]	; (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f90:	d10b      	bne.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b80      	cmp	r3, #128	; 0x80
 8004f96:	d919      	bls.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2ba0      	cmp	r3, #160	; 0xa0
 8004f9c:	d902      	bls.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	e013      	b.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	e010      	b.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	d902      	bls.n	8004fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	e00a      	b.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b80      	cmp	r3, #128	; 0x80
 8004fba:	d102      	bne.n	8004fc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	e004      	b.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b70      	cmp	r3, #112	; 0x70
 8004fc6:	d101      	bne.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fc8:	2301      	movs	r3, #1
 8004fca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 0207 	bic.w	r2, r3, #7
 8004fd4:	4909      	ldr	r1, [pc, #36]	; (8004ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d001      	beq.n	8004fee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	40022000 	.word	0x40022000

08005000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005008:	2300      	movs	r3, #0
 800500a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800500c:	2300      	movs	r3, #0
 800500e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 809e 	beq.w	800515a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005022:	4b46      	ldr	r3, [pc, #280]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005032:	2300      	movs	r3, #0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00d      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005038:	4b40      	ldr	r3, [pc, #256]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	4a3f      	ldr	r2, [pc, #252]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800503e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005042:	6593      	str	r3, [r2, #88]	; 0x58
 8005044:	4b3d      	ldr	r3, [pc, #244]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005050:	2301      	movs	r3, #1
 8005052:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005054:	4b3a      	ldr	r3, [pc, #232]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a39      	ldr	r2, [pc, #228]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800505a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005060:	f7fd fae6 	bl	8002630 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005066:	e009      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005068:	f7fd fae2 	bl	8002630 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d902      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	74fb      	strb	r3, [r7, #19]
        break;
 800507a:	e005      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800507c:	4b30      	ldr	r3, [pc, #192]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ef      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d15a      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800508e:	4b2b      	ldr	r3, [pc, #172]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005098:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01e      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d019      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050b6:	4b21      	ldr	r3, [pc, #132]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050bc:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050c6:	4b1d      	ldr	r3, [pc, #116]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	4a1b      	ldr	r2, [pc, #108]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050d6:	4a19      	ldr	r2, [pc, #100]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d016      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fd faa2 	bl	8002630 <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ee:	e00b      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fd fa9e 	bl	8002630 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d902      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	74fb      	strb	r3, [r7, #19]
            break;
 8005106:	e006      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0ec      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005116:	7cfb      	ldrb	r3, [r7, #19]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10b      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	4904      	ldr	r1, [pc, #16]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005132:	e009      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005134:	7cfb      	ldrb	r3, [r7, #19]
 8005136:	74bb      	strb	r3, [r7, #18]
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000
 8005140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005148:	7c7b      	ldrb	r3, [r7, #17]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d105      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800514e:	4b6e      	ldr	r3, [pc, #440]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	4a6d      	ldr	r2, [pc, #436]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005158:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005166:	4b68      	ldr	r3, [pc, #416]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	f023 0203 	bic.w	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4964      	ldr	r1, [pc, #400]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005188:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f023 020c 	bic.w	r2, r3, #12
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	495c      	ldr	r1, [pc, #368]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051aa:	4b57      	ldr	r3, [pc, #348]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4953      	ldr	r1, [pc, #332]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051cc:	4b4e      	ldr	r3, [pc, #312]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	494b      	ldr	r1, [pc, #300]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ee:	4b46      	ldr	r3, [pc, #280]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4942      	ldr	r1, [pc, #264]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005210:	4b3d      	ldr	r3, [pc, #244]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	493a      	ldr	r1, [pc, #232]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005232:	4b35      	ldr	r3, [pc, #212]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	4931      	ldr	r1, [pc, #196]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005254:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	4929      	ldr	r1, [pc, #164]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005276:	4b24      	ldr	r3, [pc, #144]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	4920      	ldr	r1, [pc, #128]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d015      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	4918      	ldr	r1, [pc, #96]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b6:	d105      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a12      	ldr	r2, [pc, #72]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d015      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052d0:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	490a      	ldr	r1, [pc, #40]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ee:	d105      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4a04      	ldr	r2, [pc, #16]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40021000 	.word	0x40021000

0800530c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e095      	b.n	800544a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d108      	bne.n	8005338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532e:	d009      	beq.n	8005344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	61da      	str	r2, [r3, #28]
 8005336:	e005      	b.n	8005344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fc fff6 	bl	8002350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005384:	d902      	bls.n	800538c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e002      	b.n	8005392 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800538c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005390:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800539a:	d007      	beq.n	80053ac <HAL_SPI_Init+0xa0>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053a4:	d002      	beq.n	80053ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ee:	ea42 0103 	orr.w	r1, r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	0c1b      	lsrs	r3, r3, #16
 8005408:	f003 0204 	and.w	r2, r3, #4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005428:	ea42 0103 	orr.w	r1, r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b08a      	sub	sp, #40	; 0x28
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005460:	2301      	movs	r3, #1
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x26>
 8005474:	2302      	movs	r3, #2
 8005476:	e20a      	b.n	800588e <HAL_SPI_TransmitReceive+0x43c>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005480:	f7fd f8d6 	bl	8002630 <HAL_GetTick>
 8005484:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800548c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005494:	887b      	ldrh	r3, [r7, #2]
 8005496:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800549c:	7efb      	ldrb	r3, [r7, #27]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d00e      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x6e>
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a8:	d106      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x66>
 80054b2:	7efb      	ldrb	r3, [r7, #27]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d003      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054be:	e1e0      	b.n	8005882 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x80>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x80>
 80054cc:	887b      	ldrh	r3, [r7, #2]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054d8:	e1d3      	b.n	8005882 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d003      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2205      	movs	r2, #5
 80054ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	887a      	ldrh	r2, [r7, #2]
 80054fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	887a      	ldrh	r2, [r7, #2]
 8005506:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	887a      	ldrh	r2, [r7, #2]
 8005514:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	887a      	ldrh	r2, [r7, #2]
 800551a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005530:	d802      	bhi.n	8005538 <HAL_SPI_TransmitReceive+0xe6>
 8005532:	8a3b      	ldrh	r3, [r7, #16]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d908      	bls.n	800554a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005546:	605a      	str	r2, [r3, #4]
 8005548:	e007      	b.n	800555a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d007      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005580:	f240 8081 	bls.w	8005686 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x140>
 800558c:	8a7b      	ldrh	r3, [r7, #18]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d16d      	bne.n	800566e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	881a      	ldrh	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	1c9a      	adds	r2, r3, #2
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b6:	e05a      	b.n	800566e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d11b      	bne.n	80055fe <HAL_SPI_TransmitReceive+0x1ac>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d016      	beq.n	80055fe <HAL_SPI_TransmitReceive+0x1ac>
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d113      	bne.n	80055fe <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	881a      	ldrh	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	1c9a      	adds	r2, r3, #2
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d11c      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x1f4>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d016      	beq.n	8005646 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	b292      	uxth	r2, r2
 8005624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	1c9a      	adds	r2, r3, #2
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005642:	2301      	movs	r3, #1
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005646:	f7fc fff3 	bl	8002630 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005652:	429a      	cmp	r2, r3
 8005654:	d80b      	bhi.n	800566e <HAL_SPI_TransmitReceive+0x21c>
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d007      	beq.n	800566e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800566c:	e109      	b.n	8005882 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d19f      	bne.n	80055b8 <HAL_SPI_TransmitReceive+0x166>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d199      	bne.n	80055b8 <HAL_SPI_TransmitReceive+0x166>
 8005684:	e0e3      	b.n	800584e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_SPI_TransmitReceive+0x244>
 800568e:	8a7b      	ldrh	r3, [r7, #18]
 8005690:	2b01      	cmp	r3, #1
 8005692:	f040 80cf 	bne.w	8005834 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	d912      	bls.n	80056c6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	881a      	ldrh	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	1c9a      	adds	r2, r3, #2
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b02      	subs	r3, #2
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056c4:	e0b6      	b.n	8005834 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	7812      	ldrb	r2, [r2, #0]
 80056d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ec:	e0a2      	b.n	8005834 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d134      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x314>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d02f      	beq.n	8005766 <HAL_SPI_TransmitReceive+0x314>
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	2b01      	cmp	r3, #1
 800570a:	d12c      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	d912      	bls.n	800573c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	881a      	ldrh	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	1c9a      	adds	r2, r3, #2
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b02      	subs	r3, #2
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	87da      	strh	r2, [r3, #62]	; 0x3e
 800573a:	e012      	b.n	8005762 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	d148      	bne.n	8005806 <HAL_SPI_TransmitReceive+0x3b4>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d042      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d923      	bls.n	80057d4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	b292      	uxth	r2, r2
 8005798:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	1c9a      	adds	r2, r3, #2
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b02      	subs	r3, #2
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d81f      	bhi.n	8005802 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	e016      	b.n	8005802 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f103 020c 	add.w	r2, r3, #12
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	7812      	ldrb	r2, [r2, #0]
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005802:	2301      	movs	r3, #1
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005806:	f7fc ff13 	bl	8002630 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005812:	429a      	cmp	r2, r3
 8005814:	d803      	bhi.n	800581e <HAL_SPI_TransmitReceive+0x3cc>
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581c:	d102      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x3d2>
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	2b00      	cmp	r3, #0
 8005822:	d107      	bne.n	8005834 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005832:	e026      	b.n	8005882 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	f47f af57 	bne.w	80056ee <HAL_SPI_TransmitReceive+0x29c>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f af50 	bne.w	80056ee <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f93e 	bl	8005ad4 <SPI_EndRxTxTransaction>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005878:	e003      	b.n	8005882 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800588a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800588e:	4618      	mov	r0, r3
 8005890:	3728      	adds	r7, #40	; 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	4613      	mov	r3, r2
 80058a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058a8:	f7fc fec2 	bl	8002630 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	4413      	add	r3, r2
 80058b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058b8:	f7fc feba 	bl	8002630 <HAL_GetTick>
 80058bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058be:	4b39      	ldr	r3, [pc, #228]	; (80059a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	015b      	lsls	r3, r3, #5
 80058c4:	0d1b      	lsrs	r3, r3, #20
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	fb02 f303 	mul.w	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ce:	e054      	b.n	800597a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d6:	d050      	beq.n	800597a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058d8:	f7fc feaa 	bl	8002630 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d902      	bls.n	80058ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d13d      	bne.n	800596a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005906:	d111      	bne.n	800592c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005910:	d004      	beq.n	800591c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591a:	d107      	bne.n	800592c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800592a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005934:	d10f      	bne.n	8005956 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e017      	b.n	800599a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	3b01      	subs	r3, #1
 8005978:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4013      	ands	r3, r2
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	429a      	cmp	r2, r3
 8005988:	bf0c      	ite	eq
 800598a:	2301      	moveq	r3, #1
 800598c:	2300      	movne	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	429a      	cmp	r2, r3
 8005996:	d19b      	bne.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000000 	.word	0x20000000

080059a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059ba:	f7fc fe39 	bl	8002630 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	4413      	add	r3, r2
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80059ca:	f7fc fe31 	bl	8002630 <HAL_GetTick>
 80059ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059d8:	4b3d      	ldr	r3, [pc, #244]	; (8005ad0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	00da      	lsls	r2, r3, #3
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	0d1b      	lsrs	r3, r3, #20
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
 80059ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80059f0:	e060      	b.n	8005ab4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059f8:	d107      	bne.n	8005a0a <SPI_WaitFifoStateUntilTimeout+0x62>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d050      	beq.n	8005ab4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a12:	f7fc fe0d 	bl	8002630 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d902      	bls.n	8005a28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d13d      	bne.n	8005aa4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a40:	d111      	bne.n	8005a66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a4a:	d004      	beq.n	8005a56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a54:	d107      	bne.n	8005a66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6e:	d10f      	bne.n	8005a90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e010      	b.n	8005ac6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4013      	ands	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d196      	bne.n	80059f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3728      	adds	r7, #40	; 0x28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000000 	.word	0x20000000

08005ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f7ff ff5b 	bl	80059a8 <SPI_WaitFifoStateUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afc:	f043 0220 	orr.w	r2, r3, #32
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e027      	b.n	8005b58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2180      	movs	r1, #128	; 0x80
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff fec0 	bl	8005898 <SPI_WaitFlagStateUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b22:	f043 0220 	orr.w	r2, r3, #32
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e014      	b.n	8005b58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7ff ff34 	bl	80059a8 <SPI_WaitFifoStateUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4a:	f043 0220 	orr.w	r2, r3, #32
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e000      	b.n	8005b58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e040      	b.n	8005bf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fc fc26 	bl	80023d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2224      	movs	r2, #36	; 0x24
 8005b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fb0c 	bl	80061c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f8af 	bl	8005d10 <UART_SetConfig>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e01b      	b.n	8005bf4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fb8b 	bl	8006308 <UART_CheckIdleState>
 8005bf2:	4603      	mov	r3, r0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	; 0x28
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d178      	bne.n	8005d06 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_UART_Transmit+0x24>
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e071      	b.n	8005d08 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2221      	movs	r2, #33	; 0x21
 8005c30:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c32:	f7fc fcfd 	bl	8002630 <HAL_GetTick>
 8005c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c50:	d108      	bne.n	8005c64 <HAL_UART_Transmit+0x68>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	e003      	b.n	8005c6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c6c:	e030      	b.n	8005cd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2180      	movs	r1, #128	; 0x80
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fbed 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e03c      	b.n	8005d08 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10b      	bne.n	8005cac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	881a      	ldrh	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca0:	b292      	uxth	r2, r2
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	e008      	b.n	8005cbe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	781a      	ldrb	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b292      	uxth	r2, r2
 8005cb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1c8      	bne.n	8005c6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2140      	movs	r1, #64	; 0x40
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fbb6 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e005      	b.n	8005d08 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
  }
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d14:	b08a      	sub	sp, #40	; 0x28
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b9e      	ldr	r3, [pc, #632]	; (8005fb8 <UART_SetConfig+0x2a8>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a93      	ldr	r2, [pc, #588]	; (8005fbc <UART_SetConfig+0x2ac>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a8a      	ldr	r2, [pc, #552]	; (8005fc0 <UART_SetConfig+0x2b0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d126      	bne.n	8005de8 <UART_SetConfig+0xd8>
 8005d9a:	4b8a      	ldr	r3, [pc, #552]	; (8005fc4 <UART_SetConfig+0x2b4>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d81b      	bhi.n	8005de0 <UART_SetConfig+0xd0>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <UART_SetConfig+0xa0>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005dd1 	.word	0x08005dd1
 8005db8:	08005dc9 	.word	0x08005dc9
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc6:	e0ab      	b.n	8005f20 <UART_SetConfig+0x210>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dce:	e0a7      	b.n	8005f20 <UART_SetConfig+0x210>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd6:	e0a3      	b.n	8005f20 <UART_SetConfig+0x210>
 8005dd8:	2308      	movs	r3, #8
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dde:	e09f      	b.n	8005f20 <UART_SetConfig+0x210>
 8005de0:	2310      	movs	r3, #16
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de6:	e09b      	b.n	8005f20 <UART_SetConfig+0x210>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a76      	ldr	r2, [pc, #472]	; (8005fc8 <UART_SetConfig+0x2b8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d138      	bne.n	8005e64 <UART_SetConfig+0x154>
 8005df2:	4b74      	ldr	r3, [pc, #464]	; (8005fc4 <UART_SetConfig+0x2b4>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	f003 030c 	and.w	r3, r3, #12
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	d82d      	bhi.n	8005e5c <UART_SetConfig+0x14c>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0xf8>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e3d 	.word	0x08005e3d
 8005e0c:	08005e5d 	.word	0x08005e5d
 8005e10:	08005e5d 	.word	0x08005e5d
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e4d 	.word	0x08005e4d
 8005e1c:	08005e5d 	.word	0x08005e5d
 8005e20:	08005e5d 	.word	0x08005e5d
 8005e24:	08005e5d 	.word	0x08005e5d
 8005e28:	08005e45 	.word	0x08005e45
 8005e2c:	08005e5d 	.word	0x08005e5d
 8005e30:	08005e5d 	.word	0x08005e5d
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e55 	.word	0x08005e55
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e42:	e06d      	b.n	8005f20 <UART_SetConfig+0x210>
 8005e44:	2302      	movs	r3, #2
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4a:	e069      	b.n	8005f20 <UART_SetConfig+0x210>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e52:	e065      	b.n	8005f20 <UART_SetConfig+0x210>
 8005e54:	2308      	movs	r3, #8
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5a:	e061      	b.n	8005f20 <UART_SetConfig+0x210>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e62:	e05d      	b.n	8005f20 <UART_SetConfig+0x210>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a58      	ldr	r2, [pc, #352]	; (8005fcc <UART_SetConfig+0x2bc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d125      	bne.n	8005eba <UART_SetConfig+0x1aa>
 8005e6e:	4b55      	ldr	r3, [pc, #340]	; (8005fc4 <UART_SetConfig+0x2b4>)
 8005e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e78:	2b30      	cmp	r3, #48	; 0x30
 8005e7a:	d016      	beq.n	8005eaa <UART_SetConfig+0x19a>
 8005e7c:	2b30      	cmp	r3, #48	; 0x30
 8005e7e:	d818      	bhi.n	8005eb2 <UART_SetConfig+0x1a2>
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d00a      	beq.n	8005e9a <UART_SetConfig+0x18a>
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d814      	bhi.n	8005eb2 <UART_SetConfig+0x1a2>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <UART_SetConfig+0x182>
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d008      	beq.n	8005ea2 <UART_SetConfig+0x192>
 8005e90:	e00f      	b.n	8005eb2 <UART_SetConfig+0x1a2>
 8005e92:	2300      	movs	r3, #0
 8005e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e98:	e042      	b.n	8005f20 <UART_SetConfig+0x210>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea0:	e03e      	b.n	8005f20 <UART_SetConfig+0x210>
 8005ea2:	2304      	movs	r3, #4
 8005ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea8:	e03a      	b.n	8005f20 <UART_SetConfig+0x210>
 8005eaa:	2308      	movs	r3, #8
 8005eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb0:	e036      	b.n	8005f20 <UART_SetConfig+0x210>
 8005eb2:	2310      	movs	r3, #16
 8005eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb8:	e032      	b.n	8005f20 <UART_SetConfig+0x210>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a3f      	ldr	r2, [pc, #252]	; (8005fbc <UART_SetConfig+0x2ac>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d12a      	bne.n	8005f1a <UART_SetConfig+0x20a>
 8005ec4:	4b3f      	ldr	r3, [pc, #252]	; (8005fc4 <UART_SetConfig+0x2b4>)
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ece:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed2:	d01a      	beq.n	8005f0a <UART_SetConfig+0x1fa>
 8005ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed8:	d81b      	bhi.n	8005f12 <UART_SetConfig+0x202>
 8005eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ede:	d00c      	beq.n	8005efa <UART_SetConfig+0x1ea>
 8005ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee4:	d815      	bhi.n	8005f12 <UART_SetConfig+0x202>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <UART_SetConfig+0x1e2>
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d008      	beq.n	8005f02 <UART_SetConfig+0x1f2>
 8005ef0:	e00f      	b.n	8005f12 <UART_SetConfig+0x202>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef8:	e012      	b.n	8005f20 <UART_SetConfig+0x210>
 8005efa:	2302      	movs	r3, #2
 8005efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f00:	e00e      	b.n	8005f20 <UART_SetConfig+0x210>
 8005f02:	2304      	movs	r3, #4
 8005f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f08:	e00a      	b.n	8005f20 <UART_SetConfig+0x210>
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f10:	e006      	b.n	8005f20 <UART_SetConfig+0x210>
 8005f12:	2310      	movs	r3, #16
 8005f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f18:	e002      	b.n	8005f20 <UART_SetConfig+0x210>
 8005f1a:	2310      	movs	r3, #16
 8005f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a25      	ldr	r2, [pc, #148]	; (8005fbc <UART_SetConfig+0x2ac>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	f040 808a 	bne.w	8006040 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d824      	bhi.n	8005f7e <UART_SetConfig+0x26e>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <UART_SetConfig+0x22c>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f61 	.word	0x08005f61
 8005f40:	08005f7f 	.word	0x08005f7f
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005f7f 	.word	0x08005f7f
 8005f4c:	08005f6f 	.word	0x08005f6f
 8005f50:	08005f7f 	.word	0x08005f7f
 8005f54:	08005f7f 	.word	0x08005f7f
 8005f58:	08005f7f 	.word	0x08005f7f
 8005f5c:	08005f77 	.word	0x08005f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f60:	f7fe ffc2 	bl	8004ee8 <HAL_RCC_GetPCLK1Freq>
 8005f64:	61f8      	str	r0, [r7, #28]
        break;
 8005f66:	e010      	b.n	8005f8a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f68:	4b19      	ldr	r3, [pc, #100]	; (8005fd0 <UART_SetConfig+0x2c0>)
 8005f6a:	61fb      	str	r3, [r7, #28]
        break;
 8005f6c:	e00d      	b.n	8005f8a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f6e:	f7fe ff23 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8005f72:	61f8      	str	r0, [r7, #28]
        break;
 8005f74:	e009      	b.n	8005f8a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f7a:	61fb      	str	r3, [r7, #28]
        break;
 8005f7c:	e005      	b.n	8005f8a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 8109 	beq.w	80061a4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d305      	bcc.n	8005fae <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d912      	bls.n	8005fd4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fb4:	e0f6      	b.n	80061a4 <UART_SetConfig+0x494>
 8005fb6:	bf00      	nop
 8005fb8:	efff69f3 	.word	0xefff69f3
 8005fbc:	40008000 	.word	0x40008000
 8005fc0:	40013800 	.word	0x40013800
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	40004400 	.word	0x40004400
 8005fcc:	40004800 	.word	0x40004800
 8005fd0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	461c      	mov	r4, r3
 8005fda:	4615      	mov	r5, r2
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	022b      	lsls	r3, r5, #8
 8005fe6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fea:	0222      	lsls	r2, r4, #8
 8005fec:	68f9      	ldr	r1, [r7, #12]
 8005fee:	6849      	ldr	r1, [r1, #4]
 8005ff0:	0849      	lsrs	r1, r1, #1
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	4688      	mov	r8, r1
 8005ff6:	4681      	mov	r9, r0
 8005ff8:	eb12 0a08 	adds.w	sl, r2, r8
 8005ffc:	eb43 0b09 	adc.w	fp, r3, r9
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800600e:	4650      	mov	r0, sl
 8006010:	4659      	mov	r1, fp
 8006012:	f7fa fdc1 	bl	8000b98 <__aeabi_uldivmod>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4613      	mov	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006024:	d308      	bcc.n	8006038 <UART_SetConfig+0x328>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800602c:	d204      	bcs.n	8006038 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	e0b5      	b.n	80061a4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800603e:	e0b1      	b.n	80061a4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006048:	d15d      	bne.n	8006106 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800604a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800604e:	2b08      	cmp	r3, #8
 8006050:	d827      	bhi.n	80060a2 <UART_SetConfig+0x392>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0x348>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	0800607d 	.word	0x0800607d
 800605c:	08006085 	.word	0x08006085
 8006060:	0800608d 	.word	0x0800608d
 8006064:	080060a3 	.word	0x080060a3
 8006068:	08006093 	.word	0x08006093
 800606c:	080060a3 	.word	0x080060a3
 8006070:	080060a3 	.word	0x080060a3
 8006074:	080060a3 	.word	0x080060a3
 8006078:	0800609b 	.word	0x0800609b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fe ff34 	bl	8004ee8 <HAL_RCC_GetPCLK1Freq>
 8006080:	61f8      	str	r0, [r7, #28]
        break;
 8006082:	e014      	b.n	80060ae <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006084:	f7fe ff46 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 8006088:	61f8      	str	r0, [r7, #28]
        break;
 800608a:	e010      	b.n	80060ae <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800608c:	4b4c      	ldr	r3, [pc, #304]	; (80061c0 <UART_SetConfig+0x4b0>)
 800608e:	61fb      	str	r3, [r7, #28]
        break;
 8006090:	e00d      	b.n	80060ae <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006092:	f7fe fe91 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8006096:	61f8      	str	r0, [r7, #28]
        break;
 8006098:	e009      	b.n	80060ae <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609e:	61fb      	str	r3, [r7, #28]
        break;
 80060a0:	e005      	b.n	80060ae <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d077      	beq.n	80061a4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	005a      	lsls	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	441a      	add	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b0f      	cmp	r3, #15
 80060ce:	d916      	bls.n	80060fe <UART_SetConfig+0x3ee>
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d6:	d212      	bcs.n	80060fe <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f023 030f 	bic.w	r3, r3, #15
 80060e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	8afb      	ldrh	r3, [r7, #22]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	8afa      	ldrh	r2, [r7, #22]
 80060fa:	60da      	str	r2, [r3, #12]
 80060fc:	e052      	b.n	80061a4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006104:	e04e      	b.n	80061a4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800610a:	2b08      	cmp	r3, #8
 800610c:	d827      	bhi.n	800615e <UART_SetConfig+0x44e>
 800610e:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <UART_SetConfig+0x404>)
 8006110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006114:	08006139 	.word	0x08006139
 8006118:	08006141 	.word	0x08006141
 800611c:	08006149 	.word	0x08006149
 8006120:	0800615f 	.word	0x0800615f
 8006124:	0800614f 	.word	0x0800614f
 8006128:	0800615f 	.word	0x0800615f
 800612c:	0800615f 	.word	0x0800615f
 8006130:	0800615f 	.word	0x0800615f
 8006134:	08006157 	.word	0x08006157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006138:	f7fe fed6 	bl	8004ee8 <HAL_RCC_GetPCLK1Freq>
 800613c:	61f8      	str	r0, [r7, #28]
        break;
 800613e:	e014      	b.n	800616a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006140:	f7fe fee8 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 8006144:	61f8      	str	r0, [r7, #28]
        break;
 8006146:	e010      	b.n	800616a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <UART_SetConfig+0x4b0>)
 800614a:	61fb      	str	r3, [r7, #28]
        break;
 800614c:	e00d      	b.n	800616a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614e:	f7fe fe33 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8006152:	61f8      	str	r0, [r7, #28]
        break;
 8006154:	e009      	b.n	800616a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615a:	61fb      	str	r3, [r7, #28]
        break;
 800615c:	e005      	b.n	800616a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006168:	bf00      	nop
    }

    if (pclk != 0U)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d019      	beq.n	80061a4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	085a      	lsrs	r2, r3, #1
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	441a      	add	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b0f      	cmp	r3, #15
 8006188:	d909      	bls.n	800619e <UART_SetConfig+0x48e>
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006190:	d205      	bcs.n	800619e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60da      	str	r2, [r3, #12]
 800619c:	e002      	b.n	80061a4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3728      	adds	r7, #40	; 0x28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061be:	bf00      	nop
 80061c0:	00f42400 	.word	0x00f42400

080061c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01a      	beq.n	80062da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c2:	d10a      	bne.n	80062da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	605a      	str	r2, [r3, #4]
  }
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b098      	sub	sp, #96	; 0x60
 800630c:	af02      	add	r7, sp, #8
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006318:	f7fc f98a 	bl	8002630 <HAL_GetTick>
 800631c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b08      	cmp	r3, #8
 800632a:	d12e      	bne.n	800638a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800632c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006334:	2200      	movs	r2, #0
 8006336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f88c 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d021      	beq.n	800638a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635a:	653b      	str	r3, [r7, #80]	; 0x50
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006364:	647b      	str	r3, [r7, #68]	; 0x44
 8006366:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800636a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e6      	bne.n	8006346 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e062      	b.n	8006450 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b04      	cmp	r3, #4
 8006396:	d149      	bne.n	800642c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a0:	2200      	movs	r2, #0
 80063a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f856 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d03c      	beq.n	800642c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	623b      	str	r3, [r7, #32]
   return(result);
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d0:	633b      	str	r3, [r7, #48]	; 0x30
 80063d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d8:	e841 2300 	strex	r3, r2, [r1]
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e6      	bne.n	80063b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3308      	adds	r3, #8
 80063ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006404:	61fa      	str	r2, [r7, #28]
 8006406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	617b      	str	r3, [r7, #20]
   return(result);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e5      	bne.n	80063e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e011      	b.n	8006450 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3758      	adds	r7, #88	; 0x58
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	4613      	mov	r3, r2
 8006466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006468:	e049      	b.n	80064fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d045      	beq.n	80064fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006472:	f7fc f8dd 	bl	8002630 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <UART_WaitOnFlagUntilTimeout+0x30>
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e048      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d031      	beq.n	80064fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d110      	bne.n	80064ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2208      	movs	r2, #8
 80064ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f838 	bl	8006526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2208      	movs	r2, #8
 80064ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e029      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d8:	d111      	bne.n	80064fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f81e 	bl	8006526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e00f      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4013      	ands	r3, r2
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	429a      	cmp	r2, r3
 800650c:	bf0c      	ite	eq
 800650e:	2301      	moveq	r3, #1
 8006510:	2300      	movne	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	429a      	cmp	r2, r3
 800651a:	d0a6      	beq.n	800646a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006526:	b480      	push	{r7}
 8006528:	b095      	sub	sp, #84	; 0x54
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654c:	643b      	str	r3, [r7, #64]	; 0x40
 800654e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e6      	bne.n	800652e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3308      	adds	r3, #8
 8006566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f023 0301 	bic.w	r3, r3, #1
 8006576:	64bb      	str	r3, [r7, #72]	; 0x48
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3308      	adds	r3, #8
 800657e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e5      	bne.n	8006560 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006598:	2b01      	cmp	r3, #1
 800659a:	d118      	bne.n	80065ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f023 0310 	bic.w	r3, r3, #16
 80065b0:	647b      	str	r3, [r7, #68]	; 0x44
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6979      	ldr	r1, [r7, #20]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	613b      	str	r3, [r7, #16]
   return(result);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e6      	bne.n	800659c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065e2:	bf00      	nop
 80065e4:	3754      	adds	r7, #84	; 0x54
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <memset>:
 80065ee:	4402      	add	r2, r0
 80065f0:	4603      	mov	r3, r0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d100      	bne.n	80065f8 <memset+0xa>
 80065f6:	4770      	bx	lr
 80065f8:	f803 1b01 	strb.w	r1, [r3], #1
 80065fc:	e7f9      	b.n	80065f2 <memset+0x4>
	...

08006600 <__errno>:
 8006600:	4b01      	ldr	r3, [pc, #4]	; (8006608 <__errno+0x8>)
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	20000058 	.word	0x20000058

0800660c <__libc_init_array>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	4d0d      	ldr	r5, [pc, #52]	; (8006644 <__libc_init_array+0x38>)
 8006610:	4c0d      	ldr	r4, [pc, #52]	; (8006648 <__libc_init_array+0x3c>)
 8006612:	1b64      	subs	r4, r4, r5
 8006614:	10a4      	asrs	r4, r4, #2
 8006616:	2600      	movs	r6, #0
 8006618:	42a6      	cmp	r6, r4
 800661a:	d109      	bne.n	8006630 <__libc_init_array+0x24>
 800661c:	4d0b      	ldr	r5, [pc, #44]	; (800664c <__libc_init_array+0x40>)
 800661e:	4c0c      	ldr	r4, [pc, #48]	; (8006650 <__libc_init_array+0x44>)
 8006620:	f000 fa28 	bl	8006a74 <_init>
 8006624:	1b64      	subs	r4, r4, r5
 8006626:	10a4      	asrs	r4, r4, #2
 8006628:	2600      	movs	r6, #0
 800662a:	42a6      	cmp	r6, r4
 800662c:	d105      	bne.n	800663a <__libc_init_array+0x2e>
 800662e:	bd70      	pop	{r4, r5, r6, pc}
 8006630:	f855 3b04 	ldr.w	r3, [r5], #4
 8006634:	4798      	blx	r3
 8006636:	3601      	adds	r6, #1
 8006638:	e7ee      	b.n	8006618 <__libc_init_array+0xc>
 800663a:	f855 3b04 	ldr.w	r3, [r5], #4
 800663e:	4798      	blx	r3
 8006640:	3601      	adds	r6, #1
 8006642:	e7f2      	b.n	800662a <__libc_init_array+0x1e>
 8006644:	08006eec 	.word	0x08006eec
 8006648:	08006eec 	.word	0x08006eec
 800664c:	08006eec 	.word	0x08006eec
 8006650:	08006ef0 	.word	0x08006ef0

08006654 <memcpy>:
 8006654:	440a      	add	r2, r1
 8006656:	4291      	cmp	r1, r2
 8006658:	f100 33ff 	add.w	r3, r0, #4294967295
 800665c:	d100      	bne.n	8006660 <memcpy+0xc>
 800665e:	4770      	bx	lr
 8006660:	b510      	push	{r4, lr}
 8006662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800666a:	4291      	cmp	r1, r2
 800666c:	d1f9      	bne.n	8006662 <memcpy+0xe>
 800666e:	bd10      	pop	{r4, pc}

08006670 <log>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	ed2d 8b02 	vpush	{d8}
 8006676:	ec55 4b10 	vmov	r4, r5, d0
 800667a:	f000 f841 	bl	8006700 <__ieee754_log>
 800667e:	4622      	mov	r2, r4
 8006680:	462b      	mov	r3, r5
 8006682:	4620      	mov	r0, r4
 8006684:	4629      	mov	r1, r5
 8006686:	eeb0 8a40 	vmov.f32	s16, s0
 800668a:	eef0 8a60 	vmov.f32	s17, s1
 800668e:	f7fa f9f5 	bl	8000a7c <__aeabi_dcmpun>
 8006692:	b998      	cbnz	r0, 80066bc <log+0x4c>
 8006694:	2200      	movs	r2, #0
 8006696:	2300      	movs	r3, #0
 8006698:	4620      	mov	r0, r4
 800669a:	4629      	mov	r1, r5
 800669c:	f7fa f9e4 	bl	8000a68 <__aeabi_dcmpgt>
 80066a0:	b960      	cbnz	r0, 80066bc <log+0x4c>
 80066a2:	2200      	movs	r2, #0
 80066a4:	2300      	movs	r3, #0
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7fa f9b5 	bl	8000a18 <__aeabi_dcmpeq>
 80066ae:	b160      	cbz	r0, 80066ca <log+0x5a>
 80066b0:	f7ff ffa6 	bl	8006600 <__errno>
 80066b4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80066e0 <log+0x70>
 80066b8:	2322      	movs	r3, #34	; 0x22
 80066ba:	6003      	str	r3, [r0, #0]
 80066bc:	eeb0 0a48 	vmov.f32	s0, s16
 80066c0:	eef0 0a68 	vmov.f32	s1, s17
 80066c4:	ecbd 8b02 	vpop	{d8}
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	f7ff ff99 	bl	8006600 <__errno>
 80066ce:	ecbd 8b02 	vpop	{d8}
 80066d2:	2321      	movs	r3, #33	; 0x21
 80066d4:	6003      	str	r3, [r0, #0]
 80066d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066da:	4803      	ldr	r0, [pc, #12]	; (80066e8 <log+0x78>)
 80066dc:	f000 b808 	b.w	80066f0 <nan>
 80066e0:	00000000 	.word	0x00000000
 80066e4:	fff00000 	.word	0xfff00000
 80066e8:	08006ee0 	.word	0x08006ee0
 80066ec:	00000000 	.word	0x00000000

080066f0 <nan>:
 80066f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80066f8 <nan+0x8>
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	00000000 	.word	0x00000000
 80066fc:	7ff80000 	.word	0x7ff80000

08006700 <__ieee754_log>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	ec51 0b10 	vmov	r0, r1, d0
 8006708:	ed2d 8b04 	vpush	{d8-d9}
 800670c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006710:	b083      	sub	sp, #12
 8006712:	460d      	mov	r5, r1
 8006714:	da29      	bge.n	800676a <__ieee754_log+0x6a>
 8006716:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800671a:	4303      	orrs	r3, r0
 800671c:	ee10 2a10 	vmov	r2, s0
 8006720:	d10c      	bne.n	800673c <__ieee754_log+0x3c>
 8006722:	49cf      	ldr	r1, [pc, #828]	; (8006a60 <__ieee754_log+0x360>)
 8006724:	2200      	movs	r2, #0
 8006726:	2300      	movs	r3, #0
 8006728:	2000      	movs	r0, #0
 800672a:	f7fa f837 	bl	800079c <__aeabi_ddiv>
 800672e:	ec41 0b10 	vmov	d0, r0, r1
 8006732:	b003      	add	sp, #12
 8006734:	ecbd 8b04 	vpop	{d8-d9}
 8006738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673c:	2900      	cmp	r1, #0
 800673e:	da05      	bge.n	800674c <__ieee754_log+0x4c>
 8006740:	460b      	mov	r3, r1
 8006742:	f7f9 fd49 	bl	80001d8 <__aeabi_dsub>
 8006746:	2200      	movs	r2, #0
 8006748:	2300      	movs	r3, #0
 800674a:	e7ee      	b.n	800672a <__ieee754_log+0x2a>
 800674c:	4bc5      	ldr	r3, [pc, #788]	; (8006a64 <__ieee754_log+0x364>)
 800674e:	2200      	movs	r2, #0
 8006750:	f7f9 fefa 	bl	8000548 <__aeabi_dmul>
 8006754:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006758:	460d      	mov	r5, r1
 800675a:	4ac3      	ldr	r2, [pc, #780]	; (8006a68 <__ieee754_log+0x368>)
 800675c:	4295      	cmp	r5, r2
 800675e:	dd06      	ble.n	800676e <__ieee754_log+0x6e>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	f7f9 fd3a 	bl	80001dc <__adddf3>
 8006768:	e7e1      	b.n	800672e <__ieee754_log+0x2e>
 800676a:	2300      	movs	r3, #0
 800676c:	e7f5      	b.n	800675a <__ieee754_log+0x5a>
 800676e:	152c      	asrs	r4, r5, #20
 8006770:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006774:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006778:	441c      	add	r4, r3
 800677a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800677e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006786:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800678a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800678e:	ea42 0105 	orr.w	r1, r2, r5
 8006792:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006796:	2200      	movs	r2, #0
 8006798:	4bb4      	ldr	r3, [pc, #720]	; (8006a6c <__ieee754_log+0x36c>)
 800679a:	f7f9 fd1d 	bl	80001d8 <__aeabi_dsub>
 800679e:	1cab      	adds	r3, r5, #2
 80067a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	4682      	mov	sl, r0
 80067a8:	468b      	mov	fp, r1
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	dc53      	bgt.n	8006858 <__ieee754_log+0x158>
 80067b0:	2300      	movs	r3, #0
 80067b2:	f7fa f931 	bl	8000a18 <__aeabi_dcmpeq>
 80067b6:	b1d0      	cbz	r0, 80067ee <__ieee754_log+0xee>
 80067b8:	2c00      	cmp	r4, #0
 80067ba:	f000 8122 	beq.w	8006a02 <__ieee754_log+0x302>
 80067be:	4620      	mov	r0, r4
 80067c0:	f7f9 fe58 	bl	8000474 <__aeabi_i2d>
 80067c4:	a390      	add	r3, pc, #576	; (adr r3, 8006a08 <__ieee754_log+0x308>)
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	4606      	mov	r6, r0
 80067cc:	460f      	mov	r7, r1
 80067ce:	f7f9 febb 	bl	8000548 <__aeabi_dmul>
 80067d2:	a38f      	add	r3, pc, #572	; (adr r3, 8006a10 <__ieee754_log+0x310>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	4604      	mov	r4, r0
 80067da:	460d      	mov	r5, r1
 80067dc:	4630      	mov	r0, r6
 80067de:	4639      	mov	r1, r7
 80067e0:	f7f9 feb2 	bl	8000548 <__aeabi_dmul>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4620      	mov	r0, r4
 80067ea:	4629      	mov	r1, r5
 80067ec:	e7ba      	b.n	8006764 <__ieee754_log+0x64>
 80067ee:	a38a      	add	r3, pc, #552	; (adr r3, 8006a18 <__ieee754_log+0x318>)
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	4650      	mov	r0, sl
 80067f6:	4659      	mov	r1, fp
 80067f8:	f7f9 fea6 	bl	8000548 <__aeabi_dmul>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	2000      	movs	r0, #0
 8006802:	499b      	ldr	r1, [pc, #620]	; (8006a70 <__ieee754_log+0x370>)
 8006804:	f7f9 fce8 	bl	80001d8 <__aeabi_dsub>
 8006808:	4652      	mov	r2, sl
 800680a:	4606      	mov	r6, r0
 800680c:	460f      	mov	r7, r1
 800680e:	465b      	mov	r3, fp
 8006810:	4650      	mov	r0, sl
 8006812:	4659      	mov	r1, fp
 8006814:	f7f9 fe98 	bl	8000548 <__aeabi_dmul>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4630      	mov	r0, r6
 800681e:	4639      	mov	r1, r7
 8006820:	f7f9 fe92 	bl	8000548 <__aeabi_dmul>
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	b914      	cbnz	r4, 8006830 <__ieee754_log+0x130>
 800682a:	4632      	mov	r2, r6
 800682c:	463b      	mov	r3, r7
 800682e:	e0a2      	b.n	8006976 <__ieee754_log+0x276>
 8006830:	4620      	mov	r0, r4
 8006832:	f7f9 fe1f 	bl	8000474 <__aeabi_i2d>
 8006836:	a374      	add	r3, pc, #464	; (adr r3, 8006a08 <__ieee754_log+0x308>)
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	4680      	mov	r8, r0
 800683e:	4689      	mov	r9, r1
 8006840:	f7f9 fe82 	bl	8000548 <__aeabi_dmul>
 8006844:	a372      	add	r3, pc, #456	; (adr r3, 8006a10 <__ieee754_log+0x310>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	4604      	mov	r4, r0
 800684c:	460d      	mov	r5, r1
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7f9 fe79 	bl	8000548 <__aeabi_dmul>
 8006856:	e0a7      	b.n	80069a8 <__ieee754_log+0x2a8>
 8006858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800685c:	f7f9 fcbe 	bl	80001dc <__adddf3>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4650      	mov	r0, sl
 8006866:	4659      	mov	r1, fp
 8006868:	f7f9 ff98 	bl	800079c <__aeabi_ddiv>
 800686c:	ec41 0b18 	vmov	d8, r0, r1
 8006870:	4620      	mov	r0, r4
 8006872:	f7f9 fdff 	bl	8000474 <__aeabi_i2d>
 8006876:	ec53 2b18 	vmov	r2, r3, d8
 800687a:	ec41 0b19 	vmov	d9, r0, r1
 800687e:	ec51 0b18 	vmov	r0, r1, d8
 8006882:	f7f9 fe61 	bl	8000548 <__aeabi_dmul>
 8006886:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800688a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4680      	mov	r8, r0
 8006896:	4689      	mov	r9, r1
 8006898:	f7f9 fe56 	bl	8000548 <__aeabi_dmul>
 800689c:	a360      	add	r3, pc, #384	; (adr r3, 8006a20 <__ieee754_log+0x320>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	4606      	mov	r6, r0
 80068a4:	460f      	mov	r7, r1
 80068a6:	f7f9 fe4f 	bl	8000548 <__aeabi_dmul>
 80068aa:	a35f      	add	r3, pc, #380	; (adr r3, 8006a28 <__ieee754_log+0x328>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f7f9 fc94 	bl	80001dc <__adddf3>
 80068b4:	4632      	mov	r2, r6
 80068b6:	463b      	mov	r3, r7
 80068b8:	f7f9 fe46 	bl	8000548 <__aeabi_dmul>
 80068bc:	a35c      	add	r3, pc, #368	; (adr r3, 8006a30 <__ieee754_log+0x330>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fc8b 	bl	80001dc <__adddf3>
 80068c6:	4632      	mov	r2, r6
 80068c8:	463b      	mov	r3, r7
 80068ca:	f7f9 fe3d 	bl	8000548 <__aeabi_dmul>
 80068ce:	a35a      	add	r3, pc, #360	; (adr r3, 8006a38 <__ieee754_log+0x338>)
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	f7f9 fc82 	bl	80001dc <__adddf3>
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	f7f9 fe34 	bl	8000548 <__aeabi_dmul>
 80068e0:	a357      	add	r3, pc, #348	; (adr r3, 8006a40 <__ieee754_log+0x340>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	4680      	mov	r8, r0
 80068e8:	4689      	mov	r9, r1
 80068ea:	4630      	mov	r0, r6
 80068ec:	4639      	mov	r1, r7
 80068ee:	f7f9 fe2b 	bl	8000548 <__aeabi_dmul>
 80068f2:	a355      	add	r3, pc, #340	; (adr r3, 8006a48 <__ieee754_log+0x348>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fc70 	bl	80001dc <__adddf3>
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	f7f9 fe22 	bl	8000548 <__aeabi_dmul>
 8006904:	a352      	add	r3, pc, #328	; (adr r3, 8006a50 <__ieee754_log+0x350>)
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	f7f9 fc67 	bl	80001dc <__adddf3>
 800690e:	4632      	mov	r2, r6
 8006910:	463b      	mov	r3, r7
 8006912:	f7f9 fe19 	bl	8000548 <__aeabi_dmul>
 8006916:	460b      	mov	r3, r1
 8006918:	4602      	mov	r2, r0
 800691a:	4649      	mov	r1, r9
 800691c:	4640      	mov	r0, r8
 800691e:	f7f9 fc5d 	bl	80001dc <__adddf3>
 8006922:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	3551      	adds	r5, #81	; 0x51
 800692a:	431d      	orrs	r5, r3
 800692c:	2d00      	cmp	r5, #0
 800692e:	4680      	mov	r8, r0
 8006930:	4689      	mov	r9, r1
 8006932:	dd48      	ble.n	80069c6 <__ieee754_log+0x2c6>
 8006934:	4b4e      	ldr	r3, [pc, #312]	; (8006a70 <__ieee754_log+0x370>)
 8006936:	2200      	movs	r2, #0
 8006938:	4650      	mov	r0, sl
 800693a:	4659      	mov	r1, fp
 800693c:	f7f9 fe04 	bl	8000548 <__aeabi_dmul>
 8006940:	4652      	mov	r2, sl
 8006942:	465b      	mov	r3, fp
 8006944:	f7f9 fe00 	bl	8000548 <__aeabi_dmul>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4606      	mov	r6, r0
 800694e:	460f      	mov	r7, r1
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7f9 fc42 	bl	80001dc <__adddf3>
 8006958:	ec53 2b18 	vmov	r2, r3, d8
 800695c:	f7f9 fdf4 	bl	8000548 <__aeabi_dmul>
 8006960:	4680      	mov	r8, r0
 8006962:	4689      	mov	r9, r1
 8006964:	b964      	cbnz	r4, 8006980 <__ieee754_log+0x280>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4630      	mov	r0, r6
 800696c:	4639      	mov	r1, r7
 800696e:	f7f9 fc33 	bl	80001d8 <__aeabi_dsub>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4650      	mov	r0, sl
 8006978:	4659      	mov	r1, fp
 800697a:	f7f9 fc2d 	bl	80001d8 <__aeabi_dsub>
 800697e:	e6d6      	b.n	800672e <__ieee754_log+0x2e>
 8006980:	a321      	add	r3, pc, #132	; (adr r3, 8006a08 <__ieee754_log+0x308>)
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	ec51 0b19 	vmov	r0, r1, d9
 800698a:	f7f9 fddd 	bl	8000548 <__aeabi_dmul>
 800698e:	a320      	add	r3, pc, #128	; (adr r3, 8006a10 <__ieee754_log+0x310>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	4604      	mov	r4, r0
 8006996:	460d      	mov	r5, r1
 8006998:	ec51 0b19 	vmov	r0, r1, d9
 800699c:	f7f9 fdd4 	bl	8000548 <__aeabi_dmul>
 80069a0:	4642      	mov	r2, r8
 80069a2:	464b      	mov	r3, r9
 80069a4:	f7f9 fc1a 	bl	80001dc <__adddf3>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4630      	mov	r0, r6
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7f9 fc12 	bl	80001d8 <__aeabi_dsub>
 80069b4:	4652      	mov	r2, sl
 80069b6:	465b      	mov	r3, fp
 80069b8:	f7f9 fc0e 	bl	80001d8 <__aeabi_dsub>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4620      	mov	r0, r4
 80069c2:	4629      	mov	r1, r5
 80069c4:	e7d9      	b.n	800697a <__ieee754_log+0x27a>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4650      	mov	r0, sl
 80069cc:	4659      	mov	r1, fp
 80069ce:	f7f9 fc03 	bl	80001d8 <__aeabi_dsub>
 80069d2:	ec53 2b18 	vmov	r2, r3, d8
 80069d6:	f7f9 fdb7 	bl	8000548 <__aeabi_dmul>
 80069da:	4606      	mov	r6, r0
 80069dc:	460f      	mov	r7, r1
 80069de:	2c00      	cmp	r4, #0
 80069e0:	f43f af23 	beq.w	800682a <__ieee754_log+0x12a>
 80069e4:	a308      	add	r3, pc, #32	; (adr r3, 8006a08 <__ieee754_log+0x308>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	ec51 0b19 	vmov	r0, r1, d9
 80069ee:	f7f9 fdab 	bl	8000548 <__aeabi_dmul>
 80069f2:	a307      	add	r3, pc, #28	; (adr r3, 8006a10 <__ieee754_log+0x310>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	4604      	mov	r4, r0
 80069fa:	460d      	mov	r5, r1
 80069fc:	ec51 0b19 	vmov	r0, r1, d9
 8006a00:	e727      	b.n	8006852 <__ieee754_log+0x152>
 8006a02:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8006a58 <__ieee754_log+0x358>
 8006a06:	e694      	b.n	8006732 <__ieee754_log+0x32>
 8006a08:	fee00000 	.word	0xfee00000
 8006a0c:	3fe62e42 	.word	0x3fe62e42
 8006a10:	35793c76 	.word	0x35793c76
 8006a14:	3dea39ef 	.word	0x3dea39ef
 8006a18:	55555555 	.word	0x55555555
 8006a1c:	3fd55555 	.word	0x3fd55555
 8006a20:	df3e5244 	.word	0xdf3e5244
 8006a24:	3fc2f112 	.word	0x3fc2f112
 8006a28:	96cb03de 	.word	0x96cb03de
 8006a2c:	3fc74664 	.word	0x3fc74664
 8006a30:	94229359 	.word	0x94229359
 8006a34:	3fd24924 	.word	0x3fd24924
 8006a38:	55555593 	.word	0x55555593
 8006a3c:	3fe55555 	.word	0x3fe55555
 8006a40:	d078c69f 	.word	0xd078c69f
 8006a44:	3fc39a09 	.word	0x3fc39a09
 8006a48:	1d8e78af 	.word	0x1d8e78af
 8006a4c:	3fcc71c5 	.word	0x3fcc71c5
 8006a50:	9997fa04 	.word	0x9997fa04
 8006a54:	3fd99999 	.word	0x3fd99999
	...
 8006a60:	c3500000 	.word	0xc3500000
 8006a64:	43500000 	.word	0x43500000
 8006a68:	7fefffff 	.word	0x7fefffff
 8006a6c:	3ff00000 	.word	0x3ff00000
 8006a70:	3fe00000 	.word	0x3fe00000

08006a74 <_init>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	bf00      	nop
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr

08006a80 <_fini>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr
