
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007414  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a2c  08007a2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a34  08007a34  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a34  08007a34  00017a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a38  08007a38  00017a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000005c  08007a98  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08007a98  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc47  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f89  00000000  00000000  0002fd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  00031ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a85  00000000  00000000  00032a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cf46  00000000  00000000  000334cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001005b  00000000  00000000  00050413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be5c4  00000000  00000000  0006046e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004160  00000000  00000000  0011ea34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  00122b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800758c 	.word	0x0800758c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800758c 	.word	0x0800758c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <format_uint16>:
/**
 * Formats an unsigned 16-bit integer into the AFE's data buffer (little-endian byte order)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_uint16(uint8_t *dataArr, uint16_t data) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
	dataArr[0] = ((uint8_t)(data & 0xFF));
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	701a      	strb	r2, [r3, #0]
	dataArr[1] = ((uint8_t)(data >> 8));
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	701a      	strb	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <format_int16>:
/**
 * Formats a signed 16-bit integer into the AFE's data buffer (little-endian byte order, 2's complement)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_int16(uint8_t *dataArr, int data) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
	if (data < 0) format_uint16(dataArr, (~(abs(data)) + 1));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da0b      	bge.n	8000f9a <format_int16+0x28>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	bfb8      	it	lt
 8000f88:	425b      	neglt	r3, r3
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffd6 	bl	8000f44 <format_uint16>
	else format_uint16(dataArr, data);
}
 8000f98:	e005      	b.n	8000fa6 <format_int16+0x34>
	else format_uint16(dataArr, data);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ffcf 	bl	8000f44 <format_uint16>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <main>:

// Global variables - used for ISRs to raise flags
bool logDataFlag = 0;
bool logAlertsFlag = 0;

int main(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b0be      	sub	sp, #248	; 0xf8
 8001044:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 8001046:	f001 fb88 	bl	800275a <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 800104a:	f000 fa2b 	bl	80014a4 <SystemClock_Config>

    // Initialize GPIO, SPI, UART, TIM1, ADC1
    GPIO_Init();
 800104e:	f000 fa61 	bl	8001514 <GPIO_Init>
    SPI1_Init();
 8001052:	f000 faf9 	bl	8001648 <SPI1_Init>
    USART1_Init();
 8001056:	f000 fb3f 	bl	80016d8 <USART1_Init>
    TIM1_Init();
 800105a:	f000 fb77 	bl	800174c <TIM1_Init>
    ADC1_Init();
 800105e:	f000 fbb9 	bl	80017d4 <ADC1_Init>

    // Start the logging timer
    TIM1->CR1 |= TIM_CR1_CEN;
 8001062:	4bb0      	ldr	r3, [pc, #704]	; (8001324 <main+0x2e4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4aaf      	ldr	r2, [pc, #700]	; (8001324 <main+0x2e4>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 800106e:	2200      	movs	r2, #0
 8001070:	2120      	movs	r1, #32
 8001072:	48ad      	ldr	r0, [pc, #692]	; (8001328 <main+0x2e8>)
 8001074:	f003 f98e 	bl	8004394 <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800107e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]

    uint16_t ctrlStatus = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
    uint16_t cellVolt = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
    uint16_t cellVolts[17] = {0};
 800109e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010a2:	2222      	movs	r2, #34	; 0x22
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fbd4 	bl	8006854 <memset>
    int16_t cellGains[16] = {12000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11900};
 80010ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 fbcd 	bl	8006854 <memset>
 80010ba:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80010be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80010c2:	f642 637c 	movw	r3, #11900	; 0x2e7c
 80010c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    uint32_t MCUTemperature = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    int16_t AFETemperature = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
    int16_t temperatures[4] = {0};
 80010d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
//    uint32_t adcCounts[16] = {0};
//    uint32_t adcCount = 0;
    uint16_t currentRead = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
    uint8_t fetStatus = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    uint8_t safetyStatAlrt[6] = {0};
 80010ec:	2300      	movs	r3, #0
 80010ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    uint8_t cmdAddr = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

    uint8_t writeData[32] = {0};
 80010fc:	2300      	movs	r3, #0
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 8001114:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001118:	2202      	movs	r2, #2
 800111a:	4619      	mov	r1, r3
 800111c:	2012      	movs	r0, #18
 800111e:	f000 fbf1 	bl	8001904 <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 8001122:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001126:	2202      	movs	r2, #2
 8001128:	4619      	mov	r1, r3
 800112a:	2057      	movs	r0, #87	; 0x57
 800112c:	f000 fcc4 	bl	8001ab8 <SubCmdReadData>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001130:	2120      	movs	r1, #32
 8001132:	487d      	ldr	r0, [pc, #500]	; (8001328 <main+0x2e8>)
 8001134:	f003 f946 	bl	80043c4 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001138:	20fa      	movs	r0, #250	; 0xfa
 800113a:	f001 fb83 	bl	8002844 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800113e:	2120      	movs	r1, #32
 8001140:	4879      	ldr	r0, [pc, #484]	; (8001328 <main+0x2e8>)
 8001142:	f003 f93f 	bl	80043c4 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 8001146:	f240 20ee 	movw	r0, #750	; 0x2ee
 800114a:	f001 fb7b 	bl	8002844 <HAL_Delay>

	// Disable SLEEP mode and disable FET_TEST mode if already in FET_TEST
	SubCmdNoData(0x009A);
 800114e:	209a      	movs	r0, #154	; 0x9a
 8001150:	f000 fc6a 	bl	8001a28 <SubCmdNoData>
	if (!(readData[0] & (1 << 4))) SubCmdNoData(0x0022);
 8001154:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <main+0x126>
 8001160:	2022      	movs	r0, #34	; 0x22
 8001162:	f000 fc61 	bl	8001a28 <SubCmdNoData>

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 8001166:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800116a:	2202      	movs	r2, #2
 800116c:	4619      	mov	r1, r3
 800116e:	2012      	movs	r0, #18
 8001170:	f000 fbc8 	bl	8001904 <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 8001174:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001178:	2202      	movs	r2, #2
 800117a:	4619      	mov	r1, r3
 800117c:	2057      	movs	r0, #87	; 0x57
 800117e:	f000 fc9b 	bl	8001ab8 <SubCmdReadData>

	// Enter CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
 8001182:	2090      	movs	r0, #144	; 0x90
 8001184:	f000 fc50 	bl	8001a28 <SubCmdNoData>
	// Wait for Battery Status to confirm transition to CONFIG_UPDATE mode
	do {
		DirectCmdRead(0x12, readData, 2);
 8001188:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800118c:	2202      	movs	r2, #2
 800118e:	4619      	mov	r1, r3
 8001190:	2012      	movs	r0, #18
 8001192:	f000 fbb7 	bl	8001904 <DirectCmdRead>
	} while (!(readData[0] & 0x01));
 8001196:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f2      	beq.n	8001188 <main+0x148>

	// Configuring Settings in RAM
	writeData[0] = 0x02;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(PROT_SCD_THLD, writeData, 1); // Set SCD threshold to 40mV
 80011a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ac:	2201      	movs	r2, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	f249 2086 	movw	r0, #37510	; 0x9286
 80011b4:	f000 fcfc 	bl	8001bb0 <RAMRegisterWrite>

	// Disable body diode protection
	writeData[0] = 0x0C;
 80011b8:	230c      	movs	r3, #12
 80011ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1);
 80011be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	f249 3008 	movw	r0, #37640	; 0x9308
 80011ca:	f000 fcf1 	bl	8001bb0 <RAMRegisterWrite>

	// Set calibration gain values for all cell voltages
	for (int i = 0; i < 16; i++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80011d4:	e020      	b.n	8001218 <main+0x1d8>
		format_int16(writeData, cellGains[i]);
 80011d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	33f8      	adds	r3, #248	; 0xf8
 80011de:	443b      	add	r3, r7
 80011e0:	f933 3c80 	ldrsh.w	r3, [r3, #-128]
 80011e4:	461a      	mov	r2, r3
 80011e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fec0 	bl	8000f72 <format_int16>
		RAMRegisterWrite(CAL_GAIN_CL1 + i*2, writeData, 2);
 80011f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011f6:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 80011fa:	3340      	adds	r3, #64	; 0x40
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	b29b      	uxth	r3, r3
 8001202:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001206:	2202      	movs	r2, #2
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fcd1 	bl	8001bb0 <RAMRegisterWrite>
	for (int i = 0; i < 16; i++) {
 800120e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001212:	3301      	adds	r3, #1
 8001214:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800121c:	2b0f      	cmp	r3, #15
 800121e:	ddda      	ble.n	80011d6 <main+0x196>
	// Set calibration offset value for cell voltages
//	format_int16(writeData, 80);
//	RAMRegisterWrite(CAL_OFST_VCELL, writeData, 2);

	// Configure TS pins
	writeData[0] = 0x07; // Thermistor temperature, for cell AFETemperature protection
 8001220:	2307      	movs	r3, #7
 8001222:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(SET_CONF_TS1_CFG, writeData, 1);
 8001226:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	f249 20fd 	movw	r0, #37629	; 0x92fd
 8001232:	f000 fcbd 	bl	8001bb0 <RAMRegisterWrite>
	RAMRegisterWrite(SET_CONF_TS2_CFG, writeData, 1);
 8001236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123a:	2201      	movs	r2, #1
 800123c:	4619      	mov	r1, r3
 800123e:	f249 20fe 	movw	r0, #37630	; 0x92fe
 8001242:	f000 fcb5 	bl	8001bb0 <RAMRegisterWrite>
	writeData[0] = 0x0F; // Thermistor temperature, for FET AFETemperature protection
 8001246:	230f      	movs	r3, #15
 8001248:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	RAMRegisterWrite(SET_CONF_TS3_CFG, writeData, 1);
 800124c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001250:	2201      	movs	r2, #1
 8001252:	4619      	mov	r1, r3
 8001254:	f249 20ff 	movw	r0, #37631	; 0x92ff
 8001258:	f000 fcaa 	bl	8001bb0 <RAMRegisterWrite>

	// Setting MFG Status Init to disable FET Test commands
	format_uint16(writeData, 0x0050);
 800125c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001260:	2150      	movs	r1, #80	; 0x50
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe6e 	bl	8000f44 <format_uint16>
	RAMRegisterWrite(SET_MFG_STATUS_INIT, writeData, 2);
 8001268:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126c:	2202      	movs	r2, #2
 800126e:	4619      	mov	r1, r3
 8001270:	f249 3033 	movw	r0, #37683	; 0x9333
 8001274:	f000 fc9c 	bl	8001bb0 <RAMRegisterWrite>
	// Exit CONFIG_UPDATE mode, read manufacturing status register again
	SubCmdNoData(0x0092);
 8001278:	2092      	movs	r0, #146	; 0x92
 800127a:	f000 fbd5 	bl	8001a28 <SubCmdNoData>
	SubCmdReadData(0x0057, readData, 2);
 800127e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001282:	2202      	movs	r2, #2
 8001284:	4619      	mov	r1, r3
 8001286:	2057      	movs	r0, #87	; 0x57
 8001288:	f000 fc16 	bl	8001ab8 <SubCmdReadData>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800128c:	2120      	movs	r1, #32
 800128e:	4826      	ldr	r0, [pc, #152]	; (8001328 <main+0x2e8>)
 8001290:	f003 f898 	bl	80043c4 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001294:	20fa      	movs	r0, #250	; 0xfa
 8001296:	f001 fad5 	bl	8002844 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800129a:	2120      	movs	r1, #32
 800129c:	4822      	ldr	r0, [pc, #136]	; (8001328 <main+0x2e8>)
 800129e:	f003 f891 	bl	80043c4 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 80012a2:	f240 20ee 	movw	r0, #750	; 0x2ee
 80012a6:	f001 facd 	bl	8002844 <HAL_Delay>
    	// Read the control status register
//    	DirectCmdRead(0x02, readData, 2);
//    	ctrlStatus = (readData[0]) + (readData[1] << 8);

    	// Check if flag to log data was raised
    	if (logDataFlag) {
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <main+0x2ec>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8098 	beq.w	80013e4 <main+0x3a4>
    		logDataFlag = false; // Clear the flag
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <main+0x2ec>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
    		// Read the cell voltage for all 16 cells and then the pack voltage
			for (int i = 0; i < 17; i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80012c0:	e027      	b.n	8001312 <main+0x2d2>
				cmdAddr = 0x14 + 2*i;
 80012c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80012c6:	330a      	adds	r3, #10
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
				DirectCmdRead(cmdAddr, readData, 2);
 80012d0:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80012d4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80012d8:	2202      	movs	r2, #2
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fb12 	bl	8001904 <DirectCmdRead>
				// Combine the 2 8-bit cell voltage bytes into a single 16-byte variable
				cellVolt = (readData[0]) + (readData[1] << 8);
 80012e0:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
				cellVolts[i] = cellVolt;
 80012f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	33f8      	adds	r3, #248	; 0xf8
 80012fe:	443b      	add	r3, r7
 8001300:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 8001304:	f823 2c60 	strh.w	r2, [r3, #-96]
			for (int i = 0; i < 17; i++) {
 8001308:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800130c:	3301      	adds	r3, #1
 800130e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001312:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001316:	2b10      	cmp	r3, #16
 8001318:	ddd3      	ble.n	80012c2 <main+0x282>
			}

			// Read the AFETemperature measured at TS1-3
			for (int i = 0; i < 3; i++) {
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001320:	e02f      	b.n	8001382 <main+0x342>
 8001322:	bf00      	nop
 8001324:	40012c00 	.word	0x40012c00
 8001328:	48000400 	.word	0x48000400
 800132c:	200001c8 	.word	0x200001c8
				cmdAddr = 0x70 + 2*i;
 8001330:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001334:	3338      	adds	r3, #56	; 0x38
 8001336:	b2db      	uxtb	r3, r3
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
				DirectCmdRead(cmdAddr, readData, 2);
 800133e:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8001342:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001346:	2202      	movs	r2, #2
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fadb 	bl	8001904 <DirectCmdRead>
				AFETemperature = (readData[0]) + (readData[1] << 8);
 800134e:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8001352:	b29a      	uxth	r2, r3
 8001354:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8001358:	b29b      	uxth	r3, r3
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b29b      	uxth	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	b29b      	uxth	r3, r3
 8001362:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
				temperatures[i] = AFETemperature;
 8001366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	33f8      	adds	r3, #248	; 0xf8
 800136e:	443b      	add	r3, r7
 8001370:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8001374:	f823 2c88 	strh.w	r2, [r3, #-136]
			for (int i = 0; i < 3; i++) {
 8001378:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800137c:	3301      	adds	r3, #1
 800137e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001382:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001386:	2b02      	cmp	r3, #2
 8001388:	ddd2      	ble.n	8001330 <main+0x2f0>
			}
			// Calculate temperature measured by MCU's ADC
			MCUTemperature = T4_Acquire();
 800138a:	f000 ff49 	bl	8002220 <T4_Acquire>
 800138e:	4603      	mov	r3, r0
 8001390:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			temperatures[3] = MCUTemperature;
 8001394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001398:	b21b      	sxth	r3, r3
 800139a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
//    			}
//    		}
//			TransmitCellVoltages(cellVolts, sizeof(cellVolts));
//			TransmitCellVoltages(cellVolts, 17);
//    		TransmitADCReadings(adcCounts, 16);
			TransmitTemperatures(temperatures, 4);
 800139e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013a2:	2104      	movs	r1, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fd57 	bl	8001e58 <TransmitTemperatures>

			// Read the CC2 current and FET status
			DirectCmdRead(0x3A, readData, 2);
 80013aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013ae:	2202      	movs	r2, #2
 80013b0:	4619      	mov	r1, r3
 80013b2:	203a      	movs	r0, #58	; 0x3a
 80013b4:	f000 faa6 	bl	8001904 <DirectCmdRead>
			currentRead = (readData[0]) + (readData[1] << 8);
 80013b8:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
			DirectCmdRead(0x7F, readData, 1);
 80013ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	207f      	movs	r0, #127	; 0x7f
 80013d8:	f000 fa94 	bl	8001904 <DirectCmdRead>
			fetStatus = readData[0];
 80013dc:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80013e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    	}

    	// Check if flag indicating a fault occurred was raised
    	if (logAlertsFlag) {
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <main+0x458>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f43f af5e 	beq.w	80012aa <main+0x26a>
    		logAlertsFlag = false;
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <main+0x458>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
			// Read the Alarm Status register to figure out what's causing the alert
    		DirectCmdRead(0x62, readData, 2);
 80013f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013f8:	2202      	movs	r2, #2
 80013fa:	4619      	mov	r1, r3
 80013fc:	2062      	movs	r0, #98	; 0x62
 80013fe:	f000 fa81 	bl	8001904 <DirectCmdRead>
    		writeData[0] = 0x00;
 8001402:	2300      	movs	r3, #0
 8001404:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    		writeData[1] = 0x00;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    		// Check each bit and determine where to look for the cause of the alert
    		// Safety status B/C
    		if (readData[1] & (1 << 7)) {
 800140e:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8001412:	b25b      	sxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	da08      	bge.n	800142a <main+0x3ea>
    			TransmitSafetyStatusB();
 8001418:	f000 fe50 	bl	80020bc <TransmitSafetyStatusB>
    			// No need to check safety status C as no protections there are enabled
    			writeData[1] |= (1 << 7);
 800141c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    		}
    		// Safety status A
    		if (readData[1] & (1 << 6)) {
 800142a:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 800142e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <main+0x408>
    			TransmitSafetyStatusA();
 8001436:	f000 fdbb 	bl	8001fb0 <TransmitSafetyStatusA>
    			writeData[1] |= (1 << 6);
 800143a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    		}
    		// Permanent failure
    		if (readData[1] & (1 << 5)) {
 8001448:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	2b00      	cmp	r3, #0
 8001452:	d012      	beq.n	800147a <main+0x43a>
    			// If there's a permanent failure, continuously transmit a distress signal
    			uint8_t msg[] = "Permanent failure! All BMS operations halted, requesting attention...";
 8001454:	4a11      	ldr	r2, [pc, #68]	; (800149c <main+0x45c>)
 8001456:	463b      	mov	r3, r7
 8001458:	4611      	mov	r1, r2
 800145a:	2246      	movs	r2, #70	; 0x46
 800145c:	4618      	mov	r0, r3
 800145e:	f005 fa41 	bl	80068e4 <memcpy>
    			while (1) {
    				HAL_Delay(10000);
 8001462:	f242 7010 	movw	r0, #10000	; 0x2710
 8001466:	f001 f9ed 	bl	8002844 <HAL_Delay>
    				HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800146a:	4639      	mov	r1, r7
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	2245      	movs	r2, #69	; 0x45
 8001472:	480b      	ldr	r0, [pc, #44]	; (80014a0 <main+0x460>)
 8001474:	f004 fcc0 	bl	8005df8 <HAL_UART_Transmit>
    				HAL_Delay(10000);
 8001478:	e7f3      	b.n	8001462 <main+0x422>
    			}
    		}
    		// Clear the bits for the received safety statuses, as well as the masked safety alerts
    		writeData[1] |= 0x18;
 800147a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800147e:	f043 0318 	orr.w	r3, r3, #24
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    		DirectCmdWrite(0xE2, writeData, 2);
 8001488:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800148c:	2202      	movs	r2, #2
 800148e:	4619      	mov	r1, r3
 8001490:	20e2      	movs	r0, #226	; 0xe2
 8001492:	f000 fa81 	bl	8001998 <DirectCmdWrite>
    	if (logDataFlag) {
 8001496:	e708      	b.n	80012aa <main+0x26a>
 8001498:	200001c9 	.word	0x200001c9
 800149c:	080075a4 	.word	0x080075a4
 80014a0:	200000dc 	.word	0x200000dc

080014a4 <SystemClock_Config>:
}

/**
 * Configures the clocks for the STM32
 */
void SystemClock_Config(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b096      	sub	sp, #88	; 0x58
 80014a8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	2244      	movs	r2, #68	; 0x44
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 f9ce 	bl	8006854 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ca:	f002 ffbb 	bl	8004444 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014ce:	2310      	movs	r3, #16
 80014d0:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d2:	2301      	movs	r3, #1
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014de:	2300      	movs	r3, #0
 80014e0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 f802 	bl	80044f0 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ec:	230f      	movs	r3, #15
 80014ee:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8001500:	463b      	mov	r3, r7
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fc55 	bl	8004db4 <HAL_RCC_ClockConfig>
}
 800150a:	bf00      	nop
 800150c:	3758      	adds	r7, #88	; 0x58
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <GPIO_Init>:

/**
 * Initializes all GPIO pins
 */
void GPIO_Init(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <GPIO_Init+0x12c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a48      	ldr	r2, [pc, #288]	; (8001640 <GPIO_Init+0x12c>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <GPIO_Init+0x12c>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <GPIO_Init+0x12c>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a42      	ldr	r2, [pc, #264]	; (8001640 <GPIO_Init+0x12c>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b40      	ldr	r3, [pc, #256]	; (8001640 <GPIO_Init+0x12c>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <GPIO_Init+0x12c>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a3c      	ldr	r2, [pc, #240]	; (8001640 <GPIO_Init+0x12c>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6613      	str	r3, [r2, #96]	; 0x60
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <GPIO_Init+0x12c>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001572:	2301      	movs	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001576:	2311      	movs	r3, #17
 8001578:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	482e      	ldr	r0, [pc, #184]	; (8001644 <GPIO_Init+0x130>)
 800158a:	f002 fd91 	bl	80040b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 800158e:	2201      	movs	r2, #1
 8001590:	2101      	movs	r1, #1
 8001592:	482c      	ldr	r0, [pc, #176]	; (8001644 <GPIO_Init+0x130>)
 8001594:	f002 fefe 	bl	8004394 <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001598:	2320      	movs	r3, #32
 800159a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4619      	mov	r1, r3
 80015ae:	4825      	ldr	r0, [pc, #148]	; (8001644 <GPIO_Init+0x130>)
 80015b0:	f002 fd7e 	bl	80040b0 <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80015b4:	23e0      	movs	r3, #224	; 0xe0
 80015b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015c4:	2305      	movs	r3, #5
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f002 fd6d 	bl	80040b0 <HAL_GPIO_Init>

    // Configure PB6 (UART_TX), PB7 (UART_RX)
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Alternate function for USART1
 80015e6:	2307      	movs	r3, #7
 80015e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4619      	mov	r1, r3
 80015f0:	4814      	ldr	r0, [pc, #80]	; (8001644 <GPIO_Init+0x130>)
 80015f2:	f002 fd5d 	bl	80040b0 <HAL_GPIO_Init>

	// Configure PA4 (AFE ALERT pin) as an external interrupt
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f6:	2310      	movs	r3, #16
 80015f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f002 fd4f 	bl	80040b0 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200a      	movs	r0, #10
 8001618:	f002 fd13 	bl	8004042 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800161c:	200a      	movs	r0, #10
 800161e:	f002 fd2c 	bl	800407a <HAL_NVIC_EnableIRQ>

	// Configure PA1 (T4 pin) as an analog input
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001622:	2302      	movs	r3, #2
 8001624:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001626:	2303      	movs	r3, #3
 8001628:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f002 fd3c 	bl	80040b0 <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400

08001648 <SPI1_Init>:

// Initializes the SPI1 peripheral in master mode
void SPI1_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <SPI1_Init+0x84>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <SPI1_Init+0x84>)
 8001654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001658:	6613      	str	r3, [r2, #96]	; 0x60
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <SPI1_Init+0x84>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <SPI1_Init+0x88>)
 8001668:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <SPI1_Init+0x8c>)
 800166a:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <SPI1_Init+0x88>)
 800166e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001672:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <SPI1_Init+0x88>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <SPI1_Init+0x88>)
 800167c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001680:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <SPI1_Init+0x88>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <SPI1_Init+0x88>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <SPI1_Init+0x88>)
 8001690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001694:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <SPI1_Init+0x88>)
 8001698:	2228      	movs	r2, #40	; 0x28
 800169a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <SPI1_Init+0x88>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <SPI1_Init+0x88>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <SPI1_Init+0x88>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <SPI1_Init+0x88>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b4:	4806      	ldr	r0, [pc, #24]	; (80016d0 <SPI1_Init+0x88>)
 80016b6:	f003 ff27 	bl	8005508 <HAL_SPI_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d000      	beq.n	80016c2 <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 80016c0:	e7fe      	b.n	80016c0 <SPI1_Init+0x78>
    }
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	20000078 	.word	0x20000078
 80016d4:	40013000 	.word	0x40013000

080016d8 <USART1_Init>:

/**
 * Initializes the USART1 peripheral in UART TX/RX mode
 */
void USART1_Init(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <USART1_Init+0x68>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	4a17      	ldr	r2, [pc, #92]	; (8001740 <USART1_Init+0x68>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <USART1_Init+0x68>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

	// Configure UART peripheral
	huart1.Instance = USART1;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <USART1_Init+0x6c>)
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <USART1_Init+0x70>)
 80016fa:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <USART1_Init+0x6c>)
 80016fe:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001702:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <USART1_Init+0x6c>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <USART1_Init+0x6c>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <USART1_Init+0x6c>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <USART1_Init+0x6c>)
 8001718:	220c      	movs	r2, #12
 800171a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <USART1_Init+0x6c>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <USART1_Init+0x6c>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <USART1_Init+0x6c>)
 800172a:	f004 fb17 	bl	8005d5c <HAL_UART_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d000      	beq.n	8001736 <USART1_Init+0x5e>
	{
		// Initialization error
		while (1);
 8001734:	e7fe      	b.n	8001734 <USART1_Init+0x5c>
	}
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	200000dc 	.word	0x200000dc
 8001748:	40013800 	.word	0x40013800

0800174c <TIM1_Init>:

/**
 * Initializes the TIM1 peripheral with interrupts enabled
 */
void TIM1_Init(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Enable TIM1 clock
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <TIM1_Init+0x4c>)
 8001752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001754:	4a10      	ldr	r2, [pc, #64]	; (8001798 <TIM1_Init+0x4c>)
 8001756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800175a:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->PSC = 2000 - 1; // Given 2MHz clock, 2000 cycles for 1ms
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <TIM1_Init+0x50>)
 800175e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 2000 - 1; // Generate interrupt every 2000ms (2s)
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <TIM1_Init+0x50>)
 8001766:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->DIER |= TIM_DIER_UIE; // Enable update interrupt
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <TIM1_Init+0x50>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <TIM1_Init+0x50>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0); // Set TIM1 interrupt priority
 8001778:	2100      	movs	r1, #0
 800177a:	2019      	movs	r0, #25
 800177c:	f7ff fc36 	bl	8000fec <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); // Enable TIM1 interrupt
 8001780:	2019      	movs	r0, #25
 8001782:	f7ff fc15 	bl	8000fb0 <__NVIC_EnableIRQ>

	TIM1->CR1 |= TIM_CR1_CEN; // Enable TIM1
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <TIM1_Init+0x50>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <TIM1_Init+0x50>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6013      	str	r3, [r2, #0]
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40012c00 	.word	0x40012c00

080017a0 <TIM1_UP_TIM16_IRQHandler>:

/**
 * Defining the ISR for the STM32 timers
 */
void TIM1_UP_TIM16_IRQHandler(void) {
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
	// Check if UIF flag is set for TIM1
	if (TIM1->SR & TIM_SR_UIF) {
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <TIM1_UP_TIM16_IRQHandler+0x22>
		logDataFlag = true; // Raise a flag to log data from the AFE
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <TIM1_UP_TIM16_IRQHandler+0x30>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~TIM_SR_UIF; // Clear UIF flag
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6113      	str	r3, [r2, #16]
	}
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012c00 	.word	0x40012c00
 80017d0:	200001c8 	.word	0x200001c8

080017d4 <ADC1_Init>:

void ADC1_Init(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]

    // Enable the clock for ADC1
    __HAL_RCC_ADC_CLK_ENABLE();
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <ADC1_Init+0xb8>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	4a26      	ldr	r2, [pc, #152]	; (800188c <ADC1_Init+0xb8>)
 80017f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <ADC1_Init+0xb8>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]

    // Configure the ADC peripheral
    hadc1.Instance = ADC1;
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <ADC1_Init+0xbc>)
 8001806:	4a23      	ldr	r2, [pc, #140]	; (8001894 <ADC1_Init+0xc0>)
 8001808:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <ADC1_Init+0xbc>)
 800180c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001810:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;  // 12-bit resolution
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <ADC1_Init+0xbc>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;  // Right data alignment
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <ADC1_Init+0xbc>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;  // Single channel
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <ADC1_Init+0xbc>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;  // End of conversion flag after each conversion
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <ADC1_Init+0xbc>)
 8001826:	2204      	movs	r2, #4
 8001828:	615a      	str	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;  // Single conversion mode
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <ADC1_Init+0xbc>)
 800182c:	2200      	movs	r2, #0
 800182e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;  // Single conversion
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <ADC1_Init+0xbc>)
 8001832:	2201      	movs	r2, #1
 8001834:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <ADC1_Init+0xbc>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;  // Start conversion by software
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <ADC1_Init+0xbc>)
 8001840:	2200      	movs	r2, #0
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <ADC1_Init+0xbc>)
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <ADC1_Init+0xbc>)
 800184e:	2200      	movs	r2, #0
 8001850:	635a      	str	r2, [r3, #52]	; 0x34

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001852:	480f      	ldr	r0, [pc, #60]	; (8001890 <ADC1_Init+0xbc>)
 8001854:	f001 fa5e 	bl	8002d14 <HAL_ADC_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <ADC1_Init+0x8e>
        // Initialization error
        Error_Handler();
 800185e:	f000 fdb5 	bl	80023cc <Error_Handler>
    }

    // Configure the ADC regular channel (PA1 = ADC_CHANNEL_6)
    sConfig.Channel = ADC_CHANNEL_6;
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <ADC1_Init+0xc4>)
 8001864:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001866:	2306      	movs	r3, #6
 8001868:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;  // Sample time (adjust as necessary)
 800186a:	2304      	movs	r3, #4
 800186c:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4619      	mov	r1, r3
 8001874:	4806      	ldr	r0, [pc, #24]	; (8001890 <ADC1_Init+0xbc>)
 8001876:	f001 fd6b 	bl	8003350 <HAL_ADC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <ADC1_Init+0xb0>
        // Channel configuration error
        Error_Handler();
 8001880:	f000 fda4 	bl	80023cc <Error_Handler>
    }
}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	20000164 	.word	0x20000164
 8001894:	50040000 	.word	0x50040000
 8001898:	19200040 	.word	0x19200040

0800189c <crc8>:
/**
 * Calculates a CRC value according to the polynomial x^8 + x^2 + x + 1
 * @param data Pointer to an array storing the data bytes that will be transmitted
 * @param len Number of bytes that will be transmitted
 */
uint8_t crc8(uint8_t *data, size_t len) {
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
    while (len--)
 80018aa:	e01e      	b.n	80018ea <crc8+0x4e>
    {
        crc ^= *data++;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	4053      	eors	r3, r2
 80018b8:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 80018ba:	2300      	movs	r3, #0
 80018bc:	73bb      	strb	r3, [r7, #14]
 80018be:	e011      	b.n	80018e4 <crc8+0x48>
        {
            if (crc & 0x80)
 80018c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da07      	bge.n	80018d8 <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	f083 0307 	eor.w	r3, r3, #7
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	e002      	b.n	80018de <crc8+0x42>
            else
                crc <<= 1;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	3301      	adds	r3, #1
 80018e2:	73bb      	strb	r3, [r7, #14]
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d9ea      	bls.n	80018c0 <crc8+0x24>
    while (len--)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	603a      	str	r2, [r7, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1db      	bne.n	80018ac <crc8+0x10>
        }
    }
    return crc;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <DirectCmdRead>:
 * Sends a direct command to the AFE and reads the data that is output
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
 8001910:	4613      	mov	r3, r2
 8001912:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <DirectCmdRead+0x90>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	823b      	strh	r3, [r7, #16]
 800191a:	2300      	movs	r3, #0
 800191c:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <DirectCmdRead+0x90>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	81bb      	strh	r3, [r7, #12]
 8001924:	2300      	movs	r3, #0
 8001926:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	723b      	strb	r3, [r7, #8]
 800192c:	23ff      	movs	r3, #255	; 0xff
 800192e:	727b      	strb	r3, [r7, #9]
	uint8_t crcLower = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	74fb      	strb	r3, [r7, #19]
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e023      	b.n	8001982 <DirectCmdRead+0x7e>
	{
		fullCmd[0] = cmd + i; // Increment the address
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4413      	add	r3, r2
 8001942:	b2db      	uxtb	r3, r3
 8001944:	723b      	strb	r3, [r7, #8]
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	2102      	movs	r1, #2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ffa5 	bl	800189c <crc8>
 8001952:	4603      	mov	r3, r0
 8001954:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 8001956:	7a3b      	ldrb	r3, [r7, #8]
 8001958:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 800195a:	7a7b      	ldrb	r3, [r7, #9]
 800195c:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 800195e:	7cfb      	ldrb	r3, [r7, #19]
 8001960:	73bb      	strb	r3, [r7, #14]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8001962:	f107 0110 	add.w	r1, r7, #16
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	2203      	movs	r2, #3
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f9f3 	bl	8001d58 <AFETransmitReadCmd>
		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	7c7a      	ldrb	r2, [r7, #17]
 800197a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	429a      	cmp	r2, r3
 8001988:	dbd7      	blt.n	800193a <DirectCmdRead+0x36>
	}
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	080075ec 	.word	0x080075ec

08001998 <DirectCmdWrite>:
 * Sends a direct command to the AFE and writes the provided data to it
 * @param cmd The address byte for the command
 * @param writeData Pointer to the 8-bit integer array containing the data to write
 * @param len Number of bytes to write to the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdWrite(uint8_t cmd, uint8_t *writeData, uint8_t len) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <DirectCmdWrite+0x8c>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	823b      	strh	r3, [r7, #16]
 80019ae:	2300      	movs	r3, #0
 80019b0:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <DirectCmdWrite+0x8c>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	81bb      	strh	r3, [r7, #12]
 80019b8:	2300      	movs	r3, #0
 80019ba:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[2] = {0};
 80019bc:	2300      	movs	r3, #0
 80019be:	813b      	strh	r3, [r7, #8]
	uint8_t crcLower = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	74fb      	strb	r3, [r7, #19]

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++) {
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e023      	b.n	8001a12 <DirectCmdWrite+0x7a>
		fullCmd[0] = cmd + i;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4413      	add	r3, r2
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	723b      	strb	r3, [r7, #8]
		fullCmd[1] = writeData[i];
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	727b      	strb	r3, [r7, #9]
		crcLower = crc8(fullCmd, 2);
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff58 	bl	800189c <crc8>
 80019ec:	4603      	mov	r3, r0
 80019ee:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 80019f0:	7a3b      	ldrb	r3, [r7, #8]
 80019f2:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 80019f4:	7a7b      	ldrb	r3, [r7, #9]
 80019f6:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 80019f8:	7cfb      	ldrb	r3, [r7, #19]
 80019fa:	73bb      	strb	r3, [r7, #14]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 80019fc:	f107 0110 	add.w	r1, r7, #16
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2203      	movs	r2, #3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f9de 	bl	8001dc8 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++) {
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbd7      	blt.n	80019ca <DirectCmdWrite+0x32>
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	080075ec 	.word	0x080075ec

08001a28 <SubCmdNoData>:

/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <SubCmdNoData+0x8c>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	833b      	strh	r3, [r7, #24]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001a3c:	23be      	movs	r3, #190	; 0xbe
 8001a3e:	753b      	strb	r3, [r7, #20]
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff25 	bl	800189c <crc8>
 8001a52:	4603      	mov	r3, r0
 8001a54:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001a56:	23bf      	movs	r3, #191	; 0xbf
 8001a58:	743b      	strb	r3, [r7, #16]
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	2102      	movs	r1, #2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff16 	bl	800189c <crc8>
 8001a70:	4603      	mov	r3, r0
 8001a72:	77bb      	strb	r3, [r7, #30]

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001a74:	7d3b      	ldrb	r3, [r7, #20]
 8001a76:	733b      	strb	r3, [r7, #12]
 8001a78:	7d7b      	ldrb	r3, [r7, #21]
 8001a7a:	737b      	strb	r3, [r7, #13]
 8001a7c:	7ffb      	ldrb	r3, [r7, #31]
 8001a7e:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001a80:	f107 0118 	add.w	r1, r7, #24
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f99c 	bl	8001dc8 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001a90:	7c3b      	ldrb	r3, [r7, #16]
 8001a92:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 8001a94:	7c7b      	ldrb	r3, [r7, #17]
 8001a96:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 8001a98:	7fbb      	ldrb	r3, [r7, #30]
 8001a9a:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001a9c:	f107 0118 	add.w	r1, r7, #24
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f98e 	bl	8001dc8 <AFETransmitWriteCmd>
}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	080075ec 	.word	0x080075ec

08001ab8 <SubCmdReadData>:
 * Sends a sub-command to the AFE and reads the data that is output
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	80fb      	strh	r3, [r7, #6]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001ac8:	4b38      	ldr	r3, [pc, #224]	; (8001bac <SubCmdReadData+0xf4>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	83bb      	strh	r3, [r7, #28]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	77bb      	strb	r3, [r7, #30]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8001ad2:	23be      	movs	r3, #190	; 0xbe
 8001ad4:	763b      	strb	r3, [r7, #24]
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff feda 	bl	800189c <crc8>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8001aee:	23bf      	movs	r3, #191	; 0xbf
 8001af0:	753b      	strb	r3, [r7, #20]
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2102      	movs	r1, #2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff feca 	bl	800189c <crc8>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8001b0e:	7e3b      	ldrb	r3, [r7, #24]
 8001b10:	743b      	strb	r3, [r7, #16]
 8001b12:	7e7b      	ldrb	r3, [r7, #25]
 8001b14:	747b      	strb	r3, [r7, #17]
 8001b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b1a:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001b1c:	f107 011c 	add.w	r1, r7, #28
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	2203      	movs	r2, #3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f94e 	bl	8001dc8 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8001b2c:	7d3b      	ldrb	r3, [r7, #20]
 8001b2e:	743b      	strb	r3, [r7, #16]
	txData[1] = commandUpperAddr[1];
 8001b30:	7d7b      	ldrb	r3, [r7, #21]
 8001b32:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001b34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b38:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001b3a:	f107 011c 	add.w	r1, r7, #28
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	2203      	movs	r2, #3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f93f 	bl	8001dc8 <AFETransmitWriteCmd>

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	e022      	b.n	8001b9a <SubCmdReadData+0xe2>
		readData[0] = READ_DATA_BUFF_LSB + i;
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3340      	adds	r3, #64	; 0x40
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	733b      	strb	r3, [r7, #12]
		readData[1] = 0xFF;
 8001b5e:	23ff      	movs	r3, #255	; 0xff
 8001b60:	737b      	strb	r3, [r7, #13]

		txData[0] = readData[0];
 8001b62:	7b3b      	ldrb	r3, [r7, #12]
 8001b64:	743b      	strb	r3, [r7, #16]
		txData[1] = readData[1];
 8001b66:	7b7b      	ldrb	r3, [r7, #13]
 8001b68:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(readData, 2);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fe93 	bl	800189c <crc8>
 8001b76:	4603      	mov	r3, r0
 8001b78:	74bb      	strb	r3, [r7, #18]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8001b7a:	f107 011c 	add.w	r1, r7, #28
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2203      	movs	r2, #3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f8e7 	bl	8001d58 <AFETransmitReadCmd>

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	7f7a      	ldrb	r2, [r7, #29]
 8001b92:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3301      	adds	r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9a:	797b      	ldrb	r3, [r7, #5]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbd8      	blt.n	8001b54 <SubCmdReadData+0x9c>
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	080075ec 	.word	0x080075ec

08001bb0 <RAMRegisterWrite>:
 * Might remove this function, it's exactly the same as the SubCmd read data function
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	80fb      	strh	r3, [r7, #6]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8001bc0:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <RAMRegisterWrite+0x1a4>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	83bb      	strh	r3, [r7, #28]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	77bb      	strb	r3, [r7, #30]
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
 8001bca:	23be      	movs	r3, #190	; 0xbe
 8001bcc:	763b      	strb	r3, [r7, #24]
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(lowerAddr, 2);
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fe5e 	bl	800189c <crc8>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
 8001be6:	23bf      	movs	r3, #191	; 0xbf
 8001be8:	753b      	strb	r3, [r7, #20]
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(upperAddr, 2);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fe4e 	bl	800189c <crc8>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
 8001c06:	7e3b      	ldrb	r3, [r7, #24]
 8001c08:	743b      	strb	r3, [r7, #16]
 8001c0a:	7e7b      	ldrb	r3, [r7, #25]
 8001c0c:	747b      	strb	r3, [r7, #17]
 8001c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c12:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001c14:	f107 011c 	add.w	r1, r7, #28
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f8d2 	bl	8001dc8 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = upperAddr[0];
 8001c24:	7d3b      	ldrb	r3, [r7, #20]
 8001c26:	743b      	strb	r3, [r7, #16]
	txData[1] = upperAddr[1];
 8001c28:	7d7b      	ldrb	r3, [r7, #21]
 8001c2a:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8001c2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c30:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001c32:	f107 011c 	add.w	r1, r7, #28
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f8c3 	bl	8001dc8 <AFETransmitWriteCmd>

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
 8001c42:	2300      	movs	r3, #0
 8001c44:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4a:	e020      	b.n	8001c8e <RAMRegisterWrite+0xde>
	{
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	3b40      	subs	r3, #64	; 0x40
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	733b      	strb	r3, [r7, #12]
		writeBytes[1] = writeData[i];
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	737b      	strb	r3, [r7, #13]

		txData[0] = writeBytes[0];
 8001c60:	7b3b      	ldrb	r3, [r7, #12]
 8001c62:	743b      	strb	r3, [r7, #16]
		txData[1] = writeBytes[1];
 8001c64:	7b7b      	ldrb	r3, [r7, #13]
 8001c66:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fe14 	bl	800189c <crc8>
 8001c74:	4603      	mov	r3, r0
 8001c76:	74bb      	strb	r3, [r7, #18]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001c78:	f107 011c 	add.w	r1, r7, #28
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	2203      	movs	r2, #3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f8a0 	bl	8001dc8 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++)
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8e:	797b      	ldrb	r3, [r7, #5]
 8001c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbda      	blt.n	8001c4c <RAMRegisterWrite+0x9c>
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e00b      	b.n	8001cba <RAMRegisterWrite+0x10a>
		checkSum += writeData[i];
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cae:	4413      	add	r3, r2
 8001cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	797b      	ldrb	r3, [r7, #5]
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	dbef      	blt.n	8001ca2 <RAMRegisterWrite+0xf2>
	}
	checkSum += lowerAddr[1];
 8001cc2:	7e7a      	ldrb	r2, [r7, #25]
 8001cc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cc8:	4413      	add	r3, r2
 8001cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum += upperAddr[1];
 8001cce:	7d7a      	ldrb	r2, [r7, #21]
 8001cd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum = ~(checkSum);
 8001cda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
 8001ce4:	23e0      	movs	r3, #224	; 0xe0
 8001ce6:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = checkSum;
 8001ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cec:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001cf2:	7b7b      	ldrb	r3, [r7, #13]
 8001cf4:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fdcd 	bl	800189c <crc8>
 8001d02:	4603      	mov	r3, r0
 8001d04:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001d06:	f107 011c 	add.w	r1, r7, #28
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	2203      	movs	r2, #3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f859 	bl	8001dc8 <AFETransmitWriteCmd>

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
 8001d16:	23e1      	movs	r3, #225	; 0xe1
 8001d18:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes
 8001d1a:	797b      	ldrb	r3, [r7, #5]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8001d22:	7b3b      	ldrb	r3, [r7, #12]
 8001d24:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8001d26:	7b7b      	ldrb	r3, [r7, #13]
 8001d28:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2102      	movs	r1, #2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fdb3 	bl	800189c <crc8>
 8001d36:	4603      	mov	r3, r0
 8001d38:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001d3a:	f107 011c 	add.w	r1, r7, #28
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	2203      	movs	r2, #3
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f83f 	bl	8001dc8 <AFETransmitWriteCmd>
}
 8001d4a:	bf00      	nop
 8001d4c:	3730      	adds	r7, #48	; 0x30
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	080075ec 	.word	0x080075ec

08001d58 <AFETransmitReadCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI read command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	4613      	mov	r3, r2
 8001d64:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8001d6a:	e01e      	b.n	8001daa <AFETransmitReadCmd+0x52>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4813      	ldr	r0, [pc, #76]	; (8001dc0 <AFETransmitReadCmd+0x68>)
 8001d72:	f002 fb0f 	bl	8004394 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7e:	9200      	str	r2, [sp, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	68f9      	ldr	r1, [r7, #12]
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <AFETransmitReadCmd+0x6c>)
 8001d86:	f003 fc62 	bl	800564e <HAL_SPI_TransmitReceive>

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		if (txBytes[0] == rxBytes[0]) commReceived = true;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d101      	bne.n	8001d9a <AFETransmitReadCmd+0x42>
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
		// TODO: implement CRC checking for received data

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4808      	ldr	r0, [pc, #32]	; (8001dc0 <AFETransmitReadCmd+0x68>)
 8001da0:	f002 faf8 	bl	8004394 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f000 fd4d 	bl	8002844 <HAL_Delay>
	while (!commReceived)
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	f083 0301 	eor.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1da      	bne.n	8001d6c <AFETransmitReadCmd+0x14>
	}

}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	48000400 	.word	0x48000400
 8001dc4:	20000078 	.word	0x20000078

08001dc8 <AFETransmitWriteCmd>:
 * Handles the proper SPI communication procedure with the AFE for a SPI write command
 * @param txBytes Pointer to array containing the data to transmit
 * @param rxBytes Pointer to array containing the data to be received
 * @param arrSize Number of bytes that will be transmitted/received
 */
void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8001dda:	e02e      	b.n	8001e3a <AFETransmitWriteCmd+0x72>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2101      	movs	r1, #1
 8001de0:	481b      	ldr	r0, [pc, #108]	; (8001e50 <AFETransmitWriteCmd+0x88>)
 8001de2:	f002 fad7 	bl	8004394 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f04f 32ff 	mov.w	r2, #4294967295
 8001dee:	9200      	str	r2, [sp, #0]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	68f9      	ldr	r1, [r7, #12]
 8001df4:	4817      	ldr	r0, [pc, #92]	; (8001e54 <AFETransmitWriteCmd+0x8c>)
 8001df6:	f003 fc2a 	bl	800564e <HAL_SPI_TransmitReceive>

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	e00e      	b.n	8001e22 <AFETransmitWriteCmd+0x5a>
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	440b      	add	r3, r1
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <AFETransmitWriteCmd+0x54>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dbec      	blt.n	8001e04 <AFETransmitWriteCmd+0x3c>
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4808      	ldr	r0, [pc, #32]	; (8001e50 <AFETransmitWriteCmd+0x88>)
 8001e30:	f002 fab0 	bl	8004394 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f000 fd05 	bl	8002844 <HAL_Delay>
	while (!commReceived)
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	f083 0301 	eor.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ca      	bne.n	8001ddc <AFETransmitWriteCmd+0x14>
	}
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	48000400 	.word	0x48000400
 8001e54:	20000078 	.word	0x20000078

08001e58 <TransmitTemperatures>:

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void TransmitTemperatures(int16_t *temps, uint8_t len) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8001e5e:	af02      	add	r7, sp, #8
 8001e60:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001e64:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001e68:	6018      	str	r0, [r3, #0]
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001e70:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 8001e74:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0}; // Initialize buffer to store message
 8001e76:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001e7a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	3304      	adds	r3, #4
 8001e84:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 fce2 	bl	8006854 <memset>
	char temp[32]; // Temporary buffer for each line
//	double degC = 0;
	// Separate variables for integer part and decimal part of temperature reading
	int16_t degC = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
	int16_t deg_int = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8a7 342c 	strh.w	r3, [r7, #1068]	; 0x42c
	int16_t deg_dec = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

	for (int i = 1; i <= len; i++) {
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8001ea8:	e05f      	b.n	8001f6a <TransmitTemperatures+0x112>
		// Format the data into a single line
//		degC = temps[i-1]/10 - 272.15;
		degC = temps[i-1] - 2731;
 8001eaa:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001eae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8001eba:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
		deg_int = degC / 10;
 8001ed2:	f9b7 342e 	ldrsh.w	r3, [r7, #1070]	; 0x42e
 8001ed6:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <TransmitTemperatures+0x14c>)
 8001ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8001edc:	1092      	asrs	r2, r2, #2
 8001ede:	17db      	asrs	r3, r3, #31
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f8a7 342c 	strh.w	r3, [r7, #1068]	; 0x42c
		deg_dec = degC % 10;
 8001ee6:	f9b7 242e 	ldrsh.w	r2, [r7, #1070]	; 0x42e
 8001eea:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <TransmitTemperatures+0x14c>)
 8001eec:	fb83 1302 	smull	r1, r3, r3, r2
 8001ef0:	1099      	asrs	r1, r3, #2
 8001ef2:	17d3      	asrs	r3, r2, #31
 8001ef4:	1ac9      	subs	r1, r1, r3
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
		// If temperature is negative, keep the decimal part positive
		if (degC < 0 && deg_dec != 0) deg_dec = abs(deg_dec);
 8001f04:	f9b7 342e 	ldrsh.w	r3, [r7, #1070]	; 0x42e
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da0b      	bge.n	8001f24 <TransmitTemperatures+0xcc>
 8001f0c:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <TransmitTemperatures+0xcc>
 8001f14:	f9b7 3436 	ldrsh.w	r3, [r7, #1078]	; 0x436
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bfb8      	it	lt
 8001f1c:	425b      	neglt	r3, r3
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

		snprintf(temp, sizeof(temp), "TS%d: %d.%d C\n", i, deg_int, deg_dec);
 8001f24:	f9b7 342c 	ldrsh.w	r3, [r7, #1068]	; 0x42c
 8001f28:	f9b7 2436 	ldrsh.w	r2, [r7, #1078]	; 0x436
 8001f2c:	f107 000c 	add.w	r0, r7, #12
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001f38:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <TransmitTemperatures+0x150>)
 8001f3a:	2120      	movs	r1, #32
 8001f3c:	f004 fc56 	bl	80067ec <sniprintf>
		// Append the formatted data to the buffer
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 8001f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe f943 	bl	80001d0 <strlen>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8001f50:	3303      	adds	r3, #3
 8001f52:	f107 010c 	add.w	r1, r7, #12
 8001f56:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f004 fc82 	bl	8006864 <strncat>
	for (int i = 1; i <= len; i++) {
 8001f60:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001f64:	3301      	adds	r3, #1
 8001f66:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8001f6a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001f6e:	f2a3 4335 	subw	r3, r3, #1077	; 0x435
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dd96      	ble.n	8001eaa <TransmitTemperatures+0x52>
	}

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe f925 	bl	80001d0 <strlen>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	4806      	ldr	r0, [pc, #24]	; (8001fac <TransmitTemperatures+0x154>)
 8001f94:	f003 ff30 	bl	8005df8 <HAL_UART_Transmit>
}
 8001f98:	bf00      	nop
 8001f9a:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	66666667 	.word	0x66666667
 8001fa8:	08007610 	.word	0x08007610
 8001fac:	200000dc 	.word	0x200000dc

08001fb0 <TransmitSafetyStatusA>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status A register
 */
void TransmitSafetyStatusA(void) {
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b098      	sub	sp, #96	; 0x60
 8001fb4:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status A register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusA[1] = {0};
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x03, statusA, 1);
 8001fbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f7ff fc9d 	bl	8001904 <DirectCmdRead>

	// Short Circuit Discharge
	if (statusA[0] & (1 << 7)) {
 8001fca:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da0d      	bge.n	8001ff0 <TransmitSafetyStatusA+0x40>
		uint8_t msg[] = "SCD fault triggered! Discharging will be disabled for a moment...\n";
 8001fd4:	4a33      	ldr	r2, [pc, #204]	; (80020a4 <TransmitSafetyStatusA+0xf4>)
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	4611      	mov	r1, r2
 8001fda:	2243      	movs	r2, #67	; 0x43
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 fc81 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8001fe2:	1d39      	adds	r1, r7, #4
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe8:	2242      	movs	r2, #66	; 0x42
 8001fea:	482f      	ldr	r0, [pc, #188]	; (80020a8 <TransmitSafetyStatusA+0xf8>)
 8001fec:	f003 ff04 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Overcurrent in Discharge 1st Tier
	if (statusA[0] & (1 << 5)) {
 8001ff0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00d      	beq.n	8002018 <TransmitSafetyStatusA+0x68>
		uint8_t msg[] = "OCD1 fault triggered! Discharging will be disabled for a moment...\n";
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <TransmitSafetyStatusA+0xfc>)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	4611      	mov	r1, r2
 8002002:	2244      	movs	r2, #68	; 0x44
 8002004:	4618      	mov	r0, r3
 8002006:	f004 fc6d 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800200a:	1d39      	adds	r1, r7, #4
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
 8002010:	2243      	movs	r2, #67	; 0x43
 8002012:	4825      	ldr	r0, [pc, #148]	; (80020a8 <TransmitSafetyStatusA+0xf8>)
 8002014:	f003 fef0 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Overcurrent in Charge
	if (statusA[0] & (1 << 4)) {
 8002018:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <TransmitSafetyStatusA+0x9c>
		uint8_t msg[] = "OCC fault triggered! Charging will be disabled for a moment...\n";
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <TransmitSafetyStatusA+0x100>)
 8002026:	1d3c      	adds	r4, r7, #4
 8002028:	461d      	mov	r5, r3
 800202a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800202c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800202e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002036:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800203a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800203e:	1d39      	adds	r1, r7, #4
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	223f      	movs	r2, #63	; 0x3f
 8002046:	4818      	ldr	r0, [pc, #96]	; (80020a8 <TransmitSafetyStatusA+0xf8>)
 8002048:	f003 fed6 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Cell Overvoltage
	if (statusA[0] & (1 << 3)) {
 800204c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <TransmitSafetyStatusA+0xc4>
		uint8_t msg[] = "COV fault triggered! Charging will be disabled until voltage drops sufficiently.\n";
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <TransmitSafetyStatusA+0x104>)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4611      	mov	r1, r2
 800205e:	2252      	movs	r2, #82	; 0x52
 8002060:	4618      	mov	r0, r3
 8002062:	f004 fc3f 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002066:	1d39      	adds	r1, r7, #4
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	2251      	movs	r2, #81	; 0x51
 800206e:	480e      	ldr	r0, [pc, #56]	; (80020a8 <TransmitSafetyStatusA+0xf8>)
 8002070:	f003 fec2 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Cell Undervoltage
	if (statusA[0] & (1 << 2)) {
 8002074:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <TransmitSafetyStatusA+0xec>
		uint8_t msg[] = "CUV fault triggered! Discharging will be disabled until voltage rises sufficiently.\n";
 8002080:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <TransmitSafetyStatusA+0x108>)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	4611      	mov	r1, r2
 8002086:	2255      	movs	r2, #85	; 0x55
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fc2b 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800208e:	1d39      	adds	r1, r7, #4
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	2254      	movs	r2, #84	; 0x54
 8002096:	4804      	ldr	r0, [pc, #16]	; (80020a8 <TransmitSafetyStatusA+0xf8>)
 8002098:	f003 feae 	bl	8005df8 <HAL_UART_Transmit>
	}
}
 800209c:	bf00      	nop
 800209e:	3760      	adds	r7, #96	; 0x60
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bdb0      	pop	{r4, r5, r7, pc}
 80020a4:	08007620 	.word	0x08007620
 80020a8:	200000dc 	.word	0x200000dc
 80020ac:	08007664 	.word	0x08007664
 80020b0:	080076a8 	.word	0x080076a8
 80020b4:	080076e8 	.word	0x080076e8
 80020b8:	0800773c 	.word	0x0800773c

080020bc <TransmitSafetyStatusB>:

/**
 * Helper function to transmit UART messages corresponding to any faults detected in the
 * Safety Status B register
 */
void TransmitSafetyStatusB(void) {
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	b098      	sub	sp, #96	; 0x60
 80020c0:	af00      	add	r7, sp, #0
	// Read the bits of the Safety Status B register and transmit the appropriate message
	// if the corresponding fault was triggered
	uint8_t statusB[1] = {0};
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	DirectCmdRead(0x05, statusB, 1);
 80020c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020cc:	2201      	movs	r2, #1
 80020ce:	4619      	mov	r1, r3
 80020d0:	2005      	movs	r0, #5
 80020d2:	f7ff fc17 	bl	8001904 <DirectCmdRead>

	// FET Overtemperature
	if (statusB[0] & (1 << 7)) {
 80020d6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80020da:	b25b      	sxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	da0d      	bge.n	80020fc <TransmitSafetyStatusB+0x40>
		uint8_t msg[] = "OTF fault triggered! Discharging will be disabled for a moment...\n";
 80020e0:	4a47      	ldr	r2, [pc, #284]	; (8002200 <TransmitSafetyStatusB+0x144>)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	4611      	mov	r1, r2
 80020e6:	2243      	movs	r2, #67	; 0x43
 80020e8:	4618      	mov	r0, r3
 80020ea:	f004 fbfb 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80020ee:	1d39      	adds	r1, r7, #4
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	2242      	movs	r2, #66	; 0x42
 80020f6:	4843      	ldr	r0, [pc, #268]	; (8002204 <TransmitSafetyStatusB+0x148>)
 80020f8:	f003 fe7e 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Internal Overtemperature
	if (statusB[0] & (1 << 6)) {
 80020fc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00d      	beq.n	8002124 <TransmitSafetyStatusB+0x68>
		uint8_t msg[] = "OTINT fault triggered! All AFE operations will be disabled for a moment...\n";
 8002108:	4a3f      	ldr	r2, [pc, #252]	; (8002208 <TransmitSafetyStatusB+0x14c>)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	4611      	mov	r1, r2
 800210e:	224c      	movs	r2, #76	; 0x4c
 8002110:	4618      	mov	r0, r3
 8002112:	f004 fbe7 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002116:	1d39      	adds	r1, r7, #4
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
 800211c:	224b      	movs	r2, #75	; 0x4b
 800211e:	4839      	ldr	r0, [pc, #228]	; (8002204 <TransmitSafetyStatusB+0x148>)
 8002120:	f003 fe6a 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Overtemperature in Discharge
	if (statusB[0] & (1 << 5)) {
 8002124:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00d      	beq.n	800214c <TransmitSafetyStatusB+0x90>
		uint8_t msg[] = "OTD fault triggered! Discharging will be disabled for a moment...\n";
 8002130:	4a36      	ldr	r2, [pc, #216]	; (800220c <TransmitSafetyStatusB+0x150>)
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4611      	mov	r1, r2
 8002136:	2243      	movs	r2, #67	; 0x43
 8002138:	4618      	mov	r0, r3
 800213a:	f004 fbd3 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800213e:	1d39      	adds	r1, r7, #4
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
 8002144:	2242      	movs	r2, #66	; 0x42
 8002146:	482f      	ldr	r0, [pc, #188]	; (8002204 <TransmitSafetyStatusB+0x148>)
 8002148:	f003 fe56 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Overtemperature in Charge
	if (statusB[0] & (1 << 4)) {
 800214c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <TransmitSafetyStatusB+0xc4>
		uint8_t msg[] = "OTC fault triggered! Charging will be disabled for a moment...\n";
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <TransmitSafetyStatusB+0x154>)
 800215a:	1d3c      	adds	r4, r7, #4
 800215c:	461d      	mov	r5, r3
 800215e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800216e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8002172:	1d39      	adds	r1, r7, #4
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	223f      	movs	r2, #63	; 0x3f
 800217a:	4822      	ldr	r0, [pc, #136]	; (8002204 <TransmitSafetyStatusB+0x148>)
 800217c:	f003 fe3c 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Internal Undertemperature
	if (statusB[0] & (1 << 2)) {
 8002180:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <TransmitSafetyStatusB+0xec>
		uint8_t msg[] = "UTINT fault triggered! All AFE operations will be disabled for a moment...\n";
 800218c:	4a21      	ldr	r2, [pc, #132]	; (8002214 <TransmitSafetyStatusB+0x158>)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4611      	mov	r1, r2
 8002192:	224c      	movs	r2, #76	; 0x4c
 8002194:	4618      	mov	r0, r3
 8002196:	f004 fba5 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800219a:	1d39      	adds	r1, r7, #4
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	224b      	movs	r2, #75	; 0x4b
 80021a2:	4818      	ldr	r0, [pc, #96]	; (8002204 <TransmitSafetyStatusB+0x148>)
 80021a4:	f003 fe28 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Undertemperature in Discharge
	if (statusB[0] & (1 << 1)) {
 80021a8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00d      	beq.n	80021d0 <TransmitSafetyStatusB+0x114>
		uint8_t msg[] = "UTD fault triggered! No operational changes, but prolonged operation is not advised.\n";
 80021b4:	4a18      	ldr	r2, [pc, #96]	; (8002218 <TransmitSafetyStatusB+0x15c>)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	4611      	mov	r1, r2
 80021ba:	2256      	movs	r2, #86	; 0x56
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 fb91 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80021c2:	1d39      	adds	r1, r7, #4
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	2255      	movs	r2, #85	; 0x55
 80021ca:	480e      	ldr	r0, [pc, #56]	; (8002204 <TransmitSafetyStatusB+0x148>)
 80021cc:	f003 fe14 	bl	8005df8 <HAL_UART_Transmit>
	}
	// Undertemperature in Charge
	if (statusB[0] & 0x01) {
 80021d0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00d      	beq.n	80021f8 <TransmitSafetyStatusB+0x13c>
		uint8_t msg[] = "UTC fault triggered! No operational changes, but prolonged operation is not advised.\n";
 80021dc:	4a0f      	ldr	r2, [pc, #60]	; (800221c <TransmitSafetyStatusB+0x160>)
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	4611      	mov	r1, r2
 80021e2:	2256      	movs	r2, #86	; 0x56
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 fb7d 	bl	80068e4 <memcpy>
		HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80021ea:	1d39      	adds	r1, r7, #4
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295
 80021f0:	2255      	movs	r2, #85	; 0x55
 80021f2:	4804      	ldr	r0, [pc, #16]	; (8002204 <TransmitSafetyStatusB+0x148>)
 80021f4:	f003 fe00 	bl	8005df8 <HAL_UART_Transmit>
	}
}
 80021f8:	bf00      	nop
 80021fa:	3760      	adds	r7, #96	; 0x60
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002200:	08007794 	.word	0x08007794
 8002204:	200000dc 	.word	0x200000dc
 8002208:	080077d8 	.word	0x080077d8
 800220c:	08007824 	.word	0x08007824
 8002210:	08007868 	.word	0x08007868
 8002214:	080078a8 	.word	0x080078a8
 8002218:	080078f4 	.word	0x080078f4
 800221c:	0800794c 	.word	0x0800794c

08002220 <T4_Acquire>:

int16_t T4_Acquire(void) {
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
    float T4_volt = 0.0;
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
    float T4_res = 0.0;
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
    float T4_temp = 0.0;
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	607b      	str	r3, [r7, #4]
    int16_t T4 = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	82fb      	strh	r3, [r7, #22]

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8002240:	485f      	ldr	r0, [pc, #380]	; (80023c0 <T4_Acquire+0x1a0>)
 8002242:	f000 feb1 	bl	8002fa8 <HAL_ADC_Start>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <T4_Acquire+0x30>
        // Start error
        Error_Handler();
 800224c:	f000 f8be 	bl	80023cc <Error_Handler>
    }

    // Poll for end of conversion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	485a      	ldr	r0, [pc, #360]	; (80023c0 <T4_Acquire+0x1a0>)
 8002256:	f000 ff95 	bl	8003184 <HAL_ADC_PollForConversion>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	f040 808a 	bne.w	8002376 <T4_Acquire+0x156>
        // Read the ADC conversion result (12-bit resolution)
        adcValue = HAL_ADC_GetValue(&hadc1);
 8002262:	4857      	ldr	r0, [pc, #348]	; (80023c0 <T4_Acquire+0x1a0>)
 8002264:	f001 f866 	bl	8003334 <HAL_ADC_GetValue>
 8002268:	6138      	str	r0, [r7, #16]

        // Convert ADC value to voltage (divide by max. ADC counts, multiply by VREF (3.3V))
        T4_volt = ((float)adcValue / 4095.0) * V_REF;
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002274:	ee17 0a90 	vmov	r0, s15
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	a342      	add	r3, pc, #264	; (adr r3, 8002388 <T4_Acquire+0x168>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe fae3 	bl	800084c <__aeabi_ddiv>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	a340      	add	r3, pc, #256	; (adr r3, 8002390 <T4_Acquire+0x170>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fe f9b0 	bl	80005f8 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fc82 	bl	8000ba8 <__aeabi_d2f>
 80022a4:	4603      	mov	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]
        // Calculate thermistor resistance based on voltage (voltage divider rearranged)
        T4_res = T4_PU_R * (T4_volt / (T4_PU_V - T4_volt));
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7fe f94d 	bl	8000548 <__aeabi_f2d>
 80022ae:	4604      	mov	r4, r0
 80022b0:	460d      	mov	r5, r1
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7fe f948 	bl	8000548 <__aeabi_f2d>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	a136      	add	r1, pc, #216	; (adr r1, 8002398 <T4_Acquire+0x178>)
 80022be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022c2:	f7fd ffe1 	bl	8000288 <__aeabi_dsub>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7fe fabd 	bl	800084c <__aeabi_ddiv>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	a331      	add	r3, pc, #196	; (adr r3, 80023a0 <T4_Acquire+0x180>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fe f98a 	bl	80005f8 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fc5c 	bl	8000ba8 <__aeabi_d2f>
 80022f0:	4603      	mov	r3, r0
 80022f2:	60bb      	str	r3, [r7, #8]
        // Using thermistor's beta value, calculate the temperature
//        T4_temp = 1.0 / ((1.0 / 298.15) + (1.0 / T4_BETA) * log(T4_res / T4_R0));
        T4_temp = 1.0 / ((1.0 / 298.15) + (log(T4_res / T4_R0)) / T4_BETA);
 80022f4:	68b8      	ldr	r0, [r7, #8]
 80022f6:	f7fe f927 	bl	8000548 <__aeabi_f2d>
 80022fa:	a32b      	add	r3, pc, #172	; (adr r3, 80023a8 <T4_Acquire+0x188>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe faa4 	bl	800084c <__aeabi_ddiv>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	ec43 2b17 	vmov	d7, r2, r3
 800230c:	eeb0 0a47 	vmov.f32	s0, s14
 8002310:	eef0 0a67 	vmov.f32	s1, s15
 8002314:	f004 ff38 	bl	8007188 <log>
 8002318:	ec51 0b10 	vmov	r0, r1, d0
 800231c:	a324      	add	r3, pc, #144	; (adr r3, 80023b0 <T4_Acquire+0x190>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe fa93 	bl	800084c <__aeabi_ddiv>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	a322      	add	r3, pc, #136	; (adr r3, 80023b8 <T4_Acquire+0x198>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fd ffaa 	bl	800028c <__adddf3>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	f04f 0000 	mov.w	r0, #0
 8002340:	4920      	ldr	r1, [pc, #128]	; (80023c4 <T4_Acquire+0x1a4>)
 8002342:	f7fe fa83 	bl	800084c <__aeabi_ddiv>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f7fe fc2b 	bl	8000ba8 <__aeabi_d2f>
 8002352:	4603      	mov	r3, r0
 8002354:	607b      	str	r3, [r7, #4]
        // Convert value in Kelvin to 16-bit integer like the other temperature measurements (units of 0.1K)
        T4 = (int16_t)(T4_temp * 10.0);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe f8f6 	bl	8000548 <__aeabi_f2d>
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <T4_Acquire+0x1a8>)
 8002362:	f7fe f949 	bl	80005f8 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fbf3 	bl	8000b58 <__aeabi_d2iz>
 8002372:	4603      	mov	r3, r0
 8002374:	82fb      	strh	r3, [r7, #22]
    }

    // Stop the ADC conversion
    HAL_ADC_Stop(&hadc1);
 8002376:	4812      	ldr	r0, [pc, #72]	; (80023c0 <T4_Acquire+0x1a0>)
 8002378:	f000 fed0 	bl	800311c <HAL_ADC_Stop>

    return T4;
 800237c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bdb0      	pop	{r4, r5, r7, pc}
 8002388:	00000000 	.word	0x00000000
 800238c:	40affe00 	.word	0x40affe00
 8002390:	d2f1a9fc 	.word	0xd2f1a9fc
 8002394:	4000624d 	.word	0x4000624d
 8002398:	66666666 	.word	0x66666666
 800239c:	400a6666 	.word	0x400a6666
 80023a0:	00000000 	.word	0x00000000
 80023a4:	40d16200 	.word	0x40d16200
 80023a8:	00000000 	.word	0x00000000
 80023ac:	40c38800 	.word	0x40c38800
 80023b0:	00000000 	.word	0x00000000
 80023b4:	40aad600 	.word	0x40aad600
 80023b8:	dcb5db83 	.word	0xdcb5db83
 80023bc:	3f6b79e1 	.word	0x3f6b79e1
 80023c0:	20000164 	.word	0x20000164
 80023c4:	3ff00000 	.word	0x3ff00000
 80023c8:	40240000 	.word	0x40240000

080023cc <Error_Handler>:

/**
 * Error handler if a UART transmission error occurs
 * TODO: Implement this
 */
void Error_Handler(void) {
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
    // Stay in an infinite loop to allow for debugging
    while (1);
 80023d0:	e7fe      	b.n	80023d0 <Error_Handler+0x4>
	...

080023d4 <HAL_GPIO_EXTI_Callback>:

/**
 * Callback function for handling an interrupt from a GPIO pin
 * @param GPIO_Pin The GPIO pin number where an interrupt was received
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
	uint8_t msg[] = "Interrupt! ";
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <HAL_GPIO_EXTI_Callback+0x3c>)
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80023ea:	f107 010c 	add.w	r1, r7, #12
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	220b      	movs	r2, #11
 80023f4:	4807      	ldr	r0, [pc, #28]	; (8002414 <HAL_GPIO_EXTI_Callback+0x40>)
 80023f6:	f003 fcff 	bl	8005df8 <HAL_UART_Transmit>

	switch (GPIO_Pin) {
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d102      	bne.n	8002406 <HAL_GPIO_EXTI_Callback+0x32>
	case GPIO_PIN_4:
		logAlertsFlag = true;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_GPIO_EXTI_Callback+0x44>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
	}
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	080079a4 	.word	0x080079a4
 8002414:	200000dc 	.word	0x200000dc
 8002418:	200001c9 	.word	0x200001c9

0800241c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_MspInit+0x44>)
 8002424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <HAL_MspInit+0x44>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6613      	str	r3, [r2, #96]	; 0x60
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_MspInit+0x44>)
 8002430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_MspInit+0x44>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	4a08      	ldr	r2, [pc, #32]	; (8002460 <HAL_MspInit+0x44>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	6593      	str	r3, [r2, #88]	; 0x58
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_MspInit+0x44>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000

08002464 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <HAL_ADC_MspInit+0x74>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d124      	bne.n	80024d0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_ADC_MspInit+0x78>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	4a14      	ldr	r2, [pc, #80]	; (80024dc <HAL_ADC_MspInit+0x78>)
 800248c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_ADC_MspInit+0x78>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_ADC_MspInit+0x78>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <HAL_ADC_MspInit+0x78>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_ADC_MspInit+0x78>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024b6:	2310      	movs	r3, #16
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024ba:	230b      	movs	r3, #11
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024cc:	f001 fdf0 	bl	80040b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	50040000 	.word	0x50040000
 80024dc:	40021000 	.word	0x40021000

080024e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_SPI_MspInit+0x7c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d128      	bne.n	8002554 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800250c:	6613      	str	r3, [r2, #96]	; 0x60
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_SPI_MspInit+0x80>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002532:	23e0      	movs	r3, #224	; 0xe0
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002542:	2305      	movs	r3, #5
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002550:	f001 fdae 	bl	80040b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40013000 	.word	0x40013000
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b096      	sub	sp, #88	; 0x58
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	2234      	movs	r2, #52	; 0x34
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f004 f965 	bl	8006854 <memset>
  if(huart->Instance==USART1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_UART_MspInit+0xa4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d135      	bne.n	8002600 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002594:	2301      	movs	r3, #1
 8002596:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fe2b 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025ac:	f7ff ff0e 	bl	80023cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_UART_MspInit+0xa8>)
 80025b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b4:	4a15      	ldr	r2, [pc, #84]	; (800260c <HAL_UART_MspInit+0xa8>)
 80025b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ba:	6613      	str	r3, [r2, #96]	; 0x60
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_UART_MspInit+0xa8>)
 80025be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_UART_MspInit+0xa8>)
 80025ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025cc:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_UART_MspInit+0xa8>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_UART_MspInit+0xa8>)
 80025d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025e0:	23c0      	movs	r3, #192	; 0xc0
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025f0:	2307      	movs	r3, #7
 80025f2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025f8:	4619      	mov	r1, r3
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <HAL_UART_MspInit+0xac>)
 80025fc:	f001 fd58 	bl	80040b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002600:	bf00      	nop
 8002602:	3758      	adds	r7, #88	; 0x58
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40013800 	.word	0x40013800
 800260c:	40021000 	.word	0x40021000
 8002610:	48000400 	.word	0x48000400

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002618:	e7fe      	b.n	8002618 <NMI_Handler+0x4>

0800261a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261e:	e7fe      	b.n	800261e <HardFault_Handler+0x4>

08002620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <MemManage_Handler+0x4>

08002626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <BusFault_Handler+0x4>

0800262c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <UsageFault_Handler+0x4>

08002632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002660:	f000 f8d0 	bl	8002804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}

08002668 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800266c:	2002      	movs	r0, #2
 800266e:	f001 fec3 	bl	80043f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <_sbrk+0x5c>)
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <_sbrk+0x60>)
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <_sbrk+0x64>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <_sbrk+0x68>)
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d207      	bcs.n	80026b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a8:	f004 f8f0 	bl	800688c <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	220c      	movs	r2, #12
 80026b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	e009      	b.n	80026cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <_sbrk+0x64>)
 80026c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000a000 	.word	0x2000a000
 80026d8:	00000400 	.word	0x00000400
 80026dc:	200001cc 	.word	0x200001cc
 80026e0:	20000320 	.word	0x20000320

080026e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <SystemInit+0x20>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <SystemInit+0x20>)
 80026f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002740 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800270c:	f7ff ffea 	bl	80026e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002710:	480c      	ldr	r0, [pc, #48]	; (8002744 <LoopForever+0x6>)
  ldr r1, =_edata
 8002712:	490d      	ldr	r1, [pc, #52]	; (8002748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <LoopForever+0xe>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002718:	e002      	b.n	8002720 <LoopCopyDataInit>

0800271a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800271c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271e:	3304      	adds	r3, #4

08002720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002724:	d3f9      	bcc.n	800271a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002728:	4c0a      	ldr	r4, [pc, #40]	; (8002754 <LoopForever+0x16>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800272c:	e001      	b.n	8002732 <LoopFillZerobss>

0800272e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002730:	3204      	adds	r2, #4

08002732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002734:	d3fb      	bcc.n	800272e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002736:	f004 f8af 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800273a:	f7fe fc81 	bl	8001040 <main>

0800273e <LoopForever>:

LoopForever:
    b LoopForever
 800273e:	e7fe      	b.n	800273e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002740:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002748:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800274c:	08007a3c 	.word	0x08007a3c
  ldr r2, =_sbss
 8002750:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002754:	2000031c 	.word	0x2000031c

08002758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002758:	e7fe      	b.n	8002758 <ADC1_2_IRQHandler>

0800275a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002764:	2003      	movs	r0, #3
 8002766:	f001 fc61 	bl	800402c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800276a:	200f      	movs	r0, #15
 800276c:	f000 f80e 	bl	800278c <HAL_InitTick>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	71fb      	strb	r3, [r7, #7]
 800277a:	e001      	b.n	8002780 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800277c:	f7ff fe4e 	bl	800241c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002780:	79fb      	ldrb	r3, [r7, #7]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_InitTick+0x6c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_InitTick+0x70>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_InitTick+0x6c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 fc6d 	bl	8004096 <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b0f      	cmp	r3, #15
 80027c6:	d809      	bhi.n	80027dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c8:	2200      	movs	r2, #0
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f001 fc37 	bl	8004042 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_InitTick+0x74>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e007      	b.n	80027ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e004      	b.n	80027ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	e001      	b.n	80027ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000008 	.word	0x20000008
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x20>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_IncTick+0x24>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4413      	add	r3, r2
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_IncTick+0x24>)
 8002816:	6013      	str	r3, [r2, #0]
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000008 	.word	0x20000008
 8002828:	200001d0 	.word	0x200001d0

0800282c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return uwTick;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_GetTick+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	200001d0 	.word	0x200001d0

08002844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff ffee 	bl	800282c <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d005      	beq.n	800286a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_Delay+0x44>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800286a:	bf00      	nop
 800286c:	f7ff ffde 	bl	800282c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	429a      	cmp	r2, r3
 800287a:	d8f7      	bhi.n	800286c <HAL_Delay+0x28>
  {
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000008 	.word	0x20000008

0800288c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3360      	adds	r3, #96	; 0x60
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <LL_ADC_SetOffset+0x44>)
 8002916:	4013      	ands	r3, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	03fff000 	.word	0x03fff000

0800293c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3360      	adds	r3, #96	; 0x60
 800294a:	461a      	mov	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3360      	adds	r3, #96	; 0x60
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	431a      	orrs	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	615a      	str	r2, [r3, #20]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b087      	sub	sp, #28
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3330      	adds	r3, #48	; 0x30
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	4413      	add	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	211f      	movs	r1, #31
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	f003 011f 	and.w	r1, r3, #31
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b087      	sub	sp, #28
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3314      	adds	r3, #20
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	0e5b      	lsrs	r3, r3, #25
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	4413      	add	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	0d1b      	lsrs	r3, r3, #20
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2107      	movs	r1, #7
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	0d1b      	lsrs	r3, r3, #20
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	431a      	orrs	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0318 	and.w	r3, r3, #24
 8002aba:	4908      	ldr	r1, [pc, #32]	; (8002adc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002abc:	40d9      	lsrs	r1, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	0007ffff 	.word	0x0007ffff

08002ae0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 031f 	and.w	r3, r3, #31
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6093      	str	r3, [r2, #8]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b50:	d101      	bne.n	8002b56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba0:	d101      	bne.n	8002ba6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bf0:	f043 0202 	orr.w	r2, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <LL_ADC_IsEnabled+0x18>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <LL_ADC_IsEnabled+0x1a>
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d101      	bne.n	8002c42 <LL_ADC_IsDisableOngoing+0x18>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <LL_ADC_IsDisableOngoing+0x1a>
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c64:	f043 0204 	orr.w	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c8c:	f043 0210 	orr.w	r2, r3, #16
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d101      	bne.n	8002cb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d101      	bne.n	8002d06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e12b      	b.n	8002f86 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff fb91 	bl	8002464 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fef1 	bl	8002b3c <LL_ADC_IsDeepPowerDownEnabled>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fed7 	bl	8002b18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff0c 	bl	8002b8c <LL_ADC_IsInternalRegulatorEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d115      	bne.n	8002da6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fef0 	bl	8002b64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d84:	4b82      	ldr	r3, [pc, #520]	; (8002f90 <HAL_ADC_Init+0x27c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	4a82      	ldr	r2, [pc, #520]	; (8002f94 <HAL_ADC_Init+0x280>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d98:	e002      	b.n	8002da0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f9      	bne.n	8002d9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff feee 	bl	8002b8c <LL_ADC_IsInternalRegulatorEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10d      	bne.n	8002dd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ff62 	bl	8002ca0 <LL_ADC_REG_IsConversionOngoing>
 8002ddc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 80c4 	bne.w	8002f74 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 80c0 	bne.w	8002f74 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dfc:	f043 0202 	orr.w	r2, r3, #2
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fefb 	bl	8002c04 <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d110      	bne.n	8002e36 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e14:	4860      	ldr	r0, [pc, #384]	; (8002f98 <HAL_ADC_Init+0x284>)
 8002e16:	f7ff fef5 	bl	8002c04 <LL_ADC_IsEnabled>
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	485f      	ldr	r0, [pc, #380]	; (8002f9c <HAL_ADC_Init+0x288>)
 8002e1e:	f7ff fef1 	bl	8002c04 <LL_ADC_IsEnabled>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4323      	orrs	r3, r4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	485b      	ldr	r0, [pc, #364]	; (8002fa0 <HAL_ADC_Init+0x28c>)
 8002e32:	f7ff fd2b 	bl	800288c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7e5b      	ldrb	r3, [r3, #25]
 8002e3a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e40:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e46:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e4c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	045b      	lsls	r3, r3, #17
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <HAL_ADC_Init+0x290>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	69b9      	ldr	r1, [r7, #24]
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff21 	bl	8002cee <LL_ADC_INJ_IsConversionOngoing>
 8002eac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d13d      	bne.n	8002f30 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d13a      	bne.n	8002f30 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ebe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ec6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed6:	f023 0302 	bic.w	r3, r3, #2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d118      	bne.n	8002f20 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f04:	4311      	orrs	r1, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f0a:	4311      	orrs	r1, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f10:	430a      	orrs	r2, r1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	611a      	str	r2, [r3, #16]
 8002f1e:	e007      	b.n	8002f30 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f023 010f 	bic.w	r1, r3, #15
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f50:	e007      	b.n	8002f62 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 020f 	bic.w	r2, r2, #15
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	f043 0201 	orr.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54
 8002f72:	e007      	b.n	8002f84 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f043 0210 	orr.w	r2, r3, #16
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000
 8002f94:	053e2d63 	.word	0x053e2d63
 8002f98:	50040000 	.word	0x50040000
 8002f9c:	50040100 	.word	0x50040100
 8002fa0:	50040300 	.word	0x50040300
 8002fa4:	fff0c007 	.word	0xfff0c007

08002fa8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fb0:	4857      	ldr	r0, [pc, #348]	; (8003110 <HAL_ADC_Start+0x168>)
 8002fb2:	f7ff fd95 	bl	8002ae0 <LL_ADC_GetMultimode>
 8002fb6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fe6f 	bl	8002ca0 <LL_ADC_REG_IsConversionOngoing>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 809c 	bne.w	8003102 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_Start+0x30>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e097      	b.n	8003108 <HAL_ADC_Start+0x160>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fe6d 	bl	8003cc0 <ADC_Enable>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 8083 	bne.w	80030f8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a42      	ldr	r2, [pc, #264]	; (8003114 <HAL_ADC_Start+0x16c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d002      	beq.n	8003016 <HAL_ADC_Start+0x6e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e000      	b.n	8003018 <HAL_ADC_Start+0x70>
 8003016:	4b40      	ldr	r3, [pc, #256]	; (8003118 <HAL_ADC_Start+0x170>)
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	4293      	cmp	r3, r2
 800301e:	d002      	beq.n	8003026 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d105      	bne.n	8003032 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	d106      	bne.n	800304e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f023 0206 	bic.w	r2, r3, #6
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	659a      	str	r2, [r3, #88]	; 0x58
 800304c:	e002      	b.n	8003054 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	221c      	movs	r2, #28
 800305a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <HAL_ADC_Start+0x16c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d002      	beq.n	8003074 <HAL_ADC_Start+0xcc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	e000      	b.n	8003076 <HAL_ADC_Start+0xce>
 8003074:	4b28      	ldr	r3, [pc, #160]	; (8003118 <HAL_ADC_Start+0x170>)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	4293      	cmp	r3, r2
 800307c:	d008      	beq.n	8003090 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b05      	cmp	r3, #5
 8003088:	d002      	beq.n	8003090 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b09      	cmp	r3, #9
 800308e:	d114      	bne.n	80030ba <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fdcc 	bl	8002c50 <LL_ADC_REG_StartConversion>
 80030b8:	e025      	b.n	8003106 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <HAL_ADC_Start+0x16c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d002      	beq.n	80030d6 <HAL_ADC_Start+0x12e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	e000      	b.n	80030d8 <HAL_ADC_Start+0x130>
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_ADC_Start+0x170>)
 80030d8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00f      	beq.n	8003106 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
 80030f6:	e006      	b.n	8003106 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003100:	e001      	b.n	8003106 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003102:	2302      	movs	r3, #2
 8003104:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003106:	7dfb      	ldrb	r3, [r7, #23]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	50040300 	.word	0x50040300
 8003114:	50040100 	.word	0x50040100
 8003118:	50040000 	.word	0x50040000

0800311c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Stop+0x16>
 800312e:	2302      	movs	r3, #2
 8003130:	e023      	b.n	800317a <HAL_ADC_Stop+0x5e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800313a:	2103      	movs	r1, #3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fd03 	bl	8003b48 <ADC_ConversionStop>
 8003142:	4603      	mov	r3, r0
 8003144:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d111      	bne.n	8003170 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fe3d 	bl	8003dcc <ADC_Disable>
 8003152:	4603      	mov	r3, r0
 8003154:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800318e:	4866      	ldr	r0, [pc, #408]	; (8003328 <HAL_ADC_PollForConversion+0x1a4>)
 8003190:	f7ff fca6 	bl	8002ae0 <LL_ADC_GetMultimode>
 8003194:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d102      	bne.n	80031a4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800319e:	2308      	movs	r3, #8
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	e02a      	b.n	80031fa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d002      	beq.n	80031b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b09      	cmp	r3, #9
 80031b4:	d111      	bne.n	80031da <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0a4      	b.n	800331e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031d4:	2304      	movs	r3, #4
 80031d6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031d8:	e00f      	b.n	80031fa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031da:	4853      	ldr	r0, [pc, #332]	; (8003328 <HAL_ADC_PollForConversion+0x1a4>)
 80031dc:	f7ff fc8e 	bl	8002afc <LL_ADC_GetMultiDMATransfer>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e093      	b.n	800331e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031f6:	2304      	movs	r3, #4
 80031f8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80031fa:	f7ff fb17 	bl	800282c <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003200:	e021      	b.n	8003246 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d01d      	beq.n	8003246 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800320a:	f7ff fb0f 	bl	800282c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <HAL_ADC_PollForConversion+0x9c>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d112      	bne.n	8003246 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f043 0204 	orr.w	r2, r3, #4
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e06b      	b.n	800331e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0d6      	beq.n	8003202 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fbad 	bl	80029c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01c      	beq.n	80032aa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7e5b      	ldrb	r3, [r3, #25]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d118      	bne.n	80032aa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b08      	cmp	r3, #8
 8003284:	d111      	bne.n	80032aa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1f      	ldr	r2, [pc, #124]	; (800332c <HAL_ADC_PollForConversion+0x1a8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d002      	beq.n	80032ba <HAL_ADC_PollForConversion+0x136>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	e000      	b.n	80032bc <HAL_ADC_PollForConversion+0x138>
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_ADC_PollForConversion+0x1ac>)
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d008      	beq.n	80032d6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d002      	beq.n	80032d6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	d104      	bne.n	80032e0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	e00c      	b.n	80032fa <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_ADC_PollForConversion+0x1a8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d002      	beq.n	80032f0 <HAL_ADC_PollForConversion+0x16c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e000      	b.n	80032f2 <HAL_ADC_PollForConversion+0x16e>
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_ADC_PollForConversion+0x1ac>)
 80032f2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d104      	bne.n	800330a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2208      	movs	r2, #8
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e008      	b.n	800331c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	220c      	movs	r2, #12
 800331a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	50040300 	.word	0x50040300
 800332c:	50040100 	.word	0x50040100
 8003330:	50040000 	.word	0x50040000

08003334 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b0b6      	sub	sp, #216	; 0xd8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x22>
 800336e:	2302      	movs	r3, #2
 8003370:	e3d5      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x7ce>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fc8e 	bl	8002ca0 <LL_ADC_REG_IsConversionOngoing>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 83ba 	bne.w	8003b00 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b05      	cmp	r3, #5
 800339a:	d824      	bhi.n	80033e6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	3b02      	subs	r3, #2
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d81b      	bhi.n	80033de <HAL_ADC_ConfigChannel+0x8e>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_ADC_ConfigChannel+0x5c>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033bd 	.word	0x080033bd
 80033b0:	080033c5 	.word	0x080033c5
 80033b4:	080033cd 	.word	0x080033cd
 80033b8:	080033d5 	.word	0x080033d5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80033bc:	230c      	movs	r3, #12
 80033be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80033c2:	e010      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80033c4:	2312      	movs	r3, #18
 80033c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80033ca:	e00c      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80033cc:	2318      	movs	r3, #24
 80033ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80033d2:	e008      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80033d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80033dc:	e003      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80033de:	2306      	movs	r3, #6
 80033e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80033e4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80033f4:	f7ff faf9 	bl	80029ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fc4f 	bl	8002ca0 <LL_ADC_REG_IsConversionOngoing>
 8003402:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fc6f 	bl	8002cee <LL_ADC_INJ_IsConversionOngoing>
 8003410:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 81bf 	bne.w	800379c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800341e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 81ba 	bne.w	800379c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003430:	d10f      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2200      	movs	r2, #0
 800343c:	4619      	mov	r1, r3
 800343e:	f7ff fb00 	bl	8002a42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff faa7 	bl	800299e <LL_ADC_SetSamplingTimeCommonConfig>
 8003450:	e00e      	b.n	8003470 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff faef 	bl	8002a42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fa97 	bl	800299e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	08db      	lsrs	r3, r3, #3
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d00a      	beq.n	80034a8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6919      	ldr	r1, [r3, #16]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034a2:	f7ff fa27 	bl	80028f4 <LL_ADC_SetOffset>
 80034a6:	e179      	b.n	800379c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fa44 	bl	800293c <LL_ADC_GetOffsetChannel>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x184>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fa39 	bl	800293c <LL_ADC_GetOffsetChannel>
 80034ca:	4603      	mov	r3, r0
 80034cc:	0e9b      	lsrs	r3, r3, #26
 80034ce:	f003 021f 	and.w	r2, r3, #31
 80034d2:	e01e      	b.n	8003512 <HAL_ADC_ConfigChannel+0x1c2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fa2e 	bl	800293c <LL_ADC_GetOffsetChannel>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003502:	2320      	movs	r3, #32
 8003504:	e004      	b.n	8003510 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003506:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351a:	2b00      	cmp	r3, #0
 800351c:	d105      	bne.n	800352a <HAL_ADC_ConfigChannel+0x1da>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	0e9b      	lsrs	r3, r3, #26
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	e018      	b.n	800355c <HAL_ADC_ConfigChannel+0x20c>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800353e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800354e:	2320      	movs	r3, #32
 8003550:	e004      	b.n	800355c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800355c:	429a      	cmp	r2, r3
 800355e:	d106      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff f9fd 	bl	8002968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2101      	movs	r1, #1
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff f9e1 	bl	800293c <LL_ADC_GetOffsetChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <HAL_ADC_ConfigChannel+0x24a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff f9d6 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003590:	4603      	mov	r3, r0
 8003592:	0e9b      	lsrs	r3, r3, #26
 8003594:	f003 021f 	and.w	r2, r3, #31
 8003598:	e01e      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x288>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff f9cb 	bl	800293c <LL_ADC_GetOffsetChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80035b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80035c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80035c8:	2320      	movs	r3, #32
 80035ca:	e004      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80035cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x2a0>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	e018      	b.n	8003622 <HAL_ADC_ConfigChannel+0x2d2>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800360c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003614:	2320      	movs	r3, #32
 8003616:	e004      	b.n	8003622 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003622:	429a      	cmp	r2, r3
 8003624:	d106      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff f99a 	bl	8002968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff f97e 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003640:	4603      	mov	r3, r0
 8003642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x310>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2102      	movs	r1, #2
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f973 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	0e9b      	lsrs	r3, r3, #26
 800365a:	f003 021f 	and.w	r2, r3, #31
 800365e:	e01e      	b.n	800369e <HAL_ADC_ConfigChannel+0x34e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2102      	movs	r1, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f968 	bl	800293c <LL_ADC_GetOffsetChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800367e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800368e:	2320      	movs	r3, #32
 8003690:	e004      	b.n	800369c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x366>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0e9b      	lsrs	r3, r3, #26
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	e014      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x390>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80036c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80036ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80036d2:	2320      	movs	r3, #32
 80036d4:	e004      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80036d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d106      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f93b 	bl	8002968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2103      	movs	r1, #3
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff f91f 	bl	800293c <LL_ADC_GetOffsetChannel>
 80036fe:	4603      	mov	r3, r0
 8003700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <HAL_ADC_ConfigChannel+0x3ce>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2103      	movs	r1, #3
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f914 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003714:	4603      	mov	r3, r0
 8003716:	0e9b      	lsrs	r3, r3, #26
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	e017      	b.n	800374e <HAL_ADC_ConfigChannel+0x3fe>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2103      	movs	r1, #3
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff f909 	bl	800293c <LL_ADC_GetOffsetChannel>
 800372a:	4603      	mov	r3, r0
 800372c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003738:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800373a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x416>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	0e9b      	lsrs	r3, r3, #26
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	e011      	b.n	800378a <HAL_ADC_ConfigChannel+0x43a>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003776:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800377e:	2320      	movs	r3, #32
 8003780:	e003      	b.n	800378a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800378a:	429a      	cmp	r2, r3
 800378c:	d106      	bne.n	800379c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	2103      	movs	r1, #3
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff f8e6 	bl	8002968 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fa2f 	bl	8002c04 <LL_ADC_IsEnabled>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 813f 	bne.w	8003a2c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6819      	ldr	r1, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f7ff f96c 	bl	8002a98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a8e      	ldr	r2, [pc, #568]	; (8003a00 <HAL_ADC_ConfigChannel+0x6b0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	f040 8130 	bne.w	8003a2c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x4a4>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	3301      	adds	r3, #1
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2b09      	cmp	r3, #9
 80037ea:	bf94      	ite	ls
 80037ec:	2301      	movls	r3, #1
 80037ee:	2300      	movhi	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e019      	b.n	8003828 <HAL_ADC_ConfigChannel+0x4d8>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003804:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e003      	b.n	8003818 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2b09      	cmp	r3, #9
 8003820:	bf94      	ite	ls
 8003822:	2301      	movls	r3, #1
 8003824:	2300      	movhi	r3, #0
 8003826:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003828:	2b00      	cmp	r3, #0
 800382a:	d079      	beq.n	8003920 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x4f8>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0e9b      	lsrs	r3, r3, #26
 800383e:	3301      	adds	r3, #1
 8003840:	069b      	lsls	r3, r3, #26
 8003842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003846:	e015      	b.n	8003874 <HAL_ADC_ConfigChannel+0x524>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003858:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800385a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e003      	b.n	800386c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	069b      	lsls	r3, r3, #26
 8003870:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x544>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	3301      	adds	r3, #1
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	e017      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x574>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80038a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80038a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80038ac:	2320      	movs	r3, #32
 80038ae:	e003      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80038b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	ea42 0103 	orr.w	r1, r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x59a>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	0e9b      	lsrs	r3, r3, #26
 80038da:	3301      	adds	r3, #1
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	051b      	lsls	r3, r3, #20
 80038e8:	e018      	b.n	800391c <HAL_ADC_ConfigChannel+0x5cc>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80038fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003902:	2320      	movs	r3, #32
 8003904:	e003      	b.n	800390e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	3301      	adds	r3, #1
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800391c:	430b      	orrs	r3, r1
 800391e:	e080      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_ADC_ConfigChannel+0x5ec>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0e9b      	lsrs	r3, r3, #26
 8003932:	3301      	adds	r3, #1
 8003934:	069b      	lsls	r3, r3, #26
 8003936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800393a:	e015      	b.n	8003968 <HAL_ADC_ConfigChannel+0x618>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003954:	2320      	movs	r3, #32
 8003956:	e003      	b.n	8003960 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	3301      	adds	r3, #1
 8003962:	069b      	lsls	r3, r3, #26
 8003964:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x638>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0e9b      	lsrs	r3, r3, #26
 800397a:	3301      	adds	r3, #1
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	e017      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x668>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	61bb      	str	r3, [r7, #24]
  return result;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80039a0:	2320      	movs	r3, #32
 80039a2:	e003      	b.n	80039ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	fab3 f383 	clz	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2101      	movs	r1, #1
 80039b4:	fa01 f303 	lsl.w	r3, r1, r3
 80039b8:	ea42 0103 	orr.w	r1, r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x694>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	0e9b      	lsrs	r3, r3, #26
 80039ce:	3301      	adds	r3, #1
 80039d0:	f003 021f 	and.w	r2, r3, #31
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	3b1e      	subs	r3, #30
 80039dc:	051b      	lsls	r3, r3, #20
 80039de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039e2:	e01d      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x6d0>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	60fb      	str	r3, [r7, #12]
  return result;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80039fc:	2320      	movs	r3, #32
 80039fe:	e005      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x6bc>
 8003a00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f003 021f 	and.w	r2, r3, #31
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	3b1e      	subs	r3, #30
 8003a1a:	051b      	lsls	r3, r3, #20
 8003a1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a20:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7ff f80b 	bl	8002a42 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d06c      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a38:	483c      	ldr	r0, [pc, #240]	; (8003b2c <HAL_ADC_ConfigChannel+0x7dc>)
 8003a3a:	f7fe ff4d 	bl	80028d8 <LL_ADC_GetCommonPathInternalCh>
 8003a3e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_ADC_ConfigChannel+0x7e0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d127      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d121      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a35      	ldr	r2, [pc, #212]	; (8003b34 <HAL_ADC_ConfigChannel+0x7e4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d157      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	482f      	ldr	r0, [pc, #188]	; (8003b2c <HAL_ADC_ConfigChannel+0x7dc>)
 8003a6e:	f7fe ff20 	bl	80028b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a72:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_ADC_ConfigChannel+0x7e8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	4a30      	ldr	r2, [pc, #192]	; (8003b3c <HAL_ADC_ConfigChannel+0x7ec>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a8c:	e002      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f9      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a9a:	e03a      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a27      	ldr	r2, [pc, #156]	; (8003b40 <HAL_ADC_ConfigChannel+0x7f0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d113      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <HAL_ADC_ConfigChannel+0x7e4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d12a      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003abc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4819      	ldr	r0, [pc, #100]	; (8003b2c <HAL_ADC_ConfigChannel+0x7dc>)
 8003ac8:	f7fe fef3 	bl	80028b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003acc:	e021      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_ADC_ConfigChannel+0x7f4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d11c      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d116      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <HAL_ADC_ConfigChannel+0x7e4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d111      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003af2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003af6:	4619      	mov	r1, r3
 8003af8:	480c      	ldr	r0, [pc, #48]	; (8003b2c <HAL_ADC_ConfigChannel+0x7dc>)
 8003afa:	f7fe feda 	bl	80028b2 <LL_ADC_SetCommonPathInternalCh>
 8003afe:	e008      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	37d8      	adds	r7, #216	; 0xd8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	80080000 	.word	0x80080000
 8003b2c:	50040300 	.word	0x50040300
 8003b30:	c7520000 	.word	0xc7520000
 8003b34:	50040000 	.word	0x50040000
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	053e2d63 	.word	0x053e2d63
 8003b40:	cb840000 	.word	0xcb840000
 8003b44:	80000001 	.word	0x80000001

08003b48 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff f89e 	bl	8002ca0 <LL_ADC_REG_IsConversionOngoing>
 8003b64:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff f8bf 	bl	8002cee <LL_ADC_INJ_IsConversionOngoing>
 8003b70:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d103      	bne.n	8003b80 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8098 	beq.w	8003cb0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02a      	beq.n	8003be4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	7e5b      	ldrb	r3, [r3, #25]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d126      	bne.n	8003be4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7e1b      	ldrb	r3, [r3, #24]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d122      	bne.n	8003be4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ba2:	e014      	b.n	8003bce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4a45      	ldr	r2, [pc, #276]	; (8003cbc <ADC_ConversionStop+0x174>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d90d      	bls.n	8003bc8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb0:	f043 0210 	orr.w	r2, r3, #16
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e074      	b.n	8003cb2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d1e3      	bne.n	8003ba4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2240      	movs	r2, #64	; 0x40
 8003be2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d014      	beq.n	8003c14 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f856 	bl	8002ca0 <LL_ADC_REG_IsConversionOngoing>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f813 	bl	8002c2a <LL_ADC_IsDisableOngoing>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f832 	bl	8002c78 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d014      	beq.n	8003c44 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f865 	bl	8002cee <LL_ADC_INJ_IsConversionOngoing>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fffb 	bl	8002c2a <LL_ADC_IsDisableOngoing>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d104      	bne.n	8003c44 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff f841 	bl	8002cc6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d005      	beq.n	8003c56 <ADC_ConversionStop+0x10e>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d105      	bne.n	8003c5c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c50:	230c      	movs	r3, #12
 8003c52:	617b      	str	r3, [r7, #20]
        break;
 8003c54:	e005      	b.n	8003c62 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c56:	2308      	movs	r3, #8
 8003c58:	617b      	str	r3, [r7, #20]
        break;
 8003c5a:	e002      	b.n	8003c62 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	617b      	str	r3, [r7, #20]
        break;
 8003c60:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c62:	f7fe fde3 	bl	800282c <HAL_GetTick>
 8003c66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c68:	e01b      	b.n	8003ca2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c6a:	f7fe fddf 	bl	800282c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d914      	bls.n	8003ca2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	f043 0210 	orr.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e007      	b.n	8003cb2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1dc      	bne.n	8003c6a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	a33fffff 	.word	0xa33fffff

08003cc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe ff97 	bl	8002c04 <LL_ADC_IsEnabled>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d169      	bne.n	8003db0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <ADC_Enable+0xfc>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	f043 0210 	orr.w	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e055      	b.n	8003db2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe ff52 	bl	8002bb4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d10:	482b      	ldr	r0, [pc, #172]	; (8003dc0 <ADC_Enable+0x100>)
 8003d12:	f7fe fde1 	bl	80028d8 <LL_ADC_GetCommonPathInternalCh>
 8003d16:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d013      	beq.n	8003d48 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <ADC_Enable+0x104>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	4a28      	ldr	r2, [pc, #160]	; (8003dc8 <ADC_Enable+0x108>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d3a:	e002      	b.n	8003d42 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f9      	bne.n	8003d3c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d48:	f7fe fd70 	bl	800282c <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d4e:	e028      	b.n	8003da2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe ff55 	bl	8002c04 <LL_ADC_IsEnabled>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe ff25 	bl	8002bb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d6a:	f7fe fd5f 	bl	800282c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d914      	bls.n	8003da2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d00d      	beq.n	8003da2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	f043 0210 	orr.w	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e007      	b.n	8003db2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d1cf      	bne.n	8003d50 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	8000003f 	.word	0x8000003f
 8003dc0:	50040300 	.word	0x50040300
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	053e2d63 	.word	0x053e2d63

08003dcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe ff26 	bl	8002c2a <LL_ADC_IsDisableOngoing>
 8003dde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe ff0d 	bl	8002c04 <LL_ADC_IsEnabled>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d047      	beq.n	8003e80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d144      	bne.n	8003e80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 030d 	and.w	r3, r3, #13
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10c      	bne.n	8003e1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe fee7 	bl	8002bdc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2203      	movs	r2, #3
 8003e14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e16:	f7fe fd09 	bl	800282c <HAL_GetTick>
 8003e1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e1c:	e029      	b.n	8003e72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e023      	b.n	8003e82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e3a:	f7fe fcf7 	bl	800282c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d914      	bls.n	8003e72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f043 0210 	orr.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e007      	b.n	8003e82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1dc      	bne.n	8003e3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <__NVIC_SetPriorityGrouping>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ebe:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	60d3      	str	r3, [r2, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_GetPriorityGrouping>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <__NVIC_GetPriorityGrouping+0x18>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	f003 0307 	and.w	r3, r3, #7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_EnableIRQ>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db0b      	blt.n	8003f1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	4907      	ldr	r1, [pc, #28]	; (8003f28 <__NVIC_EnableIRQ+0x38>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2001      	movs	r0, #1
 8003f12:	fa00 f202 	lsl.w	r2, r0, r2
 8003f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <__NVIC_SetPriority>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db0a      	blt.n	8003f56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	490c      	ldr	r1, [pc, #48]	; (8003f78 <__NVIC_SetPriority+0x4c>)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	0112      	lsls	r2, r2, #4
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	440b      	add	r3, r1
 8003f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f54:	e00a      	b.n	8003f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4908      	ldr	r1, [pc, #32]	; (8003f7c <__NVIC_SetPriority+0x50>)
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3b04      	subs	r3, #4
 8003f64:	0112      	lsls	r2, r2, #4
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	440b      	add	r3, r1
 8003f6a:	761a      	strb	r2, [r3, #24]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000e100 	.word	0xe000e100
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f1c3 0307 	rsb	r3, r3, #7
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	bf28      	it	cs
 8003f9e:	2304      	movcs	r3, #4
 8003fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d902      	bls.n	8003fb0 <NVIC_EncodePriority+0x30>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3b03      	subs	r3, #3
 8003fae:	e000      	b.n	8003fb2 <NVIC_EncodePriority+0x32>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	43d9      	mvns	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	4313      	orrs	r3, r2
         );
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff8:	d301      	bcc.n	8003ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e00f      	b.n	800401e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <SysTick_Config+0x40>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004006:	210f      	movs	r1, #15
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	f7ff ff8e 	bl	8003f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <SysTick_Config+0x40>)
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <SysTick_Config+0x40>)
 8004018:	2207      	movs	r2, #7
 800401a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	e000e010 	.word	0xe000e010

0800402c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff29 	bl	8003e8c <__NVIC_SetPriorityGrouping>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	4603      	mov	r3, r0
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004054:	f7ff ff3e 	bl	8003ed4 <__NVIC_GetPriorityGrouping>
 8004058:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f7ff ff8e 	bl	8003f80 <NVIC_EncodePriority>
 8004064:	4602      	mov	r2, r0
 8004066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff ff5d 	bl	8003f2c <__NVIC_SetPriority>
}
 8004072:	bf00      	nop
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	4603      	mov	r3, r0
 8004082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff ff31 	bl	8003ef0 <__NVIC_EnableIRQ>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ffa2 	bl	8003fe8 <SysTick_Config>
 80040a4:	4603      	mov	r3, r0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040be:	e14e      	b.n	800435e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2101      	movs	r1, #1
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	fa01 f303 	lsl.w	r3, r1, r3
 80040cc:	4013      	ands	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8140 	beq.w	8004358 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d005      	beq.n	80040f0 <HAL_GPIO_Init+0x40>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d130      	bne.n	8004152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	2203      	movs	r2, #3
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004126:	2201      	movs	r2, #1
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	f003 0201 	and.w	r2, r3, #1
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b03      	cmp	r3, #3
 800415c:	d017      	beq.n	800418e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	2203      	movs	r2, #3
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d123      	bne.n	80041e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	08da      	lsrs	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3208      	adds	r2, #8
 80041a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	6939      	ldr	r1, [r7, #16]
 80041de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	2203      	movs	r2, #3
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f003 0203 	and.w	r2, r3, #3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 809a 	beq.w	8004358 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004224:	4b55      	ldr	r3, [pc, #340]	; (800437c <HAL_GPIO_Init+0x2cc>)
 8004226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004228:	4a54      	ldr	r2, [pc, #336]	; (800437c <HAL_GPIO_Init+0x2cc>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6613      	str	r3, [r2, #96]	; 0x60
 8004230:	4b52      	ldr	r3, [pc, #328]	; (800437c <HAL_GPIO_Init+0x2cc>)
 8004232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800423c:	4a50      	ldr	r2, [pc, #320]	; (8004380 <HAL_GPIO_Init+0x2d0>)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	089b      	lsrs	r3, r3, #2
 8004242:	3302      	adds	r3, #2
 8004244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004248:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	220f      	movs	r2, #15
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004266:	d013      	beq.n	8004290 <HAL_GPIO_Init+0x1e0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a46      	ldr	r2, [pc, #280]	; (8004384 <HAL_GPIO_Init+0x2d4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00d      	beq.n	800428c <HAL_GPIO_Init+0x1dc>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a45      	ldr	r2, [pc, #276]	; (8004388 <HAL_GPIO_Init+0x2d8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <HAL_GPIO_Init+0x1d8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a44      	ldr	r2, [pc, #272]	; (800438c <HAL_GPIO_Init+0x2dc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_GPIO_Init+0x1d4>
 8004280:	2303      	movs	r3, #3
 8004282:	e006      	b.n	8004292 <HAL_GPIO_Init+0x1e2>
 8004284:	2307      	movs	r3, #7
 8004286:	e004      	b.n	8004292 <HAL_GPIO_Init+0x1e2>
 8004288:	2302      	movs	r3, #2
 800428a:	e002      	b.n	8004292 <HAL_GPIO_Init+0x1e2>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_GPIO_Init+0x1e2>
 8004290:	2300      	movs	r3, #0
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	f002 0203 	and.w	r2, r2, #3
 8004298:	0092      	lsls	r2, r2, #2
 800429a:	4093      	lsls	r3, r2
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042a2:	4937      	ldr	r1, [pc, #220]	; (8004380 <HAL_GPIO_Init+0x2d0>)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	3302      	adds	r3, #2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042b0:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_GPIO_Init+0x2e0>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4013      	ands	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042d4:	4a2e      	ldr	r2, [pc, #184]	; (8004390 <HAL_GPIO_Init+0x2e0>)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042da:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <HAL_GPIO_Init+0x2e0>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4013      	ands	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042fe:	4a24      	ldr	r2, [pc, #144]	; (8004390 <HAL_GPIO_Init+0x2e0>)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <HAL_GPIO_Init+0x2e0>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	43db      	mvns	r3, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004328:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_GPIO_Init+0x2e0>)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800432e:	4b18      	ldr	r3, [pc, #96]	; (8004390 <HAL_GPIO_Init+0x2e0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	43db      	mvns	r3, r3
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4013      	ands	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004352:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <HAL_GPIO_Init+0x2e0>)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3301      	adds	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	f47f aea9 	bne.w	80040c0 <HAL_GPIO_Init+0x10>
  }
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40021000 	.word	0x40021000
 8004380:	40010000 	.word	0x40010000
 8004384:	48000400 	.word	0x48000400
 8004388:	48000800 	.word	0x48000800
 800438c:	48000c00 	.word	0x48000c00
 8004390:	40010400 	.word	0x40010400

08004394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	807b      	strh	r3, [r7, #2]
 80043a0:	4613      	mov	r3, r2
 80043a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043a4:	787b      	ldrb	r3, [r7, #1]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043b0:	e002      	b.n	80043b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4013      	ands	r3, r2
 80043dc:	041a      	lsls	r2, r3, #16
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	43d9      	mvns	r1, r3
 80043e2:	887b      	ldrh	r3, [r7, #2]
 80043e4:	400b      	ands	r3, r1
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	619a      	str	r2, [r3, #24]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d006      	beq.n	800441c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800440e:	4a05      	ldr	r2, [pc, #20]	; (8004424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd ffdc 	bl	80023d4 <HAL_GPIO_EXTI_Callback>
  }
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40010400 	.word	0x40010400

08004428 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <HAL_PWREx_GetVoltageRange+0x18>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40007000 	.word	0x40007000

08004444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004452:	d130      	bne.n	80044b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d038      	beq.n	80044d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2232      	movs	r2, #50	; 0x32
 8004478:	fb02 f303 	mul.w	r3, r2, r3
 800447c:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0c9b      	lsrs	r3, r3, #18
 8004484:	3301      	adds	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004488:	e002      	b.n	8004490 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3b01      	subs	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d102      	bne.n	80044a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f2      	bne.n	800448a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b0:	d110      	bne.n	80044d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e00f      	b.n	80044d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c2:	d007      	beq.n	80044d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044cc:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40007000 	.word	0x40007000
 80044e8:	20000000 	.word	0x20000000
 80044ec:	431bde83 	.word	0x431bde83

080044f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f000 bc4f 	b.w	8004da2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004504:	4b97      	ldr	r3, [pc, #604]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450e:	4b95      	ldr	r3, [pc, #596]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80e6 	beq.w	80046f2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_RCC_OscConfig+0x4c>
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	f040 808d 	bne.w	800464e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b01      	cmp	r3, #1
 8004538:	f040 8089 	bne.w	800464e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800453c:	4b89      	ldr	r3, [pc, #548]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d006      	beq.n	8004556 <HAL_RCC_OscConfig+0x66>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f000 bc26 	b.w	8004da2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800455a:	4b82      	ldr	r3, [pc, #520]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <HAL_RCC_OscConfig+0x80>
 8004566:	4b7f      	ldr	r3, [pc, #508]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456e:	e005      	b.n	800457c <HAL_RCC_OscConfig+0x8c>
 8004570:	4b7c      	ldr	r3, [pc, #496]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800457c:	4293      	cmp	r3, r2
 800457e:	d224      	bcs.n	80045ca <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fdd9 	bl	800513c <RCC_SetFlashLatencyFromMSIRange>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	f000 bc06 	b.w	8004da2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004596:	4b73      	ldr	r3, [pc, #460]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a72      	ldr	r2, [pc, #456]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800459c:	f043 0308 	orr.w	r3, r3, #8
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b70      	ldr	r3, [pc, #448]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	496d      	ldr	r1, [pc, #436]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045b4:	4b6b      	ldr	r3, [pc, #428]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	4968      	ldr	r1, [pc, #416]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
 80045c8:	e025      	b.n	8004616 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ca:	4b66      	ldr	r3, [pc, #408]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a65      	ldr	r2, [pc, #404]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045d0:	f043 0308 	orr.w	r3, r3, #8
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b63      	ldr	r3, [pc, #396]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	4960      	ldr	r1, [pc, #384]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045e8:	4b5e      	ldr	r3, [pc, #376]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	495b      	ldr	r1, [pc, #364]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fd98 	bl	800513c <RCC_SetFlashLatencyFromMSIRange>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e3c5      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004616:	f000 fccd 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 800461a:	4602      	mov	r2, r0
 800461c:	4b51      	ldr	r3, [pc, #324]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	4950      	ldr	r1, [pc, #320]	; (8004768 <HAL_RCC_OscConfig+0x278>)
 8004628:	5ccb      	ldrb	r3, [r1, r3]
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	fa22 f303 	lsr.w	r3, r2, r3
 8004632:	4a4e      	ldr	r2, [pc, #312]	; (800476c <HAL_RCC_OscConfig+0x27c>)
 8004634:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004636:	4b4e      	ldr	r3, [pc, #312]	; (8004770 <HAL_RCC_OscConfig+0x280>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe f8a6 	bl	800278c <HAL_InitTick>
 8004640:	4603      	mov	r3, r0
 8004642:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d052      	beq.n	80046f0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	e3a9      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d032      	beq.n	80046bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004656:	4b43      	ldr	r3, [pc, #268]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a42      	ldr	r2, [pc, #264]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004662:	f7fe f8e3 	bl	800282c <HAL_GetTick>
 8004666:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800466a:	f7fe f8df 	bl	800282c <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e392      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800467c:	4b39      	ldr	r3, [pc, #228]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004688:	4b36      	ldr	r3, [pc, #216]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a35      	ldr	r2, [pc, #212]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800468e:	f043 0308 	orr.w	r3, r3, #8
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b33      	ldr	r3, [pc, #204]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	4930      	ldr	r1, [pc, #192]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	492b      	ldr	r1, [pc, #172]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	604b      	str	r3, [r1, #4]
 80046ba:	e01a      	b.n	80046f2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046bc:	4b29      	ldr	r3, [pc, #164]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a28      	ldr	r2, [pc, #160]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046c8:	f7fe f8b0 	bl	800282c <HAL_GetTick>
 80046cc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046d0:	f7fe f8ac 	bl	800282c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e35f      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046e2:	4b20      	ldr	r3, [pc, #128]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x1e0>
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d073      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d005      	beq.n	8004710 <HAL_RCC_OscConfig+0x220>
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d10e      	bne.n	8004728 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d10b      	bne.n	8004728 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d063      	beq.n	80047e4 <HAL_RCC_OscConfig+0x2f4>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d15f      	bne.n	80047e4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e33c      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d106      	bne.n	8004740 <HAL_RCC_OscConfig+0x250>
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a0b      	ldr	r2, [pc, #44]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e025      	b.n	800478c <HAL_RCC_OscConfig+0x29c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004748:	d114      	bne.n	8004774 <HAL_RCC_OscConfig+0x284>
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b03      	ldr	r3, [pc, #12]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a02      	ldr	r2, [pc, #8]	; (8004764 <HAL_RCC_OscConfig+0x274>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e013      	b.n	800478c <HAL_RCC_OscConfig+0x29c>
 8004764:	40021000 	.word	0x40021000
 8004768:	080079b0 	.word	0x080079b0
 800476c:	20000000 	.word	0x20000000
 8004770:	20000004 	.word	0x20000004
 8004774:	4b8f      	ldr	r3, [pc, #572]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a8e      	ldr	r2, [pc, #568]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b8c      	ldr	r3, [pc, #560]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a8b      	ldr	r2, [pc, #556]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fe f84a 	bl	800282c <HAL_GetTick>
 8004798:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fe f846 	bl	800282c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e2f9      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ae:	4b81      	ldr	r3, [pc, #516]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x2ac>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe f836 	bl	800282c <HAL_GetTick>
 80047c0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fe f832 	bl	800282c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e2e5      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d6:	4b77      	ldr	r3, [pc, #476]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x2d4>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d060      	beq.n	80048b4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_OscConfig+0x314>
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d119      	bne.n	8004832 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d116      	bne.n	8004832 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004804:	4b6b      	ldr	r3, [pc, #428]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_OscConfig+0x32c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e2c2      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	4b65      	ldr	r3, [pc, #404]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	4962      	ldr	r1, [pc, #392]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004830:	e040      	b.n	80048b4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d023      	beq.n	8004882 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483a:	4b5e      	ldr	r3, [pc, #376]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a5d      	ldr	r2, [pc, #372]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fd fff1 	bl	800282c <HAL_GetTick>
 800484a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484e:	f7fd ffed 	bl	800282c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e2a0      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004860:	4b54      	ldr	r3, [pc, #336]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486c:	4b51      	ldr	r3, [pc, #324]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	061b      	lsls	r3, r3, #24
 800487a:	494e      	ldr	r1, [pc, #312]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]
 8004880:	e018      	b.n	80048b4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004882:	4b4c      	ldr	r3, [pc, #304]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a4b      	ldr	r2, [pc, #300]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800488c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fd ffcd 	bl	800282c <HAL_GetTick>
 8004892:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004896:	f7fd ffc9 	bl	800282c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e27c      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8082 	beq.w	80049c6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d05f      	beq.n	800498a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80048ca:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	429a      	cmp	r2, r3
 80048de:	d037      	beq.n	8004950 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d006      	beq.n	80048f8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e254      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01b      	beq.n	800493a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004902:	4b2c      	ldr	r3, [pc, #176]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004912:	f7fd ff8b 	bl	800282c <HAL_GetTick>
 8004916:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491a:	f7fd ff87 	bl	800282c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b11      	cmp	r3, #17
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e23a      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800492c:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1ef      	bne.n	800491a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800493a:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800493c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004940:	f023 0210 	bic.w	r2, r3, #16
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	491a      	ldr	r1, [pc, #104]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004950:	4b18      	ldr	r3, [pc, #96]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004956:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fd ff64 	bl	800282c <HAL_GetTick>
 8004964:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004968:	f7fd ff60 	bl	800282c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b11      	cmp	r3, #17
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e213      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800497a:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800497c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0ef      	beq.n	8004968 <HAL_RCC_OscConfig+0x478>
 8004988:	e01d      	b.n	80049c6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800498a:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800498c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004990:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7fd ff47 	bl	800282c <HAL_GetTick>
 800499e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049a0:	e00a      	b.n	80049b8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a2:	f7fd ff43 	bl	800282c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b11      	cmp	r3, #17
 80049ae:	d903      	bls.n	80049b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e1f6      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
 80049b4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049b8:	4ba9      	ldr	r3, [pc, #676]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 80049ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ed      	bne.n	80049a2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80bd 	beq.w	8004b4e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049da:	4ba1      	ldr	r3, [pc, #644]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10e      	bne.n	8004a04 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e6:	4b9e      	ldr	r3, [pc, #632]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	4a9d      	ldr	r2, [pc, #628]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6593      	str	r3, [r2, #88]	; 0x58
 80049f2:	4b9b      	ldr	r3, [pc, #620]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a04:	4b97      	ldr	r3, [pc, #604]	; (8004c64 <HAL_RCC_OscConfig+0x774>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d118      	bne.n	8004a42 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a10:	4b94      	ldr	r3, [pc, #592]	; (8004c64 <HAL_RCC_OscConfig+0x774>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a93      	ldr	r2, [pc, #588]	; (8004c64 <HAL_RCC_OscConfig+0x774>)
 8004a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1c:	f7fd ff06 	bl	800282c <HAL_GetTick>
 8004a20:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a24:	f7fd ff02 	bl	800282c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1b5      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a36:	4b8b      	ldr	r3, [pc, #556]	; (8004c64 <HAL_RCC_OscConfig+0x774>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d02c      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004a4e:	4b84      	ldr	r3, [pc, #528]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	497f      	ldr	r1, [pc, #508]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d010      	beq.n	8004a96 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a74:	4b7a      	ldr	r3, [pc, #488]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	4a79      	ldr	r2, [pc, #484]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004a7c:	f043 0304 	orr.w	r3, r3, #4
 8004a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a84:	4b76      	ldr	r3, [pc, #472]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	4a75      	ldr	r2, [pc, #468]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a94:	e018      	b.n	8004ac8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a96:	4b72      	ldr	r3, [pc, #456]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	4a70      	ldr	r2, [pc, #448]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aa6:	e00f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004aa8:	4b6d      	ldr	r3, [pc, #436]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	4a6c      	ldr	r2, [pc, #432]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ab8:	4b69      	ldr	r3, [pc, #420]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	4a68      	ldr	r2, [pc, #416]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d016      	beq.n	8004afe <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad0:	f7fd feac 	bl	800282c <HAL_GetTick>
 8004ad4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad8:	f7fd fea8 	bl	800282c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e159      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aee:	4b5c      	ldr	r3, [pc, #368]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ed      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x5e8>
 8004afc:	e01d      	b.n	8004b3a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7fd fe95 	bl	800282c <HAL_GetTick>
 8004b02:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd fe91 	bl	800282c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e142      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b1c:	4b50      	ldr	r3, [pc, #320]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ed      	bne.n	8004b06 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004b2a:	4b4d      	ldr	r3, [pc, #308]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	4a4b      	ldr	r2, [pc, #300]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d105      	bne.n	8004b4e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	4a46      	ldr	r2, [pc, #280]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d03c      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01c      	beq.n	8004b9c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b62:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b68:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b72:	f7fd fe5b 	bl	800282c <HAL_GetTick>
 8004b76:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b7a:	f7fd fe57 	bl	800282c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e10a      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b8c:	4b34      	ldr	r3, [pc, #208]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0ef      	beq.n	8004b7a <HAL_RCC_OscConfig+0x68a>
 8004b9a:	e01b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b9c:	4b30      	ldr	r3, [pc, #192]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba2:	4a2f      	ldr	r2, [pc, #188]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fd fe3e 	bl	800282c <HAL_GetTick>
 8004bb0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb4:	f7fd fe3a 	bl	800282c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0ed      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bc6:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ef      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80e1 	beq.w	8004da0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	f040 80b5 	bne.w	8004d52 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f003 0203 	and.w	r2, r3, #3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d124      	bne.n	8004c46 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	3b01      	subs	r3, #1
 8004c08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d11b      	bne.n	8004c46 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d113      	bne.n	8004c46 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d109      	bne.n	8004c46 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d05f      	beq.n	8004d06 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	d05a      	beq.n	8004d02 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a03      	ldr	r2, [pc, #12]	; (8004c60 <HAL_RCC_OscConfig+0x770>)
 8004c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c58:	f7fd fde8 	bl	800282c <HAL_GetTick>
 8004c5c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5e:	e00c      	b.n	8004c7a <HAL_RCC_OscConfig+0x78a>
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fd fde0 	bl	800282c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e093      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7a:	4b4c      	ldr	r3, [pc, #304]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c86:	4b49      	ldr	r3, [pc, #292]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <HAL_RCC_OscConfig+0x8c0>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0112      	lsls	r2, r2, #4
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ca0:	0212      	lsls	r2, r2, #8
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ca8:	0852      	lsrs	r2, r2, #1
 8004caa:	3a01      	subs	r2, #1
 8004cac:	0552      	lsls	r2, r2, #21
 8004cae:	4311      	orrs	r1, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cb4:	0852      	lsrs	r2, r2, #1
 8004cb6:	3a01      	subs	r2, #1
 8004cb8:	0652      	lsls	r2, r2, #25
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	493b      	ldr	r1, [pc, #236]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cc2:	4b3a      	ldr	r3, [pc, #232]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a39      	ldr	r2, [pc, #228]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ccc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cce:	4b37      	ldr	r3, [pc, #220]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	4a36      	ldr	r2, [pc, #216]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cda:	f7fd fda7 	bl	800282c <HAL_GetTick>
 8004cde:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce2:	f7fd fda3 	bl	800282c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e056      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d00:	e04e      	b.n	8004da0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e04d      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d06:	4b29      	ldr	r3, [pc, #164]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d146      	bne.n	8004da0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d12:	4b26      	ldr	r3, [pc, #152]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a25      	ldr	r2, [pc, #148]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d1c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d1e:	4b23      	ldr	r3, [pc, #140]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a22      	ldr	r2, [pc, #136]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d28:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d2a:	f7fd fd7f 	bl	800282c <HAL_GetTick>
 8004d2e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d32:	f7fd fd7b 	bl	800282c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e02e      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d44:	4b19      	ldr	r3, [pc, #100]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x842>
 8004d50:	e026      	b.n	8004da0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	2b0c      	cmp	r3, #12
 8004d56:	d021      	beq.n	8004d9c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d58:	4b14      	ldr	r3, [pc, #80]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a13      	ldr	r2, [pc, #76]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fd fd62 	bl	800282c <HAL_GetTick>
 8004d68:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fd fd5e 	bl	800282c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e011      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	4a07      	ldr	r2, [pc, #28]	; (8004dac <HAL_RCC_OscConfig+0x8bc>)
 8004d90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d94:	f023 0303 	bic.w	r3, r3, #3
 8004d98:	60d3      	str	r3, [r2, #12]
 8004d9a:	e001      	b.n	8004da0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3728      	adds	r7, #40	; 0x28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	f99f808c 	.word	0xf99f808c

08004db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0e7      	b.n	8004f98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b75      	ldr	r3, [pc, #468]	; (8004fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d910      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b72      	ldr	r3, [pc, #456]	; (8004fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 0207 	bic.w	r2, r3, #7
 8004dde:	4970      	ldr	r1, [pc, #448]	; (8004fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b6e      	ldr	r3, [pc, #440]	; (8004fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0cf      	b.n	8004f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d010      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	4b66      	ldr	r3, [pc, #408]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d908      	bls.n	8004e26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e14:	4b63      	ldr	r3, [pc, #396]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4960      	ldr	r1, [pc, #384]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d04c      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e3a:	4b5a      	ldr	r3, [pc, #360]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d121      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0a6      	b.n	8004f98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d107      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e52:	4b54      	ldr	r3, [pc, #336]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d115      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e09a      	b.n	8004f98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d107      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e6a:	4b4e      	ldr	r3, [pc, #312]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e08e      	b.n	8004f98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e7a:	4b4a      	ldr	r3, [pc, #296]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e086      	b.n	8004f98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e8a:	4b46      	ldr	r3, [pc, #280]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f023 0203 	bic.w	r2, r3, #3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4943      	ldr	r1, [pc, #268]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9c:	f7fd fcc6 	bl	800282c <HAL_GetTick>
 8004ea0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea2:	e00a      	b.n	8004eba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea4:	f7fd fcc2 	bl	800282c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e06e      	b.n	8004f98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eba:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 020c 	and.w	r2, r3, #12
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d1eb      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	4b31      	ldr	r3, [pc, #196]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d208      	bcs.n	8004efa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee8:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	492b      	ldr	r1, [pc, #172]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004efa:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d210      	bcs.n	8004f2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f08:	4b25      	ldr	r3, [pc, #148]	; (8004fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 0207 	bic.w	r2, r3, #7
 8004f10:	4923      	ldr	r1, [pc, #140]	; (8004fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f18:	4b21      	ldr	r3, [pc, #132]	; (8004fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d001      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e036      	b.n	8004f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d008      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f36:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4918      	ldr	r1, [pc, #96]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d009      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f54:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4910      	ldr	r1, [pc, #64]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f68:	f000 f824 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	490b      	ldr	r1, [pc, #44]	; (8004fa8 <HAL_RCC_ClockConfig+0x1f4>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
 8004f84:	4a09      	ldr	r2, [pc, #36]	; (8004fac <HAL_RCC_ClockConfig+0x1f8>)
 8004f86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_RCC_ClockConfig+0x1fc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fd fbfd 	bl	800278c <HAL_InitTick>
 8004f92:	4603      	mov	r3, r0
 8004f94:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f96:	7afb      	ldrb	r3, [r7, #11]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40022000 	.word	0x40022000
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	080079b0 	.word	0x080079b0
 8004fac:	20000000 	.word	0x20000000
 8004fb0:	20000004 	.word	0x20000004

08004fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fc2:	4b3e      	ldr	r3, [pc, #248]	; (80050bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fcc:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b0c      	cmp	r3, #12
 8004fe0:	d121      	bne.n	8005026 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d11e      	bne.n	8005026 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fe8:	4b34      	ldr	r3, [pc, #208]	; (80050bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ff4:	4b31      	ldr	r3, [pc, #196]	; (80050bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffa:	0a1b      	lsrs	r3, r3, #8
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	e005      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005004:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005010:	4a2b      	ldr	r2, [pc, #172]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005018:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005024:	e00a      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b04      	cmp	r3, #4
 800502a:	d102      	bne.n	8005032 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800502c:	4b25      	ldr	r3, [pc, #148]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e004      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d101      	bne.n	800503c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800503a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d134      	bne.n	80050ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005042:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d003      	beq.n	800505a <HAL_RCC_GetSysClockFreq+0xa6>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d003      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0xac>
 8005058:	e005      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800505a:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800505c:	617b      	str	r3, [r7, #20]
      break;
 800505e:	e005      	b.n	800506c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005060:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005062:	617b      	str	r3, [r7, #20]
      break;
 8005064:	e002      	b.n	800506c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	617b      	str	r3, [r7, #20]
      break;
 800506a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800506c:	4b13      	ldr	r3, [pc, #76]	; (80050bc <HAL_RCC_GetSysClockFreq+0x108>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	3301      	adds	r3, #1
 8005078:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <HAL_RCC_GetSysClockFreq+0x108>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	0a1b      	lsrs	r3, r3, #8
 8005080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	fb03 f202 	mul.w	r2, r3, r2
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	0e5b      	lsrs	r3, r3, #25
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	3301      	adds	r3, #1
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050ac:	69bb      	ldr	r3, [r7, #24]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3724      	adds	r7, #36	; 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	080079c8 	.word	0x080079c8
 80050c4:	00f42400 	.word	0x00f42400
 80050c8:	007a1200 	.word	0x007a1200

080050cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20000000 	.word	0x20000000

080050e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050e8:	f7ff fff0 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4904      	ldr	r1, [pc, #16]	; (800510c <HAL_RCC_GetPCLK1Freq+0x28>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000
 800510c:	080079c0 	.word	0x080079c0

08005110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005114:	f7ff ffda 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0adb      	lsrs	r3, r3, #11
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4904      	ldr	r1, [pc, #16]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40021000 	.word	0x40021000
 8005138:	080079c0 	.word	0x080079c0

0800513c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005148:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005154:	f7ff f968 	bl	8004428 <HAL_PWREx_GetVoltageRange>
 8005158:	6178      	str	r0, [r7, #20]
 800515a:	e014      	b.n	8005186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800515c:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005160:	4a24      	ldr	r2, [pc, #144]	; (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005166:	6593      	str	r3, [r2, #88]	; 0x58
 8005168:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005174:	f7ff f958 	bl	8004428 <HAL_PWREx_GetVoltageRange>
 8005178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800517a:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800518c:	d10b      	bne.n	80051a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b80      	cmp	r3, #128	; 0x80
 8005192:	d919      	bls.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2ba0      	cmp	r3, #160	; 0xa0
 8005198:	d902      	bls.n	80051a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800519a:	2302      	movs	r3, #2
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	e013      	b.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051a0:	2301      	movs	r3, #1
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	e010      	b.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b80      	cmp	r3, #128	; 0x80
 80051aa:	d902      	bls.n	80051b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051ac:	2303      	movs	r3, #3
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	e00a      	b.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d102      	bne.n	80051be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051b8:	2302      	movs	r3, #2
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	e004      	b.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b70      	cmp	r3, #112	; 0x70
 80051c2:	d101      	bne.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051c4:	2301      	movs	r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f023 0207 	bic.w	r2, r3, #7
 80051d0:	4909      	ldr	r1, [pc, #36]	; (80051f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051d8:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d001      	beq.n	80051ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40022000 	.word	0x40022000

080051fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005204:	2300      	movs	r3, #0
 8005206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005208:	2300      	movs	r3, #0
 800520a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 809e 	beq.w	8005356 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800521a:	2300      	movs	r3, #0
 800521c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800521e:	4b46      	ldr	r3, [pc, #280]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800522e:	2300      	movs	r3, #0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00d      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005234:	4b40      	ldr	r3, [pc, #256]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005238:	4a3f      	ldr	r2, [pc, #252]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800523a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523e:	6593      	str	r3, [r2, #88]	; 0x58
 8005240:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524c:	2301      	movs	r3, #1
 800524e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005250:	4b3a      	ldr	r3, [pc, #232]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a39      	ldr	r2, [pc, #228]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800525a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800525c:	f7fd fae6 	bl	800282c <HAL_GetTick>
 8005260:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005262:	e009      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005264:	f7fd fae2 	bl	800282c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d902      	bls.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	74fb      	strb	r3, [r7, #19]
        break;
 8005276:	e005      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005278:	4b30      	ldr	r3, [pc, #192]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0ef      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005284:	7cfb      	ldrb	r3, [r7, #19]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d15a      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005294:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01e      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xde>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d019      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052b2:	4b21      	ldr	r3, [pc, #132]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052c2:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c8:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052d2:	4a19      	ldr	r2, [pc, #100]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d016      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fd faa2 	bl	800282c <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ea:	e00b      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ec:	f7fd fa9e 	bl	800282c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d902      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	74fb      	strb	r3, [r7, #19]
            break;
 8005302:	e006      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0ec      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005318:	4b07      	ldr	r3, [pc, #28]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	4904      	ldr	r1, [pc, #16]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800532e:	e009      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005344:	7c7b      	ldrb	r3, [r7, #17]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d105      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534a:	4b6e      	ldr	r3, [pc, #440]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800534c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534e:	4a6d      	ldr	r2, [pc, #436]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005354:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005362:	4b68      	ldr	r3, [pc, #416]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005368:	f023 0203 	bic.w	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4964      	ldr	r1, [pc, #400]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005384:	4b5f      	ldr	r3, [pc, #380]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538a:	f023 020c 	bic.w	r2, r3, #12
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	495c      	ldr	r1, [pc, #368]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053a6:	4b57      	ldr	r3, [pc, #348]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4953      	ldr	r1, [pc, #332]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053c8:	4b4e      	ldr	r3, [pc, #312]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	494b      	ldr	r1, [pc, #300]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ea:	4b46      	ldr	r3, [pc, #280]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	4942      	ldr	r1, [pc, #264]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800540c:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	493a      	ldr	r1, [pc, #232]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800542e:	4b35      	ldr	r3, [pc, #212]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	4931      	ldr	r1, [pc, #196]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005450:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	4929      	ldr	r1, [pc, #164]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	4920      	ldr	r1, [pc, #128]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d015      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005494:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	4918      	ldr	r1, [pc, #96]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b2:	d105      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b4:	4b13      	ldr	r3, [pc, #76]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a12      	ldr	r2, [pc, #72]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054be:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d015      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054cc:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	490a      	ldr	r1, [pc, #40]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ea:	d105      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a04      	ldr	r2, [pc, #16]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000

08005508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e095      	b.n	8005646 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b00      	cmp	r3, #0
 8005520:	d108      	bne.n	8005534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552a:	d009      	beq.n	8005540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	61da      	str	r2, [r3, #28]
 8005532:	e005      	b.n	8005540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fc ffc0 	bl	80024e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005576:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005580:	d902      	bls.n	8005588 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e002      	b.n	800558e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800558c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005596:	d007      	beq.n	80055a8 <HAL_SPI_Init+0xa0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ea:	ea42 0103 	orr.w	r1, r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	f003 0204 	and.w	r2, r3, #4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005624:	ea42 0103 	orr.w	r1, r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b08a      	sub	sp, #40	; 0x28
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800565c:	2301      	movs	r3, #1
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_SPI_TransmitReceive+0x26>
 8005670:	2302      	movs	r3, #2
 8005672:	e20a      	b.n	8005a8a <HAL_SPI_TransmitReceive+0x43c>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800567c:	f7fd f8d6 	bl	800282c <HAL_GetTick>
 8005680:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005688:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005690:	887b      	ldrh	r3, [r7, #2]
 8005692:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005698:	7efb      	ldrb	r3, [r7, #27]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d00e      	beq.n	80056bc <HAL_SPI_TransmitReceive+0x6e>
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a4:	d106      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x66>
 80056ae:	7efb      	ldrb	r3, [r7, #27]
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d003      	beq.n	80056bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80056ba:	e1e0      	b.n	8005a7e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_SPI_TransmitReceive+0x80>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_SPI_TransmitReceive+0x80>
 80056c8:	887b      	ldrh	r3, [r7, #2]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80056d4:	e1d3      	b.n	8005a7e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d003      	beq.n	80056ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2205      	movs	r2, #5
 80056e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	887a      	ldrh	r2, [r7, #2]
 80056fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	887a      	ldrh	r2, [r7, #2]
 8005702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	887a      	ldrh	r2, [r7, #2]
 8005716:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800572c:	d802      	bhi.n	8005734 <HAL_SPI_TransmitReceive+0xe6>
 800572e:	8a3b      	ldrh	r3, [r7, #16]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d908      	bls.n	8005746 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005742:	605a      	str	r2, [r3, #4]
 8005744:	e007      	b.n	8005756 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005754:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d007      	beq.n	8005774 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800577c:	f240 8081 	bls.w	8005882 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_SPI_TransmitReceive+0x140>
 8005788:	8a7b      	ldrh	r3, [r7, #18]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d16d      	bne.n	800586a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	881a      	ldrh	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	1c9a      	adds	r2, r3, #2
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b2:	e05a      	b.n	800586a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d11b      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x1ac>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d016      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x1ac>
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d113      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	881a      	ldrh	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	1c9a      	adds	r2, r3, #2
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d11c      	bne.n	8005842 <HAL_SPI_TransmitReceive+0x1f4>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d016      	beq.n	8005842 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	b292      	uxth	r2, r2
 8005820:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	1c9a      	adds	r2, r3, #2
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800583e:	2301      	movs	r3, #1
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005842:	f7fc fff3 	bl	800282c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584e:	429a      	cmp	r2, r3
 8005850:	d80b      	bhi.n	800586a <HAL_SPI_TransmitReceive+0x21c>
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d007      	beq.n	800586a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005868:	e109      	b.n	8005a7e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d19f      	bne.n	80057b4 <HAL_SPI_TransmitReceive+0x166>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d199      	bne.n	80057b4 <HAL_SPI_TransmitReceive+0x166>
 8005880:	e0e3      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_SPI_TransmitReceive+0x244>
 800588a:	8a7b      	ldrh	r3, [r7, #18]
 800588c:	2b01      	cmp	r3, #1
 800588e:	f040 80cf 	bne.w	8005a30 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d912      	bls.n	80058c2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	881a      	ldrh	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	1c9a      	adds	r2, r3, #2
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b02      	subs	r3, #2
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058c0:	e0b6      	b.n	8005a30 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	7812      	ldrb	r2, [r2, #0]
 80058ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058e8:	e0a2      	b.n	8005a30 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d134      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x314>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d02f      	beq.n	8005962 <HAL_SPI_TransmitReceive+0x314>
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	2b01      	cmp	r3, #1
 8005906:	d12c      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	d912      	bls.n	8005938 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	881a      	ldrh	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	1c9a      	adds	r2, r3, #2
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b02      	subs	r3, #2
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005936:	e012      	b.n	800595e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	7812      	ldrb	r2, [r2, #0]
 8005944:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d148      	bne.n	8005a02 <HAL_SPI_TransmitReceive+0x3b4>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d042      	beq.n	8005a02 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	d923      	bls.n	80059d0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	b292      	uxth	r2, r2
 8005994:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	1c9a      	adds	r2, r3, #2
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b02      	subs	r3, #2
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d81f      	bhi.n	80059fe <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059cc:	605a      	str	r2, [r3, #4]
 80059ce:	e016      	b.n	80059fe <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f103 020c 	add.w	r2, r3, #12
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	7812      	ldrb	r2, [r2, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059fe:	2301      	movs	r3, #1
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a02:	f7fc ff13 	bl	800282c <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d803      	bhi.n	8005a1a <HAL_SPI_TransmitReceive+0x3cc>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d102      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x3d2>
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005a2e:	e026      	b.n	8005a7e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f47f af57 	bne.w	80058ea <HAL_SPI_TransmitReceive+0x29c>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f47f af50 	bne.w	80058ea <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f93e 	bl	8005cd0 <SPI_EndRxTxTransaction>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a74:	e003      	b.n	8005a7e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3728      	adds	r7, #40	; 0x28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005aa4:	f7fc fec2 	bl	800282c <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ab4:	f7fc feba 	bl	800282c <HAL_GetTick>
 8005ab8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aba:	4b39      	ldr	r3, [pc, #228]	; (8005ba0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	015b      	lsls	r3, r3, #5
 8005ac0:	0d1b      	lsrs	r3, r3, #20
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	fb02 f303 	mul.w	r3, r2, r3
 8005ac8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aca:	e054      	b.n	8005b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d050      	beq.n	8005b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ad4:	f7fc feaa 	bl	800282c <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d902      	bls.n	8005aea <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d13d      	bne.n	8005b66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005af8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b02:	d111      	bne.n	8005b28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b0c:	d004      	beq.n	8005b18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b16:	d107      	bne.n	8005b28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b30:	d10f      	bne.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e017      	b.n	8005b96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	bf0c      	ite	eq
 8005b86:	2301      	moveq	r3, #1
 8005b88:	2300      	movne	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d19b      	bne.n	8005acc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000000 	.word	0x20000000

08005ba4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bb6:	f7fc fe39 	bl	800282c <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005bc6:	f7fc fe31 	bl	800282c <HAL_GetTick>
 8005bca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005bd4:	4b3d      	ldr	r3, [pc, #244]	; (8005ccc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	00da      	lsls	r2, r3, #3
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	0d1b      	lsrs	r3, r3, #20
 8005be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be6:	fb02 f303 	mul.w	r3, r2, r3
 8005bea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005bec:	e060      	b.n	8005cb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bf4:	d107      	bne.n	8005c06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d050      	beq.n	8005cb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c0e:	f7fc fe0d 	bl	800282c <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d902      	bls.n	8005c24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d13d      	bne.n	8005ca0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c3c:	d111      	bne.n	8005c62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c46:	d004      	beq.n	8005c52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c50:	d107      	bne.n	8005c62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6a:	d10f      	bne.n	8005c8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e010      	b.n	8005cc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d196      	bne.n	8005bee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3728      	adds	r7, #40	; 0x28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000000 	.word	0x20000000

08005cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff ff5b 	bl	8005ba4 <SPI_WaitFifoStateUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e027      	b.n	8005d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2180      	movs	r1, #128	; 0x80
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f7ff fec0 	bl	8005a94 <SPI_WaitFlagStateUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1e:	f043 0220 	orr.w	r2, r3, #32
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e014      	b.n	8005d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff ff34 	bl	8005ba4 <SPI_WaitFifoStateUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e000      	b.n	8005d54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e040      	b.n	8005df0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fc fbf0 	bl	8002564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2224      	movs	r2, #36	; 0x24
 8005d88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fb0c 	bl	80063c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f8af 	bl	8005f0c <UART_SetConfig>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e01b      	b.n	8005df0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fb8b 	bl	8006504 <UART_CheckIdleState>
 8005dee:	4603      	mov	r3, r0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	; 0x28
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d178      	bne.n	8005f02 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_UART_Transmit+0x24>
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e071      	b.n	8005f04 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2221      	movs	r2, #33	; 0x21
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e2e:	f7fc fcfd 	bl	800282c <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4c:	d108      	bne.n	8005e60 <HAL_UART_Transmit+0x68>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	e003      	b.n	8005e68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e68:	e030      	b.n	8005ecc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	2180      	movs	r1, #128	; 0x80
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fbed 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e03c      	b.n	8005f04 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10b      	bne.n	8005ea8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	881a      	ldrh	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e9c:	b292      	uxth	r2, r2
 8005e9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	e008      	b.n	8005eba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1c8      	bne.n	8005e6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2140      	movs	r1, #64	; 0x40
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fbb6 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e005      	b.n	8005f04 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
  }
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f10:	b08a      	sub	sp, #40	; 0x28
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	431a      	orrs	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b9e      	ldr	r3, [pc, #632]	; (80061b4 <UART_SetConfig+0x2a8>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f44:	430b      	orrs	r3, r1
 8005f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a93      	ldr	r2, [pc, #588]	; (80061b8 <UART_SetConfig+0x2ac>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f74:	4313      	orrs	r3, r2
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a8a      	ldr	r2, [pc, #552]	; (80061bc <UART_SetConfig+0x2b0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d126      	bne.n	8005fe4 <UART_SetConfig+0xd8>
 8005f96:	4b8a      	ldr	r3, [pc, #552]	; (80061c0 <UART_SetConfig+0x2b4>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d81b      	bhi.n	8005fdc <UART_SetConfig+0xd0>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <UART_SetConfig+0xa0>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fcd 	.word	0x08005fcd
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fd5 	.word	0x08005fd5
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc2:	e0ab      	b.n	800611c <UART_SetConfig+0x210>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fca:	e0a7      	b.n	800611c <UART_SetConfig+0x210>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd2:	e0a3      	b.n	800611c <UART_SetConfig+0x210>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fda:	e09f      	b.n	800611c <UART_SetConfig+0x210>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe2:	e09b      	b.n	800611c <UART_SetConfig+0x210>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a76      	ldr	r2, [pc, #472]	; (80061c4 <UART_SetConfig+0x2b8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d138      	bne.n	8006060 <UART_SetConfig+0x154>
 8005fee:	4b74      	ldr	r3, [pc, #464]	; (80061c0 <UART_SetConfig+0x2b4>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff4:	f003 030c 	and.w	r3, r3, #12
 8005ff8:	2b0c      	cmp	r3, #12
 8005ffa:	d82d      	bhi.n	8006058 <UART_SetConfig+0x14c>
 8005ffc:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <UART_SetConfig+0xf8>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	08006039 	.word	0x08006039
 8006008:	08006059 	.word	0x08006059
 800600c:	08006059 	.word	0x08006059
 8006010:	08006059 	.word	0x08006059
 8006014:	08006049 	.word	0x08006049
 8006018:	08006059 	.word	0x08006059
 800601c:	08006059 	.word	0x08006059
 8006020:	08006059 	.word	0x08006059
 8006024:	08006041 	.word	0x08006041
 8006028:	08006059 	.word	0x08006059
 800602c:	08006059 	.word	0x08006059
 8006030:	08006059 	.word	0x08006059
 8006034:	08006051 	.word	0x08006051
 8006038:	2300      	movs	r3, #0
 800603a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603e:	e06d      	b.n	800611c <UART_SetConfig+0x210>
 8006040:	2302      	movs	r3, #2
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006046:	e069      	b.n	800611c <UART_SetConfig+0x210>
 8006048:	2304      	movs	r3, #4
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604e:	e065      	b.n	800611c <UART_SetConfig+0x210>
 8006050:	2308      	movs	r3, #8
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006056:	e061      	b.n	800611c <UART_SetConfig+0x210>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e05d      	b.n	800611c <UART_SetConfig+0x210>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a58      	ldr	r2, [pc, #352]	; (80061c8 <UART_SetConfig+0x2bc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d125      	bne.n	80060b6 <UART_SetConfig+0x1aa>
 800606a:	4b55      	ldr	r3, [pc, #340]	; (80061c0 <UART_SetConfig+0x2b4>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006070:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006074:	2b30      	cmp	r3, #48	; 0x30
 8006076:	d016      	beq.n	80060a6 <UART_SetConfig+0x19a>
 8006078:	2b30      	cmp	r3, #48	; 0x30
 800607a:	d818      	bhi.n	80060ae <UART_SetConfig+0x1a2>
 800607c:	2b20      	cmp	r3, #32
 800607e:	d00a      	beq.n	8006096 <UART_SetConfig+0x18a>
 8006080:	2b20      	cmp	r3, #32
 8006082:	d814      	bhi.n	80060ae <UART_SetConfig+0x1a2>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <UART_SetConfig+0x182>
 8006088:	2b10      	cmp	r3, #16
 800608a:	d008      	beq.n	800609e <UART_SetConfig+0x192>
 800608c:	e00f      	b.n	80060ae <UART_SetConfig+0x1a2>
 800608e:	2300      	movs	r3, #0
 8006090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006094:	e042      	b.n	800611c <UART_SetConfig+0x210>
 8006096:	2302      	movs	r3, #2
 8006098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800609c:	e03e      	b.n	800611c <UART_SetConfig+0x210>
 800609e:	2304      	movs	r3, #4
 80060a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060a4:	e03a      	b.n	800611c <UART_SetConfig+0x210>
 80060a6:	2308      	movs	r3, #8
 80060a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ac:	e036      	b.n	800611c <UART_SetConfig+0x210>
 80060ae:	2310      	movs	r3, #16
 80060b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b4:	e032      	b.n	800611c <UART_SetConfig+0x210>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a3f      	ldr	r2, [pc, #252]	; (80061b8 <UART_SetConfig+0x2ac>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d12a      	bne.n	8006116 <UART_SetConfig+0x20a>
 80060c0:	4b3f      	ldr	r3, [pc, #252]	; (80061c0 <UART_SetConfig+0x2b4>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ce:	d01a      	beq.n	8006106 <UART_SetConfig+0x1fa>
 80060d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d4:	d81b      	bhi.n	800610e <UART_SetConfig+0x202>
 80060d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060da:	d00c      	beq.n	80060f6 <UART_SetConfig+0x1ea>
 80060dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e0:	d815      	bhi.n	800610e <UART_SetConfig+0x202>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <UART_SetConfig+0x1e2>
 80060e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ea:	d008      	beq.n	80060fe <UART_SetConfig+0x1f2>
 80060ec:	e00f      	b.n	800610e <UART_SetConfig+0x202>
 80060ee:	2300      	movs	r3, #0
 80060f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f4:	e012      	b.n	800611c <UART_SetConfig+0x210>
 80060f6:	2302      	movs	r3, #2
 80060f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fc:	e00e      	b.n	800611c <UART_SetConfig+0x210>
 80060fe:	2304      	movs	r3, #4
 8006100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006104:	e00a      	b.n	800611c <UART_SetConfig+0x210>
 8006106:	2308      	movs	r3, #8
 8006108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610c:	e006      	b.n	800611c <UART_SetConfig+0x210>
 800610e:	2310      	movs	r3, #16
 8006110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006114:	e002      	b.n	800611c <UART_SetConfig+0x210>
 8006116:	2310      	movs	r3, #16
 8006118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a25      	ldr	r2, [pc, #148]	; (80061b8 <UART_SetConfig+0x2ac>)
 8006122:	4293      	cmp	r3, r2
 8006124:	f040 808a 	bne.w	800623c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800612c:	2b08      	cmp	r3, #8
 800612e:	d824      	bhi.n	800617a <UART_SetConfig+0x26e>
 8006130:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0x22c>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	0800615d 	.word	0x0800615d
 800613c:	0800617b 	.word	0x0800617b
 8006140:	08006165 	.word	0x08006165
 8006144:	0800617b 	.word	0x0800617b
 8006148:	0800616b 	.word	0x0800616b
 800614c:	0800617b 	.word	0x0800617b
 8006150:	0800617b 	.word	0x0800617b
 8006154:	0800617b 	.word	0x0800617b
 8006158:	08006173 	.word	0x08006173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615c:	f7fe ffc2 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 8006160:	61f8      	str	r0, [r7, #28]
        break;
 8006162:	e010      	b.n	8006186 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006164:	4b19      	ldr	r3, [pc, #100]	; (80061cc <UART_SetConfig+0x2c0>)
 8006166:	61fb      	str	r3, [r7, #28]
        break;
 8006168:	e00d      	b.n	8006186 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616a:	f7fe ff23 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 800616e:	61f8      	str	r0, [r7, #28]
        break;
 8006170:	e009      	b.n	8006186 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	61fb      	str	r3, [r7, #28]
        break;
 8006178:	e005      	b.n	8006186 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006184:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8109 	beq.w	80063a0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	4413      	add	r3, r2
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	429a      	cmp	r2, r3
 800619c:	d305      	bcc.n	80061aa <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d912      	bls.n	80061d0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061b0:	e0f6      	b.n	80063a0 <UART_SetConfig+0x494>
 80061b2:	bf00      	nop
 80061b4:	efff69f3 	.word	0xefff69f3
 80061b8:	40008000 	.word	0x40008000
 80061bc:	40013800 	.word	0x40013800
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40004400 	.word	0x40004400
 80061c8:	40004800 	.word	0x40004800
 80061cc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2200      	movs	r2, #0
 80061d4:	461c      	mov	r4, r3
 80061d6:	4615      	mov	r5, r2
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	022b      	lsls	r3, r5, #8
 80061e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061e6:	0222      	lsls	r2, r4, #8
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	6849      	ldr	r1, [r1, #4]
 80061ec:	0849      	lsrs	r1, r1, #1
 80061ee:	2000      	movs	r0, #0
 80061f0:	4688      	mov	r8, r1
 80061f2:	4681      	mov	r9, r0
 80061f4:	eb12 0a08 	adds.w	sl, r2, r8
 80061f8:	eb43 0b09 	adc.w	fp, r3, r9
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800620a:	4650      	mov	r0, sl
 800620c:	4659      	mov	r1, fp
 800620e:	f7fa fd1b 	bl	8000c48 <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4613      	mov	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006220:	d308      	bcc.n	8006234 <UART_SetConfig+0x328>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006228:	d204      	bcs.n	8006234 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	60da      	str	r2, [r3, #12]
 8006232:	e0b5      	b.n	80063a0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800623a:	e0b1      	b.n	80063a0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006244:	d15d      	bne.n	8006302 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800624a:	2b08      	cmp	r3, #8
 800624c:	d827      	bhi.n	800629e <UART_SetConfig+0x392>
 800624e:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <UART_SetConfig+0x348>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	08006279 	.word	0x08006279
 8006258:	08006281 	.word	0x08006281
 800625c:	08006289 	.word	0x08006289
 8006260:	0800629f 	.word	0x0800629f
 8006264:	0800628f 	.word	0x0800628f
 8006268:	0800629f 	.word	0x0800629f
 800626c:	0800629f 	.word	0x0800629f
 8006270:	0800629f 	.word	0x0800629f
 8006274:	08006297 	.word	0x08006297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006278:	f7fe ff34 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 800627c:	61f8      	str	r0, [r7, #28]
        break;
 800627e:	e014      	b.n	80062aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006280:	f7fe ff46 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 8006284:	61f8      	str	r0, [r7, #28]
        break;
 8006286:	e010      	b.n	80062aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006288:	4b4c      	ldr	r3, [pc, #304]	; (80063bc <UART_SetConfig+0x4b0>)
 800628a:	61fb      	str	r3, [r7, #28]
        break;
 800628c:	e00d      	b.n	80062aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800628e:	f7fe fe91 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 8006292:	61f8      	str	r0, [r7, #28]
        break;
 8006294:	e009      	b.n	80062aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800629a:	61fb      	str	r3, [r7, #28]
        break;
 800629c:	e005      	b.n	80062aa <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d077      	beq.n	80063a0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	005a      	lsls	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	441a      	add	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	2b0f      	cmp	r3, #15
 80062ca:	d916      	bls.n	80062fa <UART_SetConfig+0x3ee>
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d2:	d212      	bcs.n	80062fa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f023 030f 	bic.w	r3, r3, #15
 80062dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	8afb      	ldrh	r3, [r7, #22]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	8afa      	ldrh	r2, [r7, #22]
 80062f6:	60da      	str	r2, [r3, #12]
 80062f8:	e052      	b.n	80063a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006300:	e04e      	b.n	80063a0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006306:	2b08      	cmp	r3, #8
 8006308:	d827      	bhi.n	800635a <UART_SetConfig+0x44e>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0x404>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006335 	.word	0x08006335
 8006314:	0800633d 	.word	0x0800633d
 8006318:	08006345 	.word	0x08006345
 800631c:	0800635b 	.word	0x0800635b
 8006320:	0800634b 	.word	0x0800634b
 8006324:	0800635b 	.word	0x0800635b
 8006328:	0800635b 	.word	0x0800635b
 800632c:	0800635b 	.word	0x0800635b
 8006330:	08006353 	.word	0x08006353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006334:	f7fe fed6 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 8006338:	61f8      	str	r0, [r7, #28]
        break;
 800633a:	e014      	b.n	8006366 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800633c:	f7fe fee8 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 8006340:	61f8      	str	r0, [r7, #28]
        break;
 8006342:	e010      	b.n	8006366 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006344:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <UART_SetConfig+0x4b0>)
 8006346:	61fb      	str	r3, [r7, #28]
        break;
 8006348:	e00d      	b.n	8006366 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800634a:	f7fe fe33 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 800634e:	61f8      	str	r0, [r7, #28]
        break;
 8006350:	e009      	b.n	8006366 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006356:	61fb      	str	r3, [r7, #28]
        break;
 8006358:	e005      	b.n	8006366 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006364:	bf00      	nop
    }

    if (pclk != 0U)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d019      	beq.n	80063a0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	085a      	lsrs	r2, r3, #1
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	441a      	add	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b0f      	cmp	r3, #15
 8006384:	d909      	bls.n	800639a <UART_SetConfig+0x48e>
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638c:	d205      	bcs.n	800639a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60da      	str	r2, [r3, #12]
 8006398:	e002      	b.n	80063a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80063ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3728      	adds	r7, #40	; 0x28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ba:	bf00      	nop
 80063bc:	00f42400 	.word	0x00f42400

080063c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064be:	d10a      	bne.n	80064d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b098      	sub	sp, #96	; 0x60
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006514:	f7fc f98a 	bl	800282c <HAL_GetTick>
 8006518:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b08      	cmp	r3, #8
 8006526:	d12e      	bne.n	8006586 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f88c 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d021      	beq.n	8006586 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006556:	653b      	str	r3, [r7, #80]	; 0x50
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006560:	647b      	str	r3, [r7, #68]	; 0x44
 8006562:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800656e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e062      	b.n	800664c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d149      	bne.n	8006628 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659c:	2200      	movs	r2, #0
 800659e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f856 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d03c      	beq.n	8006628 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	623b      	str	r3, [r7, #32]
   return(result);
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065cc:	633b      	str	r3, [r7, #48]	; 0x30
 80065ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e6      	bne.n	80065ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3308      	adds	r3, #8
 80065e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3308      	adds	r3, #8
 80065fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006600:	61fa      	str	r2, [r7, #28]
 8006602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	69b9      	ldr	r1, [r7, #24]
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	617b      	str	r3, [r7, #20]
   return(result);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e5      	bne.n	80065e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e011      	b.n	800664c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3758      	adds	r7, #88	; 0x58
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	4613      	mov	r3, r2
 8006662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006664:	e049      	b.n	80066fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d045      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666e:	f7fc f8dd 	bl	800282c <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <UART_WaitOnFlagUntilTimeout+0x30>
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e048      	b.n	800671a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	d031      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d110      	bne.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2208      	movs	r2, #8
 80066aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f838 	bl	8006722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2208      	movs	r2, #8
 80066b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e029      	b.n	800671a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d4:	d111      	bne.n	80066fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f81e 	bl	8006722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e00f      	b.n	800671a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4013      	ands	r3, r2
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	429a      	cmp	r2, r3
 8006708:	bf0c      	ite	eq
 800670a:	2301      	moveq	r3, #1
 800670c:	2300      	movne	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	429a      	cmp	r2, r3
 8006716:	d0a6      	beq.n	8006666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006722:	b480      	push	{r7}
 8006724:	b095      	sub	sp, #84	; 0x54
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800673e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006748:	643b      	str	r3, [r7, #64]	; 0x40
 800674a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800674e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e6      	bne.n	800672a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3308      	adds	r3, #8
 8006762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	e853 3f00 	ldrex	r3, [r3]
 800676a:	61fb      	str	r3, [r7, #28]
   return(result);
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	64bb      	str	r3, [r7, #72]	; 0x48
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800677c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e5      	bne.n	800675c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006794:	2b01      	cmp	r3, #1
 8006796:	d118      	bne.n	80067ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f023 0310 	bic.w	r3, r3, #16
 80067ac:	647b      	str	r3, [r7, #68]	; 0x44
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	6979      	ldr	r1, [r7, #20]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	613b      	str	r3, [r7, #16]
   return(result);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e6      	bne.n	8006798 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80067de:	bf00      	nop
 80067e0:	3754      	adds	r7, #84	; 0x54
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <sniprintf>:
 80067ec:	b40c      	push	{r2, r3}
 80067ee:	b530      	push	{r4, r5, lr}
 80067f0:	4b17      	ldr	r3, [pc, #92]	; (8006850 <sniprintf+0x64>)
 80067f2:	1e0c      	subs	r4, r1, #0
 80067f4:	681d      	ldr	r5, [r3, #0]
 80067f6:	b09d      	sub	sp, #116	; 0x74
 80067f8:	da08      	bge.n	800680c <sniprintf+0x20>
 80067fa:	238b      	movs	r3, #139	; 0x8b
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006802:	b01d      	add	sp, #116	; 0x74
 8006804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006808:	b002      	add	sp, #8
 800680a:	4770      	bx	lr
 800680c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006810:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006814:	bf14      	ite	ne
 8006816:	f104 33ff 	addne.w	r3, r4, #4294967295
 800681a:	4623      	moveq	r3, r4
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	9307      	str	r3, [sp, #28]
 8006820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006824:	9002      	str	r0, [sp, #8]
 8006826:	9006      	str	r0, [sp, #24]
 8006828:	f8ad 3016 	strh.w	r3, [sp, #22]
 800682c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800682e:	ab21      	add	r3, sp, #132	; 0x84
 8006830:	a902      	add	r1, sp, #8
 8006832:	4628      	mov	r0, r5
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	f000 f9b5 	bl	8006ba4 <_svfiprintf_r>
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	bfbc      	itt	lt
 800683e:	238b      	movlt	r3, #139	; 0x8b
 8006840:	602b      	strlt	r3, [r5, #0]
 8006842:	2c00      	cmp	r4, #0
 8006844:	d0dd      	beq.n	8006802 <sniprintf+0x16>
 8006846:	9b02      	ldr	r3, [sp, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e7d9      	b.n	8006802 <sniprintf+0x16>
 800684e:	bf00      	nop
 8006850:	20000058 	.word	0x20000058

08006854 <memset>:
 8006854:	4402      	add	r2, r0
 8006856:	4603      	mov	r3, r0
 8006858:	4293      	cmp	r3, r2
 800685a:	d100      	bne.n	800685e <memset+0xa>
 800685c:	4770      	bx	lr
 800685e:	f803 1b01 	strb.w	r1, [r3], #1
 8006862:	e7f9      	b.n	8006858 <memset+0x4>

08006864 <strncat>:
 8006864:	b530      	push	{r4, r5, lr}
 8006866:	4604      	mov	r4, r0
 8006868:	7825      	ldrb	r5, [r4, #0]
 800686a:	4623      	mov	r3, r4
 800686c:	3401      	adds	r4, #1
 800686e:	2d00      	cmp	r5, #0
 8006870:	d1fa      	bne.n	8006868 <strncat+0x4>
 8006872:	3a01      	subs	r2, #1
 8006874:	d304      	bcc.n	8006880 <strncat+0x1c>
 8006876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800687a:	f803 4b01 	strb.w	r4, [r3], #1
 800687e:	b904      	cbnz	r4, 8006882 <strncat+0x1e>
 8006880:	bd30      	pop	{r4, r5, pc}
 8006882:	2a00      	cmp	r2, #0
 8006884:	d1f5      	bne.n	8006872 <strncat+0xe>
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	e7f3      	b.n	8006872 <strncat+0xe>
	...

0800688c <__errno>:
 800688c:	4b01      	ldr	r3, [pc, #4]	; (8006894 <__errno+0x8>)
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000058 	.word	0x20000058

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4d0d      	ldr	r5, [pc, #52]	; (80068d0 <__libc_init_array+0x38>)
 800689c:	4c0d      	ldr	r4, [pc, #52]	; (80068d4 <__libc_init_array+0x3c>)
 800689e:	1b64      	subs	r4, r4, r5
 80068a0:	10a4      	asrs	r4, r4, #2
 80068a2:	2600      	movs	r6, #0
 80068a4:	42a6      	cmp	r6, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	4d0b      	ldr	r5, [pc, #44]	; (80068d8 <__libc_init_array+0x40>)
 80068aa:	4c0c      	ldr	r4, [pc, #48]	; (80068dc <__libc_init_array+0x44>)
 80068ac:	f000 fe6e 	bl	800758c <_init>
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	2600      	movs	r6, #0
 80068b6:	42a6      	cmp	r6, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c0:	4798      	blx	r3
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ca:	4798      	blx	r3
 80068cc:	3601      	adds	r6, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	08007a34 	.word	0x08007a34
 80068d4:	08007a34 	.word	0x08007a34
 80068d8:	08007a34 	.word	0x08007a34
 80068dc:	08007a38 	.word	0x08007a38

080068e0 <__retarget_lock_acquire_recursive>:
 80068e0:	4770      	bx	lr

080068e2 <__retarget_lock_release_recursive>:
 80068e2:	4770      	bx	lr

080068e4 <memcpy>:
 80068e4:	440a      	add	r2, r1
 80068e6:	4291      	cmp	r1, r2
 80068e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068ec:	d100      	bne.n	80068f0 <memcpy+0xc>
 80068ee:	4770      	bx	lr
 80068f0:	b510      	push	{r4, lr}
 80068f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068fa:	4291      	cmp	r1, r2
 80068fc:	d1f9      	bne.n	80068f2 <memcpy+0xe>
 80068fe:	bd10      	pop	{r4, pc}

08006900 <_free_r>:
 8006900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006902:	2900      	cmp	r1, #0
 8006904:	d044      	beq.n	8006990 <_free_r+0x90>
 8006906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800690a:	9001      	str	r0, [sp, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f1a1 0404 	sub.w	r4, r1, #4
 8006912:	bfb8      	it	lt
 8006914:	18e4      	addlt	r4, r4, r3
 8006916:	f000 f8df 	bl	8006ad8 <__malloc_lock>
 800691a:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <_free_r+0x94>)
 800691c:	9801      	ldr	r0, [sp, #4]
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	b933      	cbnz	r3, 8006930 <_free_r+0x30>
 8006922:	6063      	str	r3, [r4, #4]
 8006924:	6014      	str	r4, [r2, #0]
 8006926:	b003      	add	sp, #12
 8006928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800692c:	f000 b8da 	b.w	8006ae4 <__malloc_unlock>
 8006930:	42a3      	cmp	r3, r4
 8006932:	d908      	bls.n	8006946 <_free_r+0x46>
 8006934:	6825      	ldr	r5, [r4, #0]
 8006936:	1961      	adds	r1, r4, r5
 8006938:	428b      	cmp	r3, r1
 800693a:	bf01      	itttt	eq
 800693c:	6819      	ldreq	r1, [r3, #0]
 800693e:	685b      	ldreq	r3, [r3, #4]
 8006940:	1949      	addeq	r1, r1, r5
 8006942:	6021      	streq	r1, [r4, #0]
 8006944:	e7ed      	b.n	8006922 <_free_r+0x22>
 8006946:	461a      	mov	r2, r3
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	b10b      	cbz	r3, 8006950 <_free_r+0x50>
 800694c:	42a3      	cmp	r3, r4
 800694e:	d9fa      	bls.n	8006946 <_free_r+0x46>
 8006950:	6811      	ldr	r1, [r2, #0]
 8006952:	1855      	adds	r5, r2, r1
 8006954:	42a5      	cmp	r5, r4
 8006956:	d10b      	bne.n	8006970 <_free_r+0x70>
 8006958:	6824      	ldr	r4, [r4, #0]
 800695a:	4421      	add	r1, r4
 800695c:	1854      	adds	r4, r2, r1
 800695e:	42a3      	cmp	r3, r4
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	d1e0      	bne.n	8006926 <_free_r+0x26>
 8006964:	681c      	ldr	r4, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	6053      	str	r3, [r2, #4]
 800696a:	440c      	add	r4, r1
 800696c:	6014      	str	r4, [r2, #0]
 800696e:	e7da      	b.n	8006926 <_free_r+0x26>
 8006970:	d902      	bls.n	8006978 <_free_r+0x78>
 8006972:	230c      	movs	r3, #12
 8006974:	6003      	str	r3, [r0, #0]
 8006976:	e7d6      	b.n	8006926 <_free_r+0x26>
 8006978:	6825      	ldr	r5, [r4, #0]
 800697a:	1961      	adds	r1, r4, r5
 800697c:	428b      	cmp	r3, r1
 800697e:	bf04      	itt	eq
 8006980:	6819      	ldreq	r1, [r3, #0]
 8006982:	685b      	ldreq	r3, [r3, #4]
 8006984:	6063      	str	r3, [r4, #4]
 8006986:	bf04      	itt	eq
 8006988:	1949      	addeq	r1, r1, r5
 800698a:	6021      	streq	r1, [r4, #0]
 800698c:	6054      	str	r4, [r2, #4]
 800698e:	e7ca      	b.n	8006926 <_free_r+0x26>
 8006990:	b003      	add	sp, #12
 8006992:	bd30      	pop	{r4, r5, pc}
 8006994:	20000314 	.word	0x20000314

08006998 <sbrk_aligned>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4e0e      	ldr	r6, [pc, #56]	; (80069d4 <sbrk_aligned+0x3c>)
 800699c:	460c      	mov	r4, r1
 800699e:	6831      	ldr	r1, [r6, #0]
 80069a0:	4605      	mov	r5, r0
 80069a2:	b911      	cbnz	r1, 80069aa <sbrk_aligned+0x12>
 80069a4:	f000 fba6 	bl	80070f4 <_sbrk_r>
 80069a8:	6030      	str	r0, [r6, #0]
 80069aa:	4621      	mov	r1, r4
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 fba1 	bl	80070f4 <_sbrk_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d00a      	beq.n	80069cc <sbrk_aligned+0x34>
 80069b6:	1cc4      	adds	r4, r0, #3
 80069b8:	f024 0403 	bic.w	r4, r4, #3
 80069bc:	42a0      	cmp	r0, r4
 80069be:	d007      	beq.n	80069d0 <sbrk_aligned+0x38>
 80069c0:	1a21      	subs	r1, r4, r0
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 fb96 	bl	80070f4 <_sbrk_r>
 80069c8:	3001      	adds	r0, #1
 80069ca:	d101      	bne.n	80069d0 <sbrk_aligned+0x38>
 80069cc:	f04f 34ff 	mov.w	r4, #4294967295
 80069d0:	4620      	mov	r0, r4
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	20000318 	.word	0x20000318

080069d8 <_malloc_r>:
 80069d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069dc:	1ccd      	adds	r5, r1, #3
 80069de:	f025 0503 	bic.w	r5, r5, #3
 80069e2:	3508      	adds	r5, #8
 80069e4:	2d0c      	cmp	r5, #12
 80069e6:	bf38      	it	cc
 80069e8:	250c      	movcc	r5, #12
 80069ea:	2d00      	cmp	r5, #0
 80069ec:	4607      	mov	r7, r0
 80069ee:	db01      	blt.n	80069f4 <_malloc_r+0x1c>
 80069f0:	42a9      	cmp	r1, r5
 80069f2:	d905      	bls.n	8006a00 <_malloc_r+0x28>
 80069f4:	230c      	movs	r3, #12
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	2600      	movs	r6, #0
 80069fa:	4630      	mov	r0, r6
 80069fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ad4 <_malloc_r+0xfc>
 8006a04:	f000 f868 	bl	8006ad8 <__malloc_lock>
 8006a08:	f8d8 3000 	ldr.w	r3, [r8]
 8006a0c:	461c      	mov	r4, r3
 8006a0e:	bb5c      	cbnz	r4, 8006a68 <_malloc_r+0x90>
 8006a10:	4629      	mov	r1, r5
 8006a12:	4638      	mov	r0, r7
 8006a14:	f7ff ffc0 	bl	8006998 <sbrk_aligned>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	d155      	bne.n	8006aca <_malloc_r+0xf2>
 8006a1e:	f8d8 4000 	ldr.w	r4, [r8]
 8006a22:	4626      	mov	r6, r4
 8006a24:	2e00      	cmp	r6, #0
 8006a26:	d145      	bne.n	8006ab4 <_malloc_r+0xdc>
 8006a28:	2c00      	cmp	r4, #0
 8006a2a:	d048      	beq.n	8006abe <_malloc_r+0xe6>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4638      	mov	r0, r7
 8006a32:	eb04 0903 	add.w	r9, r4, r3
 8006a36:	f000 fb5d 	bl	80070f4 <_sbrk_r>
 8006a3a:	4581      	cmp	r9, r0
 8006a3c:	d13f      	bne.n	8006abe <_malloc_r+0xe6>
 8006a3e:	6821      	ldr	r1, [r4, #0]
 8006a40:	1a6d      	subs	r5, r5, r1
 8006a42:	4629      	mov	r1, r5
 8006a44:	4638      	mov	r0, r7
 8006a46:	f7ff ffa7 	bl	8006998 <sbrk_aligned>
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d037      	beq.n	8006abe <_malloc_r+0xe6>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	442b      	add	r3, r5
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	f8d8 3000 	ldr.w	r3, [r8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d038      	beq.n	8006ace <_malloc_r+0xf6>
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	42a2      	cmp	r2, r4
 8006a60:	d12b      	bne.n	8006aba <_malloc_r+0xe2>
 8006a62:	2200      	movs	r2, #0
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	e00f      	b.n	8006a88 <_malloc_r+0xb0>
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	1b52      	subs	r2, r2, r5
 8006a6c:	d41f      	bmi.n	8006aae <_malloc_r+0xd6>
 8006a6e:	2a0b      	cmp	r2, #11
 8006a70:	d917      	bls.n	8006aa2 <_malloc_r+0xca>
 8006a72:	1961      	adds	r1, r4, r5
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	6025      	str	r5, [r4, #0]
 8006a78:	bf18      	it	ne
 8006a7a:	6059      	strne	r1, [r3, #4]
 8006a7c:	6863      	ldr	r3, [r4, #4]
 8006a7e:	bf08      	it	eq
 8006a80:	f8c8 1000 	streq.w	r1, [r8]
 8006a84:	5162      	str	r2, [r4, r5]
 8006a86:	604b      	str	r3, [r1, #4]
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f104 060b 	add.w	r6, r4, #11
 8006a8e:	f000 f829 	bl	8006ae4 <__malloc_unlock>
 8006a92:	f026 0607 	bic.w	r6, r6, #7
 8006a96:	1d23      	adds	r3, r4, #4
 8006a98:	1af2      	subs	r2, r6, r3
 8006a9a:	d0ae      	beq.n	80069fa <_malloc_r+0x22>
 8006a9c:	1b9b      	subs	r3, r3, r6
 8006a9e:	50a3      	str	r3, [r4, r2]
 8006aa0:	e7ab      	b.n	80069fa <_malloc_r+0x22>
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	6862      	ldr	r2, [r4, #4]
 8006aa6:	d1dd      	bne.n	8006a64 <_malloc_r+0x8c>
 8006aa8:	f8c8 2000 	str.w	r2, [r8]
 8006aac:	e7ec      	b.n	8006a88 <_malloc_r+0xb0>
 8006aae:	4623      	mov	r3, r4
 8006ab0:	6864      	ldr	r4, [r4, #4]
 8006ab2:	e7ac      	b.n	8006a0e <_malloc_r+0x36>
 8006ab4:	4634      	mov	r4, r6
 8006ab6:	6876      	ldr	r6, [r6, #4]
 8006ab8:	e7b4      	b.n	8006a24 <_malloc_r+0x4c>
 8006aba:	4613      	mov	r3, r2
 8006abc:	e7cc      	b.n	8006a58 <_malloc_r+0x80>
 8006abe:	230c      	movs	r3, #12
 8006ac0:	603b      	str	r3, [r7, #0]
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f000 f80e 	bl	8006ae4 <__malloc_unlock>
 8006ac8:	e797      	b.n	80069fa <_malloc_r+0x22>
 8006aca:	6025      	str	r5, [r4, #0]
 8006acc:	e7dc      	b.n	8006a88 <_malloc_r+0xb0>
 8006ace:	605b      	str	r3, [r3, #4]
 8006ad0:	deff      	udf	#255	; 0xff
 8006ad2:	bf00      	nop
 8006ad4:	20000314 	.word	0x20000314

08006ad8 <__malloc_lock>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__malloc_lock+0x8>)
 8006ada:	f7ff bf01 	b.w	80068e0 <__retarget_lock_acquire_recursive>
 8006ade:	bf00      	nop
 8006ae0:	20000310 	.word	0x20000310

08006ae4 <__malloc_unlock>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__malloc_unlock+0x8>)
 8006ae6:	f7ff befc 	b.w	80068e2 <__retarget_lock_release_recursive>
 8006aea:	bf00      	nop
 8006aec:	20000310 	.word	0x20000310

08006af0 <__ssputs_r>:
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	688e      	ldr	r6, [r1, #8]
 8006af6:	461f      	mov	r7, r3
 8006af8:	42be      	cmp	r6, r7
 8006afa:	680b      	ldr	r3, [r1, #0]
 8006afc:	4682      	mov	sl, r0
 8006afe:	460c      	mov	r4, r1
 8006b00:	4690      	mov	r8, r2
 8006b02:	d82c      	bhi.n	8006b5e <__ssputs_r+0x6e>
 8006b04:	898a      	ldrh	r2, [r1, #12]
 8006b06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b0a:	d026      	beq.n	8006b5a <__ssputs_r+0x6a>
 8006b0c:	6965      	ldr	r5, [r4, #20]
 8006b0e:	6909      	ldr	r1, [r1, #16]
 8006b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b14:	eba3 0901 	sub.w	r9, r3, r1
 8006b18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b1c:	1c7b      	adds	r3, r7, #1
 8006b1e:	444b      	add	r3, r9
 8006b20:	106d      	asrs	r5, r5, #1
 8006b22:	429d      	cmp	r5, r3
 8006b24:	bf38      	it	cc
 8006b26:	461d      	movcc	r5, r3
 8006b28:	0553      	lsls	r3, r2, #21
 8006b2a:	d527      	bpl.n	8006b7c <__ssputs_r+0x8c>
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7ff ff53 	bl	80069d8 <_malloc_r>
 8006b32:	4606      	mov	r6, r0
 8006b34:	b360      	cbz	r0, 8006b90 <__ssputs_r+0xa0>
 8006b36:	6921      	ldr	r1, [r4, #16]
 8006b38:	464a      	mov	r2, r9
 8006b3a:	f7ff fed3 	bl	80068e4 <memcpy>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	6126      	str	r6, [r4, #16]
 8006b4c:	6165      	str	r5, [r4, #20]
 8006b4e:	444e      	add	r6, r9
 8006b50:	eba5 0509 	sub.w	r5, r5, r9
 8006b54:	6026      	str	r6, [r4, #0]
 8006b56:	60a5      	str	r5, [r4, #8]
 8006b58:	463e      	mov	r6, r7
 8006b5a:	42be      	cmp	r6, r7
 8006b5c:	d900      	bls.n	8006b60 <__ssputs_r+0x70>
 8006b5e:	463e      	mov	r6, r7
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	4632      	mov	r2, r6
 8006b64:	4641      	mov	r1, r8
 8006b66:	f000 faab 	bl	80070c0 <memmove>
 8006b6a:	68a3      	ldr	r3, [r4, #8]
 8006b6c:	1b9b      	subs	r3, r3, r6
 8006b6e:	60a3      	str	r3, [r4, #8]
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	4433      	add	r3, r6
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	2000      	movs	r0, #0
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7c:	462a      	mov	r2, r5
 8006b7e:	f000 fac9 	bl	8007114 <_realloc_r>
 8006b82:	4606      	mov	r6, r0
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d1e0      	bne.n	8006b4a <__ssputs_r+0x5a>
 8006b88:	6921      	ldr	r1, [r4, #16]
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	f7ff feb8 	bl	8006900 <_free_r>
 8006b90:	230c      	movs	r3, #12
 8006b92:	f8ca 3000 	str.w	r3, [sl]
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba2:	e7e9      	b.n	8006b78 <__ssputs_r+0x88>

08006ba4 <_svfiprintf_r>:
 8006ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba8:	4698      	mov	r8, r3
 8006baa:	898b      	ldrh	r3, [r1, #12]
 8006bac:	061b      	lsls	r3, r3, #24
 8006bae:	b09d      	sub	sp, #116	; 0x74
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	d50e      	bpl.n	8006bd6 <_svfiprintf_r+0x32>
 8006bb8:	690b      	ldr	r3, [r1, #16]
 8006bba:	b963      	cbnz	r3, 8006bd6 <_svfiprintf_r+0x32>
 8006bbc:	2140      	movs	r1, #64	; 0x40
 8006bbe:	f7ff ff0b 	bl	80069d8 <_malloc_r>
 8006bc2:	6028      	str	r0, [r5, #0]
 8006bc4:	6128      	str	r0, [r5, #16]
 8006bc6:	b920      	cbnz	r0, 8006bd2 <_svfiprintf_r+0x2e>
 8006bc8:	230c      	movs	r3, #12
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	e0d0      	b.n	8006d74 <_svfiprintf_r+0x1d0>
 8006bd2:	2340      	movs	r3, #64	; 0x40
 8006bd4:	616b      	str	r3, [r5, #20]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bda:	2320      	movs	r3, #32
 8006bdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006be4:	2330      	movs	r3, #48	; 0x30
 8006be6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d8c <_svfiprintf_r+0x1e8>
 8006bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bee:	f04f 0901 	mov.w	r9, #1
 8006bf2:	4623      	mov	r3, r4
 8006bf4:	469a      	mov	sl, r3
 8006bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bfa:	b10a      	cbz	r2, 8006c00 <_svfiprintf_r+0x5c>
 8006bfc:	2a25      	cmp	r2, #37	; 0x25
 8006bfe:	d1f9      	bne.n	8006bf4 <_svfiprintf_r+0x50>
 8006c00:	ebba 0b04 	subs.w	fp, sl, r4
 8006c04:	d00b      	beq.n	8006c1e <_svfiprintf_r+0x7a>
 8006c06:	465b      	mov	r3, fp
 8006c08:	4622      	mov	r2, r4
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	f7ff ff6f 	bl	8006af0 <__ssputs_r>
 8006c12:	3001      	adds	r0, #1
 8006c14:	f000 80a9 	beq.w	8006d6a <_svfiprintf_r+0x1c6>
 8006c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c1a:	445a      	add	r2, fp
 8006c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80a1 	beq.w	8006d6a <_svfiprintf_r+0x1c6>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c32:	f10a 0a01 	add.w	sl, sl, #1
 8006c36:	9304      	str	r3, [sp, #16]
 8006c38:	9307      	str	r3, [sp, #28]
 8006c3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c40:	4654      	mov	r4, sl
 8006c42:	2205      	movs	r2, #5
 8006c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c48:	4850      	ldr	r0, [pc, #320]	; (8006d8c <_svfiprintf_r+0x1e8>)
 8006c4a:	f7f9 fac9 	bl	80001e0 <memchr>
 8006c4e:	9a04      	ldr	r2, [sp, #16]
 8006c50:	b9d8      	cbnz	r0, 8006c8a <_svfiprintf_r+0xe6>
 8006c52:	06d0      	lsls	r0, r2, #27
 8006c54:	bf44      	itt	mi
 8006c56:	2320      	movmi	r3, #32
 8006c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c5c:	0711      	lsls	r1, r2, #28
 8006c5e:	bf44      	itt	mi
 8006c60:	232b      	movmi	r3, #43	; 0x2b
 8006c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c66:	f89a 3000 	ldrb.w	r3, [sl]
 8006c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c6c:	d015      	beq.n	8006c9a <_svfiprintf_r+0xf6>
 8006c6e:	9a07      	ldr	r2, [sp, #28]
 8006c70:	4654      	mov	r4, sl
 8006c72:	2000      	movs	r0, #0
 8006c74:	f04f 0c0a 	mov.w	ip, #10
 8006c78:	4621      	mov	r1, r4
 8006c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c7e:	3b30      	subs	r3, #48	; 0x30
 8006c80:	2b09      	cmp	r3, #9
 8006c82:	d94d      	bls.n	8006d20 <_svfiprintf_r+0x17c>
 8006c84:	b1b0      	cbz	r0, 8006cb4 <_svfiprintf_r+0x110>
 8006c86:	9207      	str	r2, [sp, #28]
 8006c88:	e014      	b.n	8006cb4 <_svfiprintf_r+0x110>
 8006c8a:	eba0 0308 	sub.w	r3, r0, r8
 8006c8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c92:	4313      	orrs	r3, r2
 8006c94:	9304      	str	r3, [sp, #16]
 8006c96:	46a2      	mov	sl, r4
 8006c98:	e7d2      	b.n	8006c40 <_svfiprintf_r+0x9c>
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	1d19      	adds	r1, r3, #4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	9103      	str	r1, [sp, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	bfbb      	ittet	lt
 8006ca6:	425b      	neglt	r3, r3
 8006ca8:	f042 0202 	orrlt.w	r2, r2, #2
 8006cac:	9307      	strge	r3, [sp, #28]
 8006cae:	9307      	strlt	r3, [sp, #28]
 8006cb0:	bfb8      	it	lt
 8006cb2:	9204      	strlt	r2, [sp, #16]
 8006cb4:	7823      	ldrb	r3, [r4, #0]
 8006cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8006cb8:	d10c      	bne.n	8006cd4 <_svfiprintf_r+0x130>
 8006cba:	7863      	ldrb	r3, [r4, #1]
 8006cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cbe:	d134      	bne.n	8006d2a <_svfiprintf_r+0x186>
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	1d1a      	adds	r2, r3, #4
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	9203      	str	r2, [sp, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	bfb8      	it	lt
 8006ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cd0:	3402      	adds	r4, #2
 8006cd2:	9305      	str	r3, [sp, #20]
 8006cd4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d9c <_svfiprintf_r+0x1f8>
 8006cd8:	7821      	ldrb	r1, [r4, #0]
 8006cda:	2203      	movs	r2, #3
 8006cdc:	4650      	mov	r0, sl
 8006cde:	f7f9 fa7f 	bl	80001e0 <memchr>
 8006ce2:	b138      	cbz	r0, 8006cf4 <_svfiprintf_r+0x150>
 8006ce4:	9b04      	ldr	r3, [sp, #16]
 8006ce6:	eba0 000a 	sub.w	r0, r0, sl
 8006cea:	2240      	movs	r2, #64	; 0x40
 8006cec:	4082      	lsls	r2, r0
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	3401      	adds	r4, #1
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf8:	4825      	ldr	r0, [pc, #148]	; (8006d90 <_svfiprintf_r+0x1ec>)
 8006cfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cfe:	2206      	movs	r2, #6
 8006d00:	f7f9 fa6e 	bl	80001e0 <memchr>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d038      	beq.n	8006d7a <_svfiprintf_r+0x1d6>
 8006d08:	4b22      	ldr	r3, [pc, #136]	; (8006d94 <_svfiprintf_r+0x1f0>)
 8006d0a:	bb1b      	cbnz	r3, 8006d54 <_svfiprintf_r+0x1b0>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	3307      	adds	r3, #7
 8006d10:	f023 0307 	bic.w	r3, r3, #7
 8006d14:	3308      	adds	r3, #8
 8006d16:	9303      	str	r3, [sp, #12]
 8006d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d1a:	4433      	add	r3, r6
 8006d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1e:	e768      	b.n	8006bf2 <_svfiprintf_r+0x4e>
 8006d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d24:	460c      	mov	r4, r1
 8006d26:	2001      	movs	r0, #1
 8006d28:	e7a6      	b.n	8006c78 <_svfiprintf_r+0xd4>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	3401      	adds	r4, #1
 8006d2e:	9305      	str	r3, [sp, #20]
 8006d30:	4619      	mov	r1, r3
 8006d32:	f04f 0c0a 	mov.w	ip, #10
 8006d36:	4620      	mov	r0, r4
 8006d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d3c:	3a30      	subs	r2, #48	; 0x30
 8006d3e:	2a09      	cmp	r2, #9
 8006d40:	d903      	bls.n	8006d4a <_svfiprintf_r+0x1a6>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0c6      	beq.n	8006cd4 <_svfiprintf_r+0x130>
 8006d46:	9105      	str	r1, [sp, #20]
 8006d48:	e7c4      	b.n	8006cd4 <_svfiprintf_r+0x130>
 8006d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d4e:	4604      	mov	r4, r0
 8006d50:	2301      	movs	r3, #1
 8006d52:	e7f0      	b.n	8006d36 <_svfiprintf_r+0x192>
 8006d54:	ab03      	add	r3, sp, #12
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	462a      	mov	r2, r5
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <_svfiprintf_r+0x1f4>)
 8006d5c:	a904      	add	r1, sp, #16
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f3af 8000 	nop.w
 8006d64:	1c42      	adds	r2, r0, #1
 8006d66:	4606      	mov	r6, r0
 8006d68:	d1d6      	bne.n	8006d18 <_svfiprintf_r+0x174>
 8006d6a:	89ab      	ldrh	r3, [r5, #12]
 8006d6c:	065b      	lsls	r3, r3, #25
 8006d6e:	f53f af2d 	bmi.w	8006bcc <_svfiprintf_r+0x28>
 8006d72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d74:	b01d      	add	sp, #116	; 0x74
 8006d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7a:	ab03      	add	r3, sp, #12
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	462a      	mov	r2, r5
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <_svfiprintf_r+0x1f4>)
 8006d82:	a904      	add	r1, sp, #16
 8006d84:	4638      	mov	r0, r7
 8006d86:	f000 f879 	bl	8006e7c <_printf_i>
 8006d8a:	e7eb      	b.n	8006d64 <_svfiprintf_r+0x1c0>
 8006d8c:	080079f8 	.word	0x080079f8
 8006d90:	08007a02 	.word	0x08007a02
 8006d94:	00000000 	.word	0x00000000
 8006d98:	08006af1 	.word	0x08006af1
 8006d9c:	080079fe 	.word	0x080079fe

08006da0 <_printf_common>:
 8006da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	4616      	mov	r6, r2
 8006da6:	4699      	mov	r9, r3
 8006da8:	688a      	ldr	r2, [r1, #8]
 8006daa:	690b      	ldr	r3, [r1, #16]
 8006dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	bfb8      	it	lt
 8006db4:	4613      	movlt	r3, r2
 8006db6:	6033      	str	r3, [r6, #0]
 8006db8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dbc:	4607      	mov	r7, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	b10a      	cbz	r2, 8006dc6 <_printf_common+0x26>
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	6033      	str	r3, [r6, #0]
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	0699      	lsls	r1, r3, #26
 8006dca:	bf42      	ittt	mi
 8006dcc:	6833      	ldrmi	r3, [r6, #0]
 8006dce:	3302      	addmi	r3, #2
 8006dd0:	6033      	strmi	r3, [r6, #0]
 8006dd2:	6825      	ldr	r5, [r4, #0]
 8006dd4:	f015 0506 	ands.w	r5, r5, #6
 8006dd8:	d106      	bne.n	8006de8 <_printf_common+0x48>
 8006dda:	f104 0a19 	add.w	sl, r4, #25
 8006dde:	68e3      	ldr	r3, [r4, #12]
 8006de0:	6832      	ldr	r2, [r6, #0]
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	42ab      	cmp	r3, r5
 8006de6:	dc26      	bgt.n	8006e36 <_printf_common+0x96>
 8006de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dec:	1e13      	subs	r3, r2, #0
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	bf18      	it	ne
 8006df2:	2301      	movne	r3, #1
 8006df4:	0692      	lsls	r2, r2, #26
 8006df6:	d42b      	bmi.n	8006e50 <_printf_common+0xb0>
 8006df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c0      	blx	r8
 8006e02:	3001      	adds	r0, #1
 8006e04:	d01e      	beq.n	8006e44 <_printf_common+0xa4>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	6922      	ldr	r2, [r4, #16]
 8006e0a:	f003 0306 	and.w	r3, r3, #6
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	bf02      	ittt	eq
 8006e12:	68e5      	ldreq	r5, [r4, #12]
 8006e14:	6833      	ldreq	r3, [r6, #0]
 8006e16:	1aed      	subeq	r5, r5, r3
 8006e18:	68a3      	ldr	r3, [r4, #8]
 8006e1a:	bf0c      	ite	eq
 8006e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e20:	2500      	movne	r5, #0
 8006e22:	4293      	cmp	r3, r2
 8006e24:	bfc4      	itt	gt
 8006e26:	1a9b      	subgt	r3, r3, r2
 8006e28:	18ed      	addgt	r5, r5, r3
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	341a      	adds	r4, #26
 8006e2e:	42b5      	cmp	r5, r6
 8006e30:	d11a      	bne.n	8006e68 <_printf_common+0xc8>
 8006e32:	2000      	movs	r0, #0
 8006e34:	e008      	b.n	8006e48 <_printf_common+0xa8>
 8006e36:	2301      	movs	r3, #1
 8006e38:	4652      	mov	r2, sl
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	47c0      	blx	r8
 8006e40:	3001      	adds	r0, #1
 8006e42:	d103      	bne.n	8006e4c <_printf_common+0xac>
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	e7c6      	b.n	8006dde <_printf_common+0x3e>
 8006e50:	18e1      	adds	r1, r4, r3
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	2030      	movs	r0, #48	; 0x30
 8006e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e5a:	4422      	add	r2, r4
 8006e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e64:	3302      	adds	r3, #2
 8006e66:	e7c7      	b.n	8006df8 <_printf_common+0x58>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	4638      	mov	r0, r7
 8006e70:	47c0      	blx	r8
 8006e72:	3001      	adds	r0, #1
 8006e74:	d0e6      	beq.n	8006e44 <_printf_common+0xa4>
 8006e76:	3601      	adds	r6, #1
 8006e78:	e7d9      	b.n	8006e2e <_printf_common+0x8e>
	...

08006e7c <_printf_i>:
 8006e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e80:	7e0f      	ldrb	r7, [r1, #24]
 8006e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e84:	2f78      	cmp	r7, #120	; 0x78
 8006e86:	4691      	mov	r9, r2
 8006e88:	4680      	mov	r8, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	469a      	mov	sl, r3
 8006e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e92:	d807      	bhi.n	8006ea4 <_printf_i+0x28>
 8006e94:	2f62      	cmp	r7, #98	; 0x62
 8006e96:	d80a      	bhi.n	8006eae <_printf_i+0x32>
 8006e98:	2f00      	cmp	r7, #0
 8006e9a:	f000 80d4 	beq.w	8007046 <_printf_i+0x1ca>
 8006e9e:	2f58      	cmp	r7, #88	; 0x58
 8006ea0:	f000 80c0 	beq.w	8007024 <_printf_i+0x1a8>
 8006ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006eac:	e03a      	b.n	8006f24 <_printf_i+0xa8>
 8006eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eb2:	2b15      	cmp	r3, #21
 8006eb4:	d8f6      	bhi.n	8006ea4 <_printf_i+0x28>
 8006eb6:	a101      	add	r1, pc, #4	; (adr r1, 8006ebc <_printf_i+0x40>)
 8006eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ebc:	08006f15 	.word	0x08006f15
 8006ec0:	08006f29 	.word	0x08006f29
 8006ec4:	08006ea5 	.word	0x08006ea5
 8006ec8:	08006ea5 	.word	0x08006ea5
 8006ecc:	08006ea5 	.word	0x08006ea5
 8006ed0:	08006ea5 	.word	0x08006ea5
 8006ed4:	08006f29 	.word	0x08006f29
 8006ed8:	08006ea5 	.word	0x08006ea5
 8006edc:	08006ea5 	.word	0x08006ea5
 8006ee0:	08006ea5 	.word	0x08006ea5
 8006ee4:	08006ea5 	.word	0x08006ea5
 8006ee8:	0800702d 	.word	0x0800702d
 8006eec:	08006f55 	.word	0x08006f55
 8006ef0:	08006fe7 	.word	0x08006fe7
 8006ef4:	08006ea5 	.word	0x08006ea5
 8006ef8:	08006ea5 	.word	0x08006ea5
 8006efc:	0800704f 	.word	0x0800704f
 8006f00:	08006ea5 	.word	0x08006ea5
 8006f04:	08006f55 	.word	0x08006f55
 8006f08:	08006ea5 	.word	0x08006ea5
 8006f0c:	08006ea5 	.word	0x08006ea5
 8006f10:	08006fef 	.word	0x08006fef
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	1d1a      	adds	r2, r3, #4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	602a      	str	r2, [r5, #0]
 8006f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f24:	2301      	movs	r3, #1
 8006f26:	e09f      	b.n	8007068 <_printf_i+0x1ec>
 8006f28:	6820      	ldr	r0, [r4, #0]
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	0607      	lsls	r7, r0, #24
 8006f2e:	f103 0104 	add.w	r1, r3, #4
 8006f32:	6029      	str	r1, [r5, #0]
 8006f34:	d501      	bpl.n	8006f3a <_printf_i+0xbe>
 8006f36:	681e      	ldr	r6, [r3, #0]
 8006f38:	e003      	b.n	8006f42 <_printf_i+0xc6>
 8006f3a:	0646      	lsls	r6, r0, #25
 8006f3c:	d5fb      	bpl.n	8006f36 <_printf_i+0xba>
 8006f3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f42:	2e00      	cmp	r6, #0
 8006f44:	da03      	bge.n	8006f4e <_printf_i+0xd2>
 8006f46:	232d      	movs	r3, #45	; 0x2d
 8006f48:	4276      	negs	r6, r6
 8006f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f4e:	485a      	ldr	r0, [pc, #360]	; (80070b8 <_printf_i+0x23c>)
 8006f50:	230a      	movs	r3, #10
 8006f52:	e012      	b.n	8006f7a <_printf_i+0xfe>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	6820      	ldr	r0, [r4, #0]
 8006f58:	1d19      	adds	r1, r3, #4
 8006f5a:	6029      	str	r1, [r5, #0]
 8006f5c:	0605      	lsls	r5, r0, #24
 8006f5e:	d501      	bpl.n	8006f64 <_printf_i+0xe8>
 8006f60:	681e      	ldr	r6, [r3, #0]
 8006f62:	e002      	b.n	8006f6a <_printf_i+0xee>
 8006f64:	0641      	lsls	r1, r0, #25
 8006f66:	d5fb      	bpl.n	8006f60 <_printf_i+0xe4>
 8006f68:	881e      	ldrh	r6, [r3, #0]
 8006f6a:	4853      	ldr	r0, [pc, #332]	; (80070b8 <_printf_i+0x23c>)
 8006f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8006f6e:	bf0c      	ite	eq
 8006f70:	2308      	moveq	r3, #8
 8006f72:	230a      	movne	r3, #10
 8006f74:	2100      	movs	r1, #0
 8006f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f7a:	6865      	ldr	r5, [r4, #4]
 8006f7c:	60a5      	str	r5, [r4, #8]
 8006f7e:	2d00      	cmp	r5, #0
 8006f80:	bfa2      	ittt	ge
 8006f82:	6821      	ldrge	r1, [r4, #0]
 8006f84:	f021 0104 	bicge.w	r1, r1, #4
 8006f88:	6021      	strge	r1, [r4, #0]
 8006f8a:	b90e      	cbnz	r6, 8006f90 <_printf_i+0x114>
 8006f8c:	2d00      	cmp	r5, #0
 8006f8e:	d04b      	beq.n	8007028 <_printf_i+0x1ac>
 8006f90:	4615      	mov	r5, r2
 8006f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f96:	fb03 6711 	mls	r7, r3, r1, r6
 8006f9a:	5dc7      	ldrb	r7, [r0, r7]
 8006f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fa0:	4637      	mov	r7, r6
 8006fa2:	42bb      	cmp	r3, r7
 8006fa4:	460e      	mov	r6, r1
 8006fa6:	d9f4      	bls.n	8006f92 <_printf_i+0x116>
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d10b      	bne.n	8006fc4 <_printf_i+0x148>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07de      	lsls	r6, r3, #31
 8006fb0:	d508      	bpl.n	8006fc4 <_printf_i+0x148>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	6861      	ldr	r1, [r4, #4]
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	bfde      	ittt	le
 8006fba:	2330      	movle	r3, #48	; 0x30
 8006fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fc4:	1b52      	subs	r2, r2, r5
 8006fc6:	6122      	str	r2, [r4, #16]
 8006fc8:	f8cd a000 	str.w	sl, [sp]
 8006fcc:	464b      	mov	r3, r9
 8006fce:	aa03      	add	r2, sp, #12
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f7ff fee4 	bl	8006da0 <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d14a      	bne.n	8007072 <_printf_i+0x1f6>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	b004      	add	sp, #16
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	f043 0320 	orr.w	r3, r3, #32
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	4833      	ldr	r0, [pc, #204]	; (80070bc <_printf_i+0x240>)
 8006ff0:	2778      	movs	r7, #120	; 0x78
 8006ff2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	6829      	ldr	r1, [r5, #0]
 8006ffa:	061f      	lsls	r7, r3, #24
 8006ffc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007000:	d402      	bmi.n	8007008 <_printf_i+0x18c>
 8007002:	065f      	lsls	r7, r3, #25
 8007004:	bf48      	it	mi
 8007006:	b2b6      	uxthmi	r6, r6
 8007008:	07df      	lsls	r7, r3, #31
 800700a:	bf48      	it	mi
 800700c:	f043 0320 	orrmi.w	r3, r3, #32
 8007010:	6029      	str	r1, [r5, #0]
 8007012:	bf48      	it	mi
 8007014:	6023      	strmi	r3, [r4, #0]
 8007016:	b91e      	cbnz	r6, 8007020 <_printf_i+0x1a4>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	f023 0320 	bic.w	r3, r3, #32
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	2310      	movs	r3, #16
 8007022:	e7a7      	b.n	8006f74 <_printf_i+0xf8>
 8007024:	4824      	ldr	r0, [pc, #144]	; (80070b8 <_printf_i+0x23c>)
 8007026:	e7e4      	b.n	8006ff2 <_printf_i+0x176>
 8007028:	4615      	mov	r5, r2
 800702a:	e7bd      	b.n	8006fa8 <_printf_i+0x12c>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	6826      	ldr	r6, [r4, #0]
 8007030:	6961      	ldr	r1, [r4, #20]
 8007032:	1d18      	adds	r0, r3, #4
 8007034:	6028      	str	r0, [r5, #0]
 8007036:	0635      	lsls	r5, r6, #24
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	d501      	bpl.n	8007040 <_printf_i+0x1c4>
 800703c:	6019      	str	r1, [r3, #0]
 800703e:	e002      	b.n	8007046 <_printf_i+0x1ca>
 8007040:	0670      	lsls	r0, r6, #25
 8007042:	d5fb      	bpl.n	800703c <_printf_i+0x1c0>
 8007044:	8019      	strh	r1, [r3, #0]
 8007046:	2300      	movs	r3, #0
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	4615      	mov	r5, r2
 800704c:	e7bc      	b.n	8006fc8 <_printf_i+0x14c>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	1d1a      	adds	r2, r3, #4
 8007052:	602a      	str	r2, [r5, #0]
 8007054:	681d      	ldr	r5, [r3, #0]
 8007056:	6862      	ldr	r2, [r4, #4]
 8007058:	2100      	movs	r1, #0
 800705a:	4628      	mov	r0, r5
 800705c:	f7f9 f8c0 	bl	80001e0 <memchr>
 8007060:	b108      	cbz	r0, 8007066 <_printf_i+0x1ea>
 8007062:	1b40      	subs	r0, r0, r5
 8007064:	6060      	str	r0, [r4, #4]
 8007066:	6863      	ldr	r3, [r4, #4]
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	2300      	movs	r3, #0
 800706c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007070:	e7aa      	b.n	8006fc8 <_printf_i+0x14c>
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	462a      	mov	r2, r5
 8007076:	4649      	mov	r1, r9
 8007078:	4640      	mov	r0, r8
 800707a:	47d0      	blx	sl
 800707c:	3001      	adds	r0, #1
 800707e:	d0ad      	beq.n	8006fdc <_printf_i+0x160>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	079b      	lsls	r3, r3, #30
 8007084:	d413      	bmi.n	80070ae <_printf_i+0x232>
 8007086:	68e0      	ldr	r0, [r4, #12]
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	4298      	cmp	r0, r3
 800708c:	bfb8      	it	lt
 800708e:	4618      	movlt	r0, r3
 8007090:	e7a6      	b.n	8006fe0 <_printf_i+0x164>
 8007092:	2301      	movs	r3, #1
 8007094:	4632      	mov	r2, r6
 8007096:	4649      	mov	r1, r9
 8007098:	4640      	mov	r0, r8
 800709a:	47d0      	blx	sl
 800709c:	3001      	adds	r0, #1
 800709e:	d09d      	beq.n	8006fdc <_printf_i+0x160>
 80070a0:	3501      	adds	r5, #1
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	9903      	ldr	r1, [sp, #12]
 80070a6:	1a5b      	subs	r3, r3, r1
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dcf2      	bgt.n	8007092 <_printf_i+0x216>
 80070ac:	e7eb      	b.n	8007086 <_printf_i+0x20a>
 80070ae:	2500      	movs	r5, #0
 80070b0:	f104 0619 	add.w	r6, r4, #25
 80070b4:	e7f5      	b.n	80070a2 <_printf_i+0x226>
 80070b6:	bf00      	nop
 80070b8:	08007a09 	.word	0x08007a09
 80070bc:	08007a1a 	.word	0x08007a1a

080070c0 <memmove>:
 80070c0:	4288      	cmp	r0, r1
 80070c2:	b510      	push	{r4, lr}
 80070c4:	eb01 0402 	add.w	r4, r1, r2
 80070c8:	d902      	bls.n	80070d0 <memmove+0x10>
 80070ca:	4284      	cmp	r4, r0
 80070cc:	4623      	mov	r3, r4
 80070ce:	d807      	bhi.n	80070e0 <memmove+0x20>
 80070d0:	1e43      	subs	r3, r0, #1
 80070d2:	42a1      	cmp	r1, r4
 80070d4:	d008      	beq.n	80070e8 <memmove+0x28>
 80070d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070de:	e7f8      	b.n	80070d2 <memmove+0x12>
 80070e0:	4402      	add	r2, r0
 80070e2:	4601      	mov	r1, r0
 80070e4:	428a      	cmp	r2, r1
 80070e6:	d100      	bne.n	80070ea <memmove+0x2a>
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f2:	e7f7      	b.n	80070e4 <memmove+0x24>

080070f4 <_sbrk_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d06      	ldr	r5, [pc, #24]	; (8007110 <_sbrk_r+0x1c>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	f7fb faba 	bl	8002678 <_sbrk>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_sbrk_r+0x1a>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_sbrk_r+0x1a>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	2000030c 	.word	0x2000030c

08007114 <_realloc_r>:
 8007114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007118:	4680      	mov	r8, r0
 800711a:	4614      	mov	r4, r2
 800711c:	460e      	mov	r6, r1
 800711e:	b921      	cbnz	r1, 800712a <_realloc_r+0x16>
 8007120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007124:	4611      	mov	r1, r2
 8007126:	f7ff bc57 	b.w	80069d8 <_malloc_r>
 800712a:	b92a      	cbnz	r2, 8007138 <_realloc_r+0x24>
 800712c:	f7ff fbe8 	bl	8006900 <_free_r>
 8007130:	4625      	mov	r5, r4
 8007132:	4628      	mov	r0, r5
 8007134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007138:	f000 f81b 	bl	8007172 <_malloc_usable_size_r>
 800713c:	4284      	cmp	r4, r0
 800713e:	4607      	mov	r7, r0
 8007140:	d802      	bhi.n	8007148 <_realloc_r+0x34>
 8007142:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007146:	d812      	bhi.n	800716e <_realloc_r+0x5a>
 8007148:	4621      	mov	r1, r4
 800714a:	4640      	mov	r0, r8
 800714c:	f7ff fc44 	bl	80069d8 <_malloc_r>
 8007150:	4605      	mov	r5, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	d0ed      	beq.n	8007132 <_realloc_r+0x1e>
 8007156:	42bc      	cmp	r4, r7
 8007158:	4622      	mov	r2, r4
 800715a:	4631      	mov	r1, r6
 800715c:	bf28      	it	cs
 800715e:	463a      	movcs	r2, r7
 8007160:	f7ff fbc0 	bl	80068e4 <memcpy>
 8007164:	4631      	mov	r1, r6
 8007166:	4640      	mov	r0, r8
 8007168:	f7ff fbca 	bl	8006900 <_free_r>
 800716c:	e7e1      	b.n	8007132 <_realloc_r+0x1e>
 800716e:	4635      	mov	r5, r6
 8007170:	e7df      	b.n	8007132 <_realloc_r+0x1e>

08007172 <_malloc_usable_size_r>:
 8007172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007176:	1f18      	subs	r0, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfbc      	itt	lt
 800717c:	580b      	ldrlt	r3, [r1, r0]
 800717e:	18c0      	addlt	r0, r0, r3
 8007180:	4770      	bx	lr
 8007182:	0000      	movs	r0, r0
 8007184:	0000      	movs	r0, r0
	...

08007188 <log>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	ed2d 8b02 	vpush	{d8}
 800718e:	ec55 4b10 	vmov	r4, r5, d0
 8007192:	f000 f841 	bl	8007218 <__ieee754_log>
 8007196:	4622      	mov	r2, r4
 8007198:	462b      	mov	r3, r5
 800719a:	4620      	mov	r0, r4
 800719c:	4629      	mov	r1, r5
 800719e:	eeb0 8a40 	vmov.f32	s16, s0
 80071a2:	eef0 8a60 	vmov.f32	s17, s1
 80071a6:	f7f9 fcc1 	bl	8000b2c <__aeabi_dcmpun>
 80071aa:	b998      	cbnz	r0, 80071d4 <log+0x4c>
 80071ac:	2200      	movs	r2, #0
 80071ae:	2300      	movs	r3, #0
 80071b0:	4620      	mov	r0, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	f7f9 fcb0 	bl	8000b18 <__aeabi_dcmpgt>
 80071b8:	b960      	cbnz	r0, 80071d4 <log+0x4c>
 80071ba:	2200      	movs	r2, #0
 80071bc:	2300      	movs	r3, #0
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80071c6:	b160      	cbz	r0, 80071e2 <log+0x5a>
 80071c8:	f7ff fb60 	bl	800688c <__errno>
 80071cc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80071f8 <log+0x70>
 80071d0:	2322      	movs	r3, #34	; 0x22
 80071d2:	6003      	str	r3, [r0, #0]
 80071d4:	eeb0 0a48 	vmov.f32	s0, s16
 80071d8:	eef0 0a68 	vmov.f32	s1, s17
 80071dc:	ecbd 8b02 	vpop	{d8}
 80071e0:	bd38      	pop	{r3, r4, r5, pc}
 80071e2:	f7ff fb53 	bl	800688c <__errno>
 80071e6:	ecbd 8b02 	vpop	{d8}
 80071ea:	2321      	movs	r3, #33	; 0x21
 80071ec:	6003      	str	r3, [r0, #0]
 80071ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f2:	4803      	ldr	r0, [pc, #12]	; (8007200 <log+0x78>)
 80071f4:	f000 b808 	b.w	8007208 <nan>
 80071f8:	00000000 	.word	0x00000000
 80071fc:	fff00000 	.word	0xfff00000
 8007200:	080079fd 	.word	0x080079fd
 8007204:	00000000 	.word	0x00000000

08007208 <nan>:
 8007208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007210 <nan+0x8>
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	00000000 	.word	0x00000000
 8007214:	7ff80000 	.word	0x7ff80000

08007218 <__ieee754_log>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	ec51 0b10 	vmov	r0, r1, d0
 8007220:	ed2d 8b04 	vpush	{d8-d9}
 8007224:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007228:	b083      	sub	sp, #12
 800722a:	460d      	mov	r5, r1
 800722c:	da29      	bge.n	8007282 <__ieee754_log+0x6a>
 800722e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007232:	4303      	orrs	r3, r0
 8007234:	ee10 2a10 	vmov	r2, s0
 8007238:	d10c      	bne.n	8007254 <__ieee754_log+0x3c>
 800723a:	49cf      	ldr	r1, [pc, #828]	; (8007578 <__ieee754_log+0x360>)
 800723c:	2200      	movs	r2, #0
 800723e:	2300      	movs	r3, #0
 8007240:	2000      	movs	r0, #0
 8007242:	f7f9 fb03 	bl	800084c <__aeabi_ddiv>
 8007246:	ec41 0b10 	vmov	d0, r0, r1
 800724a:	b003      	add	sp, #12
 800724c:	ecbd 8b04 	vpop	{d8-d9}
 8007250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007254:	2900      	cmp	r1, #0
 8007256:	da05      	bge.n	8007264 <__ieee754_log+0x4c>
 8007258:	460b      	mov	r3, r1
 800725a:	f7f9 f815 	bl	8000288 <__aeabi_dsub>
 800725e:	2200      	movs	r2, #0
 8007260:	2300      	movs	r3, #0
 8007262:	e7ee      	b.n	8007242 <__ieee754_log+0x2a>
 8007264:	4bc5      	ldr	r3, [pc, #788]	; (800757c <__ieee754_log+0x364>)
 8007266:	2200      	movs	r2, #0
 8007268:	f7f9 f9c6 	bl	80005f8 <__aeabi_dmul>
 800726c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007270:	460d      	mov	r5, r1
 8007272:	4ac3      	ldr	r2, [pc, #780]	; (8007580 <__ieee754_log+0x368>)
 8007274:	4295      	cmp	r5, r2
 8007276:	dd06      	ble.n	8007286 <__ieee754_log+0x6e>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	f7f9 f806 	bl	800028c <__adddf3>
 8007280:	e7e1      	b.n	8007246 <__ieee754_log+0x2e>
 8007282:	2300      	movs	r3, #0
 8007284:	e7f5      	b.n	8007272 <__ieee754_log+0x5a>
 8007286:	152c      	asrs	r4, r5, #20
 8007288:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800728c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007290:	441c      	add	r4, r3
 8007292:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007296:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800729a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800729e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80072a2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80072a6:	ea42 0105 	orr.w	r1, r2, r5
 80072aa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80072ae:	2200      	movs	r2, #0
 80072b0:	4bb4      	ldr	r3, [pc, #720]	; (8007584 <__ieee754_log+0x36c>)
 80072b2:	f7f8 ffe9 	bl	8000288 <__aeabi_dsub>
 80072b6:	1cab      	adds	r3, r5, #2
 80072b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072bc:	2b02      	cmp	r3, #2
 80072be:	4682      	mov	sl, r0
 80072c0:	468b      	mov	fp, r1
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	dc53      	bgt.n	8007370 <__ieee754_log+0x158>
 80072c8:	2300      	movs	r3, #0
 80072ca:	f7f9 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ce:	b1d0      	cbz	r0, 8007306 <__ieee754_log+0xee>
 80072d0:	2c00      	cmp	r4, #0
 80072d2:	f000 8122 	beq.w	800751a <__ieee754_log+0x302>
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7f9 f924 	bl	8000524 <__aeabi_i2d>
 80072dc:	a390      	add	r3, pc, #576	; (adr r3, 8007520 <__ieee754_log+0x308>)
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	f7f9 f987 	bl	80005f8 <__aeabi_dmul>
 80072ea:	a38f      	add	r3, pc, #572	; (adr r3, 8007528 <__ieee754_log+0x310>)
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	4604      	mov	r4, r0
 80072f2:	460d      	mov	r5, r1
 80072f4:	4630      	mov	r0, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	f7f9 f97e 	bl	80005f8 <__aeabi_dmul>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4620      	mov	r0, r4
 8007302:	4629      	mov	r1, r5
 8007304:	e7ba      	b.n	800727c <__ieee754_log+0x64>
 8007306:	a38a      	add	r3, pc, #552	; (adr r3, 8007530 <__ieee754_log+0x318>)
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	4650      	mov	r0, sl
 800730e:	4659      	mov	r1, fp
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	2000      	movs	r0, #0
 800731a:	499b      	ldr	r1, [pc, #620]	; (8007588 <__ieee754_log+0x370>)
 800731c:	f7f8 ffb4 	bl	8000288 <__aeabi_dsub>
 8007320:	4652      	mov	r2, sl
 8007322:	4606      	mov	r6, r0
 8007324:	460f      	mov	r7, r1
 8007326:	465b      	mov	r3, fp
 8007328:	4650      	mov	r0, sl
 800732a:	4659      	mov	r1, fp
 800732c:	f7f9 f964 	bl	80005f8 <__aeabi_dmul>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4630      	mov	r0, r6
 8007336:	4639      	mov	r1, r7
 8007338:	f7f9 f95e 	bl	80005f8 <__aeabi_dmul>
 800733c:	4606      	mov	r6, r0
 800733e:	460f      	mov	r7, r1
 8007340:	b914      	cbnz	r4, 8007348 <__ieee754_log+0x130>
 8007342:	4632      	mov	r2, r6
 8007344:	463b      	mov	r3, r7
 8007346:	e0a2      	b.n	800748e <__ieee754_log+0x276>
 8007348:	4620      	mov	r0, r4
 800734a:	f7f9 f8eb 	bl	8000524 <__aeabi_i2d>
 800734e:	a374      	add	r3, pc, #464	; (adr r3, 8007520 <__ieee754_log+0x308>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	4680      	mov	r8, r0
 8007356:	4689      	mov	r9, r1
 8007358:	f7f9 f94e 	bl	80005f8 <__aeabi_dmul>
 800735c:	a372      	add	r3, pc, #456	; (adr r3, 8007528 <__ieee754_log+0x310>)
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	4604      	mov	r4, r0
 8007364:	460d      	mov	r5, r1
 8007366:	4640      	mov	r0, r8
 8007368:	4649      	mov	r1, r9
 800736a:	f7f9 f945 	bl	80005f8 <__aeabi_dmul>
 800736e:	e0a7      	b.n	80074c0 <__ieee754_log+0x2a8>
 8007370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007374:	f7f8 ff8a 	bl	800028c <__adddf3>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4650      	mov	r0, sl
 800737e:	4659      	mov	r1, fp
 8007380:	f7f9 fa64 	bl	800084c <__aeabi_ddiv>
 8007384:	ec41 0b18 	vmov	d8, r0, r1
 8007388:	4620      	mov	r0, r4
 800738a:	f7f9 f8cb 	bl	8000524 <__aeabi_i2d>
 800738e:	ec53 2b18 	vmov	r2, r3, d8
 8007392:	ec41 0b19 	vmov	d9, r0, r1
 8007396:	ec51 0b18 	vmov	r0, r1, d8
 800739a:	f7f9 f92d 	bl	80005f8 <__aeabi_dmul>
 800739e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80073a2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4680      	mov	r8, r0
 80073ae:	4689      	mov	r9, r1
 80073b0:	f7f9 f922 	bl	80005f8 <__aeabi_dmul>
 80073b4:	a360      	add	r3, pc, #384	; (adr r3, 8007538 <__ieee754_log+0x320>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	f7f9 f91b 	bl	80005f8 <__aeabi_dmul>
 80073c2:	a35f      	add	r3, pc, #380	; (adr r3, 8007540 <__ieee754_log+0x328>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f7f8 ff60 	bl	800028c <__adddf3>
 80073cc:	4632      	mov	r2, r6
 80073ce:	463b      	mov	r3, r7
 80073d0:	f7f9 f912 	bl	80005f8 <__aeabi_dmul>
 80073d4:	a35c      	add	r3, pc, #368	; (adr r3, 8007548 <__ieee754_log+0x330>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	f7f8 ff57 	bl	800028c <__adddf3>
 80073de:	4632      	mov	r2, r6
 80073e0:	463b      	mov	r3, r7
 80073e2:	f7f9 f909 	bl	80005f8 <__aeabi_dmul>
 80073e6:	a35a      	add	r3, pc, #360	; (adr r3, 8007550 <__ieee754_log+0x338>)
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f7f8 ff4e 	bl	800028c <__adddf3>
 80073f0:	4642      	mov	r2, r8
 80073f2:	464b      	mov	r3, r9
 80073f4:	f7f9 f900 	bl	80005f8 <__aeabi_dmul>
 80073f8:	a357      	add	r3, pc, #348	; (adr r3, 8007558 <__ieee754_log+0x340>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	4680      	mov	r8, r0
 8007400:	4689      	mov	r9, r1
 8007402:	4630      	mov	r0, r6
 8007404:	4639      	mov	r1, r7
 8007406:	f7f9 f8f7 	bl	80005f8 <__aeabi_dmul>
 800740a:	a355      	add	r3, pc, #340	; (adr r3, 8007560 <__ieee754_log+0x348>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f7f8 ff3c 	bl	800028c <__adddf3>
 8007414:	4632      	mov	r2, r6
 8007416:	463b      	mov	r3, r7
 8007418:	f7f9 f8ee 	bl	80005f8 <__aeabi_dmul>
 800741c:	a352      	add	r3, pc, #328	; (adr r3, 8007568 <__ieee754_log+0x350>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f7f8 ff33 	bl	800028c <__adddf3>
 8007426:	4632      	mov	r2, r6
 8007428:	463b      	mov	r3, r7
 800742a:	f7f9 f8e5 	bl	80005f8 <__aeabi_dmul>
 800742e:	460b      	mov	r3, r1
 8007430:	4602      	mov	r2, r0
 8007432:	4649      	mov	r1, r9
 8007434:	4640      	mov	r0, r8
 8007436:	f7f8 ff29 	bl	800028c <__adddf3>
 800743a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800743e:	9b01      	ldr	r3, [sp, #4]
 8007440:	3551      	adds	r5, #81	; 0x51
 8007442:	431d      	orrs	r5, r3
 8007444:	2d00      	cmp	r5, #0
 8007446:	4680      	mov	r8, r0
 8007448:	4689      	mov	r9, r1
 800744a:	dd48      	ble.n	80074de <__ieee754_log+0x2c6>
 800744c:	4b4e      	ldr	r3, [pc, #312]	; (8007588 <__ieee754_log+0x370>)
 800744e:	2200      	movs	r2, #0
 8007450:	4650      	mov	r0, sl
 8007452:	4659      	mov	r1, fp
 8007454:	f7f9 f8d0 	bl	80005f8 <__aeabi_dmul>
 8007458:	4652      	mov	r2, sl
 800745a:	465b      	mov	r3, fp
 800745c:	f7f9 f8cc 	bl	80005f8 <__aeabi_dmul>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4606      	mov	r6, r0
 8007466:	460f      	mov	r7, r1
 8007468:	4640      	mov	r0, r8
 800746a:	4649      	mov	r1, r9
 800746c:	f7f8 ff0e 	bl	800028c <__adddf3>
 8007470:	ec53 2b18 	vmov	r2, r3, d8
 8007474:	f7f9 f8c0 	bl	80005f8 <__aeabi_dmul>
 8007478:	4680      	mov	r8, r0
 800747a:	4689      	mov	r9, r1
 800747c:	b964      	cbnz	r4, 8007498 <__ieee754_log+0x280>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4630      	mov	r0, r6
 8007484:	4639      	mov	r1, r7
 8007486:	f7f8 feff 	bl	8000288 <__aeabi_dsub>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4650      	mov	r0, sl
 8007490:	4659      	mov	r1, fp
 8007492:	f7f8 fef9 	bl	8000288 <__aeabi_dsub>
 8007496:	e6d6      	b.n	8007246 <__ieee754_log+0x2e>
 8007498:	a321      	add	r3, pc, #132	; (adr r3, 8007520 <__ieee754_log+0x308>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	ec51 0b19 	vmov	r0, r1, d9
 80074a2:	f7f9 f8a9 	bl	80005f8 <__aeabi_dmul>
 80074a6:	a320      	add	r3, pc, #128	; (adr r3, 8007528 <__ieee754_log+0x310>)
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	4604      	mov	r4, r0
 80074ae:	460d      	mov	r5, r1
 80074b0:	ec51 0b19 	vmov	r0, r1, d9
 80074b4:	f7f9 f8a0 	bl	80005f8 <__aeabi_dmul>
 80074b8:	4642      	mov	r2, r8
 80074ba:	464b      	mov	r3, r9
 80074bc:	f7f8 fee6 	bl	800028c <__adddf3>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4630      	mov	r0, r6
 80074c6:	4639      	mov	r1, r7
 80074c8:	f7f8 fede 	bl	8000288 <__aeabi_dsub>
 80074cc:	4652      	mov	r2, sl
 80074ce:	465b      	mov	r3, fp
 80074d0:	f7f8 feda 	bl	8000288 <__aeabi_dsub>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4620      	mov	r0, r4
 80074da:	4629      	mov	r1, r5
 80074dc:	e7d9      	b.n	8007492 <__ieee754_log+0x27a>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4650      	mov	r0, sl
 80074e4:	4659      	mov	r1, fp
 80074e6:	f7f8 fecf 	bl	8000288 <__aeabi_dsub>
 80074ea:	ec53 2b18 	vmov	r2, r3, d8
 80074ee:	f7f9 f883 	bl	80005f8 <__aeabi_dmul>
 80074f2:	4606      	mov	r6, r0
 80074f4:	460f      	mov	r7, r1
 80074f6:	2c00      	cmp	r4, #0
 80074f8:	f43f af23 	beq.w	8007342 <__ieee754_log+0x12a>
 80074fc:	a308      	add	r3, pc, #32	; (adr r3, 8007520 <__ieee754_log+0x308>)
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	ec51 0b19 	vmov	r0, r1, d9
 8007506:	f7f9 f877 	bl	80005f8 <__aeabi_dmul>
 800750a:	a307      	add	r3, pc, #28	; (adr r3, 8007528 <__ieee754_log+0x310>)
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	4604      	mov	r4, r0
 8007512:	460d      	mov	r5, r1
 8007514:	ec51 0b19 	vmov	r0, r1, d9
 8007518:	e727      	b.n	800736a <__ieee754_log+0x152>
 800751a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007570 <__ieee754_log+0x358>
 800751e:	e694      	b.n	800724a <__ieee754_log+0x32>
 8007520:	fee00000 	.word	0xfee00000
 8007524:	3fe62e42 	.word	0x3fe62e42
 8007528:	35793c76 	.word	0x35793c76
 800752c:	3dea39ef 	.word	0x3dea39ef
 8007530:	55555555 	.word	0x55555555
 8007534:	3fd55555 	.word	0x3fd55555
 8007538:	df3e5244 	.word	0xdf3e5244
 800753c:	3fc2f112 	.word	0x3fc2f112
 8007540:	96cb03de 	.word	0x96cb03de
 8007544:	3fc74664 	.word	0x3fc74664
 8007548:	94229359 	.word	0x94229359
 800754c:	3fd24924 	.word	0x3fd24924
 8007550:	55555593 	.word	0x55555593
 8007554:	3fe55555 	.word	0x3fe55555
 8007558:	d078c69f 	.word	0xd078c69f
 800755c:	3fc39a09 	.word	0x3fc39a09
 8007560:	1d8e78af 	.word	0x1d8e78af
 8007564:	3fcc71c5 	.word	0x3fcc71c5
 8007568:	9997fa04 	.word	0x9997fa04
 800756c:	3fd99999 	.word	0x3fd99999
	...
 8007578:	c3500000 	.word	0xc3500000
 800757c:	43500000 	.word	0x43500000
 8007580:	7fefffff 	.word	0x7fefffff
 8007584:	3ff00000 	.word	0x3ff00000
 8007588:	3fe00000 	.word	0x3fe00000

0800758c <_init>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr

08007598 <_fini>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr
