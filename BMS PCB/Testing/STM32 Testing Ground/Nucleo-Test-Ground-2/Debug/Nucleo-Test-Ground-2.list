
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a38  08004a38  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a40  08004a40  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a40  08004a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a44  08004a44  00014a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08004aa4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004aa4  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf60  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c38  00000000  00000000  0002d02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0002ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a6  00000000  00000000  0002f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b11e  00000000  00000000  0003004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d938  00000000  00000000  0004b16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab96a  00000000  00000000  00058aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003314  00000000  00000000  00104410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  00107724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004974 	.word	0x08004974

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004974 	.word	0x08004974

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <format_uint16>:
/**
 * Formats an unsigned 16-bit integer into the AFE's data buffer (little-endian byte order)
 * @param dataArr 8-bit integer array for storing the bytes to be transmitted to the AFE
 * @param data 16-bit integer to re-format
 */
void format_uint16(uint8_t *dataArr, uint16_t data) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	807b      	strh	r3, [r7, #2]
	dataArr[0] = ((uint8_t)(data & 0xFF));
 8000588:	887b      	ldrh	r3, [r7, #2]
 800058a:	b2da      	uxtb	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	701a      	strb	r2, [r3, #0]
	dataArr[1] = ((uint8_t)(data >> 8));
 8000590:	887b      	ldrh	r3, [r7, #2]
 8000592:	0a1b      	lsrs	r3, r3, #8
 8000594:	b29a      	uxth	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	b2d2      	uxtb	r2, r2
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db0b      	blt.n	80005d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 021f 	and.w	r2, r3, #31
 80005c4:	4907      	ldr	r1, [pc, #28]	; (80005e4 <__NVIC_EnableIRQ+0x38>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	095b      	lsrs	r3, r3, #5
 80005cc:	2001      	movs	r0, #1
 80005ce:	fa00 f202 	lsl.w	r2, r0, r2
 80005d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000e100 	.word	0xe000e100

080005e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db0a      	blt.n	8000612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	490c      	ldr	r1, [pc, #48]	; (8000634 <__NVIC_SetPriority+0x4c>)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	0112      	lsls	r2, r2, #4
 8000608:	b2d2      	uxtb	r2, r2
 800060a:	440b      	add	r3, r1
 800060c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000610:	e00a      	b.n	8000628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4908      	ldr	r1, [pc, #32]	; (8000638 <__NVIC_SetPriority+0x50>)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	f003 030f 	and.w	r3, r3, #15
 800061e:	3b04      	subs	r3, #4
 8000620:	0112      	lsls	r2, r2, #4
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	440b      	add	r3, r1
 8000626:	761a      	strb	r2, [r3, #24]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000e100 	.word	0xe000e100
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <main>:

// Global variables
bool logDataFlag = 0;
bool logAlertsFlag = 0;

int main(void) {
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b0a5      	sub	sp, #148	; 0x94
 8000640:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 8000642:	f000 ff82 	bl	800154a <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 8000646:	f000 f94f 	bl	80008e8 <SystemClock_Config>

    // Initialize GPIO, SPI, UART
    GPIO_Init();
 800064a:	f000 f985 	bl	8000958 <GPIO_Init>
    SPI1_Init();
 800064e:	f000 fa13 	bl	8000a78 <SPI1_Init>
    USART1_Init();
 8000652:	f000 fa59 	bl	8000b08 <USART1_Init>
    TIM1_Init();
 8000656:	f000 fa91 	bl	8000b7c <TIM1_Init>

    // Start the logging timer
//    HAL_TIM_Base_Start_IT(&htim1);
    TIM1->CR1 |= TIM_CR1_CEN;
 800065a:	4b9e      	ldr	r3, [pc, #632]	; (80008d4 <main+0x298>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a9d      	ldr	r2, [pc, #628]	; (80008d4 <main+0x298>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	489b      	ldr	r0, [pc, #620]	; (80008d8 <main+0x29c>)
 800066c:	f001 fa8a 	bl	8001b84 <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 8000670:	2300      	movs	r3, #0
 8000672:	663b      	str	r3, [r7, #96]	; 0x60
 8000674:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]
 8000686:	619a      	str	r2, [r3, #24]

    uint16_t ctrlStatus = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    uint16_t cellVolt = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    uint16_t cellVolts[17] = {0};
 8000694:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000698:	2222      	movs	r2, #34	; 0x22
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fcd1 	bl	8004044 <memset>
    uint16_t currentRead = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    uint8_t fetStatus = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    uint8_t safetyStatAlrt[6] = {0};
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
 80006b2:	2300      	movs	r3, #0
 80006b4:	873b      	strh	r3, [r7, #56]	; 0x38
    uint8_t cmdAddr = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    uint8_t writeData[32] = {0};
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]

    uint8_t msg[] = "Hello world!\n";
 80006d4:	4b81      	ldr	r3, [pc, #516]	; (80008dc <main+0x2a0>)
 80006d6:	1d3c      	adds	r4, r7, #4
 80006d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006da:	c407      	stmia	r4!, {r0, r1, r2}
 80006dc:	8023      	strh	r3, [r4, #0]

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 80006de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006e2:	2202      	movs	r2, #2
 80006e4:	4619      	mov	r1, r3
 80006e6:	2012      	movs	r0, #18
 80006e8:	f000 fac0 	bl	8000c6c <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 80006ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006f0:	2202      	movs	r2, #2
 80006f2:	4619      	mov	r1, r3
 80006f4:	2057      	movs	r0, #87	; 0x57
 80006f6:	f000 fb4b 	bl	8000d90 <SubCmdReadData>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80006fa:	2120      	movs	r1, #32
 80006fc:	4876      	ldr	r0, [pc, #472]	; (80008d8 <main+0x29c>)
 80006fe:	f001 fa59 	bl	8001bb4 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000702:	20fa      	movs	r0, #250	; 0xfa
 8000704:	f000 ff96 	bl	8001634 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000708:	2120      	movs	r1, #32
 800070a:	4873      	ldr	r0, [pc, #460]	; (80008d8 <main+0x29c>)
 800070c:	f001 fa52 	bl	8001bb4 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 8000710:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000714:	f000 ff8e 	bl	8001634 <HAL_Delay>

	// Disable SLEEP mode and disable FET_TEST mode if already in FET_TEST
	SubCmdNoData(0x009A);
 8000718:	209a      	movs	r0, #154	; 0x9a
 800071a:	f000 faf1 	bl	8000d00 <SubCmdNoData>
	if (!(readData[0] & (1 << 4))) SubCmdNoData(0x0022);
 800071e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	2b00      	cmp	r3, #0
 8000728:	d102      	bne.n	8000730 <main+0xf4>
 800072a:	2022      	movs	r0, #34	; 0x22
 800072c:	f000 fae8 	bl	8000d00 <SubCmdNoData>

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 8000730:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000734:	2202      	movs	r2, #2
 8000736:	4619      	mov	r1, r3
 8000738:	2012      	movs	r0, #18
 800073a:	f000 fa97 	bl	8000c6c <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 800073e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000742:	2202      	movs	r2, #2
 8000744:	4619      	mov	r1, r3
 8000746:	2057      	movs	r0, #87	; 0x57
 8000748:	f000 fb22 	bl	8000d90 <SubCmdReadData>

	// Enter CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
 800074c:	2090      	movs	r0, #144	; 0x90
 800074e:	f000 fad7 	bl	8000d00 <SubCmdNoData>
	// Configuring Settings in RAM
	writeData[0] = 0x02;
 8000752:	2302      	movs	r3, #2
 8000754:	753b      	strb	r3, [r7, #20]
	RAMRegisterWrite(PROT_SCD_THLD, writeData, 1); // Set SCD threshold to 40mV
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	f249 2086 	movw	r0, #37510	; 0x9286
 8000762:	f000 fb91 	bl	8000e88 <RAMRegisterWrite>

	// Disable body diode protection
	writeData[0] = 0x0C;
 8000766:	230c      	movs	r3, #12
 8000768:	753b      	strb	r3, [r7, #20]
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2201      	movs	r2, #1
 8000770:	4619      	mov	r1, r3
 8000772:	f249 3008 	movw	r0, #37640	; 0x9308
 8000776:	f000 fb87 	bl	8000e88 <RAMRegisterWrite>
	// Setting MFG Status Init to disable FET Test commands
	format_uint16(writeData, 0x0050);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2150      	movs	r1, #80	; 0x50
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fefb 	bl	800057c <format_uint16>
	RAMRegisterWrite(SET_MFG_STATUS_INIT, writeData, 2);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2202      	movs	r2, #2
 800078c:	4619      	mov	r1, r3
 800078e:	f249 3033 	movw	r0, #37683	; 0x9333
 8000792:	f000 fb79 	bl	8000e88 <RAMRegisterWrite>
	// Exit CONFIG_UPDATE mode, read manufacturing status register again
	SubCmdNoData(0x0092);
 8000796:	2092      	movs	r0, #146	; 0x92
 8000798:	f000 fab2 	bl	8000d00 <SubCmdNoData>
	SubCmdReadData(0x0057, readData, 2);
 800079c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007a0:	2202      	movs	r2, #2
 80007a2:	4619      	mov	r1, r3
 80007a4:	2057      	movs	r0, #87	; 0x57
 80007a6:	f000 faf3 	bl	8000d90 <SubCmdReadData>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80007aa:	2120      	movs	r1, #32
 80007ac:	484a      	ldr	r0, [pc, #296]	; (80008d8 <main+0x29c>)
 80007ae:	f001 fa01 	bl	8001bb4 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007b2:	20fa      	movs	r0, #250	; 0xfa
 80007b4:	f000 ff3e 	bl	8001634 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80007b8:	2120      	movs	r1, #32
 80007ba:	4847      	ldr	r0, [pc, #284]	; (80008d8 <main+0x29c>)
 80007bc:	f001 f9fa 	bl	8001bb4 <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 80007c0:	f240 20ee 	movw	r0, #750	; 0x2ee
 80007c4:	f000 ff36 	bl	8001634 <HAL_Delay>
    while (1) {
    	// Read the control status register
//    	DirectCmdRead(0x02, readData, 2);
//    	ctrlStatus = (readData[0]) + (readData[1] << 8);

    	if (logDataFlag) {
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <main+0x2a4>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d055      	beq.n	800087c <main+0x240>
    		logDataFlag = false;
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <main+0x2a4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
    		// Read the cell voltage for all 16 cells and then the pack voltage
			for (int i = 0; i < 17; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80007dc:	e027      	b.n	800082e <main+0x1f2>
				cmdAddr = 0x14 + 2*i;
 80007de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007e2:	330a      	adds	r3, #10
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
				DirectCmdRead(cmdAddr, readData, 2);
 80007ec:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80007f0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80007f4:	2202      	movs	r2, #2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fa38 	bl	8000c6c <DirectCmdRead>
				// Combine the 2 8-bit cell voltage bytes into a single 16-byte variable
				cellVolt = (readData[0]) + (readData[1] << 8);
 80007fc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000800:	b29a      	uxth	r2, r3
 8000802:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000806:	b29b      	uxth	r3, r3
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	b29b      	uxth	r3, r3
 800080c:	4413      	add	r3, r2
 800080e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				cellVolts[i] = cellVolt;
 8000812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	3390      	adds	r3, #144	; 0x90
 800081a:	443b      	add	r3, r7
 800081c:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8000820:	f823 2c54 	strh.w	r2, [r3, #-84]
			for (int i = 0; i < 17; i++) {
 8000824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000828:	3301      	adds	r3, #1
 800082a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800082e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000832:	2b10      	cmp	r3, #16
 8000834:	ddd3      	ble.n	80007de <main+0x1a2>
				// Format a UART message to be transmitted with the data
			}
//			TransmitCellVoltages(cellVolts, sizeof(cellVolts));
			TransmitCellVoltages(cellVolts, 17);
 8000836:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800083a:	2111      	movs	r1, #17
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fc77 	bl	8001130 <TransmitCellVoltages>

			// Read the CC2 current and FET status
			DirectCmdRead(0x3A, readData, 2);
 8000842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000846:	2202      	movs	r2, #2
 8000848:	4619      	mov	r1, r3
 800084a:	203a      	movs	r0, #58	; 0x3a
 800084c:	f000 fa0e 	bl	8000c6c <DirectCmdRead>
			currentRead = (readData[0]) + (readData[1] << 8);
 8000850:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000854:	b29a      	uxth	r2, r3
 8000856:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800085a:	b29b      	uxth	r3, r3
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	b29b      	uxth	r3, r3
 8000860:	4413      	add	r3, r2
 8000862:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			DirectCmdRead(0x7F, readData, 1);
 8000866:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800086a:	2201      	movs	r2, #1
 800086c:	4619      	mov	r1, r3
 800086e:	207f      	movs	r0, #127	; 0x7f
 8000870:	f000 f9fc 	bl	8000c6c <DirectCmdRead>
			fetStatus = readData[0];
 8000874:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000878:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    	}

    	if (logAlertsFlag) {
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <main+0x2a8>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0a1      	beq.n	80007c8 <main+0x18c>
    		logAlertsFlag = false;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <main+0x2a8>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
			// Read the safety status and alert registers
			for (int i = 0; i < 6; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000890:	e01b      	b.n	80008ca <main+0x28e>
				cmdAddr = 0x02 + i;
 8000892:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3302      	adds	r3, #2
 800089a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
				DirectCmdRead(cmdAddr, readData, 1);
 800089e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008a2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80008a6:	2201      	movs	r2, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f9df 	bl	8000c6c <DirectCmdRead>
				safetyStatAlrt[i] = readData[0];
 80008ae:	f897 1060 	ldrb.w	r1, [r7, #96]	; 0x60
 80008b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80008b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008ba:	4413      	add	r3, r2
 80008bc:	460a      	mov	r2, r1
 80008be:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; i++) {
 80008c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008c4:	3301      	adds	r3, #1
 80008c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80008ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	dddf      	ble.n	8000892 <main+0x256>
    	if (logDataFlag) {
 80008d2:	e779      	b.n	80007c8 <main+0x18c>
 80008d4:	40012c00 	.word	0x40012c00
 80008d8:	48000400 	.word	0x48000400
 80008dc:	0800498c 	.word	0x0800498c
 80008e0:	20000164 	.word	0x20000164
 80008e4:	20000165 	.word	0x20000165

080008e8 <SystemClock_Config>:
//    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
//    	HAL_Delay(1000);
    }
}

void SystemClock_Config(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b096      	sub	sp, #88	; 0x58
 80008ec:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2244      	movs	r2, #68	; 0x44
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 fba4 	bl	8004044 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800090e:	f001 f991 	bl	8001c34 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000912:	2310      	movs	r3, #16
 8000914:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000916:	2301      	movs	r3, #1
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800091a:	2300      	movs	r3, #0
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800091e:	2360      	movs	r3, #96	; 0x60
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000922:	2300      	movs	r3, #0
 8000924:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4618      	mov	r0, r3
 800092c:	f001 f9d8 	bl	8001ce0 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000930:	230f      	movs	r3, #15
 8000932:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000944:	463b      	mov	r3, r7
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fe2b 	bl	80025a4 <HAL_RCC_ClockConfig>
}
 800094e:	bf00      	nop
 8000950:	3758      	adds	r7, #88	; 0x58
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <GPIO_Init>:

void GPIO_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b44      	ldr	r3, [pc, #272]	; (8000a70 <GPIO_Init+0x118>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a43      	ldr	r2, [pc, #268]	; (8000a70 <GPIO_Init+0x118>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <GPIO_Init+0x118>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b3e      	ldr	r3, [pc, #248]	; (8000a70 <GPIO_Init+0x118>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a3d      	ldr	r2, [pc, #244]	; (8000a70 <GPIO_Init+0x118>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <GPIO_Init+0x118>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <GPIO_Init+0x118>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	4a37      	ldr	r2, [pc, #220]	; (8000a70 <GPIO_Init+0x118>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <GPIO_Init+0x118>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b6:	2301      	movs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009ba:	2311      	movs	r3, #17
 80009bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4619      	mov	r1, r3
 80009cc:	4829      	ldr	r0, [pc, #164]	; (8000a74 <GPIO_Init+0x11c>)
 80009ce:	f000 ff67 	bl	80018a0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 80009d2:	2201      	movs	r2, #1
 80009d4:	2101      	movs	r1, #1
 80009d6:	4827      	ldr	r0, [pc, #156]	; (8000a74 <GPIO_Init+0x11c>)
 80009d8:	f001 f8d4 	bl	8001b84 <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009dc:	2320      	movs	r3, #32
 80009de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	4820      	ldr	r0, [pc, #128]	; (8000a74 <GPIO_Init+0x11c>)
 80009f4:	f000 ff54 	bl	80018a0 <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80009f8:	23e0      	movs	r3, #224	; 0xe0
 80009fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a08:	2305      	movs	r3, #5
 8000a0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f000 ff43 	bl	80018a0 <HAL_GPIO_Init>

    // Configure PB6 (UART_TX), PB7 (UART_RX)
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000a1a:	23c0      	movs	r3, #192	; 0xc0
 8000a1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // Alternate function for USART1
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4619      	mov	r1, r3
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <GPIO_Init+0x11c>)
 8000a36:	f000 ff33 	bl	80018a0 <HAL_GPIO_Init>

	// Configure PA4 (AFE ALERT pin) as an external interrupt
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 ff25 	bl	80018a0 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	200a      	movs	r0, #10
 8000a5c:	f000 fee9 	bl	8001832 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a60:	200a      	movs	r0, #10
 8000a62:	f000 ff02 	bl	800186a <HAL_NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
 8000a74:	48000400 	.word	0x48000400

08000a78 <SPI1_Init>:

void SPI1_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <SPI1_Init+0x84>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <SPI1_Init+0x84>)
 8000a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <SPI1_Init+0x84>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <SPI1_Init+0x88>)
 8000a98:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <SPI1_Init+0x8c>)
 8000a9a:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <SPI1_Init+0x88>)
 8000a9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa2:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <SPI1_Init+0x88>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <SPI1_Init+0x88>)
 8000aac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ab0:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <SPI1_Init+0x88>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <SPI1_Init+0x88>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <SPI1_Init+0x88>)
 8000ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac4:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <SPI1_Init+0x88>)
 8000ac8:	2228      	movs	r2, #40	; 0x28
 8000aca:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <SPI1_Init+0x88>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <SPI1_Init+0x88>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <SPI1_Init+0x88>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <SPI1_Init+0x88>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae4:	4806      	ldr	r0, [pc, #24]	; (8000b00 <SPI1_Init+0x88>)
 8000ae6:	f002 f907 	bl	8002cf8 <HAL_SPI_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d000      	beq.n	8000af2 <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 8000af0:	e7fe      	b.n	8000af0 <SPI1_Init+0x78>
    }
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	20000078 	.word	0x20000078
 8000b04:	40013000 	.word	0x40013000

08000b08 <USART1_Init>:

void USART1_Init(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	// Enable USART1 clock
	__HAL_RCC_USART1_CLK_ENABLE();
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <USART1_Init+0x68>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <USART1_Init+0x68>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <USART1_Init+0x68>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

	// Configure UART peripheral
	huart1.Instance = USART1;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <USART1_Init+0x6c>)
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <USART1_Init+0x70>)
 8000b2a:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <USART1_Init+0x6c>)
 8000b2e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b32:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <USART1_Init+0x6c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <USART1_Init+0x6c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <USART1_Init+0x6c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <USART1_Init+0x6c>)
 8000b48:	220c      	movs	r2, #12
 8000b4a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <USART1_Init+0x6c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <USART1_Init+0x6c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <USART1_Init+0x6c>)
 8000b5a:	f002 fcf7 	bl	800354c <HAL_UART_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d000      	beq.n	8000b66 <USART1_Init+0x5e>
	{
		// Initialization error
		while (1);
 8000b64:	e7fe      	b.n	8000b64 <USART1_Init+0x5c>
	}
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	200000dc 	.word	0x200000dc
 8000b78:	40013800 	.word	0x40013800

08000b7c <TIM1_Init>:

void TIM1_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Enable TIM1 clock
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <TIM1_Init+0x4c>)
 8000b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <TIM1_Init+0x4c>)
 8000b86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b8a:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->PSC = 2000 - 1; // Assuming 2MHz clock, 2000 cycles for 1ms
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <TIM1_Init+0x50>)
 8000b8e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 2000 - 1; // Generate interrupt every 2000ms (2s)
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <TIM1_Init+0x50>)
 8000b96:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <TIM1_Init+0x50>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <TIM1_Init+0x50>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0); // Set TIM1 interrupt priority
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2019      	movs	r0, #25
 8000bac:	f7ff fd1c 	bl	80005e8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); // Enable TIM1 interrupt
 8000bb0:	2019      	movs	r0, #25
 8000bb2:	f7ff fcfb 	bl	80005ac <__NVIC_EnableIRQ>

	TIM1->CR1 |= TIM_CR1_CEN; // Enable TIM1
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <TIM1_Init+0x50>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <TIM1_Init+0x50>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6013      	str	r3, [r2, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40012c00 	.word	0x40012c00

08000bd0 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	// Check if UIF flag is set
	if (TIM1->SR & TIM_SR_UIF) {
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d008      	beq.n	8000bf2 <TIM1_UP_TIM16_IRQHandler+0x22>
		// Handle the timer interrupt
		logDataFlag = true;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
		TIM1->SR &= ~TIM_SR_UIF; // Clear UIF flag
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8000bec:	f023 0301 	bic.w	r3, r3, #1
 8000bf0:	6113      	str	r3, [r2, #16]
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40012c00 	.word	0x40012c00
 8000c00:	20000164 	.word	0x20000164

08000c04 <crc8>:

uint8_t crc8(uint8_t *data, size_t len) {
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
    while (len--)
 8000c12:	e01e      	b.n	8000c52 <crc8+0x4e>
    {
        crc ^= *data++;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8000c22:	2300      	movs	r3, #0
 8000c24:	73bb      	strb	r3, [r7, #14]
 8000c26:	e011      	b.n	8000c4c <crc8+0x48>
        {
            if (crc & 0x80)
 8000c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	da07      	bge.n	8000c40 <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	f083 0307 	eor.w	r3, r3, #7
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	e002      	b.n	8000c46 <crc8+0x42>
            else
                crc <<= 1;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 8000c46:	7bbb      	ldrb	r3, [r7, #14]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	73bb      	strb	r3, [r7, #14]
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	2b07      	cmp	r3, #7
 8000c50:	d9ea      	bls.n	8000c28 <crc8+0x24>
    while (len--)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	1e5a      	subs	r2, r3, #1
 8000c56:	603a      	str	r2, [r7, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1db      	bne.n	8000c14 <crc8+0x10>
        }
    }
    return crc;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <DirectCmdRead>:
 * Sends a direct command to the AFE and reads the data that is output
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <DirectCmdRead+0x90>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	823b      	strh	r3, [r7, #16]
 8000c82:	2300      	movs	r3, #0
 8000c84:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <DirectCmdRead+0x90>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	81bb      	strh	r3, [r7, #12]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	723b      	strb	r3, [r7, #8]
 8000c94:	23ff      	movs	r3, #255	; 0xff
 8000c96:	727b      	strb	r3, [r7, #9]
	uint8_t crcLower = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	74fb      	strb	r3, [r7, #19]
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e023      	b.n	8000cea <DirectCmdRead+0x7e>
	{
		fullCmd[0] = cmd + i; // Increment the address
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	723b      	strb	r3, [r7, #8]
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffa5 	bl	8000c04 <crc8>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 8000cbe:	7a3b      	ldrb	r3, [r7, #8]
 8000cc0:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 8000cc2:	7a7b      	ldrb	r3, [r7, #9]
 8000cc4:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 8000cc6:	7cfb      	ldrb	r3, [r7, #19]
 8000cc8:	73bb      	strb	r3, [r7, #14]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8000cca:	f107 0110 	add.w	r1, r7, #16
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f9ab 	bl	8001030 <AFETransmitReadCmd>
		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	7c7a      	ldrb	r2, [r7, #17]
 8000ce2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dbd7      	blt.n	8000ca2 <DirectCmdRead+0x36>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	0800499c 	.word	0x0800499c

08000d00 <SubCmdNoData>:

/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <SubCmdNoData+0x8c>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	833b      	strh	r3, [r7, #24]
 8000d10:	2300      	movs	r3, #0
 8000d12:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8000d14:	23be      	movs	r3, #190	; 0xbe
 8000d16:	753b      	strb	r3, [r7, #20]
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	2102      	movs	r1, #2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff6d 	bl	8000c04 <crc8>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8000d2e:	23bf      	movs	r3, #191	; 0xbf
 8000d30:	743b      	strb	r3, [r7, #16]
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff5e 	bl	8000c04 <crc8>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	77bb      	strb	r3, [r7, #30]

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8000d4c:	7d3b      	ldrb	r3, [r7, #20]
 8000d4e:	733b      	strb	r3, [r7, #12]
 8000d50:	7d7b      	ldrb	r3, [r7, #21]
 8000d52:	737b      	strb	r3, [r7, #13]
 8000d54:	7ffb      	ldrb	r3, [r7, #31]
 8000d56:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000d58:	f107 0118 	add.w	r1, r7, #24
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2203      	movs	r2, #3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f99c 	bl	80010a0 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8000d68:	7c3b      	ldrb	r3, [r7, #16]
 8000d6a:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 8000d6c:	7c7b      	ldrb	r3, [r7, #17]
 8000d6e:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 8000d70:	7fbb      	ldrb	r3, [r7, #30]
 8000d72:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000d74:	f107 0118 	add.w	r1, r7, #24
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f98e 	bl	80010a0 <AFETransmitWriteCmd>
}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	0800499c 	.word	0x0800499c

08000d90 <SubCmdReadData>:
 * Sends a sub-command to the AFE and reads the data that is output
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	80fb      	strh	r3, [r7, #6]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8000da0:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <SubCmdReadData+0xf4>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	83bb      	strh	r3, [r7, #28]
 8000da6:	2300      	movs	r3, #0
 8000da8:	77bb      	strb	r3, [r7, #30]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 8000daa:	23be      	movs	r3, #190	; 0xbe
 8000dac:	763b      	strb	r3, [r7, #24]
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	2102      	movs	r1, #2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff22 	bl	8000c04 <crc8>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 8000dc6:	23bf      	movs	r3, #191	; 0xbf
 8000dc8:	753b      	strb	r3, [r7, #20]
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff12 	bl	8000c04 <crc8>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8000de6:	7e3b      	ldrb	r3, [r7, #24]
 8000de8:	743b      	strb	r3, [r7, #16]
 8000dea:	7e7b      	ldrb	r3, [r7, #25]
 8000dec:	747b      	strb	r3, [r7, #17]
 8000dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000df2:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000df4:	f107 011c 	add.w	r1, r7, #28
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f94e 	bl	80010a0 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 8000e04:	7d3b      	ldrb	r3, [r7, #20]
 8000e06:	743b      	strb	r3, [r7, #16]
	txData[1] = commandUpperAddr[1];
 8000e08:	7d7b      	ldrb	r3, [r7, #21]
 8000e0a:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8000e0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e10:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000e12:	f107 011c 	add.w	r1, r7, #28
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f93f 	bl	80010a0 <AFETransmitWriteCmd>

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 8000e22:	2300      	movs	r3, #0
 8000e24:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
 8000e2a:	e022      	b.n	8000e72 <SubCmdReadData+0xe2>
		readData[0] = READ_DATA_BUFF_LSB + i;
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	3340      	adds	r3, #64	; 0x40
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	733b      	strb	r3, [r7, #12]
		readData[1] = 0xFF;
 8000e36:	23ff      	movs	r3, #255	; 0xff
 8000e38:	737b      	strb	r3, [r7, #13]

		txData[0] = readData[0];
 8000e3a:	7b3b      	ldrb	r3, [r7, #12]
 8000e3c:	743b      	strb	r3, [r7, #16]
		txData[1] = readData[1];
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(readData, 2);
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2102      	movs	r1, #2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fedb 	bl	8000c04 <crc8>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	74bb      	strb	r3, [r7, #18]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8000e52:	f107 011c 	add.w	r1, r7, #28
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f8e7 	bl	8001030 <AFETransmitReadCmd>

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	7f7a      	ldrb	r2, [r7, #29]
 8000e6a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	3301      	adds	r3, #1
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	797b      	ldrb	r3, [r7, #5]
 8000e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e76:	429a      	cmp	r2, r3
 8000e78:	dbd8      	blt.n	8000e2c <SubCmdReadData+0x9c>
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0800499c 	.word	0x0800499c

08000e88 <RAMRegisterWrite>:
 * Might remove this function, it's exactly the same as the SubCmd read data function
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	80fb      	strh	r3, [r7, #6]
 8000e94:	4613      	mov	r3, r2
 8000e96:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8000e98:	4b64      	ldr	r3, [pc, #400]	; (800102c <RAMRegisterWrite+0x1a4>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	83bb      	strh	r3, [r7, #28]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	77bb      	strb	r3, [r7, #30]
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
 8000ea2:	23be      	movs	r3, #190	; 0xbe
 8000ea4:	763b      	strb	r3, [r7, #24]
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(lowerAddr, 2);
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fea6 	bl	8000c04 <crc8>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
 8000ebe:	23bf      	movs	r3, #191	; 0xbf
 8000ec0:	753b      	strb	r3, [r7, #20]
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(upperAddr, 2);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fe96 	bl	8000c04 <crc8>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
 8000ede:	7e3b      	ldrb	r3, [r7, #24]
 8000ee0:	743b      	strb	r3, [r7, #16]
 8000ee2:	7e7b      	ldrb	r3, [r7, #25]
 8000ee4:	747b      	strb	r3, [r7, #17]
 8000ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eea:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000eec:	f107 011c 	add.w	r1, r7, #28
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f8d2 	bl	80010a0 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = upperAddr[0];
 8000efc:	7d3b      	ldrb	r3, [r7, #20]
 8000efe:	743b      	strb	r3, [r7, #16]
	txData[1] = upperAddr[1];
 8000f00:	7d7b      	ldrb	r3, [r7, #21]
 8000f02:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 8000f04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f08:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000f0a:	f107 011c 	add.w	r1, r7, #28
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	2203      	movs	r2, #3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f8c3 	bl	80010a0 <AFETransmitWriteCmd>

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f22:	e020      	b.n	8000f66 <RAMRegisterWrite+0xde>
	{
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
 8000f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3b40      	subs	r3, #64	; 0x40
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	733b      	strb	r3, [r7, #12]
		writeBytes[1] = writeData[i];
 8000f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	737b      	strb	r3, [r7, #13]

		txData[0] = writeBytes[0];
 8000f38:	7b3b      	ldrb	r3, [r7, #12]
 8000f3a:	743b      	strb	r3, [r7, #16]
		txData[1] = writeBytes[1];
 8000f3c:	7b7b      	ldrb	r3, [r7, #13]
 8000f3e:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe5c 	bl	8000c04 <crc8>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	74bb      	strb	r3, [r7, #18]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000f50:	f107 011c 	add.w	r1, r7, #28
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	2203      	movs	r2, #3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f8a0 	bl	80010a0 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++)
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	3301      	adds	r3, #1
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f66:	797b      	ldrb	r3, [r7, #5]
 8000f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbda      	blt.n	8000f24 <RAMRegisterWrite+0x9c>
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
 8000f78:	e00b      	b.n	8000f92 <RAMRegisterWrite+0x10a>
		checkSum += writeData[i];
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f86:	4413      	add	r3, r2
 8000f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	3301      	adds	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbef      	blt.n	8000f7a <RAMRegisterWrite+0xf2>
	}
	checkSum += lowerAddr[1];
 8000f9a:	7e7a      	ldrb	r2, [r7, #25]
 8000f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum += upperAddr[1];
 8000fa6:	7d7a      	ldrb	r2, [r7, #21]
 8000fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fac:	4413      	add	r3, r2
 8000fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum = ~(checkSum);
 8000fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
 8000fbc:	23e0      	movs	r3, #224	; 0xe0
 8000fbe:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = checkSum;
 8000fc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fc4:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8000fc6:	7b3b      	ldrb	r3, [r7, #12]
 8000fc8:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8000fca:	7b7b      	ldrb	r3, [r7, #13]
 8000fcc:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe15 	bl	8000c04 <crc8>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000fde:	f107 011c 	add.w	r1, r7, #28
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f859 	bl	80010a0 <AFETransmitWriteCmd>

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
 8000fee:	23e1      	movs	r3, #225	; 0xe1
 8000ff0:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes
 8000ff2:	797b      	ldrb	r3, [r7, #5]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 8000ffa:	7b3b      	ldrb	r3, [r7, #12]
 8000ffc:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 8000ffe:	7b7b      	ldrb	r3, [r7, #13]
 8001000:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	2102      	movs	r1, #2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fdfb 	bl	8000c04 <crc8>
 800100e:	4603      	mov	r3, r0
 8001010:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8001012:	f107 011c 	add.w	r1, r7, #28
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2203      	movs	r2, #3
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f83f 	bl	80010a0 <AFETransmitWriteCmd>
}
 8001022:	bf00      	nop
 8001024:	3730      	adds	r7, #48	; 0x30
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	0800499c 	.word	0x0800499c

08001030 <AFETransmitReadCmd>:

void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af02      	add	r7, sp, #8
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	4613      	mov	r3, r2
 800103c:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 800103e:	2300      	movs	r3, #0
 8001040:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8001042:	e01e      	b.n	8001082 <AFETransmitReadCmd+0x52>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2101      	movs	r1, #1
 8001048:	4813      	ldr	r0, [pc, #76]	; (8001098 <AFETransmitReadCmd+0x68>)
 800104a:	f000 fd9b 	bl	8001b84 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	b29b      	uxth	r3, r3
 8001052:	f04f 32ff 	mov.w	r2, #4294967295
 8001056:	9200      	str	r2, [sp, #0]
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	480f      	ldr	r0, [pc, #60]	; (800109c <AFETransmitReadCmd+0x6c>)
 800105e:	f001 feee 	bl	8002e3e <HAL_SPI_TransmitReceive>

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		if (txBytes[0] == rxBytes[0]) commReceived = true;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d101      	bne.n	8001072 <AFETransmitReadCmd+0x42>
 800106e:	2301      	movs	r3, #1
 8001070:	75fb      	strb	r3, [r7, #23]
		// TODO: implement CRC checking for received data

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	2101      	movs	r1, #1
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <AFETransmitReadCmd+0x68>)
 8001078:	f000 fd84 	bl	8001b84 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 fad9 	bl	8001634 <HAL_Delay>
	while (!commReceived)
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1da      	bne.n	8001044 <AFETransmitReadCmd+0x14>
	}

}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	48000400 	.word	0x48000400
 800109c:	20000078 	.word	0x20000078

080010a0 <AFETransmitWriteCmd>:

void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	4613      	mov	r3, r2
 80010ac:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 80010ae:	2300      	movs	r3, #0
 80010b0:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 80010b2:	e02e      	b.n	8001112 <AFETransmitWriteCmd+0x72>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2101      	movs	r1, #1
 80010b8:	481b      	ldr	r0, [pc, #108]	; (8001128 <AFETransmitWriteCmd+0x88>)
 80010ba:	f000 fd63 	bl	8001b84 <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f04f 32ff 	mov.w	r2, #4294967295
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	68f9      	ldr	r1, [r7, #12]
 80010cc:	4817      	ldr	r0, [pc, #92]	; (800112c <AFETransmitWriteCmd+0x8c>)
 80010ce:	f001 feb6 	bl	8002e3e <HAL_SPI_TransmitReceive>

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
 80010d2:	2301      	movs	r3, #1
 80010d4:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e00e      	b.n	80010fa <AFETransmitWriteCmd+0x5a>
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4413      	add	r3, r2
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	440b      	add	r3, r1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d001      	beq.n	80010f4 <AFETransmitWriteCmd+0x54>
 80010f0:	2300      	movs	r3, #0
 80010f2:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	3301      	adds	r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	429a      	cmp	r2, r3
 8001100:	dbec      	blt.n	80010dc <AFETransmitWriteCmd+0x3c>
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2101      	movs	r1, #1
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <AFETransmitWriteCmd+0x88>)
 8001108:	f000 fd3c 	bl	8001b84 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fa91 	bl	8001634 <HAL_Delay>
	while (!commReceived)
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	f083 0301 	eor.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1ca      	bne.n	80010b4 <AFETransmitWriteCmd+0x14>
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	48000400 	.word	0x48000400
 800112c:	20000078 	.word	0x20000078

08001130 <TransmitCellVoltages>:

void TransmitCellVoltages(uint16_t *volts, uint8_t len) {
 8001130:	b580      	push	{r7, lr}
 8001132:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 8001136:	af02      	add	r7, sp, #8
 8001138:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800113c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001140:	6018      	str	r0, [r3, #0]
 8001142:	460a      	mov	r2, r1
 8001144:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001148:	f2a3 432d 	subw	r3, r3, #1069	; 0x42d
 800114c:	701a      	strb	r2, [r3, #0]
	char buffer[1024] = {0}; // Initialize buffer to store message
 800114e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001152:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	3304      	adds	r3, #4
 800115c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 ff6e 	bl	8004044 <memset>
	char temp[32]; // Temporary buffer for each line

	for (int i = 1; i <= len; i++) {
 8001168:	2301      	movs	r3, #1
 800116a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800116e:	e02a      	b.n	80011c6 <TransmitCellVoltages+0x96>
		// Format the data into a single line
		snprintf(temp, sizeof(temp), "CV%d: %d mV\n", i, volts[i-1]);
 8001170:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001174:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001178:	3b01      	subs	r3, #1
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8001180:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	4413      	add	r3, r2
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	f107 000c 	add.w	r0, r7, #12
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001194:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <TransmitCellVoltages+0xd0>)
 8001196:	2120      	movs	r1, #32
 8001198:	f002 ff20 	bl	8003fdc <sniprintf>
		// Append the formatted data to the buffer
		strncat(buffer, temp, sizeof(buffer) - strlen(buffer) - 1);
 800119c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f815 	bl	80001d0 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80011ac:	3303      	adds	r3, #3
 80011ae:	f107 010c 	add.w	r1, r7, #12
 80011b2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80011b6:	461a      	mov	r2, r3
 80011b8:	f002 ff4c 	bl	8004054 <strncat>
	for (int i = 1; i <= len; i++) {
 80011bc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80011c6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80011ca:	f2a3 432d 	subw	r3, r3, #1069	; 0x42d
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 80011d4:	429a      	cmp	r2, r3
 80011d6:	ddcb      	ble.n	8001170 <TransmitCellVoltages+0x40>
	}

	// Transmit the final message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011dc:	4618      	mov	r0, r3
 80011de:	f7fe fff7 	bl	80001d0 <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <TransmitCellVoltages+0xd4>)
 80011f0:	f002 f9fa 	bl	80035e8 <HAL_UART_Transmit>
}
 80011f4:	bf00      	nop
 80011f6:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	080049a0 	.word	0x080049a0
 8001204:	200000dc 	.word	0x200000dc

08001208 <UART_Transmit>:

void UART_Transmit(uint8_t *data, uint8_t len) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
	if (HAL_UART_Transmit(&huart1, data, len, HAL_MAX_DELAY)) {
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	b29a      	uxth	r2, r3
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <UART_Transmit+0x30>)
 8001220:	f002 f9e2 	bl	80035e8 <HAL_UART_Transmit>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <UART_Transmit+0x26>
		// Transmission error
		Error_Handler();
 800122a:	f000 f807 	bl	800123c <Error_Handler>
	}
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200000dc 	.word	0x200000dc

0800123c <Error_Handler>:

void Error_Handler(void) {
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
    // Stay in an infinite loop to allow for debugging
    while (1);
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x4>
	...

08001244 <HAL_GPIO_EXTI_Callback>:
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
	uint8_t msg[] = "Interrupt!";
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	ca07      	ldmia	r2, {r0, r1, r2}
 8001256:	c303      	stmia	r3!, {r0, r1}
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	3302      	adds	r3, #2
 800125c:	0c12      	lsrs	r2, r2, #16
 800125e:	701a      	strb	r2, [r3, #0]
	UART_Transmit(msg, sizeof(msg) - 1);
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	210a      	movs	r1, #10
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffce 	bl	8001208 <UART_Transmit>

	switch (GPIO_Pin) {
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	2b10      	cmp	r3, #16
 8001270:	d102      	bne.n	8001278 <HAL_GPIO_EXTI_Callback+0x34>
	case GPIO_PIN_4:
		// TODO: Handle the interrupt by reading the safety registers
		logAlertsFlag = true;
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_GPIO_EXTI_Callback+0x40>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
	}
}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	080049b0 	.word	0x080049b0
 8001284:	20000165 	.word	0x20000165

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x44>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_MspInit+0x44>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6613      	str	r3, [r2, #96]	; 0x60
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x44>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x44>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x44>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6593      	str	r3, [r2, #88]	; 0x58
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x44>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_SPI_MspInit+0x7c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d128      	bne.n	8001344 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_SPI_MspInit+0x80>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <HAL_SPI_MspInit+0x80>)
 80012f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012fc:	6613      	str	r3, [r2, #96]	; 0x60
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_SPI_MspInit+0x80>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_SPI_MspInit+0x80>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_SPI_MspInit+0x80>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_SPI_MspInit+0x80>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001322:	23e0      	movs	r3, #224	; 0xe0
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001332:	2305      	movs	r3, #5
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001340:	f000 faae 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40013000 	.word	0x40013000
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b096      	sub	sp, #88	; 0x58
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2234      	movs	r2, #52	; 0x34
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fe65 	bl	8004044 <memset>
  if(huart->Instance==USART1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <HAL_UART_MspInit+0xa4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d135      	bne.n	80013f0 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001384:	2301      	movs	r3, #1
 8001386:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fb2b 	bl	80029ec <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800139c:	f7ff ff4e 	bl	800123c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_UART_MspInit+0xa8>)
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	4a15      	ldr	r2, [pc, #84]	; (80013fc <HAL_UART_MspInit+0xa8>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013aa:	6613      	str	r3, [r2, #96]	; 0x60
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_UART_MspInit+0xa8>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_UART_MspInit+0xa8>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_UART_MspInit+0xa8>)
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_UART_MspInit+0xa8>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d0:	23c0      	movs	r3, #192	; 0xc0
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e0:	2307      	movs	r3, #7
 80013e2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013e8:	4619      	mov	r1, r3
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_UART_MspInit+0xac>)
 80013ec:	f000 fa58 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3758      	adds	r7, #88	; 0x58
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000400 	.word	0x48000400

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f000 f8d0 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800145c:	2002      	movs	r0, #2
 800145e:	f000 fbc3 	bl	8001be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f002 fdf0 	bl	800407c <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000a000 	.word	0x2000a000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	20000168 	.word	0x20000168
 80014d0:	200002b8 	.word	0x200002b8

080014d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <SystemInit+0x20>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <SystemInit+0x20>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014fc:	f7ff ffea 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <LoopForever+0x6>)
  ldr r1, =_edata
 8001502:	490d      	ldr	r1, [pc, #52]	; (8001538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <LoopForever+0xe>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001518:	4c0a      	ldr	r4, [pc, #40]	; (8001544 <LoopForever+0x16>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001526:	f002 fdaf 	bl	8004088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800152a:	f7ff f887 	bl	800063c <main>

0800152e <LoopForever>:

LoopForever:
    b LoopForever
 800152e:	e7fe      	b.n	800152e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001530:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800153c:	08004a48 	.word	0x08004a48
  ldr r2, =_sbss
 8001540:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001544:	200002b8 	.word	0x200002b8

08001548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC1_2_IRQHandler>

0800154a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 f961 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155a:	200f      	movs	r0, #15
 800155c:	f000 f80e 	bl	800157c <HAL_InitTick>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	e001      	b.n	8001570 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800156c:	f7ff fe8c 	bl	8001288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001570:	79fb      	ldrb	r3, [r7, #7]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_InitTick+0x6c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d023      	beq.n	80015d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_InitTick+0x70>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_InitTick+0x6c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f96d 	bl	8001886 <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d809      	bhi.n	80015cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 f937 	bl	8001832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_InitTick+0x74>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e007      	b.n	80015dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e004      	b.n	80015dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e001      	b.n	80015dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	2000016c 	.word	0x2000016c

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000016c 	.word	0x2000016c

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff ffee 	bl	800161c <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d005      	beq.n	800165a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_Delay+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165a:	bf00      	nop
 800165c:	f7ff ffde 	bl	800161c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d8f7      	bhi.n	800165c <HAL_Delay+0x28>
  {
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008

0800167c <__NVIC_SetPriorityGrouping>:
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <__NVIC_EnableIRQ+0x38>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff29 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff3e 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff31 	bl	80016e0 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa2 	bl	80017d8 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e14e      	b.n	8001b4e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8140 	beq.w	8001b48 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d005      	beq.n	80018e0 <HAL_GPIO_Init+0x40>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d130      	bne.n	8001942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001916:	2201      	movs	r2, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 0201 	and.w	r2, r3, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b03      	cmp	r3, #3
 800194c:	d017      	beq.n	800197e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d123      	bne.n	80019d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0203 	and.w	r2, r3, #3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 809a 	beq.w	8001b48 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a14:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a18:	4a54      	ldr	r2, [pc, #336]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a20:	4b52      	ldr	r3, [pc, #328]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2c:	4a50      	ldr	r2, [pc, #320]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a56:	d013      	beq.n	8001a80 <HAL_GPIO_Init+0x1e0>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a46      	ldr	r2, [pc, #280]	; (8001b74 <HAL_GPIO_Init+0x2d4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1dc>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_GPIO_Init+0x2d8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1d8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a44      	ldr	r2, [pc, #272]	; (8001b7c <HAL_GPIO_Init+0x2dc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1d4>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1e2>
 8001a74:	2307      	movs	r3, #7
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1e2>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1e2>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1e2>
 8001a80:	2300      	movs	r3, #0
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a92:	4937      	ldr	r1, [pc, #220]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ac4:	4a2e      	ldr	r2, [pc, #184]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b18:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f47f aea9 	bne.w	80018b0 <HAL_GPIO_Init+0x10>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	48000800 	.word	0x48000800
 8001b7c:	48000c00 	.word	0x48000c00
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43d9      	mvns	r1, r3
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fb1c 	bl	8001244 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40007000 	.word	0x40007000

08001c34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c42:	d130      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c50:	d038      	beq.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2232      	movs	r2, #50	; 0x32
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0c9b      	lsrs	r3, r3, #18
 8001c74:	3301      	adds	r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c78:	e002      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8c:	d102      	bne.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f2      	bne.n	8001c7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca0:	d110      	bne.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e00f      	b.n	8001cc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb2:	d007      	beq.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cbc:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	431bde83 	.word	0x431bde83

08001ce0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f000 bc4f 	b.w	8002592 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf4:	4b97      	ldr	r3, [pc, #604]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfe:	4b95      	ldr	r3, [pc, #596]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80e6 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4c>
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	f040 808d 	bne.w	8001e3e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	f040 8089 	bne.w	8001e3e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d2c:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <HAL_RCC_OscConfig+0x66>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f000 bc26 	b.w	8002592 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_RCC_OscConfig+0x80>
 8001d56:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5e:	e005      	b.n	8001d6c <HAL_RCC_OscConfig+0x8c>
 8001d60:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d224      	bcs.n	8001dba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fdd9 	bl	800292c <RCC_SetFlashLatencyFromMSIRange>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f000 bc06 	b.w	8002592 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d86:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a72      	ldr	r2, [pc, #456]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	496d      	ldr	r1, [pc, #436]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	4968      	ldr	r1, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
 8001db8:	e025      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dba:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a65      	ldr	r2, [pc, #404]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	4960      	ldr	r1, [pc, #384]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd8:	4b5e      	ldr	r3, [pc, #376]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	495b      	ldr	r1, [pc, #364]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fd98 	bl	800292c <RCC_SetFlashLatencyFromMSIRange>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e3c5      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e06:	f000 fccd 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	4950      	ldr	r1, [pc, #320]	; (8001f58 <HAL_RCC_OscConfig+0x278>)
 8001e18:	5ccb      	ldrb	r3, [r1, r3]
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	4a4e      	ldr	r2, [pc, #312]	; (8001f5c <HAL_RCC_OscConfig+0x27c>)
 8001e24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e26:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <HAL_RCC_OscConfig+0x280>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fba6 	bl	800157c <HAL_InitTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d052      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	e3a9      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d032      	beq.n	8001eac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e46:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a42      	ldr	r2, [pc, #264]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e52:	f7ff fbe3 	bl	800161c <HAL_GetTick>
 8001e56:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fbdf 	bl	800161c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e392      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6c:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a35      	ldr	r2, [pc, #212]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	4930      	ldr	r1, [pc, #192]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e96:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	492b      	ldr	r1, [pc, #172]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
 8001eaa:	e01a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fbb0 	bl	800161c <HAL_GetTick>
 8001ebc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fbac 	bl	800161c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e35f      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1e0>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d073      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_OscConfig+0x220>
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d10e      	bne.n	8001f18 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d063      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x2f4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d15f      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e33c      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x250>
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e025      	b.n	8001f7c <HAL_RCC_OscConfig+0x29c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f38:	d114      	bne.n	8001f64 <HAL_RCC_OscConfig+0x284>
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a02      	ldr	r2, [pc, #8]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e013      	b.n	8001f7c <HAL_RCC_OscConfig+0x29c>
 8001f54:	40021000 	.word	0x40021000
 8001f58:	080049bc 	.word	0x080049bc
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004
 8001f64:	4b8f      	ldr	r3, [pc, #572]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a8e      	ldr	r2, [pc, #568]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a8b      	ldr	r2, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff fb4a 	bl	800161c <HAL_GetTick>
 8001f88:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fb46 	bl	800161c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e2f9      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9e:	4b81      	ldr	r3, [pc, #516]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x2ac>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff fb36 	bl	800161c <HAL_GetTick>
 8001fb0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fb32 	bl	800161c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e2e5      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc6:	4b77      	ldr	r3, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x2d4>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d060      	beq.n	80020a4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x314>
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d119      	bne.n	8002022 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d116      	bne.n	8002022 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff4:	4b6b      	ldr	r3, [pc, #428]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_OscConfig+0x32c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e2c2      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	4962      	ldr	r1, [pc, #392]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002020:	e040      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d023      	beq.n	8002072 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202a:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7ff faf1 	bl	800161c <HAL_GetTick>
 800203a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff faed 	bl	800161c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e2a0      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002050:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	494e      	ldr	r1, [pc, #312]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
 8002070:	e018      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a4b      	ldr	r2, [pc, #300]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800207c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7ff facd 	bl	800161c <HAL_GetTick>
 8002082:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002086:	f7ff fac9 	bl	800161c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e27c      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8082 	beq.w	80021b6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d05f      	beq.n	800217a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80020ba:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d037      	beq.n	8002140 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e254      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01b      	beq.n	800212a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f8:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002102:	f7ff fa8b 	bl	800161c <HAL_GetTick>
 8002106:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210a:	f7ff fa87 	bl	800161c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b11      	cmp	r3, #17
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e23a      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002130:	f023 0210 	bic.w	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	491a      	ldr	r1, [pc, #104]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002146:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7ff fa64 	bl	800161c <HAL_GetTick>
 8002154:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002158:	f7ff fa60 	bl	800161c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b11      	cmp	r3, #17
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e213      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ef      	beq.n	8002158 <HAL_RCC_OscConfig+0x478>
 8002178:	e01d      	b.n	80021b6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002180:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7ff fa47 	bl	800161c <HAL_GetTick>
 800218e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002192:	f7ff fa43 	bl	800161c <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b11      	cmp	r3, #17
 800219e:	d903      	bls.n	80021a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1f6      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
 80021a4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a8:	4ba9      	ldr	r3, [pc, #676]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ed      	bne.n	8002192 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80bd 	beq.w	800233e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021ca:	4ba1      	ldr	r3, [pc, #644]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10e      	bne.n	80021f4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	4a9d      	ldr	r2, [pc, #628]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	6593      	str	r3, [r2, #88]	; 0x58
 80021e2:	4b9b      	ldr	r3, [pc, #620]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f4:	4b97      	ldr	r3, [pc, #604]	; (8002454 <HAL_RCC_OscConfig+0x774>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d118      	bne.n	8002232 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002200:	4b94      	ldr	r3, [pc, #592]	; (8002454 <HAL_RCC_OscConfig+0x774>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a93      	ldr	r2, [pc, #588]	; (8002454 <HAL_RCC_OscConfig+0x774>)
 8002206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220c:	f7ff fa06 	bl	800161c <HAL_GetTick>
 8002210:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002214:	f7ff fa02 	bl	800161c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1b5      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002226:	4b8b      	ldr	r3, [pc, #556]	; (8002454 <HAL_RCC_OscConfig+0x774>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d02c      	beq.n	8002298 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800223e:	4b84      	ldr	r3, [pc, #528]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	497f      	ldr	r1, [pc, #508]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d010      	beq.n	8002286 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002264:	4b7a      	ldr	r3, [pc, #488]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	4a79      	ldr	r2, [pc, #484]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002274:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	4a75      	ldr	r2, [pc, #468]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002284:	e018      	b.n	80022b8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002286:	4b72      	ldr	r3, [pc, #456]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	4a70      	ldr	r2, [pc, #448]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002296:	e00f      	b.n	80022b8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002298:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	4a6c      	ldr	r2, [pc, #432]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80022a8:	4b69      	ldr	r3, [pc, #420]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	4a68      	ldr	r2, [pc, #416]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d016      	beq.n	80022ee <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	f7ff f9ac 	bl	800161c <HAL_GetTick>
 80022c4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7ff f9a8 	bl	800161c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e159      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022de:	4b5c      	ldr	r3, [pc, #368]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ed      	beq.n	80022c8 <HAL_RCC_OscConfig+0x5e8>
 80022ec:	e01d      	b.n	800232a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7ff f995 	bl	800161c <HAL_GetTick>
 80022f2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7ff f991 	bl	800161c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e142      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800230c:	4b50      	ldr	r3, [pc, #320]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1ed      	bne.n	80022f6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800231a:	4b4d      	ldr	r3, [pc, #308]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	4a4b      	ldr	r2, [pc, #300]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800232a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	4a46      	ldr	r2, [pc, #280]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d03c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01c      	beq.n	800238c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002352:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002354:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002358:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7ff f95b 	bl	800161c <HAL_GetTick>
 8002366:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800236a:	f7ff f957 	bl	800161c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e10a      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800237c:	4b34      	ldr	r3, [pc, #208]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800237e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0ef      	beq.n	800236a <HAL_RCC_OscConfig+0x68a>
 800238a:	e01b      	b.n	80023c4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800238c:	4b30      	ldr	r3, [pc, #192]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800238e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002392:	4a2f      	ldr	r2, [pc, #188]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7ff f93e 	bl	800161c <HAL_GetTick>
 80023a0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a4:	f7ff f93a 	bl	800161c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0ed      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80023b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ef      	bne.n	80023a4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80e1 	beq.w	8002590 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	f040 80b5 	bne.w	8002542 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d124      	bne.n	8002436 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	3b01      	subs	r3, #1
 80023f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d11b      	bne.n	8002436 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d113      	bne.n	8002436 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d109      	bne.n	8002436 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	3b01      	subs	r3, #1
 8002430:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d05f      	beq.n	80024f6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	d05a      	beq.n	80024f2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a03      	ldr	r2, [pc, #12]	; (8002450 <HAL_RCC_OscConfig+0x770>)
 8002442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002446:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002448:	f7ff f8e8 	bl	800161c <HAL_GetTick>
 800244c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244e:	e00c      	b.n	800246a <HAL_RCC_OscConfig+0x78a>
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff f8e0 	bl	800161c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e093      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246a:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002476:	4b49      	ldr	r3, [pc, #292]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <HAL_RCC_OscConfig+0x8c0>)
 800247c:	4013      	ands	r3, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002486:	3a01      	subs	r2, #1
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002490:	0212      	lsls	r2, r2, #8
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002498:	0852      	lsrs	r2, r2, #1
 800249a:	3a01      	subs	r2, #1
 800249c:	0552      	lsls	r2, r2, #21
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024a4:	0852      	lsrs	r2, r2, #1
 80024a6:	3a01      	subs	r2, #1
 80024a8:	0652      	lsls	r2, r2, #25
 80024aa:	430a      	orrs	r2, r1
 80024ac:	493b      	ldr	r1, [pc, #236]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a39      	ldr	r2, [pc, #228]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 80024b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024bc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024be:	4b37      	ldr	r3, [pc, #220]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4a36      	ldr	r2, [pc, #216]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 80024c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024ca:	f7ff f8a7 	bl	800161c <HAL_GetTick>
 80024ce:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7ff f8a3 	bl	800161c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e056      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e4:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f0:	e04e      	b.n	8002590 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e04d      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d146      	bne.n	8002590 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a25      	ldr	r2, [pc, #148]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 8002508:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800250e:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 8002514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002518:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800251a:	f7ff f87f 	bl	800161c <HAL_GetTick>
 800251e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002522:	f7ff f87b 	bl	800161c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e02e      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x842>
 8002540:	e026      	b.n	8002590 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d021      	beq.n	800258c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a13      	ldr	r2, [pc, #76]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 800254e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff f862 	bl	800161c <HAL_GetTick>
 8002558:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff f85e 	bl	800161c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e011      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_RCC_OscConfig+0x8bc>)
 8002580:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002584:	f023 0303 	bic.w	r3, r3, #3
 8002588:	60d3      	str	r3, [r2, #12]
 800258a:	e001      	b.n	8002590 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	f99f808c 	.word	0xf99f808c

080025a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0e7      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b75      	ldr	r3, [pc, #468]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b72      	ldr	r3, [pc, #456]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4970      	ldr	r1, [pc, #448]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b6e      	ldr	r3, [pc, #440]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0cf      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d010      	beq.n	8002616 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	4b66      	ldr	r3, [pc, #408]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002600:	429a      	cmp	r2, r3
 8002602:	d908      	bls.n	8002616 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4960      	ldr	r1, [pc, #384]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04c      	beq.n	80026bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b03      	cmp	r3, #3
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	4b5a      	ldr	r3, [pc, #360]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d121      	bne.n	800267a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0a6      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002642:	4b54      	ldr	r3, [pc, #336]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d115      	bne.n	800267a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e09a      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265a:	4b4e      	ldr	r3, [pc, #312]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e08e      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266a:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e086      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b46      	ldr	r3, [pc, #280]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4943      	ldr	r1, [pc, #268]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7fe ffc6 	bl	800161c <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7fe ffc2 	bl	800161c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e06e      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4b31      	ldr	r3, [pc, #196]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d208      	bcs.n	80026ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	492b      	ldr	r1, [pc, #172]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ea:	4b29      	ldr	r3, [pc, #164]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d210      	bcs.n	800271a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 0207 	bic.w	r2, r3, #7
 8002700:	4923      	ldr	r1, [pc, #140]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_ClockConfig+0x1ec>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d001      	beq.n	800271a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e036      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4918      	ldr	r1, [pc, #96]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d009      	beq.n	8002758 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4910      	ldr	r1, [pc, #64]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002758:	f000 f824 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	490b      	ldr	r1, [pc, #44]	; (8002798 <HAL_RCC_ClockConfig+0x1f4>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1f8>)
 8002776:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1fc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fefd 	bl	800157c <HAL_InitTick>
 8002782:	4603      	mov	r3, r0
 8002784:	72fb      	strb	r3, [r7, #11]

  return status;
 8002786:	7afb      	ldrb	r3, [r7, #11]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40022000 	.word	0x40022000
 8002794:	40021000 	.word	0x40021000
 8002798:	080049bc 	.word	0x080049bc
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027bc:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x34>
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d121      	bne.n	8002816 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d11e      	bne.n	8002816 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027d8:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027e4:	4b31      	ldr	r3, [pc, #196]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e005      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027f4:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002800:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002808:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10d      	bne.n	800282c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002814:	e00a      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d102      	bne.n	8002822 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	e004      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d101      	bne.n	800282c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002828:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800282a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d134      	bne.n	800289c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0xa6>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d003      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0xac>
 8002848:	e005      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800284c:	617b      	str	r3, [r7, #20]
      break;
 800284e:	e005      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002852:	617b      	str	r3, [r7, #20]
      break;
 8002854:	e002      	b.n	800285c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	617b      	str	r3, [r7, #20]
      break;
 800285a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	3301      	adds	r3, #1
 8002868:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	fb03 f202 	mul.w	r2, r3, r2
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	0e5b      	lsrs	r3, r3, #25
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	3301      	adds	r3, #1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800289c:	69bb      	ldr	r3, [r7, #24]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	080049d4 	.word	0x080049d4
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000000 	.word	0x20000000

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4904      	ldr	r1, [pc, #16]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000
 80028fc:	080049cc 	.word	0x080049cc

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002904:	f7ff ffda 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0adb      	lsrs	r3, r3, #11
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	080049cc 	.word	0x080049cc

0800292c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002944:	f7ff f968 	bl	8001c18 <HAL_PWREx_GetVoltageRange>
 8002948:	6178      	str	r0, [r7, #20]
 800294a:	e014      	b.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002956:	6593      	str	r3, [r2, #88]	; 0x58
 8002958:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002964:	f7ff f958 	bl	8001c18 <HAL_PWREx_GetVoltageRange>
 8002968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002974:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297c:	d10b      	bne.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d919      	bls.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2ba0      	cmp	r3, #160	; 0xa0
 8002988:	d902      	bls.n	8002990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800298a:	2302      	movs	r3, #2
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	e013      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002990:	2301      	movs	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	e010      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d902      	bls.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800299c:	2303      	movs	r3, #3
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	e00a      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d102      	bne.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a8:	2302      	movs	r3, #2
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	e004      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b70      	cmp	r3, #112	; 0x70
 80029b2:	d101      	bne.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029b4:	2301      	movs	r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 0207 	bic.w	r2, r3, #7
 80029c0:	4909      	ldr	r1, [pc, #36]	; (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d001      	beq.n	80029da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40022000 	.word	0x40022000

080029ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029f4:	2300      	movs	r3, #0
 80029f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029f8:	2300      	movs	r3, #0
 80029fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 809e 	beq.w	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a0e:	4b46      	ldr	r3, [pc, #280]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00d      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a24:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	4a3f      	ldr	r2, [pc, #252]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a40:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a39      	ldr	r2, [pc, #228]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fde6 	bl	800161c <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a52:	e009      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a54:	f7fe fde2 	bl	800161c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d902      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	74fb      	strb	r3, [r7, #19]
        break;
 8002a66:	e005      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a68:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ef      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d15a      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01e      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d019      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a96:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ac2:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d016      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fda2 	bl	800161c <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ada:	e00b      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe fd9e 	bl	800161c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d902      	bls.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	74fb      	strb	r3, [r7, #19]
            break;
 8002af2:	e006      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0ec      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b1e:	e009      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	74bb      	strb	r3, [r7, #18]
 8002b24:	e006      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b34:	7c7b      	ldrb	r3, [r7, #17]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b6e      	ldr	r3, [pc, #440]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	4a6d      	ldr	r2, [pc, #436]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b52:	4b68      	ldr	r3, [pc, #416]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f023 0203 	bic.w	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4964      	ldr	r1, [pc, #400]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b74:	4b5f      	ldr	r3, [pc, #380]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 020c 	bic.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	495c      	ldr	r1, [pc, #368]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b96:	4b57      	ldr	r3, [pc, #348]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4953      	ldr	r1, [pc, #332]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bb8:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	494b      	ldr	r1, [pc, #300]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bda:	4b46      	ldr	r3, [pc, #280]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4942      	ldr	r1, [pc, #264]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bfc:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	493a      	ldr	r1, [pc, #232]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c1e:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4931      	ldr	r1, [pc, #196]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c40:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	4929      	ldr	r1, [pc, #164]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	4920      	ldr	r1, [pc, #128]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d015      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	4918      	ldr	r1, [pc, #96]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca2:	d105      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cae:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d015      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cbc:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	490a      	ldr	r1, [pc, #40]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ce8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e095      	b.n	8002e36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d108      	bne.n	8002d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d1a:	d009      	beq.n	8002d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
 8002d22:	e005      	b.n	8002d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fac0 	bl	80012d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d70:	d902      	bls.n	8002d78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e002      	b.n	8002d7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d86:	d007      	beq.n	8002d98 <HAL_SPI_Init+0xa0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	ea42 0103 	orr.w	r1, r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	0c1b      	lsrs	r3, r3, #16
 8002df4:	f003 0204 	and.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e14:	ea42 0103 	orr.w	r1, r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b08a      	sub	sp, #40	; 0x28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_SPI_TransmitReceive+0x26>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e20a      	b.n	800327a <HAL_SPI_TransmitReceive+0x43c>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e6c:	f7fe fbd6 	bl	800161c <HAL_GetTick>
 8002e70:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e78:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e88:	7efb      	ldrb	r3, [r7, #27]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d00e      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x6e>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e94:	d106      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x66>
 8002e9e:	7efb      	ldrb	r3, [r7, #27]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d003      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002eaa:	e1e0      	b.n	800326e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_SPI_TransmitReceive+0x80>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_TransmitReceive+0x80>
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ec4:	e1d3      	b.n	800326e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2205      	movs	r2, #5
 8002ed6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	887a      	ldrh	r2, [r7, #2]
 8002eea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	887a      	ldrh	r2, [r7, #2]
 8002f06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f1c:	d802      	bhi.n	8002f24 <HAL_SPI_TransmitReceive+0xe6>
 8002f1e:	8a3b      	ldrh	r3, [r7, #16]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d908      	bls.n	8002f36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	e007      	b.n	8002f46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d007      	beq.n	8002f64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f6c:	f240 8081 	bls.w	8003072 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_SPI_TransmitReceive+0x140>
 8002f78:	8a7b      	ldrh	r3, [r7, #18]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d16d      	bne.n	800305a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	881a      	ldrh	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	1c9a      	adds	r2, r3, #2
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa2:	e05a      	b.n	800305a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d11b      	bne.n	8002fea <HAL_SPI_TransmitReceive+0x1ac>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d016      	beq.n	8002fea <HAL_SPI_TransmitReceive+0x1ac>
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d113      	bne.n	8002fea <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	881a      	ldrh	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	1c9a      	adds	r2, r3, #2
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d11c      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x1f4>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d016      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	b292      	uxth	r2, r2
 8003010:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	1c9a      	adds	r2, r3, #2
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800302e:	2301      	movs	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003032:	f7fe faf3 	bl	800161c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800303e:	429a      	cmp	r2, r3
 8003040:	d80b      	bhi.n	800305a <HAL_SPI_TransmitReceive+0x21c>
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d007      	beq.n	800305a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003058:	e109      	b.n	800326e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d19f      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x166>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d199      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x166>
 8003070:	e0e3      	b.n	800323a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_SPI_TransmitReceive+0x244>
 800307a:	8a7b      	ldrh	r3, [r7, #18]
 800307c:	2b01      	cmp	r3, #1
 800307e:	f040 80cf 	bne.w	8003220 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d912      	bls.n	80030b2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	881a      	ldrh	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	1c9a      	adds	r2, r3, #2
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b02      	subs	r3, #2
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030b0:	e0b6      	b.n	8003220 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	7812      	ldrb	r2, [r2, #0]
 80030be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030d8:	e0a2      	b.n	8003220 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d134      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x314>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d02f      	beq.n	8003152 <HAL_SPI_TransmitReceive+0x314>
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d12c      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d912      	bls.n	8003128 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	1c9a      	adds	r2, r3, #2
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b02      	subs	r3, #2
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003126:	e012      	b.n	800314e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d148      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x3b4>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d042      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d923      	bls.n	80031c0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	b292      	uxth	r2, r2
 8003184:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	1c9a      	adds	r2, r3, #2
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b02      	subs	r3, #2
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d81f      	bhi.n	80031ee <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	e016      	b.n	80031ee <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f103 020c 	add.w	r2, r3, #12
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031ee:	2301      	movs	r3, #1
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031f2:	f7fe fa13 	bl	800161c <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fe:	429a      	cmp	r2, r3
 8003200:	d803      	bhi.n	800320a <HAL_SPI_TransmitReceive+0x3cc>
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d102      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x3d2>
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	2b00      	cmp	r3, #0
 800320e:	d107      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800321e:	e026      	b.n	800326e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	f47f af57 	bne.w	80030da <HAL_SPI_TransmitReceive+0x29c>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	f47f af50 	bne.w	80030da <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f93e 	bl	80034c0 <SPI_EndRxTxTransaction>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003264:	e003      	b.n	800326e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800327a:	4618      	mov	r0, r3
 800327c:	3728      	adds	r7, #40	; 0x28
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003294:	f7fe f9c2 	bl	800161c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032a4:	f7fe f9ba 	bl	800161c <HAL_GetTick>
 80032a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	015b      	lsls	r3, r3, #5
 80032b0:	0d1b      	lsrs	r3, r3, #20
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ba:	e054      	b.n	8003366 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d050      	beq.n	8003366 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032c4:	f7fe f9aa 	bl	800161c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d902      	bls.n	80032da <SPI_WaitFlagStateUntilTimeout+0x56>
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d13d      	bne.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f2:	d111      	bne.n	8003318 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032fc:	d004      	beq.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	d107      	bne.n	8003318 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003316:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003320:	d10f      	bne.n	8003342 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003340:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e017      	b.n	8003386 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3b01      	subs	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	429a      	cmp	r2, r3
 8003382:	d19b      	bne.n	80032bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000000 	.word	0x20000000

08003394 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033a6:	f7fe f939 	bl	800161c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033b6:	f7fe f931 	bl	800161c <HAL_GetTick>
 80033ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00da      	lsls	r2, r3, #3
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	0d1b      	lsrs	r3, r3, #20
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80033dc:	e060      	b.n	80034a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033e4:	d107      	bne.n	80033f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d104      	bne.n	80033f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d050      	beq.n	80034a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033fe:	f7fe f90d 	bl	800161c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	429a      	cmp	r2, r3
 800340c:	d902      	bls.n	8003414 <SPI_WaitFifoStateUntilTimeout+0x80>
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	2b00      	cmp	r3, #0
 8003412:	d13d      	bne.n	8003490 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003422:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342c:	d111      	bne.n	8003452 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003436:	d004      	beq.n	8003442 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003440:	d107      	bne.n	8003452 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003450:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345a:	d10f      	bne.n	800347c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800347a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e010      	b.n	80034b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	3b01      	subs	r3, #1
 800349e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d196      	bne.n	80033de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3728      	adds	r7, #40	; 0x28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000000 	.word	0x20000000

080034c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff ff5b 	bl	8003394 <SPI_WaitFifoStateUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e027      	b.n	8003544 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff fec0 	bl	8003284 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e014      	b.n	8003544 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f7ff ff34 	bl	8003394 <SPI_WaitFifoStateUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e000      	b.n	8003544 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e040      	b.n	80035e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fef0 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	; 0x24
 8003578:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fb0c 	bl	8003bb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8af 	bl	80036fc <UART_SetConfig>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e01b      	b.n	80035e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fb8b 	bl	8003cf4 <UART_CheckIdleState>
 80035de:	4603      	mov	r3, r0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d178      	bne.n	80036f2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_UART_Transmit+0x24>
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e071      	b.n	80036f4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2221      	movs	r2, #33	; 0x21
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800361e:	f7fd fffd 	bl	800161c <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d108      	bne.n	8003650 <HAL_UART_Transmit+0x68>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d104      	bne.n	8003650 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	e003      	b.n	8003658 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003658:	e030      	b.n	80036bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2200      	movs	r2, #0
 8003662:	2180      	movs	r1, #128	; 0x80
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fbed 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e03c      	b.n	80036f4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	881a      	ldrh	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800368c:	b292      	uxth	r2, r2
 800368e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	3302      	adds	r3, #2
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e008      	b.n	80036aa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	b292      	uxth	r2, r2
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	3301      	adds	r3, #1
 80036a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1c8      	bne.n	800365a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2200      	movs	r2, #0
 80036d0:	2140      	movs	r1, #64	; 0x40
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fbb6 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e005      	b.n	80036f4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
  }
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003700:	b08a      	sub	sp, #40	; 0x28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	431a      	orrs	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	431a      	orrs	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	4313      	orrs	r3, r2
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b9e      	ldr	r3, [pc, #632]	; (80039a4 <UART_SetConfig+0x2a8>)
 800372c:	4013      	ands	r3, r2
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003734:	430b      	orrs	r3, r1
 8003736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a93      	ldr	r2, [pc, #588]	; (80039a8 <UART_SetConfig+0x2ac>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	4313      	orrs	r3, r2
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	430a      	orrs	r2, r1
 800377a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a8a      	ldr	r2, [pc, #552]	; (80039ac <UART_SetConfig+0x2b0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d126      	bne.n	80037d4 <UART_SetConfig+0xd8>
 8003786:	4b8a      	ldr	r3, [pc, #552]	; (80039b0 <UART_SetConfig+0x2b4>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d81b      	bhi.n	80037cc <UART_SetConfig+0xd0>
 8003794:	a201      	add	r2, pc, #4	; (adr r2, 800379c <UART_SetConfig+0xa0>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	080037ad 	.word	0x080037ad
 80037a0:	080037bd 	.word	0x080037bd
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037c5 	.word	0x080037c5
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b2:	e0ab      	b.n	800390c <UART_SetConfig+0x210>
 80037b4:	2302      	movs	r3, #2
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e0a7      	b.n	800390c <UART_SetConfig+0x210>
 80037bc:	2304      	movs	r3, #4
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c2:	e0a3      	b.n	800390c <UART_SetConfig+0x210>
 80037c4:	2308      	movs	r3, #8
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e09f      	b.n	800390c <UART_SetConfig+0x210>
 80037cc:	2310      	movs	r3, #16
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e09b      	b.n	800390c <UART_SetConfig+0x210>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a76      	ldr	r2, [pc, #472]	; (80039b4 <UART_SetConfig+0x2b8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d138      	bne.n	8003850 <UART_SetConfig+0x154>
 80037de:	4b74      	ldr	r3, [pc, #464]	; (80039b0 <UART_SetConfig+0x2b4>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b0c      	cmp	r3, #12
 80037ea:	d82d      	bhi.n	8003848 <UART_SetConfig+0x14c>
 80037ec:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <UART_SetConfig+0xf8>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	08003829 	.word	0x08003829
 80037f8:	08003849 	.word	0x08003849
 80037fc:	08003849 	.word	0x08003849
 8003800:	08003849 	.word	0x08003849
 8003804:	08003839 	.word	0x08003839
 8003808:	08003849 	.word	0x08003849
 800380c:	08003849 	.word	0x08003849
 8003810:	08003849 	.word	0x08003849
 8003814:	08003831 	.word	0x08003831
 8003818:	08003849 	.word	0x08003849
 800381c:	08003849 	.word	0x08003849
 8003820:	08003849 	.word	0x08003849
 8003824:	08003841 	.word	0x08003841
 8003828:	2300      	movs	r3, #0
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382e:	e06d      	b.n	800390c <UART_SetConfig+0x210>
 8003830:	2302      	movs	r3, #2
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003836:	e069      	b.n	800390c <UART_SetConfig+0x210>
 8003838:	2304      	movs	r3, #4
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383e:	e065      	b.n	800390c <UART_SetConfig+0x210>
 8003840:	2308      	movs	r3, #8
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e061      	b.n	800390c <UART_SetConfig+0x210>
 8003848:	2310      	movs	r3, #16
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e05d      	b.n	800390c <UART_SetConfig+0x210>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <UART_SetConfig+0x2bc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d125      	bne.n	80038a6 <UART_SetConfig+0x1aa>
 800385a:	4b55      	ldr	r3, [pc, #340]	; (80039b0 <UART_SetConfig+0x2b4>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d016      	beq.n	8003896 <UART_SetConfig+0x19a>
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	d818      	bhi.n	800389e <UART_SetConfig+0x1a2>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d00a      	beq.n	8003886 <UART_SetConfig+0x18a>
 8003870:	2b20      	cmp	r3, #32
 8003872:	d814      	bhi.n	800389e <UART_SetConfig+0x1a2>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <UART_SetConfig+0x182>
 8003878:	2b10      	cmp	r3, #16
 800387a:	d008      	beq.n	800388e <UART_SetConfig+0x192>
 800387c:	e00f      	b.n	800389e <UART_SetConfig+0x1a2>
 800387e:	2300      	movs	r3, #0
 8003880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003884:	e042      	b.n	800390c <UART_SetConfig+0x210>
 8003886:	2302      	movs	r3, #2
 8003888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388c:	e03e      	b.n	800390c <UART_SetConfig+0x210>
 800388e:	2304      	movs	r3, #4
 8003890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003894:	e03a      	b.n	800390c <UART_SetConfig+0x210>
 8003896:	2308      	movs	r3, #8
 8003898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389c:	e036      	b.n	800390c <UART_SetConfig+0x210>
 800389e:	2310      	movs	r3, #16
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a4:	e032      	b.n	800390c <UART_SetConfig+0x210>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <UART_SetConfig+0x2ac>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d12a      	bne.n	8003906 <UART_SetConfig+0x20a>
 80038b0:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <UART_SetConfig+0x2b4>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038be:	d01a      	beq.n	80038f6 <UART_SetConfig+0x1fa>
 80038c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038c4:	d81b      	bhi.n	80038fe <UART_SetConfig+0x202>
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ca:	d00c      	beq.n	80038e6 <UART_SetConfig+0x1ea>
 80038cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d0:	d815      	bhi.n	80038fe <UART_SetConfig+0x202>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <UART_SetConfig+0x1e2>
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038da:	d008      	beq.n	80038ee <UART_SetConfig+0x1f2>
 80038dc:	e00f      	b.n	80038fe <UART_SetConfig+0x202>
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e4:	e012      	b.n	800390c <UART_SetConfig+0x210>
 80038e6:	2302      	movs	r3, #2
 80038e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ec:	e00e      	b.n	800390c <UART_SetConfig+0x210>
 80038ee:	2304      	movs	r3, #4
 80038f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f4:	e00a      	b.n	800390c <UART_SetConfig+0x210>
 80038f6:	2308      	movs	r3, #8
 80038f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fc:	e006      	b.n	800390c <UART_SetConfig+0x210>
 80038fe:	2310      	movs	r3, #16
 8003900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003904:	e002      	b.n	800390c <UART_SetConfig+0x210>
 8003906:	2310      	movs	r3, #16
 8003908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <UART_SetConfig+0x2ac>)
 8003912:	4293      	cmp	r3, r2
 8003914:	f040 808a 	bne.w	8003a2c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800391c:	2b08      	cmp	r3, #8
 800391e:	d824      	bhi.n	800396a <UART_SetConfig+0x26e>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <UART_SetConfig+0x22c>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	0800394d 	.word	0x0800394d
 800392c:	0800396b 	.word	0x0800396b
 8003930:	08003955 	.word	0x08003955
 8003934:	0800396b 	.word	0x0800396b
 8003938:	0800395b 	.word	0x0800395b
 800393c:	0800396b 	.word	0x0800396b
 8003940:	0800396b 	.word	0x0800396b
 8003944:	0800396b 	.word	0x0800396b
 8003948:	08003963 	.word	0x08003963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800394c:	f7fe ffc2 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003950:	61f8      	str	r0, [r7, #28]
        break;
 8003952:	e010      	b.n	8003976 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <UART_SetConfig+0x2c0>)
 8003956:	61fb      	str	r3, [r7, #28]
        break;
 8003958:	e00d      	b.n	8003976 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395a:	f7fe ff23 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 800395e:	61f8      	str	r0, [r7, #28]
        break;
 8003960:	e009      	b.n	8003976 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	61fb      	str	r3, [r7, #28]
        break;
 8003968:	e005      	b.n	8003976 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003974:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8109 	beq.w	8003b90 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	429a      	cmp	r2, r3
 800398c:	d305      	bcc.n	800399a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	429a      	cmp	r2, r3
 8003998:	d912      	bls.n	80039c0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039a0:	e0f6      	b.n	8003b90 <UART_SetConfig+0x494>
 80039a2:	bf00      	nop
 80039a4:	efff69f3 	.word	0xefff69f3
 80039a8:	40008000 	.word	0x40008000
 80039ac:	40013800 	.word	0x40013800
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40004400 	.word	0x40004400
 80039b8:	40004800 	.word	0x40004800
 80039bc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2200      	movs	r2, #0
 80039c4:	461c      	mov	r4, r3
 80039c6:	4615      	mov	r5, r2
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	022b      	lsls	r3, r5, #8
 80039d2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039d6:	0222      	lsls	r2, r4, #8
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	6849      	ldr	r1, [r1, #4]
 80039dc:	0849      	lsrs	r1, r1, #1
 80039de:	2000      	movs	r0, #0
 80039e0:	4688      	mov	r8, r1
 80039e2:	4681      	mov	r9, r0
 80039e4:	eb12 0a08 	adds.w	sl, r2, r8
 80039e8:	eb43 0b09 	adc.w	fp, r3, r9
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039fa:	4650      	mov	r0, sl
 80039fc:	4659      	mov	r1, fp
 80039fe:	f7fc fc3f 	bl	8000280 <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4613      	mov	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a10:	d308      	bcc.n	8003a24 <UART_SetConfig+0x328>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a18:	d204      	bcs.n	8003a24 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	e0b5      	b.n	8003b90 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a2a:	e0b1      	b.n	8003b90 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a34:	d15d      	bne.n	8003af2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003a36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d827      	bhi.n	8003a8e <UART_SetConfig+0x392>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <UART_SetConfig+0x348>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a69 	.word	0x08003a69
 8003a48:	08003a71 	.word	0x08003a71
 8003a4c:	08003a79 	.word	0x08003a79
 8003a50:	08003a8f 	.word	0x08003a8f
 8003a54:	08003a7f 	.word	0x08003a7f
 8003a58:	08003a8f 	.word	0x08003a8f
 8003a5c:	08003a8f 	.word	0x08003a8f
 8003a60:	08003a8f 	.word	0x08003a8f
 8003a64:	08003a87 	.word	0x08003a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a68:	f7fe ff34 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003a6c:	61f8      	str	r0, [r7, #28]
        break;
 8003a6e:	e014      	b.n	8003a9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a70:	f7fe ff46 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8003a74:	61f8      	str	r0, [r7, #28]
        break;
 8003a76:	e010      	b.n	8003a9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a78:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <UART_SetConfig+0x4b0>)
 8003a7a:	61fb      	str	r3, [r7, #28]
        break;
 8003a7c:	e00d      	b.n	8003a9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7e:	f7fe fe91 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8003a82:	61f8      	str	r0, [r7, #28]
        break;
 8003a84:	e009      	b.n	8003a9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8a:	61fb      	str	r3, [r7, #28]
        break;
 8003a8c:	e005      	b.n	8003a9a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d077      	beq.n	8003b90 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005a      	lsls	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	085b      	lsrs	r3, r3, #1
 8003aaa:	441a      	add	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d916      	bls.n	8003aea <UART_SetConfig+0x3ee>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac2:	d212      	bcs.n	8003aea <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f023 030f 	bic.w	r3, r3, #15
 8003acc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	8afb      	ldrh	r3, [r7, #22]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	8afa      	ldrh	r2, [r7, #22]
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	e052      	b.n	8003b90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003af0:	e04e      	b.n	8003b90 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d827      	bhi.n	8003b4a <UART_SetConfig+0x44e>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <UART_SetConfig+0x404>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b35 	.word	0x08003b35
 8003b0c:	08003b4b 	.word	0x08003b4b
 8003b10:	08003b3b 	.word	0x08003b3b
 8003b14:	08003b4b 	.word	0x08003b4b
 8003b18:	08003b4b 	.word	0x08003b4b
 8003b1c:	08003b4b 	.word	0x08003b4b
 8003b20:	08003b43 	.word	0x08003b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b24:	f7fe fed6 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003b28:	61f8      	str	r0, [r7, #28]
        break;
 8003b2a:	e014      	b.n	8003b56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b2c:	f7fe fee8 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8003b30:	61f8      	str	r0, [r7, #28]
        break;
 8003b32:	e010      	b.n	8003b56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <UART_SetConfig+0x4b0>)
 8003b36:	61fb      	str	r3, [r7, #28]
        break;
 8003b38:	e00d      	b.n	8003b56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b3a:	f7fe fe33 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8003b3e:	61f8      	str	r0, [r7, #28]
        break;
 8003b40:	e009      	b.n	8003b56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b46:	61fb      	str	r3, [r7, #28]
        break;
 8003b48:	e005      	b.n	8003b56 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b54:	bf00      	nop
    }

    if (pclk != 0U)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d019      	beq.n	8003b90 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	085a      	lsrs	r2, r3, #1
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	441a      	add	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	d909      	bls.n	8003b8a <UART_SetConfig+0x48e>
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d205      	bcs.n	8003b8a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	e002      	b.n	8003b90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3728      	adds	r7, #40	; 0x28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003baa:	bf00      	nop
 8003bac:	00f42400 	.word	0x00f42400

08003bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cae:	d10a      	bne.n	8003cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b098      	sub	sp, #96	; 0x60
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d04:	f7fd fc8a 	bl	800161c <HAL_GetTick>
 8003d08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d12e      	bne.n	8003d76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d20:	2200      	movs	r2, #0
 8003d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f88c 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d021      	beq.n	8003d76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d46:	653b      	str	r3, [r7, #80]	; 0x50
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	647b      	str	r3, [r7, #68]	; 0x44
 8003d52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e6      	bne.n	8003d32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e062      	b.n	8003e3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d149      	bne.n	8003e18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f856 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d03c      	beq.n	8003e18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	623b      	str	r3, [r7, #32]
   return(result);
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e6      	bne.n	8003d9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	69b9      	ldr	r1, [r7, #24]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e5      	bne.n	8003dd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e011      	b.n	8003e3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3758      	adds	r7, #88	; 0x58
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e54:	e049      	b.n	8003eea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d045      	beq.n	8003eea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fd fbdd 	bl	800161c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e048      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d031      	beq.n	8003eea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d110      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f838 	bl	8003f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e029      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec4:	d111      	bne.n	8003eea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f81e 	bl	8003f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e00f      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	bf0c      	ite	eq
 8003efa:	2301      	moveq	r3, #1
 8003efc:	2300      	movne	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d0a6      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b095      	sub	sp, #84	; 0x54
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f38:	643b      	str	r3, [r7, #64]	; 0x40
 8003f3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e6      	bne.n	8003f1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3308      	adds	r3, #8
 8003f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e5      	bne.n	8003f4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d118      	bne.n	8003fba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0310 	bic.w	r3, r3, #16
 8003f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e6      	bne.n	8003f88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fce:	bf00      	nop
 8003fd0:	3754      	adds	r7, #84	; 0x54
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <sniprintf>:
 8003fdc:	b40c      	push	{r2, r3}
 8003fde:	b530      	push	{r4, r5, lr}
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <sniprintf+0x64>)
 8003fe2:	1e0c      	subs	r4, r1, #0
 8003fe4:	681d      	ldr	r5, [r3, #0]
 8003fe6:	b09d      	sub	sp, #116	; 0x74
 8003fe8:	da08      	bge.n	8003ffc <sniprintf+0x20>
 8003fea:	238b      	movs	r3, #139	; 0x8b
 8003fec:	602b      	str	r3, [r5, #0]
 8003fee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff2:	b01d      	add	sp, #116	; 0x74
 8003ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ff8:	b002      	add	sp, #8
 8003ffa:	4770      	bx	lr
 8003ffc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004000:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004004:	bf14      	ite	ne
 8004006:	f104 33ff 	addne.w	r3, r4, #4294967295
 800400a:	4623      	moveq	r3, r4
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	9307      	str	r3, [sp, #28]
 8004010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004014:	9002      	str	r0, [sp, #8]
 8004016:	9006      	str	r0, [sp, #24]
 8004018:	f8ad 3016 	strh.w	r3, [sp, #22]
 800401c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800401e:	ab21      	add	r3, sp, #132	; 0x84
 8004020:	a902      	add	r1, sp, #8
 8004022:	4628      	mov	r0, r5
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	f000 f9a7 	bl	8004378 <_svfiprintf_r>
 800402a:	1c43      	adds	r3, r0, #1
 800402c:	bfbc      	itt	lt
 800402e:	238b      	movlt	r3, #139	; 0x8b
 8004030:	602b      	strlt	r3, [r5, #0]
 8004032:	2c00      	cmp	r4, #0
 8004034:	d0dd      	beq.n	8003ff2 <sniprintf+0x16>
 8004036:	9b02      	ldr	r3, [sp, #8]
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e7d9      	b.n	8003ff2 <sniprintf+0x16>
 800403e:	bf00      	nop
 8004040:	20000058 	.word	0x20000058

08004044 <memset>:
 8004044:	4402      	add	r2, r0
 8004046:	4603      	mov	r3, r0
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	f803 1b01 	strb.w	r1, [r3], #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <strncat>:
 8004054:	b530      	push	{r4, r5, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	7825      	ldrb	r5, [r4, #0]
 800405a:	4623      	mov	r3, r4
 800405c:	3401      	adds	r4, #1
 800405e:	2d00      	cmp	r5, #0
 8004060:	d1fa      	bne.n	8004058 <strncat+0x4>
 8004062:	3a01      	subs	r2, #1
 8004064:	d304      	bcc.n	8004070 <strncat+0x1c>
 8004066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800406a:	f803 4b01 	strb.w	r4, [r3], #1
 800406e:	b904      	cbnz	r4, 8004072 <strncat+0x1e>
 8004070:	bd30      	pop	{r4, r5, pc}
 8004072:	2a00      	cmp	r2, #0
 8004074:	d1f5      	bne.n	8004062 <strncat+0xe>
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	e7f3      	b.n	8004062 <strncat+0xe>
	...

0800407c <__errno>:
 800407c:	4b01      	ldr	r3, [pc, #4]	; (8004084 <__errno+0x8>)
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000058 	.word	0x20000058

08004088 <__libc_init_array>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	4d0d      	ldr	r5, [pc, #52]	; (80040c0 <__libc_init_array+0x38>)
 800408c:	4c0d      	ldr	r4, [pc, #52]	; (80040c4 <__libc_init_array+0x3c>)
 800408e:	1b64      	subs	r4, r4, r5
 8004090:	10a4      	asrs	r4, r4, #2
 8004092:	2600      	movs	r6, #0
 8004094:	42a6      	cmp	r6, r4
 8004096:	d109      	bne.n	80040ac <__libc_init_array+0x24>
 8004098:	4d0b      	ldr	r5, [pc, #44]	; (80040c8 <__libc_init_array+0x40>)
 800409a:	4c0c      	ldr	r4, [pc, #48]	; (80040cc <__libc_init_array+0x44>)
 800409c:	f000 fc6a 	bl	8004974 <_init>
 80040a0:	1b64      	subs	r4, r4, r5
 80040a2:	10a4      	asrs	r4, r4, #2
 80040a4:	2600      	movs	r6, #0
 80040a6:	42a6      	cmp	r6, r4
 80040a8:	d105      	bne.n	80040b6 <__libc_init_array+0x2e>
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b0:	4798      	blx	r3
 80040b2:	3601      	adds	r6, #1
 80040b4:	e7ee      	b.n	8004094 <__libc_init_array+0xc>
 80040b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ba:	4798      	blx	r3
 80040bc:	3601      	adds	r6, #1
 80040be:	e7f2      	b.n	80040a6 <__libc_init_array+0x1e>
 80040c0:	08004a40 	.word	0x08004a40
 80040c4:	08004a40 	.word	0x08004a40
 80040c8:	08004a40 	.word	0x08004a40
 80040cc:	08004a44 	.word	0x08004a44

080040d0 <__retarget_lock_acquire_recursive>:
 80040d0:	4770      	bx	lr

080040d2 <__retarget_lock_release_recursive>:
 80040d2:	4770      	bx	lr

080040d4 <_free_r>:
 80040d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040d6:	2900      	cmp	r1, #0
 80040d8:	d044      	beq.n	8004164 <_free_r+0x90>
 80040da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040de:	9001      	str	r0, [sp, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f1a1 0404 	sub.w	r4, r1, #4
 80040e6:	bfb8      	it	lt
 80040e8:	18e4      	addlt	r4, r4, r3
 80040ea:	f000 f8df 	bl	80042ac <__malloc_lock>
 80040ee:	4a1e      	ldr	r2, [pc, #120]	; (8004168 <_free_r+0x94>)
 80040f0:	9801      	ldr	r0, [sp, #4]
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	b933      	cbnz	r3, 8004104 <_free_r+0x30>
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	6014      	str	r4, [r2, #0]
 80040fa:	b003      	add	sp, #12
 80040fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004100:	f000 b8da 	b.w	80042b8 <__malloc_unlock>
 8004104:	42a3      	cmp	r3, r4
 8004106:	d908      	bls.n	800411a <_free_r+0x46>
 8004108:	6825      	ldr	r5, [r4, #0]
 800410a:	1961      	adds	r1, r4, r5
 800410c:	428b      	cmp	r3, r1
 800410e:	bf01      	itttt	eq
 8004110:	6819      	ldreq	r1, [r3, #0]
 8004112:	685b      	ldreq	r3, [r3, #4]
 8004114:	1949      	addeq	r1, r1, r5
 8004116:	6021      	streq	r1, [r4, #0]
 8004118:	e7ed      	b.n	80040f6 <_free_r+0x22>
 800411a:	461a      	mov	r2, r3
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	b10b      	cbz	r3, 8004124 <_free_r+0x50>
 8004120:	42a3      	cmp	r3, r4
 8004122:	d9fa      	bls.n	800411a <_free_r+0x46>
 8004124:	6811      	ldr	r1, [r2, #0]
 8004126:	1855      	adds	r5, r2, r1
 8004128:	42a5      	cmp	r5, r4
 800412a:	d10b      	bne.n	8004144 <_free_r+0x70>
 800412c:	6824      	ldr	r4, [r4, #0]
 800412e:	4421      	add	r1, r4
 8004130:	1854      	adds	r4, r2, r1
 8004132:	42a3      	cmp	r3, r4
 8004134:	6011      	str	r1, [r2, #0]
 8004136:	d1e0      	bne.n	80040fa <_free_r+0x26>
 8004138:	681c      	ldr	r4, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	6053      	str	r3, [r2, #4]
 800413e:	440c      	add	r4, r1
 8004140:	6014      	str	r4, [r2, #0]
 8004142:	e7da      	b.n	80040fa <_free_r+0x26>
 8004144:	d902      	bls.n	800414c <_free_r+0x78>
 8004146:	230c      	movs	r3, #12
 8004148:	6003      	str	r3, [r0, #0]
 800414a:	e7d6      	b.n	80040fa <_free_r+0x26>
 800414c:	6825      	ldr	r5, [r4, #0]
 800414e:	1961      	adds	r1, r4, r5
 8004150:	428b      	cmp	r3, r1
 8004152:	bf04      	itt	eq
 8004154:	6819      	ldreq	r1, [r3, #0]
 8004156:	685b      	ldreq	r3, [r3, #4]
 8004158:	6063      	str	r3, [r4, #4]
 800415a:	bf04      	itt	eq
 800415c:	1949      	addeq	r1, r1, r5
 800415e:	6021      	streq	r1, [r4, #0]
 8004160:	6054      	str	r4, [r2, #4]
 8004162:	e7ca      	b.n	80040fa <_free_r+0x26>
 8004164:	b003      	add	sp, #12
 8004166:	bd30      	pop	{r4, r5, pc}
 8004168:	200002b0 	.word	0x200002b0

0800416c <sbrk_aligned>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	4e0e      	ldr	r6, [pc, #56]	; (80041a8 <sbrk_aligned+0x3c>)
 8004170:	460c      	mov	r4, r1
 8004172:	6831      	ldr	r1, [r6, #0]
 8004174:	4605      	mov	r5, r0
 8004176:	b911      	cbnz	r1, 800417e <sbrk_aligned+0x12>
 8004178:	f000 fba6 	bl	80048c8 <_sbrk_r>
 800417c:	6030      	str	r0, [r6, #0]
 800417e:	4621      	mov	r1, r4
 8004180:	4628      	mov	r0, r5
 8004182:	f000 fba1 	bl	80048c8 <_sbrk_r>
 8004186:	1c43      	adds	r3, r0, #1
 8004188:	d00a      	beq.n	80041a0 <sbrk_aligned+0x34>
 800418a:	1cc4      	adds	r4, r0, #3
 800418c:	f024 0403 	bic.w	r4, r4, #3
 8004190:	42a0      	cmp	r0, r4
 8004192:	d007      	beq.n	80041a4 <sbrk_aligned+0x38>
 8004194:	1a21      	subs	r1, r4, r0
 8004196:	4628      	mov	r0, r5
 8004198:	f000 fb96 	bl	80048c8 <_sbrk_r>
 800419c:	3001      	adds	r0, #1
 800419e:	d101      	bne.n	80041a4 <sbrk_aligned+0x38>
 80041a0:	f04f 34ff 	mov.w	r4, #4294967295
 80041a4:	4620      	mov	r0, r4
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
 80041a8:	200002b4 	.word	0x200002b4

080041ac <_malloc_r>:
 80041ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b0:	1ccd      	adds	r5, r1, #3
 80041b2:	f025 0503 	bic.w	r5, r5, #3
 80041b6:	3508      	adds	r5, #8
 80041b8:	2d0c      	cmp	r5, #12
 80041ba:	bf38      	it	cc
 80041bc:	250c      	movcc	r5, #12
 80041be:	2d00      	cmp	r5, #0
 80041c0:	4607      	mov	r7, r0
 80041c2:	db01      	blt.n	80041c8 <_malloc_r+0x1c>
 80041c4:	42a9      	cmp	r1, r5
 80041c6:	d905      	bls.n	80041d4 <_malloc_r+0x28>
 80041c8:	230c      	movs	r3, #12
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	2600      	movs	r6, #0
 80041ce:	4630      	mov	r0, r6
 80041d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042a8 <_malloc_r+0xfc>
 80041d8:	f000 f868 	bl	80042ac <__malloc_lock>
 80041dc:	f8d8 3000 	ldr.w	r3, [r8]
 80041e0:	461c      	mov	r4, r3
 80041e2:	bb5c      	cbnz	r4, 800423c <_malloc_r+0x90>
 80041e4:	4629      	mov	r1, r5
 80041e6:	4638      	mov	r0, r7
 80041e8:	f7ff ffc0 	bl	800416c <sbrk_aligned>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	4604      	mov	r4, r0
 80041f0:	d155      	bne.n	800429e <_malloc_r+0xf2>
 80041f2:	f8d8 4000 	ldr.w	r4, [r8]
 80041f6:	4626      	mov	r6, r4
 80041f8:	2e00      	cmp	r6, #0
 80041fa:	d145      	bne.n	8004288 <_malloc_r+0xdc>
 80041fc:	2c00      	cmp	r4, #0
 80041fe:	d048      	beq.n	8004292 <_malloc_r+0xe6>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	4631      	mov	r1, r6
 8004204:	4638      	mov	r0, r7
 8004206:	eb04 0903 	add.w	r9, r4, r3
 800420a:	f000 fb5d 	bl	80048c8 <_sbrk_r>
 800420e:	4581      	cmp	r9, r0
 8004210:	d13f      	bne.n	8004292 <_malloc_r+0xe6>
 8004212:	6821      	ldr	r1, [r4, #0]
 8004214:	1a6d      	subs	r5, r5, r1
 8004216:	4629      	mov	r1, r5
 8004218:	4638      	mov	r0, r7
 800421a:	f7ff ffa7 	bl	800416c <sbrk_aligned>
 800421e:	3001      	adds	r0, #1
 8004220:	d037      	beq.n	8004292 <_malloc_r+0xe6>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	442b      	add	r3, r5
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	f8d8 3000 	ldr.w	r3, [r8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d038      	beq.n	80042a2 <_malloc_r+0xf6>
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	42a2      	cmp	r2, r4
 8004234:	d12b      	bne.n	800428e <_malloc_r+0xe2>
 8004236:	2200      	movs	r2, #0
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	e00f      	b.n	800425c <_malloc_r+0xb0>
 800423c:	6822      	ldr	r2, [r4, #0]
 800423e:	1b52      	subs	r2, r2, r5
 8004240:	d41f      	bmi.n	8004282 <_malloc_r+0xd6>
 8004242:	2a0b      	cmp	r2, #11
 8004244:	d917      	bls.n	8004276 <_malloc_r+0xca>
 8004246:	1961      	adds	r1, r4, r5
 8004248:	42a3      	cmp	r3, r4
 800424a:	6025      	str	r5, [r4, #0]
 800424c:	bf18      	it	ne
 800424e:	6059      	strne	r1, [r3, #4]
 8004250:	6863      	ldr	r3, [r4, #4]
 8004252:	bf08      	it	eq
 8004254:	f8c8 1000 	streq.w	r1, [r8]
 8004258:	5162      	str	r2, [r4, r5]
 800425a:	604b      	str	r3, [r1, #4]
 800425c:	4638      	mov	r0, r7
 800425e:	f104 060b 	add.w	r6, r4, #11
 8004262:	f000 f829 	bl	80042b8 <__malloc_unlock>
 8004266:	f026 0607 	bic.w	r6, r6, #7
 800426a:	1d23      	adds	r3, r4, #4
 800426c:	1af2      	subs	r2, r6, r3
 800426e:	d0ae      	beq.n	80041ce <_malloc_r+0x22>
 8004270:	1b9b      	subs	r3, r3, r6
 8004272:	50a3      	str	r3, [r4, r2]
 8004274:	e7ab      	b.n	80041ce <_malloc_r+0x22>
 8004276:	42a3      	cmp	r3, r4
 8004278:	6862      	ldr	r2, [r4, #4]
 800427a:	d1dd      	bne.n	8004238 <_malloc_r+0x8c>
 800427c:	f8c8 2000 	str.w	r2, [r8]
 8004280:	e7ec      	b.n	800425c <_malloc_r+0xb0>
 8004282:	4623      	mov	r3, r4
 8004284:	6864      	ldr	r4, [r4, #4]
 8004286:	e7ac      	b.n	80041e2 <_malloc_r+0x36>
 8004288:	4634      	mov	r4, r6
 800428a:	6876      	ldr	r6, [r6, #4]
 800428c:	e7b4      	b.n	80041f8 <_malloc_r+0x4c>
 800428e:	4613      	mov	r3, r2
 8004290:	e7cc      	b.n	800422c <_malloc_r+0x80>
 8004292:	230c      	movs	r3, #12
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	4638      	mov	r0, r7
 8004298:	f000 f80e 	bl	80042b8 <__malloc_unlock>
 800429c:	e797      	b.n	80041ce <_malloc_r+0x22>
 800429e:	6025      	str	r5, [r4, #0]
 80042a0:	e7dc      	b.n	800425c <_malloc_r+0xb0>
 80042a2:	605b      	str	r3, [r3, #4]
 80042a4:	deff      	udf	#255	; 0xff
 80042a6:	bf00      	nop
 80042a8:	200002b0 	.word	0x200002b0

080042ac <__malloc_lock>:
 80042ac:	4801      	ldr	r0, [pc, #4]	; (80042b4 <__malloc_lock+0x8>)
 80042ae:	f7ff bf0f 	b.w	80040d0 <__retarget_lock_acquire_recursive>
 80042b2:	bf00      	nop
 80042b4:	200002ac 	.word	0x200002ac

080042b8 <__malloc_unlock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <__malloc_unlock+0x8>)
 80042ba:	f7ff bf0a 	b.w	80040d2 <__retarget_lock_release_recursive>
 80042be:	bf00      	nop
 80042c0:	200002ac 	.word	0x200002ac

080042c4 <__ssputs_r>:
 80042c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	688e      	ldr	r6, [r1, #8]
 80042ca:	461f      	mov	r7, r3
 80042cc:	42be      	cmp	r6, r7
 80042ce:	680b      	ldr	r3, [r1, #0]
 80042d0:	4682      	mov	sl, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	4690      	mov	r8, r2
 80042d6:	d82c      	bhi.n	8004332 <__ssputs_r+0x6e>
 80042d8:	898a      	ldrh	r2, [r1, #12]
 80042da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042de:	d026      	beq.n	800432e <__ssputs_r+0x6a>
 80042e0:	6965      	ldr	r5, [r4, #20]
 80042e2:	6909      	ldr	r1, [r1, #16]
 80042e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042e8:	eba3 0901 	sub.w	r9, r3, r1
 80042ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042f0:	1c7b      	adds	r3, r7, #1
 80042f2:	444b      	add	r3, r9
 80042f4:	106d      	asrs	r5, r5, #1
 80042f6:	429d      	cmp	r5, r3
 80042f8:	bf38      	it	cc
 80042fa:	461d      	movcc	r5, r3
 80042fc:	0553      	lsls	r3, r2, #21
 80042fe:	d527      	bpl.n	8004350 <__ssputs_r+0x8c>
 8004300:	4629      	mov	r1, r5
 8004302:	f7ff ff53 	bl	80041ac <_malloc_r>
 8004306:	4606      	mov	r6, r0
 8004308:	b360      	cbz	r0, 8004364 <__ssputs_r+0xa0>
 800430a:	6921      	ldr	r1, [r4, #16]
 800430c:	464a      	mov	r2, r9
 800430e:	f000 faeb 	bl	80048e8 <memcpy>
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	6126      	str	r6, [r4, #16]
 8004320:	6165      	str	r5, [r4, #20]
 8004322:	444e      	add	r6, r9
 8004324:	eba5 0509 	sub.w	r5, r5, r9
 8004328:	6026      	str	r6, [r4, #0]
 800432a:	60a5      	str	r5, [r4, #8]
 800432c:	463e      	mov	r6, r7
 800432e:	42be      	cmp	r6, r7
 8004330:	d900      	bls.n	8004334 <__ssputs_r+0x70>
 8004332:	463e      	mov	r6, r7
 8004334:	6820      	ldr	r0, [r4, #0]
 8004336:	4632      	mov	r2, r6
 8004338:	4641      	mov	r1, r8
 800433a:	f000 faab 	bl	8004894 <memmove>
 800433e:	68a3      	ldr	r3, [r4, #8]
 8004340:	1b9b      	subs	r3, r3, r6
 8004342:	60a3      	str	r3, [r4, #8]
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	4433      	add	r3, r6
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	2000      	movs	r0, #0
 800434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004350:	462a      	mov	r2, r5
 8004352:	f000 fad7 	bl	8004904 <_realloc_r>
 8004356:	4606      	mov	r6, r0
 8004358:	2800      	cmp	r0, #0
 800435a:	d1e0      	bne.n	800431e <__ssputs_r+0x5a>
 800435c:	6921      	ldr	r1, [r4, #16]
 800435e:	4650      	mov	r0, sl
 8004360:	f7ff feb8 	bl	80040d4 <_free_r>
 8004364:	230c      	movs	r3, #12
 8004366:	f8ca 3000 	str.w	r3, [sl]
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	f04f 30ff 	mov.w	r0, #4294967295
 8004376:	e7e9      	b.n	800434c <__ssputs_r+0x88>

08004378 <_svfiprintf_r>:
 8004378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437c:	4698      	mov	r8, r3
 800437e:	898b      	ldrh	r3, [r1, #12]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	b09d      	sub	sp, #116	; 0x74
 8004384:	4607      	mov	r7, r0
 8004386:	460d      	mov	r5, r1
 8004388:	4614      	mov	r4, r2
 800438a:	d50e      	bpl.n	80043aa <_svfiprintf_r+0x32>
 800438c:	690b      	ldr	r3, [r1, #16]
 800438e:	b963      	cbnz	r3, 80043aa <_svfiprintf_r+0x32>
 8004390:	2140      	movs	r1, #64	; 0x40
 8004392:	f7ff ff0b 	bl	80041ac <_malloc_r>
 8004396:	6028      	str	r0, [r5, #0]
 8004398:	6128      	str	r0, [r5, #16]
 800439a:	b920      	cbnz	r0, 80043a6 <_svfiprintf_r+0x2e>
 800439c:	230c      	movs	r3, #12
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	e0d0      	b.n	8004548 <_svfiprintf_r+0x1d0>
 80043a6:	2340      	movs	r3, #64	; 0x40
 80043a8:	616b      	str	r3, [r5, #20]
 80043aa:	2300      	movs	r3, #0
 80043ac:	9309      	str	r3, [sp, #36]	; 0x24
 80043ae:	2320      	movs	r3, #32
 80043b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80043b8:	2330      	movs	r3, #48	; 0x30
 80043ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004560 <_svfiprintf_r+0x1e8>
 80043be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043c2:	f04f 0901 	mov.w	r9, #1
 80043c6:	4623      	mov	r3, r4
 80043c8:	469a      	mov	sl, r3
 80043ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ce:	b10a      	cbz	r2, 80043d4 <_svfiprintf_r+0x5c>
 80043d0:	2a25      	cmp	r2, #37	; 0x25
 80043d2:	d1f9      	bne.n	80043c8 <_svfiprintf_r+0x50>
 80043d4:	ebba 0b04 	subs.w	fp, sl, r4
 80043d8:	d00b      	beq.n	80043f2 <_svfiprintf_r+0x7a>
 80043da:	465b      	mov	r3, fp
 80043dc:	4622      	mov	r2, r4
 80043de:	4629      	mov	r1, r5
 80043e0:	4638      	mov	r0, r7
 80043e2:	f7ff ff6f 	bl	80042c4 <__ssputs_r>
 80043e6:	3001      	adds	r0, #1
 80043e8:	f000 80a9 	beq.w	800453e <_svfiprintf_r+0x1c6>
 80043ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043ee:	445a      	add	r2, fp
 80043f0:	9209      	str	r2, [sp, #36]	; 0x24
 80043f2:	f89a 3000 	ldrb.w	r3, [sl]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80a1 	beq.w	800453e <_svfiprintf_r+0x1c6>
 80043fc:	2300      	movs	r3, #0
 80043fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004406:	f10a 0a01 	add.w	sl, sl, #1
 800440a:	9304      	str	r3, [sp, #16]
 800440c:	9307      	str	r3, [sp, #28]
 800440e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004412:	931a      	str	r3, [sp, #104]	; 0x68
 8004414:	4654      	mov	r4, sl
 8004416:	2205      	movs	r2, #5
 8004418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800441c:	4850      	ldr	r0, [pc, #320]	; (8004560 <_svfiprintf_r+0x1e8>)
 800441e:	f7fb fedf 	bl	80001e0 <memchr>
 8004422:	9a04      	ldr	r2, [sp, #16]
 8004424:	b9d8      	cbnz	r0, 800445e <_svfiprintf_r+0xe6>
 8004426:	06d0      	lsls	r0, r2, #27
 8004428:	bf44      	itt	mi
 800442a:	2320      	movmi	r3, #32
 800442c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004430:	0711      	lsls	r1, r2, #28
 8004432:	bf44      	itt	mi
 8004434:	232b      	movmi	r3, #43	; 0x2b
 8004436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800443a:	f89a 3000 	ldrb.w	r3, [sl]
 800443e:	2b2a      	cmp	r3, #42	; 0x2a
 8004440:	d015      	beq.n	800446e <_svfiprintf_r+0xf6>
 8004442:	9a07      	ldr	r2, [sp, #28]
 8004444:	4654      	mov	r4, sl
 8004446:	2000      	movs	r0, #0
 8004448:	f04f 0c0a 	mov.w	ip, #10
 800444c:	4621      	mov	r1, r4
 800444e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004452:	3b30      	subs	r3, #48	; 0x30
 8004454:	2b09      	cmp	r3, #9
 8004456:	d94d      	bls.n	80044f4 <_svfiprintf_r+0x17c>
 8004458:	b1b0      	cbz	r0, 8004488 <_svfiprintf_r+0x110>
 800445a:	9207      	str	r2, [sp, #28]
 800445c:	e014      	b.n	8004488 <_svfiprintf_r+0x110>
 800445e:	eba0 0308 	sub.w	r3, r0, r8
 8004462:	fa09 f303 	lsl.w	r3, r9, r3
 8004466:	4313      	orrs	r3, r2
 8004468:	9304      	str	r3, [sp, #16]
 800446a:	46a2      	mov	sl, r4
 800446c:	e7d2      	b.n	8004414 <_svfiprintf_r+0x9c>
 800446e:	9b03      	ldr	r3, [sp, #12]
 8004470:	1d19      	adds	r1, r3, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	9103      	str	r1, [sp, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	bfbb      	ittet	lt
 800447a:	425b      	neglt	r3, r3
 800447c:	f042 0202 	orrlt.w	r2, r2, #2
 8004480:	9307      	strge	r3, [sp, #28]
 8004482:	9307      	strlt	r3, [sp, #28]
 8004484:	bfb8      	it	lt
 8004486:	9204      	strlt	r2, [sp, #16]
 8004488:	7823      	ldrb	r3, [r4, #0]
 800448a:	2b2e      	cmp	r3, #46	; 0x2e
 800448c:	d10c      	bne.n	80044a8 <_svfiprintf_r+0x130>
 800448e:	7863      	ldrb	r3, [r4, #1]
 8004490:	2b2a      	cmp	r3, #42	; 0x2a
 8004492:	d134      	bne.n	80044fe <_svfiprintf_r+0x186>
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	1d1a      	adds	r2, r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	9203      	str	r2, [sp, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	bfb8      	it	lt
 80044a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80044a4:	3402      	adds	r4, #2
 80044a6:	9305      	str	r3, [sp, #20]
 80044a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004570 <_svfiprintf_r+0x1f8>
 80044ac:	7821      	ldrb	r1, [r4, #0]
 80044ae:	2203      	movs	r2, #3
 80044b0:	4650      	mov	r0, sl
 80044b2:	f7fb fe95 	bl	80001e0 <memchr>
 80044b6:	b138      	cbz	r0, 80044c8 <_svfiprintf_r+0x150>
 80044b8:	9b04      	ldr	r3, [sp, #16]
 80044ba:	eba0 000a 	sub.w	r0, r0, sl
 80044be:	2240      	movs	r2, #64	; 0x40
 80044c0:	4082      	lsls	r2, r0
 80044c2:	4313      	orrs	r3, r2
 80044c4:	3401      	adds	r4, #1
 80044c6:	9304      	str	r3, [sp, #16]
 80044c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044cc:	4825      	ldr	r0, [pc, #148]	; (8004564 <_svfiprintf_r+0x1ec>)
 80044ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044d2:	2206      	movs	r2, #6
 80044d4:	f7fb fe84 	bl	80001e0 <memchr>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d038      	beq.n	800454e <_svfiprintf_r+0x1d6>
 80044dc:	4b22      	ldr	r3, [pc, #136]	; (8004568 <_svfiprintf_r+0x1f0>)
 80044de:	bb1b      	cbnz	r3, 8004528 <_svfiprintf_r+0x1b0>
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	3307      	adds	r3, #7
 80044e4:	f023 0307 	bic.w	r3, r3, #7
 80044e8:	3308      	adds	r3, #8
 80044ea:	9303      	str	r3, [sp, #12]
 80044ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ee:	4433      	add	r3, r6
 80044f0:	9309      	str	r3, [sp, #36]	; 0x24
 80044f2:	e768      	b.n	80043c6 <_svfiprintf_r+0x4e>
 80044f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80044f8:	460c      	mov	r4, r1
 80044fa:	2001      	movs	r0, #1
 80044fc:	e7a6      	b.n	800444c <_svfiprintf_r+0xd4>
 80044fe:	2300      	movs	r3, #0
 8004500:	3401      	adds	r4, #1
 8004502:	9305      	str	r3, [sp, #20]
 8004504:	4619      	mov	r1, r3
 8004506:	f04f 0c0a 	mov.w	ip, #10
 800450a:	4620      	mov	r0, r4
 800450c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004510:	3a30      	subs	r2, #48	; 0x30
 8004512:	2a09      	cmp	r2, #9
 8004514:	d903      	bls.n	800451e <_svfiprintf_r+0x1a6>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0c6      	beq.n	80044a8 <_svfiprintf_r+0x130>
 800451a:	9105      	str	r1, [sp, #20]
 800451c:	e7c4      	b.n	80044a8 <_svfiprintf_r+0x130>
 800451e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004522:	4604      	mov	r4, r0
 8004524:	2301      	movs	r3, #1
 8004526:	e7f0      	b.n	800450a <_svfiprintf_r+0x192>
 8004528:	ab03      	add	r3, sp, #12
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	462a      	mov	r2, r5
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <_svfiprintf_r+0x1f4>)
 8004530:	a904      	add	r1, sp, #16
 8004532:	4638      	mov	r0, r7
 8004534:	f3af 8000 	nop.w
 8004538:	1c42      	adds	r2, r0, #1
 800453a:	4606      	mov	r6, r0
 800453c:	d1d6      	bne.n	80044ec <_svfiprintf_r+0x174>
 800453e:	89ab      	ldrh	r3, [r5, #12]
 8004540:	065b      	lsls	r3, r3, #25
 8004542:	f53f af2d 	bmi.w	80043a0 <_svfiprintf_r+0x28>
 8004546:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004548:	b01d      	add	sp, #116	; 0x74
 800454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454e:	ab03      	add	r3, sp, #12
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	462a      	mov	r2, r5
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <_svfiprintf_r+0x1f4>)
 8004556:	a904      	add	r1, sp, #16
 8004558:	4638      	mov	r0, r7
 800455a:	f000 f879 	bl	8004650 <_printf_i>
 800455e:	e7eb      	b.n	8004538 <_svfiprintf_r+0x1c0>
 8004560:	08004a04 	.word	0x08004a04
 8004564:	08004a0e 	.word	0x08004a0e
 8004568:	00000000 	.word	0x00000000
 800456c:	080042c5 	.word	0x080042c5
 8004570:	08004a0a 	.word	0x08004a0a

08004574 <_printf_common>:
 8004574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004578:	4616      	mov	r6, r2
 800457a:	4699      	mov	r9, r3
 800457c:	688a      	ldr	r2, [r1, #8]
 800457e:	690b      	ldr	r3, [r1, #16]
 8004580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004584:	4293      	cmp	r3, r2
 8004586:	bfb8      	it	lt
 8004588:	4613      	movlt	r3, r2
 800458a:	6033      	str	r3, [r6, #0]
 800458c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004590:	4607      	mov	r7, r0
 8004592:	460c      	mov	r4, r1
 8004594:	b10a      	cbz	r2, 800459a <_printf_common+0x26>
 8004596:	3301      	adds	r3, #1
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	0699      	lsls	r1, r3, #26
 800459e:	bf42      	ittt	mi
 80045a0:	6833      	ldrmi	r3, [r6, #0]
 80045a2:	3302      	addmi	r3, #2
 80045a4:	6033      	strmi	r3, [r6, #0]
 80045a6:	6825      	ldr	r5, [r4, #0]
 80045a8:	f015 0506 	ands.w	r5, r5, #6
 80045ac:	d106      	bne.n	80045bc <_printf_common+0x48>
 80045ae:	f104 0a19 	add.w	sl, r4, #25
 80045b2:	68e3      	ldr	r3, [r4, #12]
 80045b4:	6832      	ldr	r2, [r6, #0]
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	42ab      	cmp	r3, r5
 80045ba:	dc26      	bgt.n	800460a <_printf_common+0x96>
 80045bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045c0:	1e13      	subs	r3, r2, #0
 80045c2:	6822      	ldr	r2, [r4, #0]
 80045c4:	bf18      	it	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	0692      	lsls	r2, r2, #26
 80045ca:	d42b      	bmi.n	8004624 <_printf_common+0xb0>
 80045cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045d0:	4649      	mov	r1, r9
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c0      	blx	r8
 80045d6:	3001      	adds	r0, #1
 80045d8:	d01e      	beq.n	8004618 <_printf_common+0xa4>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	6922      	ldr	r2, [r4, #16]
 80045de:	f003 0306 	and.w	r3, r3, #6
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	bf02      	ittt	eq
 80045e6:	68e5      	ldreq	r5, [r4, #12]
 80045e8:	6833      	ldreq	r3, [r6, #0]
 80045ea:	1aed      	subeq	r5, r5, r3
 80045ec:	68a3      	ldr	r3, [r4, #8]
 80045ee:	bf0c      	ite	eq
 80045f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f4:	2500      	movne	r5, #0
 80045f6:	4293      	cmp	r3, r2
 80045f8:	bfc4      	itt	gt
 80045fa:	1a9b      	subgt	r3, r3, r2
 80045fc:	18ed      	addgt	r5, r5, r3
 80045fe:	2600      	movs	r6, #0
 8004600:	341a      	adds	r4, #26
 8004602:	42b5      	cmp	r5, r6
 8004604:	d11a      	bne.n	800463c <_printf_common+0xc8>
 8004606:	2000      	movs	r0, #0
 8004608:	e008      	b.n	800461c <_printf_common+0xa8>
 800460a:	2301      	movs	r3, #1
 800460c:	4652      	mov	r2, sl
 800460e:	4649      	mov	r1, r9
 8004610:	4638      	mov	r0, r7
 8004612:	47c0      	blx	r8
 8004614:	3001      	adds	r0, #1
 8004616:	d103      	bne.n	8004620 <_printf_common+0xac>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004620:	3501      	adds	r5, #1
 8004622:	e7c6      	b.n	80045b2 <_printf_common+0x3e>
 8004624:	18e1      	adds	r1, r4, r3
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	2030      	movs	r0, #48	; 0x30
 800462a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800462e:	4422      	add	r2, r4
 8004630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004638:	3302      	adds	r3, #2
 800463a:	e7c7      	b.n	80045cc <_printf_common+0x58>
 800463c:	2301      	movs	r3, #1
 800463e:	4622      	mov	r2, r4
 8004640:	4649      	mov	r1, r9
 8004642:	4638      	mov	r0, r7
 8004644:	47c0      	blx	r8
 8004646:	3001      	adds	r0, #1
 8004648:	d0e6      	beq.n	8004618 <_printf_common+0xa4>
 800464a:	3601      	adds	r6, #1
 800464c:	e7d9      	b.n	8004602 <_printf_common+0x8e>
	...

08004650 <_printf_i>:
 8004650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	7e0f      	ldrb	r7, [r1, #24]
 8004656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004658:	2f78      	cmp	r7, #120	; 0x78
 800465a:	4691      	mov	r9, r2
 800465c:	4680      	mov	r8, r0
 800465e:	460c      	mov	r4, r1
 8004660:	469a      	mov	sl, r3
 8004662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004666:	d807      	bhi.n	8004678 <_printf_i+0x28>
 8004668:	2f62      	cmp	r7, #98	; 0x62
 800466a:	d80a      	bhi.n	8004682 <_printf_i+0x32>
 800466c:	2f00      	cmp	r7, #0
 800466e:	f000 80d4 	beq.w	800481a <_printf_i+0x1ca>
 8004672:	2f58      	cmp	r7, #88	; 0x58
 8004674:	f000 80c0 	beq.w	80047f8 <_printf_i+0x1a8>
 8004678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800467c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004680:	e03a      	b.n	80046f8 <_printf_i+0xa8>
 8004682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004686:	2b15      	cmp	r3, #21
 8004688:	d8f6      	bhi.n	8004678 <_printf_i+0x28>
 800468a:	a101      	add	r1, pc, #4	; (adr r1, 8004690 <_printf_i+0x40>)
 800468c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004690:	080046e9 	.word	0x080046e9
 8004694:	080046fd 	.word	0x080046fd
 8004698:	08004679 	.word	0x08004679
 800469c:	08004679 	.word	0x08004679
 80046a0:	08004679 	.word	0x08004679
 80046a4:	08004679 	.word	0x08004679
 80046a8:	080046fd 	.word	0x080046fd
 80046ac:	08004679 	.word	0x08004679
 80046b0:	08004679 	.word	0x08004679
 80046b4:	08004679 	.word	0x08004679
 80046b8:	08004679 	.word	0x08004679
 80046bc:	08004801 	.word	0x08004801
 80046c0:	08004729 	.word	0x08004729
 80046c4:	080047bb 	.word	0x080047bb
 80046c8:	08004679 	.word	0x08004679
 80046cc:	08004679 	.word	0x08004679
 80046d0:	08004823 	.word	0x08004823
 80046d4:	08004679 	.word	0x08004679
 80046d8:	08004729 	.word	0x08004729
 80046dc:	08004679 	.word	0x08004679
 80046e0:	08004679 	.word	0x08004679
 80046e4:	080047c3 	.word	0x080047c3
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	602a      	str	r2, [r5, #0]
 80046f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f8:	2301      	movs	r3, #1
 80046fa:	e09f      	b.n	800483c <_printf_i+0x1ec>
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	682b      	ldr	r3, [r5, #0]
 8004700:	0607      	lsls	r7, r0, #24
 8004702:	f103 0104 	add.w	r1, r3, #4
 8004706:	6029      	str	r1, [r5, #0]
 8004708:	d501      	bpl.n	800470e <_printf_i+0xbe>
 800470a:	681e      	ldr	r6, [r3, #0]
 800470c:	e003      	b.n	8004716 <_printf_i+0xc6>
 800470e:	0646      	lsls	r6, r0, #25
 8004710:	d5fb      	bpl.n	800470a <_printf_i+0xba>
 8004712:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004716:	2e00      	cmp	r6, #0
 8004718:	da03      	bge.n	8004722 <_printf_i+0xd2>
 800471a:	232d      	movs	r3, #45	; 0x2d
 800471c:	4276      	negs	r6, r6
 800471e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004722:	485a      	ldr	r0, [pc, #360]	; (800488c <_printf_i+0x23c>)
 8004724:	230a      	movs	r3, #10
 8004726:	e012      	b.n	800474e <_printf_i+0xfe>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	1d19      	adds	r1, r3, #4
 800472e:	6029      	str	r1, [r5, #0]
 8004730:	0605      	lsls	r5, r0, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0xe8>
 8004734:	681e      	ldr	r6, [r3, #0]
 8004736:	e002      	b.n	800473e <_printf_i+0xee>
 8004738:	0641      	lsls	r1, r0, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0xe4>
 800473c:	881e      	ldrh	r6, [r3, #0]
 800473e:	4853      	ldr	r0, [pc, #332]	; (800488c <_printf_i+0x23c>)
 8004740:	2f6f      	cmp	r7, #111	; 0x6f
 8004742:	bf0c      	ite	eq
 8004744:	2308      	moveq	r3, #8
 8004746:	230a      	movne	r3, #10
 8004748:	2100      	movs	r1, #0
 800474a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800474e:	6865      	ldr	r5, [r4, #4]
 8004750:	60a5      	str	r5, [r4, #8]
 8004752:	2d00      	cmp	r5, #0
 8004754:	bfa2      	ittt	ge
 8004756:	6821      	ldrge	r1, [r4, #0]
 8004758:	f021 0104 	bicge.w	r1, r1, #4
 800475c:	6021      	strge	r1, [r4, #0]
 800475e:	b90e      	cbnz	r6, 8004764 <_printf_i+0x114>
 8004760:	2d00      	cmp	r5, #0
 8004762:	d04b      	beq.n	80047fc <_printf_i+0x1ac>
 8004764:	4615      	mov	r5, r2
 8004766:	fbb6 f1f3 	udiv	r1, r6, r3
 800476a:	fb03 6711 	mls	r7, r3, r1, r6
 800476e:	5dc7      	ldrb	r7, [r0, r7]
 8004770:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004774:	4637      	mov	r7, r6
 8004776:	42bb      	cmp	r3, r7
 8004778:	460e      	mov	r6, r1
 800477a:	d9f4      	bls.n	8004766 <_printf_i+0x116>
 800477c:	2b08      	cmp	r3, #8
 800477e:	d10b      	bne.n	8004798 <_printf_i+0x148>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	07de      	lsls	r6, r3, #31
 8004784:	d508      	bpl.n	8004798 <_printf_i+0x148>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	6861      	ldr	r1, [r4, #4]
 800478a:	4299      	cmp	r1, r3
 800478c:	bfde      	ittt	le
 800478e:	2330      	movle	r3, #48	; 0x30
 8004790:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004794:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004798:	1b52      	subs	r2, r2, r5
 800479a:	6122      	str	r2, [r4, #16]
 800479c:	f8cd a000 	str.w	sl, [sp]
 80047a0:	464b      	mov	r3, r9
 80047a2:	aa03      	add	r2, sp, #12
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff fee4 	bl	8004574 <_printf_common>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d14a      	bne.n	8004846 <_printf_i+0x1f6>
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295
 80047b4:	b004      	add	sp, #16
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	f043 0320 	orr.w	r3, r3, #32
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	4833      	ldr	r0, [pc, #204]	; (8004890 <_printf_i+0x240>)
 80047c4:	2778      	movs	r7, #120	; 0x78
 80047c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	6829      	ldr	r1, [r5, #0]
 80047ce:	061f      	lsls	r7, r3, #24
 80047d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80047d4:	d402      	bmi.n	80047dc <_printf_i+0x18c>
 80047d6:	065f      	lsls	r7, r3, #25
 80047d8:	bf48      	it	mi
 80047da:	b2b6      	uxthmi	r6, r6
 80047dc:	07df      	lsls	r7, r3, #31
 80047de:	bf48      	it	mi
 80047e0:	f043 0320 	orrmi.w	r3, r3, #32
 80047e4:	6029      	str	r1, [r5, #0]
 80047e6:	bf48      	it	mi
 80047e8:	6023      	strmi	r3, [r4, #0]
 80047ea:	b91e      	cbnz	r6, 80047f4 <_printf_i+0x1a4>
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	f023 0320 	bic.w	r3, r3, #32
 80047f2:	6023      	str	r3, [r4, #0]
 80047f4:	2310      	movs	r3, #16
 80047f6:	e7a7      	b.n	8004748 <_printf_i+0xf8>
 80047f8:	4824      	ldr	r0, [pc, #144]	; (800488c <_printf_i+0x23c>)
 80047fa:	e7e4      	b.n	80047c6 <_printf_i+0x176>
 80047fc:	4615      	mov	r5, r2
 80047fe:	e7bd      	b.n	800477c <_printf_i+0x12c>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	6826      	ldr	r6, [r4, #0]
 8004804:	6961      	ldr	r1, [r4, #20]
 8004806:	1d18      	adds	r0, r3, #4
 8004808:	6028      	str	r0, [r5, #0]
 800480a:	0635      	lsls	r5, r6, #24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	d501      	bpl.n	8004814 <_printf_i+0x1c4>
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	e002      	b.n	800481a <_printf_i+0x1ca>
 8004814:	0670      	lsls	r0, r6, #25
 8004816:	d5fb      	bpl.n	8004810 <_printf_i+0x1c0>
 8004818:	8019      	strh	r1, [r3, #0]
 800481a:	2300      	movs	r3, #0
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	4615      	mov	r5, r2
 8004820:	e7bc      	b.n	800479c <_printf_i+0x14c>
 8004822:	682b      	ldr	r3, [r5, #0]
 8004824:	1d1a      	adds	r2, r3, #4
 8004826:	602a      	str	r2, [r5, #0]
 8004828:	681d      	ldr	r5, [r3, #0]
 800482a:	6862      	ldr	r2, [r4, #4]
 800482c:	2100      	movs	r1, #0
 800482e:	4628      	mov	r0, r5
 8004830:	f7fb fcd6 	bl	80001e0 <memchr>
 8004834:	b108      	cbz	r0, 800483a <_printf_i+0x1ea>
 8004836:	1b40      	subs	r0, r0, r5
 8004838:	6060      	str	r0, [r4, #4]
 800483a:	6863      	ldr	r3, [r4, #4]
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	2300      	movs	r3, #0
 8004840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004844:	e7aa      	b.n	800479c <_printf_i+0x14c>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	462a      	mov	r2, r5
 800484a:	4649      	mov	r1, r9
 800484c:	4640      	mov	r0, r8
 800484e:	47d0      	blx	sl
 8004850:	3001      	adds	r0, #1
 8004852:	d0ad      	beq.n	80047b0 <_printf_i+0x160>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	079b      	lsls	r3, r3, #30
 8004858:	d413      	bmi.n	8004882 <_printf_i+0x232>
 800485a:	68e0      	ldr	r0, [r4, #12]
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	4298      	cmp	r0, r3
 8004860:	bfb8      	it	lt
 8004862:	4618      	movlt	r0, r3
 8004864:	e7a6      	b.n	80047b4 <_printf_i+0x164>
 8004866:	2301      	movs	r3, #1
 8004868:	4632      	mov	r2, r6
 800486a:	4649      	mov	r1, r9
 800486c:	4640      	mov	r0, r8
 800486e:	47d0      	blx	sl
 8004870:	3001      	adds	r0, #1
 8004872:	d09d      	beq.n	80047b0 <_printf_i+0x160>
 8004874:	3501      	adds	r5, #1
 8004876:	68e3      	ldr	r3, [r4, #12]
 8004878:	9903      	ldr	r1, [sp, #12]
 800487a:	1a5b      	subs	r3, r3, r1
 800487c:	42ab      	cmp	r3, r5
 800487e:	dcf2      	bgt.n	8004866 <_printf_i+0x216>
 8004880:	e7eb      	b.n	800485a <_printf_i+0x20a>
 8004882:	2500      	movs	r5, #0
 8004884:	f104 0619 	add.w	r6, r4, #25
 8004888:	e7f5      	b.n	8004876 <_printf_i+0x226>
 800488a:	bf00      	nop
 800488c:	08004a15 	.word	0x08004a15
 8004890:	08004a26 	.word	0x08004a26

08004894 <memmove>:
 8004894:	4288      	cmp	r0, r1
 8004896:	b510      	push	{r4, lr}
 8004898:	eb01 0402 	add.w	r4, r1, r2
 800489c:	d902      	bls.n	80048a4 <memmove+0x10>
 800489e:	4284      	cmp	r4, r0
 80048a0:	4623      	mov	r3, r4
 80048a2:	d807      	bhi.n	80048b4 <memmove+0x20>
 80048a4:	1e43      	subs	r3, r0, #1
 80048a6:	42a1      	cmp	r1, r4
 80048a8:	d008      	beq.n	80048bc <memmove+0x28>
 80048aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048b2:	e7f8      	b.n	80048a6 <memmove+0x12>
 80048b4:	4402      	add	r2, r0
 80048b6:	4601      	mov	r1, r0
 80048b8:	428a      	cmp	r2, r1
 80048ba:	d100      	bne.n	80048be <memmove+0x2a>
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048c6:	e7f7      	b.n	80048b8 <memmove+0x24>

080048c8 <_sbrk_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d06      	ldr	r5, [pc, #24]	; (80048e4 <_sbrk_r+0x1c>)
 80048cc:	2300      	movs	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	f7fc fdc8 	bl	8001468 <_sbrk>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_sbrk_r+0x1a>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_sbrk_r+0x1a>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	200002a8 	.word	0x200002a8

080048e8 <memcpy>:
 80048e8:	440a      	add	r2, r1
 80048ea:	4291      	cmp	r1, r2
 80048ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80048f0:	d100      	bne.n	80048f4 <memcpy+0xc>
 80048f2:	4770      	bx	lr
 80048f4:	b510      	push	{r4, lr}
 80048f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048fe:	4291      	cmp	r1, r2
 8004900:	d1f9      	bne.n	80048f6 <memcpy+0xe>
 8004902:	bd10      	pop	{r4, pc}

08004904 <_realloc_r>:
 8004904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	4680      	mov	r8, r0
 800490a:	4614      	mov	r4, r2
 800490c:	460e      	mov	r6, r1
 800490e:	b921      	cbnz	r1, 800491a <_realloc_r+0x16>
 8004910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004914:	4611      	mov	r1, r2
 8004916:	f7ff bc49 	b.w	80041ac <_malloc_r>
 800491a:	b92a      	cbnz	r2, 8004928 <_realloc_r+0x24>
 800491c:	f7ff fbda 	bl	80040d4 <_free_r>
 8004920:	4625      	mov	r5, r4
 8004922:	4628      	mov	r0, r5
 8004924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004928:	f000 f81b 	bl	8004962 <_malloc_usable_size_r>
 800492c:	4284      	cmp	r4, r0
 800492e:	4607      	mov	r7, r0
 8004930:	d802      	bhi.n	8004938 <_realloc_r+0x34>
 8004932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004936:	d812      	bhi.n	800495e <_realloc_r+0x5a>
 8004938:	4621      	mov	r1, r4
 800493a:	4640      	mov	r0, r8
 800493c:	f7ff fc36 	bl	80041ac <_malloc_r>
 8004940:	4605      	mov	r5, r0
 8004942:	2800      	cmp	r0, #0
 8004944:	d0ed      	beq.n	8004922 <_realloc_r+0x1e>
 8004946:	42bc      	cmp	r4, r7
 8004948:	4622      	mov	r2, r4
 800494a:	4631      	mov	r1, r6
 800494c:	bf28      	it	cs
 800494e:	463a      	movcs	r2, r7
 8004950:	f7ff ffca 	bl	80048e8 <memcpy>
 8004954:	4631      	mov	r1, r6
 8004956:	4640      	mov	r0, r8
 8004958:	f7ff fbbc 	bl	80040d4 <_free_r>
 800495c:	e7e1      	b.n	8004922 <_realloc_r+0x1e>
 800495e:	4635      	mov	r5, r6
 8004960:	e7df      	b.n	8004922 <_realloc_r+0x1e>

08004962 <_malloc_usable_size_r>:
 8004962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004966:	1f18      	subs	r0, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	bfbc      	itt	lt
 800496c:	580b      	ldrlt	r3, [r1, r0]
 800496e:	18c0      	addlt	r0, r0, r3
 8004970:	4770      	bx	lr
	...

08004974 <_init>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	bf00      	nop
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr

08004980 <_fini>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr
