
Nucleo-Test-Ground-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000265c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800282c  0800282c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800282c  0800282c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800282c  0800282c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002840  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002840  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b00  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001413  00000000  00000000  00026b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  00027f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005aa  00000000  00000000  00028728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001888a  00000000  00000000  00028cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008346  00000000  00000000  0004155c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000995a3  00000000  00000000  000498a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d98  00000000  00000000  000e2e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  000e4be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080027d0 	.word	0x080027d0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080027d0 	.word	0x080027d0

080001cc <main>:
//const uint8_t READ_DATALEN_ADDR = 0x61;
//const uint8_t WRITE_CHECKSUM_ADDR = 0xE0;
//const uint8_t WRITE_DATALEN_ADDR = 0xE1;

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b09a      	sub	sp, #104	; 0x68
 80001d0:	af00      	add	r7, sp, #0
    // HAL initialization
    HAL_Init();
 80001d2:	f000 fcd2 	bl	8000b7a <HAL_Init>

    // System clock configuration
    SystemClock_Config();
 80001d6:	f000 f891 	bl	80002fc <SystemClock_Config>

    // Initialize GPIO and SPI
    GPIO_Init();
 80001da:	f000 f8c7 	bl	800036c <GPIO_Init>
    SPI1_Init();
 80001de:	f000 f923 	bl	8000428 <SPI1_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off heartbeat
 80001e2:	2200      	movs	r2, #0
 80001e4:	2120      	movs	r1, #32
 80001e6:	4844      	ldr	r0, [pc, #272]	; (80002f8 <main+0x12c>)
 80001e8:	f000 ffb8 	bl	800115c <HAL_GPIO_WritePin>

    // Blank array to store data from any commands that receive data
    uint8_t readData[32] = {0};
 80001ec:	2300      	movs	r3, #0
 80001ee:	647b      	str	r3, [r7, #68]	; 0x44
 80001f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
 8000200:	615a      	str	r2, [r3, #20]
 8000202:	619a      	str	r2, [r3, #24]

    uint16_t cellVolt = 0;
 8000204:	2300      	movs	r3, #0
 8000206:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    uint16_t cellVolts[17] = {0};
 800020a:	f107 0320 	add.w	r3, r7, #32
 800020e:	2222      	movs	r2, #34	; 0x22
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fab0 	bl	8002778 <memset>
    uint8_t cmdAddr = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

    uint8_t writeData[32] = {0};
 800021e:	2300      	movs	r3, #0
 8000220:	603b      	str	r3, [r7, #0]
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	619a      	str	r2, [r3, #24]

    // Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 8000234:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000238:	2202      	movs	r2, #2
 800023a:	4619      	mov	r1, r3
 800023c:	2012      	movs	r0, #18
 800023e:	f000 f96f 	bl	8000520 <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 8000242:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000246:	2202      	movs	r2, #2
 8000248:	4619      	mov	r1, r3
 800024a:	2057      	movs	r0, #87	; 0x57
 800024c:	f000 f9fa 	bl	8000644 <SubCmdReadData>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000250:	2120      	movs	r1, #32
 8000252:	4829      	ldr	r0, [pc, #164]	; (80002f8 <main+0x12c>)
 8000254:	f000 ff9a 	bl	800118c <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000258:	20fa      	movs	r0, #250	; 0xfa
 800025a:	f000 fd03 	bl	8000c64 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800025e:	2120      	movs	r1, #32
 8000260:	4825      	ldr	r0, [pc, #148]	; (80002f8 <main+0x12c>)
 8000262:	f000 ff93 	bl	800118c <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 8000266:	f240 20ee 	movw	r0, #750	; 0x2ee
 800026a:	f000 fcfb 	bl	8000c64 <HAL_Delay>

	// Disable SLEEP mode and enter FET_TEST mode if not already in FET_TEST
	SubCmdNoData(0x009A);
 800026e:	209a      	movs	r0, #154	; 0x9a
 8000270:	f000 f9a0 	bl	80005b4 <SubCmdNoData>
//	SubCmdNoData(0x0022);
	if (readData[0] & (1 << 4)) SubCmdNoData(0x0022);
 8000274:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	2b00      	cmp	r3, #0
 800027e:	d002      	beq.n	8000286 <main+0xba>
 8000280:	2022      	movs	r0, #34	; 0x22
 8000282:	f000 f997 	bl	80005b4 <SubCmdNoData>

	// Read battery status register and manufacturing status register
	DirectCmdRead(0x12, readData, 2);
 8000286:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800028a:	2202      	movs	r2, #2
 800028c:	4619      	mov	r1, r3
 800028e:	2012      	movs	r0, #18
 8000290:	f000 f946 	bl	8000520 <DirectCmdRead>
	SubCmdReadData(0x0057, readData, 2);
 8000294:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000298:	2202      	movs	r2, #2
 800029a:	4619      	mov	r1, r3
 800029c:	2057      	movs	r0, #87	; 0x57
 800029e:	f000 f9d1 	bl	8000644 <SubCmdReadData>

	// Enter CONFIG_UPDATE mode, disable body diode protection, then exit CONFIG_UPDATE mode
	SubCmdNoData(0x0090);
 80002a2:	2090      	movs	r0, #144	; 0x90
 80002a4:	f000 f986 	bl	80005b4 <SubCmdNoData>
	writeData[0] = 0x0C;
 80002a8:	230c      	movs	r3, #12
 80002aa:	703b      	strb	r3, [r7, #0]
	RAMRegisterWrite(SET_FET_OPTIONS, writeData, 1);
 80002ac:	463b      	mov	r3, r7
 80002ae:	2201      	movs	r2, #1
 80002b0:	4619      	mov	r1, r3
 80002b2:	f249 3008 	movw	r0, #37640	; 0x9308
 80002b6:	f000 fa41 	bl	800073c <RAMRegisterWrite>
	SubCmdNoData(0x0092);
 80002ba:	2092      	movs	r0, #146	; 0x92
 80002bc:	f000 f97a 	bl	80005b4 <SubCmdNoData>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80002c0:	2120      	movs	r1, #32
 80002c2:	480d      	ldr	r0, [pc, #52]	; (80002f8 <main+0x12c>)
 80002c4:	f000 ff62 	bl	800118c <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80002c8:	20fa      	movs	r0, #250	; 0xfa
 80002ca:	f000 fccb 	bl	8000c64 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80002ce:	2120      	movs	r1, #32
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <main+0x12c>)
 80002d2:	f000 ff5b 	bl	800118c <HAL_GPIO_TogglePin>
	HAL_Delay(750);
 80002d6:	f240 20ee 	movw	r0, #750	; 0x2ee
 80002da:	f000 fcc3 	bl	8000c64 <HAL_Delay>

    while (1)
    {
    	// Toggle the DSG FET every 4 seconds
    	HAL_Delay(4000);
 80002de:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80002e2:	f000 fcbf 	bl	8000c64 <HAL_Delay>
    	SubCmdNoData(0x0020);
 80002e6:	2020      	movs	r0, #32
 80002e8:	f000 f964 	bl	80005b4 <SubCmdNoData>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80002ec:	2120      	movs	r1, #32
 80002ee:	4802      	ldr	r0, [pc, #8]	; (80002f8 <main+0x12c>)
 80002f0:	f000 ff4c 	bl	800118c <HAL_GPIO_TogglePin>
    	HAL_Delay(4000);
 80002f4:	e7f3      	b.n	80002de <main+0x112>
 80002f6:	bf00      	nop
 80002f8:	48000400 	.word	0x48000400

080002fc <SystemClock_Config>:
//    	}
    }
}

void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b096      	sub	sp, #88	; 0x58
 8000300:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0314 	add.w	r3, r7, #20
 8000306:	2244      	movs	r2, #68	; 0x44
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fa34 	bl	8002778 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000322:	f000 ff5b 	bl	80011dc <HAL_PWREx_ControlVoltageScaling>

    // Initializes the RCC Oscillators according to the specified parameters
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000326:	2310      	movs	r3, #16
 8000328:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800032e:	2300      	movs	r3, #0
 8000330:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000332:	2360      	movs	r3, #96	; 0x60
 8000334:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000336:	2300      	movs	r3, #0
 8000338:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800033a:	f107 0314 	add.w	r3, r7, #20
 800033e:	4618      	mov	r0, r3
 8000340:	f000 ffa2 	bl	8001288 <HAL_RCC_OscConfig>

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000344:	230f      	movs	r3, #15
 8000346:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000358:	463b      	mov	r3, r7
 800035a:	2100      	movs	r1, #0
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fbf5 	bl	8001b4c <HAL_RCC_ClockConfig>
}
 8000362:	bf00      	nop
 8000364:	3758      	adds	r7, #88	; 0x58
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <GPIO_Init>:

void GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <GPIO_Init+0xb4>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	4a2a      	ldr	r2, [pc, #168]	; (8000420 <GPIO_Init+0xb4>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037e:	4b28      	ldr	r3, [pc, #160]	; (8000420 <GPIO_Init+0xb4>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800038a:	4b25      	ldr	r3, [pc, #148]	; (8000420 <GPIO_Init+0xb4>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4a24      	ldr	r2, [pc, #144]	; (8000420 <GPIO_Init+0xb4>)
 8000390:	f043 0302 	orr.w	r3, r3, #2
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000396:	4b22      	ldr	r3, [pc, #136]	; (8000420 <GPIO_Init+0xb4>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	f003 0302 	and.w	r3, r3, #2
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 030c 	add.w	r3, r7, #12
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

    // Configure PB0 as SPI1_NSS (software controlled, open-drain)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003b2:	2301      	movs	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80003b6:	2311      	movs	r3, #17
 80003b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4619      	mov	r1, r3
 80003c8:	4816      	ldr	r0, [pc, #88]	; (8000424 <GPIO_Init+0xb8>)
 80003ca:	f000 fd55 	bl	8000e78 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Set NSS high
 80003ce:	2201      	movs	r2, #1
 80003d0:	2101      	movs	r1, #1
 80003d2:	4814      	ldr	r0, [pc, #80]	; (8000424 <GPIO_Init+0xb8>)
 80003d4:	f000 fec2 	bl	800115c <HAL_GPIO_WritePin>

    // Configure PB5 as a GPIO (push-pull, no pull-up)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003d8:	2320      	movs	r3, #32
 80003da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
 80003de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e8:	f107 030c 	add.w	r3, r7, #12
 80003ec:	4619      	mov	r1, r3
 80003ee:	480d      	ldr	r0, [pc, #52]	; (8000424 <GPIO_Init+0xb8>)
 80003f0:	f000 fd42 	bl	8000e78 <HAL_GPIO_Init>

    // Configure PA5 (SPI1_SCK), PA6 (SPI1_MISO), PA7 (SPI1_MOSI)
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80003f4:	23e0      	movs	r3, #224	; 0xe0
 80003f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f8:	2302      	movs	r3, #2
 80003fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000400:	2302      	movs	r3, #2
 8000402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000404:	2305      	movs	r3, #5
 8000406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 030c 	add.w	r3, r7, #12
 800040c:	4619      	mov	r1, r3
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f000 fd31 	bl	8000e78 <HAL_GPIO_Init>
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	48000400 	.word	0x48000400

08000428 <SPI1_Init>:

void SPI1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    __HAL_RCC_SPI1_CLK_ENABLE();
 800042e:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <SPI1_Init+0x84>)
 8000430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000432:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <SPI1_Init+0x84>)
 8000434:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000438:	6613      	str	r3, [r2, #96]	; 0x60
 800043a:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <SPI1_Init+0x84>)
 800043c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

    // Configure SPI1
    hspi1.Instance = SPI1;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <SPI1_Init+0x88>)
 8000448:	4a1a      	ldr	r2, [pc, #104]	; (80004b4 <SPI1_Init+0x8c>)
 800044a:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <SPI1_Init+0x88>)
 800044e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000452:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <SPI1_Init+0x88>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <SPI1_Init+0x88>)
 800045c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000460:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <SPI1_Init+0x88>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SPI1_Init+0x88>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <SPI1_Init+0x88>)
 8000470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000474:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <SPI1_Init+0x88>)
 8000478:	2230      	movs	r2, #48	; 0x30
 800047a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <SPI1_Init+0x88>)
 800047e:	2200      	movs	r2, #0
 8000480:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <SPI1_Init+0x88>)
 8000484:	2200      	movs	r2, #0
 8000486:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <SPI1_Init+0x88>)
 800048a:	2200      	movs	r2, #0
 800048c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <SPI1_Init+0x88>)
 8000490:	2207      	movs	r2, #7
 8000492:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000494:	4806      	ldr	r0, [pc, #24]	; (80004b0 <SPI1_Init+0x88>)
 8000496:	f001 fd45 	bl	8001f24 <HAL_SPI_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d000      	beq.n	80004a2 <SPI1_Init+0x7a>
    {
        // Initialization error
        while (1);
 80004a0:	e7fe      	b.n	80004a0 <SPI1_Init+0x78>
    }
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	20000028 	.word	0x20000028
 80004b4:	40013000 	.word	0x40013000

080004b8 <crc8>:

uint8_t crc8(uint8_t *data, size_t len)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
    while (len--)
 80004c6:	e01e      	b.n	8000506 <crc8+0x4e>
    {
        crc ^= *data++;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	781a      	ldrb	r2, [r3, #0]
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	4053      	eors	r3, r2
 80004d4:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 80004d6:	2300      	movs	r3, #0
 80004d8:	73bb      	strb	r3, [r7, #14]
 80004da:	e011      	b.n	8000500 <crc8+0x48>
        {
            if (crc & 0x80)
 80004dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	da07      	bge.n	80004f4 <crc8+0x3c>
                crc = (crc << 1) ^ 0x07; // Polynomial 0x07
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	f083 0307 	eor.w	r3, r3, #7
 80004ee:	b25b      	sxtb	r3, r3
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e002      	b.n	80004fa <crc8+0x42>
            else
                crc <<= 1;
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; ++i)
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	3301      	adds	r3, #1
 80004fe:	73bb      	strb	r3, [r7, #14]
 8000500:	7bbb      	ldrb	r3, [r7, #14]
 8000502:	2b07      	cmp	r3, #7
 8000504:	d9ea      	bls.n	80004dc <crc8+0x24>
    while (len--)
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	603a      	str	r2, [r7, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1db      	bne.n	80004c8 <crc8+0x10>
        }
    }
    return crc;
 8000510:	7bfb      	ldrb	r3, [r7, #15]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <DirectCmdRead>:
 * @param cmd The address byte for the command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE. The function automatically increments the address byte based on this value
 */
void DirectCmdRead(uint8_t cmd, uint8_t *returnData, uint8_t len)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <DirectCmdRead+0x90>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	823b      	strh	r3, [r7, #16]
 8000536:	2300      	movs	r3, #0
 8000538:	74bb      	strb	r3, [r7, #18]
	uint8_t txData[3] = {0};
 800053a:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <DirectCmdRead+0x90>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	81bb      	strh	r3, [r7, #12]
 8000540:	2300      	movs	r3, #0
 8000542:	73bb      	strb	r3, [r7, #14]
	uint8_t fullCmd[] = { cmd, 0xFF }; // Data byte doesn't matter since it's a read, just use 0xFF
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	723b      	strb	r3, [r7, #8]
 8000548:	23ff      	movs	r3, #255	; 0xff
 800054a:	727b      	strb	r3, [r7, #9]
	uint8_t crcLower = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	74fb      	strb	r3, [r7, #19]
//	bool commReceived = false;

	// Increment the command address based on the data length given
	for (int i = 0; i < len; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	e023      	b.n	800059e <DirectCmdRead+0x7e>
	{
		fullCmd[0] = cmd + i; // Increment the address
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4413      	add	r3, r2
 800055e:	b2db      	uxtb	r3, r3
 8000560:	723b      	strb	r3, [r7, #8]
		crcLower = crc8(fullCmd, 2); // Recalculate the CRC
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	2102      	movs	r1, #2
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffa5 	bl	80004b8 <crc8>
 800056e:	4603      	mov	r3, r0
 8000570:	74fb      	strb	r3, [r7, #19]
		// Construct the TX data for the SPI transaction
		txData[0] = fullCmd[0];
 8000572:	7a3b      	ldrb	r3, [r7, #8]
 8000574:	733b      	strb	r3, [r7, #12]
		txData[1] = fullCmd[1];
 8000576:	7a7b      	ldrb	r3, [r7, #9]
 8000578:	737b      	strb	r3, [r7, #13]
		txData[2] = crcLower;
 800057a:	7cfb      	ldrb	r3, [r7, #19]
 800057c:	73bb      	strb	r3, [r7, #14]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 800057e:	f107 0110 	add.w	r1, r7, #16
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2203      	movs	r2, #3
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f9ab 	bl	80008e4 <AFETransmitReadCmd>
		returnData[i] = rxData[1]; // Save data byte received from last transaction
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	4413      	add	r3, r2
 8000594:	7c7a      	ldrb	r2, [r7, #17]
 8000596:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	dbd7      	blt.n	8000556 <DirectCmdRead+0x36>
	}
}
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	080027e8 	.word	0x080027e8

080005b4 <SubCmdNoData>:
/**
 * Sends a sub-command to the AFE, no data is written or read
 * @param cmd The upper and lower address bytes for the sub-command
 */
void SubCmdNoData(uint16_t cmd)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
	uint8_t rxData[3] = {0};
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <SubCmdNoData+0x8c>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	833b      	strh	r3, [r7, #24]
 80005c4:	2300      	movs	r3, #0
 80005c6:	76bb      	strb	r3, [r7, #26]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 80005c8:	23be      	movs	r3, #190	; 0xbe
 80005ca:	753b      	strb	r3, [r7, #20]
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	757b      	strb	r3, [r7, #21]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2102      	movs	r1, #2
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff6d 	bl	80004b8 <crc8>
 80005de:	4603      	mov	r3, r0
 80005e0:	77fb      	strb	r3, [r7, #31]
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 80005e2:	23bf      	movs	r3, #191	; 0xbf
 80005e4:	743b      	strb	r3, [r7, #16]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	747b      	strb	r3, [r7, #17]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff5e 	bl	80004b8 <crc8>
 80005fc:	4603      	mov	r3, r0
 80005fe:	77bb      	strb	r3, [r7, #30]

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 8000600:	7d3b      	ldrb	r3, [r7, #20]
 8000602:	733b      	strb	r3, [r7, #12]
 8000604:	7d7b      	ldrb	r3, [r7, #21]
 8000606:	737b      	strb	r3, [r7, #13]
 8000608:	7ffb      	ldrb	r3, [r7, #31]
 800060a:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 800060c:	f107 0118 	add.w	r1, r7, #24
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2203      	movs	r2, #3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f99c 	bl	8000954 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 800061c:	7c3b      	ldrb	r3, [r7, #16]
 800061e:	733b      	strb	r3, [r7, #12]
	txData[1] = commandUpperAddr[1];
 8000620:	7c7b      	ldrb	r3, [r7, #17]
 8000622:	737b      	strb	r3, [r7, #13]
	txData[2] = crcUpper;
 8000624:	7fbb      	ldrb	r3, [r7, #30]
 8000626:	73bb      	strb	r3, [r7, #14]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000628:	f107 0118 	add.w	r1, r7, #24
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2203      	movs	r2, #3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f98e 	bl	8000954 <AFETransmitWriteCmd>
}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	080027e8 	.word	0x080027e8

08000644 <SubCmdReadData>:
 * @param cmd The upper and lower address bytes for the sub-command
 * @param returnData Pointer to the 8-bit integer array for storing the read data
 * @param len Number of bytes to read from the AFE's 32-byte data buffer
 */
void SubCmdReadData(uint16_t cmd, uint8_t *returnData, uint8_t len)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	80fb      	strh	r3, [r7, #6]
 8000650:	4613      	mov	r3, r2
 8000652:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <SubCmdReadData+0xf4>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	83bb      	strh	r3, [r7, #28]
 800065a:	2300      	movs	r3, #0
 800065c:	77bb      	strb	r3, [r7, #30]
	uint8_t commandLowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(cmd & 0xFF)) };
 800065e:	23be      	movs	r3, #190	; 0xbe
 8000660:	763b      	strb	r3, [r7, #24]
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(commandLowerAddr, 2);
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff22 	bl	80004b8 <crc8>
 8000674:	4603      	mov	r3, r0
 8000676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t commandUpperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(cmd >> 8)) };
 800067a:	23bf      	movs	r3, #191	; 0xbf
 800067c:	753b      	strb	r3, [r7, #20]
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	b29b      	uxth	r3, r3
 8000684:	b2db      	uxtb	r3, r3
 8000686:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(commandUpperAddr, 2);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2102      	movs	r1, #2
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff12 	bl	80004b8 <crc8>
 8000694:	4603      	mov	r3, r0
 8000696:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the command until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { commandLowerAddr[0], commandLowerAddr[1], crcLower };
 800069a:	7e3b      	ldrb	r3, [r7, #24]
 800069c:	743b      	strb	r3, [r7, #16]
 800069e:	7e7b      	ldrb	r3, [r7, #25]
 80006a0:	747b      	strb	r3, [r7, #17]
 80006a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006a6:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 80006a8:	f107 011c 	add.w	r1, r7, #28
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	2203      	movs	r2, #3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f94e 	bl	8000954 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = commandUpperAddr[0];
 80006b8:	7d3b      	ldrb	r3, [r7, #20]
 80006ba:	743b      	strb	r3, [r7, #16]
	txData[1] = commandUpperAddr[1];
 80006bc:	7d7b      	ldrb	r3, [r7, #21]
 80006be:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 80006c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006c4:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 80006c6:	f107 011c 	add.w	r1, r7, #28
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2203      	movs	r2, #3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f93f 	bl	8000954 <AFETransmitWriteCmd>

	// Read each byte based on the data length given in parameters
	uint8_t readData[2] = {0};
 80006d6:	2300      	movs	r3, #0
 80006d8:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++) {
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
 80006de:	e022      	b.n	8000726 <SubCmdReadData+0xe2>
		readData[0] = READ_DATA_BUFF_LSB + i;
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	3340      	adds	r3, #64	; 0x40
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	733b      	strb	r3, [r7, #12]
		readData[1] = 0xFF;
 80006ea:	23ff      	movs	r3, #255	; 0xff
 80006ec:	737b      	strb	r3, [r7, #13]

		txData[0] = readData[0];
 80006ee:	7b3b      	ldrb	r3, [r7, #12]
 80006f0:	743b      	strb	r3, [r7, #16]
		txData[1] = readData[1];
 80006f2:	7b7b      	ldrb	r3, [r7, #13]
 80006f4:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(readData, 2);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2102      	movs	r1, #2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fedb 	bl	80004b8 <crc8>
 8000702:	4603      	mov	r3, r0
 8000704:	74bb      	strb	r3, [r7, #18]

		AFETransmitReadCmd(txData, rxData, sizeof(txData));
 8000706:	f107 011c 	add.w	r1, r7, #28
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	2203      	movs	r2, #3
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f8e7 	bl	80008e4 <AFETransmitReadCmd>

		returnData[i] = rxData[1]; // Save data byte received from last transaction
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	7f7a      	ldrb	r2, [r7, #29]
 800071e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	3301      	adds	r3, #1
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800072a:	429a      	cmp	r2, r3
 800072c:	dbd8      	blt.n	80006e0 <SubCmdReadData+0x9c>
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	080027e8 	.word	0x080027e8

0800073c <RAMRegisterWrite>:
 * @param addr The register address
 * @param writeData Pointer to the 8-bit integer array for the data to write to the register
 * @param len Number of bytes to write to the AFE's 32-byte data buffer
 */
void RAMRegisterWrite(uint16_t addr, uint8_t *writeData, uint8_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	80fb      	strh	r3, [r7, #6]
 8000748:	4613      	mov	r3, r2
 800074a:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[3] = {0};
 800074c:	4b64      	ldr	r3, [pc, #400]	; (80008e0 <RAMRegisterWrite+0x1a4>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	83bb      	strh	r3, [r7, #28]
 8000752:	2300      	movs	r3, #0
 8000754:	77bb      	strb	r3, [r7, #30]
	uint8_t lowerAddr[] = { LOWER_ADDR_REG_WRITE, ((uint8_t)(addr & 0xFF)) };
 8000756:	23be      	movs	r3, #190	; 0xbe
 8000758:	763b      	strb	r3, [r7, #24]
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	767b      	strb	r3, [r7, #25]
	uint8_t crcLower = crc8(lowerAddr, 2);
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fea6 	bl	80004b8 <crc8>
 800076c:	4603      	mov	r3, r0
 800076e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t upperAddr[] = { UPPER_ADDR_REG_WRITE, ((uint8_t)(addr >> 8)) };
 8000772:	23bf      	movs	r3, #191	; 0xbf
 8000774:	753b      	strb	r3, [r7, #20]
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b29b      	uxth	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	757b      	strb	r3, [r7, #21]
	uint8_t crcUpper = crc8(upperAddr, 2);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fe96 	bl	80004b8 <crc8>
 800078c:	4603      	mov	r3, r0
 800078e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	// Keep writing the register address until MISO reflects command was received
	// Starting with lower byte
	uint8_t txData[] = { lowerAddr[0], lowerAddr[1], crcLower };
 8000792:	7e3b      	ldrb	r3, [r7, #24]
 8000794:	743b      	strb	r3, [r7, #16]
 8000796:	7e7b      	ldrb	r3, [r7, #25]
 8000798:	747b      	strb	r3, [r7, #17]
 800079a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800079e:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 80007a0:	f107 011c 	add.w	r1, r7, #28
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	2203      	movs	r2, #3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f8d2 	bl	8000954 <AFETransmitWriteCmd>

	// Continue to upper byte
	txData[0] = upperAddr[0];
 80007b0:	7d3b      	ldrb	r3, [r7, #20]
 80007b2:	743b      	strb	r3, [r7, #16]
	txData[1] = upperAddr[1];
 80007b4:	7d7b      	ldrb	r3, [r7, #21]
 80007b6:	747b      	strb	r3, [r7, #17]
	txData[2] = crcUpper;
 80007b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80007bc:	74bb      	strb	r3, [r7, #18]
	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 80007be:	f107 011c 	add.w	r1, r7, #28
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	2203      	movs	r2, #3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f8c3 	bl	8000954 <AFETransmitWriteCmd>

	// Write the data provided to the AFE's 32-byte data buffer
	uint8_t writeBytes[2] = {0};
 80007ce:	2300      	movs	r3, #0
 80007d0:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007d6:	e020      	b.n	800081a <RAMRegisterWrite+0xde>
	{
		// Increment data buffer address and include the next address byte
		writeBytes[0] = WRITE_DATA_BUFF_LSB + i;
 80007d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	3b40      	subs	r3, #64	; 0x40
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	733b      	strb	r3, [r7, #12]
		writeBytes[1] = writeData[i];
 80007e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	737b      	strb	r3, [r7, #13]

		txData[0] = writeBytes[0];
 80007ec:	7b3b      	ldrb	r3, [r7, #12]
 80007ee:	743b      	strb	r3, [r7, #16]
		txData[1] = writeBytes[1];
 80007f0:	7b7b      	ldrb	r3, [r7, #13]
 80007f2:	747b      	strb	r3, [r7, #17]
		txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2102      	movs	r1, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fe5c 	bl	80004b8 <crc8>
 8000800:	4603      	mov	r3, r0
 8000802:	74bb      	strb	r3, [r7, #18]

		AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000804:	f107 011c 	add.w	r1, r7, #28
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2203      	movs	r2, #3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f8a0 	bl	8000954 <AFETransmitWriteCmd>
	for (int i = 0; i < len; i++)
 8000814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000816:	3301      	adds	r3, #1
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800081a:	797b      	ldrb	r3, [r7, #5]
 800081c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800081e:	429a      	cmp	r2, r3
 8000820:	dbda      	blt.n	80007d8 <RAMRegisterWrite+0x9c>
	}

	// Calculate the check-sum and write it to the AFE's checksum register
	uint8_t checkSum = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
 800082c:	e00b      	b.n	8000846 <RAMRegisterWrite+0x10a>
		checkSum += writeData[i];
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	4413      	add	r3, r2
 8000834:	781a      	ldrb	r2, [r3, #0]
 8000836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800083a:	4413      	add	r3, r2
 800083c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	for (int i = 0; i < len; i++) {
 8000840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000842:	3301      	adds	r3, #1
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
 8000846:	797b      	ldrb	r3, [r7, #5]
 8000848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800084a:	429a      	cmp	r2, r3
 800084c:	dbef      	blt.n	800082e <RAMRegisterWrite+0xf2>
	}
	checkSum += lowerAddr[1];
 800084e:	7e7a      	ldrb	r2, [r7, #25]
 8000850:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000854:	4413      	add	r3, r2
 8000856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum += upperAddr[1];
 800085a:	7d7a      	ldrb	r2, [r7, #21]
 800085c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000860:	4413      	add	r3, r2
 8000862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	checkSum = ~(checkSum);
 8000866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800086a:	43db      	mvns	r3, r3
 800086c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	writeBytes[0] = WRITE_CHECKSUM_ADDR;
 8000870:	23e0      	movs	r3, #224	; 0xe0
 8000872:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = checkSum;
 8000874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000878:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 800087a:	7b3b      	ldrb	r3, [r7, #12]
 800087c:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2102      	movs	r1, #2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fe15 	bl	80004b8 <crc8>
 800088e:	4603      	mov	r3, r0
 8000890:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 8000892:	f107 011c 	add.w	r1, r7, #28
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2203      	movs	r2, #3
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f859 	bl	8000954 <AFETransmitWriteCmd>

	// Write the data length to the AFE's data length register
	writeBytes[0] = WRITE_DATALEN_ADDR;
 80008a2:	23e1      	movs	r3, #225	; 0xe1
 80008a4:	733b      	strb	r3, [r7, #12]
	writeBytes[1] = len + 4; // Length of data buffer, plus upper and lower address bytes, plus checksum and data length bytes
 80008a6:	797b      	ldrb	r3, [r7, #5]
 80008a8:	3304      	adds	r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	737b      	strb	r3, [r7, #13]

	txData[0] = writeBytes[0];
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	743b      	strb	r3, [r7, #16]
	txData[1] = writeBytes[1];
 80008b2:	7b7b      	ldrb	r3, [r7, #13]
 80008b4:	747b      	strb	r3, [r7, #17]
	txData[2] = crc8(writeBytes, 2); // Recalculate CRC
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2102      	movs	r1, #2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fdfb 	bl	80004b8 <crc8>
 80008c2:	4603      	mov	r3, r0
 80008c4:	74bb      	strb	r3, [r7, #18]

	AFETransmitWriteCmd(txData, rxData, sizeof(txData));
 80008c6:	f107 011c 	add.w	r1, r7, #28
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	2203      	movs	r2, #3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f83f 	bl	8000954 <AFETransmitWriteCmd>
}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	; 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	080027e8 	.word	0x080027e8

080008e4 <AFETransmitReadCmd>:

void AFETransmitReadCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	4613      	mov	r3, r2
 80008f0:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 80008f2:	2300      	movs	r3, #0
 80008f4:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 80008f6:	e01e      	b.n	8000936 <AFETransmitReadCmd+0x52>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2101      	movs	r1, #1
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <AFETransmitReadCmd+0x68>)
 80008fe:	f000 fc2d 	bl	800115c <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	b29b      	uxth	r3, r3
 8000906:	f04f 32ff 	mov.w	r2, #4294967295
 800090a:	9200      	str	r2, [sp, #0]
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	68f9      	ldr	r1, [r7, #12]
 8000910:	480f      	ldr	r0, [pc, #60]	; (8000950 <AFETransmitReadCmd+0x6c>)
 8000912:	f001 fbaa 	bl	800206a <HAL_SPI_TransmitReceive>

		// For read command, confirm the AFE received the command by checking the address and CRC bytes
		if (txBytes[0] == rxBytes[0]) commReceived = true;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	d101      	bne.n	8000926 <AFETransmitReadCmd+0x42>
 8000922:	2301      	movs	r3, #1
 8000924:	75fb      	strb	r3, [r7, #23]
		// TODO: implement CRC checking for received data

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2101      	movs	r1, #1
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <AFETransmitReadCmd+0x68>)
 800092c:	f000 fc16 	bl	800115c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000930:	2001      	movs	r0, #1
 8000932:	f000 f997 	bl	8000c64 <HAL_Delay>
	while (!commReceived)
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	f083 0301 	eor.w	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1da      	bne.n	80008f8 <AFETransmitReadCmd+0x14>
	}

}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	48000400 	.word	0x48000400
 8000950:	20000028 	.word	0x20000028

08000954 <AFETransmitWriteCmd>:

void AFETransmitWriteCmd(uint8_t *txBytes, uint8_t *rxBytes, uint8_t arrSize)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af02      	add	r7, sp, #8
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	4613      	mov	r3, r2
 8000960:	71fb      	strb	r3, [r7, #7]
	// Continuously transmit the SPI transaction until the AFE has received it
	bool commReceived = false;
 8000962:	2300      	movs	r3, #0
 8000964:	75fb      	strb	r3, [r7, #23]
	while (!commReceived)
 8000966:	e02e      	b.n	80009c6 <AFETransmitWriteCmd+0x72>
	{
		// Pull NSS low
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2101      	movs	r1, #1
 800096c:	481b      	ldr	r0, [pc, #108]	; (80009dc <AFETransmitWriteCmd+0x88>)
 800096e:	f000 fbf5 	bl	800115c <HAL_GPIO_WritePin>
		// Transmit data and receive AFE's response
		HAL_SPI_TransmitReceive(&hspi1, txBytes, rxBytes, arrSize, HAL_MAX_DELAY);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	b29b      	uxth	r3, r3
 8000976:	f04f 32ff 	mov.w	r2, #4294967295
 800097a:	9200      	str	r2, [sp, #0]
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	68f9      	ldr	r1, [r7, #12]
 8000980:	4817      	ldr	r0, [pc, #92]	; (80009e0 <AFETransmitWriteCmd+0x8c>)
 8000982:	f001 fb72 	bl	800206a <HAL_SPI_TransmitReceive>

		// For write command, confirm the AFE received the command by checking every single byte
		commReceived = true;
 8000986:	2301      	movs	r3, #1
 8000988:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	e00e      	b.n	80009ae <AFETransmitWriteCmd+0x5a>
		{
			if (txBytes[i] != rxBytes[i]) commReceived = false; // If any mismatch occurs, flag it and retransmit
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4413      	add	r3, r2
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	68b9      	ldr	r1, [r7, #8]
 800099c:	440b      	add	r3, r1
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d001      	beq.n	80009a8 <AFETransmitWriteCmd+0x54>
 80009a4:	2300      	movs	r3, #0
 80009a6:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < arrSize; i++)
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	3301      	adds	r3, #1
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	dbec      	blt.n	8000990 <AFETransmitWriteCmd+0x3c>
		}

		// Pull NSS high and wait for transaction to be processed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2101      	movs	r1, #1
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <AFETransmitWriteCmd+0x88>)
 80009bc:	f000 fbce 	bl	800115c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f000 f94f 	bl	8000c64 <HAL_Delay>
	while (!commReceived)
 80009c6:	7dfb      	ldrb	r3, [r7, #23]
 80009c8:	f083 0301 	eor.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1ca      	bne.n	8000968 <AFETransmitWriteCmd+0x14>
	}
}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	48000400 	.word	0x48000400
 80009e0:	20000028 	.word	0x20000028

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6613      	str	r3, [r2, #96]	; 0x60
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_SPI_MspInit+0x7c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d128      	bne.n	8000aa0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_SPI_MspInit+0x80>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	4a16      	ldr	r2, [pc, #88]	; (8000aac <HAL_SPI_MspInit+0x80>)
 8000a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a58:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_SPI_MspInit+0x80>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_SPI_MspInit+0x80>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <HAL_SPI_MspInit+0x80>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_SPI_MspInit+0x80>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a7e:	23c2      	movs	r3, #194	; 0xc2
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a8e:	2305      	movs	r3, #5
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 f9ec 	bl	8000e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40013000 	.word	0x40013000
 8000aac:	40021000 	.word	0x40021000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f892 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b2c:	f7ff ffea 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f001 fe17 	bl	8002788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5a:	f7ff fb37 	bl	80001cc <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b6c:	08002834 	.word	0x08002834
  ldr r2, =_sbss
 8000b70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b74:	20000090 	.word	0x20000090

08000b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_2_IRQHandler>

08000b7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f943 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f000 f80e 	bl	8000bac <HAL_InitTick>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	e001      	b.n	8000ba0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9c:	f7ff ff22 	bl	80009e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_InitTick+0x6c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d023      	beq.n	8000c08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_InitTick+0x70>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_InitTick+0x6c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f941 	bl	8000e5e <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10f      	bne.n	8000c02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d809      	bhi.n	8000bfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 f919 	bl	8000e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_InitTick+0x74>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e007      	b.n	8000c0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e004      	b.n	8000c0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	e001      	b.n	8000c0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	2000008c 	.word	0x2000008c

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	2000008c 	.word	0x2000008c

08000c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff ffee 	bl	8000c4c <HAL_GetTick>
 8000c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d005      	beq.n	8000c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_Delay+0x44>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c8a:	bf00      	nop
 8000c8c:	f7ff ffde 	bl	8000c4c <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8f7      	bhi.n	8000c8c <HAL_Delay+0x28>
  {
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff47 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff5c 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff8e 	bl	8000d64 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffb0 	bl	8000dcc <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e86:	e14e      	b.n	8001126 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8140 	beq.w	8001120 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d005      	beq.n	8000eb8 <HAL_GPIO_Init+0x40>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d130      	bne.n	8000f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eee:	2201      	movs	r2, #1
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	f003 0201 	and.w	r2, r3, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d017      	beq.n	8000f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d123      	bne.n	8000faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0203 	and.w	r2, r3, #3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 809a 	beq.w	8001120 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fec:	4b55      	ldr	r3, [pc, #340]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 8000fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff0:	4a54      	ldr	r2, [pc, #336]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff8:	4b52      	ldr	r3, [pc, #328]	; (8001144 <HAL_GPIO_Init+0x2cc>)
 8000ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001004:	4a50      	ldr	r2, [pc, #320]	; (8001148 <HAL_GPIO_Init+0x2d0>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800102e:	d013      	beq.n	8001058 <HAL_GPIO_Init+0x1e0>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a46      	ldr	r2, [pc, #280]	; (800114c <HAL_GPIO_Init+0x2d4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d00d      	beq.n	8001054 <HAL_GPIO_Init+0x1dc>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a45      	ldr	r2, [pc, #276]	; (8001150 <HAL_GPIO_Init+0x2d8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d007      	beq.n	8001050 <HAL_GPIO_Init+0x1d8>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a44      	ldr	r2, [pc, #272]	; (8001154 <HAL_GPIO_Init+0x2dc>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d101      	bne.n	800104c <HAL_GPIO_Init+0x1d4>
 8001048:	2303      	movs	r3, #3
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 800104c:	2307      	movs	r3, #7
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 8001050:	2302      	movs	r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x1e2>
 8001058:	2300      	movs	r3, #0
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106a:	4937      	ldr	r1, [pc, #220]	; (8001148 <HAL_GPIO_Init+0x2d0>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800109c:	4a2e      	ldr	r2, [pc, #184]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c6:	4a24      	ldr	r2, [pc, #144]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_GPIO_Init+0x2e0>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f aea9 	bne.w	8000e88 <HAL_GPIO_Init+0x10>
  }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000
 800114c:	48000400 	.word	0x48000400
 8001150:	48000800 	.word	0x48000800
 8001154:	48000c00 	.word	0x48000c00
 8001158:	40010400 	.word	0x40010400

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001178:	e002      	b.n	8001180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4013      	ands	r3, r2
 80011a4:	041a      	lsls	r2, r3, #16
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43d9      	mvns	r1, r3
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	400b      	ands	r3, r1
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40007000 	.word	0x40007000

080011dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ea:	d130      	bne.n	800124e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f8:	d038      	beq.n	800126c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001208:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2232      	movs	r2, #50	; 0x32
 8001210:	fb02 f303 	mul.w	r3, r2, r3
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	0c9b      	lsrs	r3, r3, #18
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001220:	e002      	b.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3b01      	subs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001234:	d102      	bne.n	800123c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f2      	bne.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001248:	d110      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e00f      	b.n	800126e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125a:	d007      	beq.n	800126c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40007000 	.word	0x40007000
 8001280:	20000000 	.word	0x20000000
 8001284:	431bde83 	.word	0x431bde83

08001288 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	f000 bc4f 	b.w	8001b3a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800129c:	4b97      	ldr	r3, [pc, #604]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a6:	4b95      	ldr	r3, [pc, #596]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80e6 	beq.w	800148a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_RCC_OscConfig+0x4c>
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	2b0c      	cmp	r3, #12
 80012c8:	f040 808d 	bne.w	80013e6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	f040 8089 	bne.w	80013e6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012d4:	4b89      	ldr	r3, [pc, #548]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_RCC_OscConfig+0x66>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f000 bc26 	b.w	8001b3a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f2:	4b82      	ldr	r3, [pc, #520]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <HAL_RCC_OscConfig+0x80>
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001306:	e005      	b.n	8001314 <HAL_RCC_OscConfig+0x8c>
 8001308:	4b7c      	ldr	r3, [pc, #496]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800130a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001314:	4293      	cmp	r3, r2
 8001316:	d224      	bcs.n	8001362 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fda1 	bl	8001e64 <RCC_SetFlashLatencyFromMSIRange>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	f000 bc06 	b.w	8001b3a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132e:	4b73      	ldr	r3, [pc, #460]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a72      	ldr	r2, [pc, #456]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b70      	ldr	r3, [pc, #448]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	496d      	ldr	r1, [pc, #436]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134c:	4b6b      	ldr	r3, [pc, #428]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	4968      	ldr	r1, [pc, #416]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
 8001360:	e025      	b.n	80013ae <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001362:	4b66      	ldr	r3, [pc, #408]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b63      	ldr	r3, [pc, #396]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	4960      	ldr	r1, [pc, #384]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001380:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	495b      	ldr	r1, [pc, #364]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d109      	bne.n	80013ae <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fd60 	bl	8001e64 <RCC_SetFlashLatencyFromMSIRange>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e3c5      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ae:	f000 fccd 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b51      	ldr	r3, [pc, #324]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	4950      	ldr	r1, [pc, #320]	; (8001500 <HAL_RCC_OscConfig+0x278>)
 80013c0:	5ccb      	ldrb	r3, [r1, r3]
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	4a4e      	ldr	r2, [pc, #312]	; (8001504 <HAL_RCC_OscConfig+0x27c>)
 80013cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013ce:	4b4e      	ldr	r3, [pc, #312]	; (8001508 <HAL_RCC_OscConfig+0x280>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fbea 	bl	8000bac <HAL_InitTick>
 80013d8:	4603      	mov	r3, r0
 80013da:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d052      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	e3a9      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d032      	beq.n	8001454 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013ee:	4b43      	ldr	r3, [pc, #268]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a42      	ldr	r2, [pc, #264]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fc27 	bl	8000c4c <HAL_GetTick>
 80013fe:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001402:	f7ff fc23 	bl	8000c4c <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e392      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001414:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a35      	ldr	r2, [pc, #212]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b33      	ldr	r3, [pc, #204]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	4930      	ldr	r1, [pc, #192]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	492b      	ldr	r1, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
 8001452:	e01a      	b.n	800148a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a28      	ldr	r2, [pc, #160]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800145a:	f023 0301 	bic.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001460:	f7ff fbf4 	bl	8000c4c <HAL_GetTick>
 8001464:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001468:	f7ff fbf0 	bl	8000c4c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e35f      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1e0>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d073      	beq.n	800157e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	2b08      	cmp	r3, #8
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d10e      	bne.n	80014c0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d10b      	bne.n	80014c0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d063      	beq.n	800157c <HAL_RCC_OscConfig+0x2f4>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d15f      	bne.n	800157c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e33c      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c8:	d106      	bne.n	80014d8 <HAL_RCC_OscConfig+0x250>
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e025      	b.n	8001524 <HAL_RCC_OscConfig+0x29c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e0:	d114      	bne.n	800150c <HAL_RCC_OscConfig+0x284>
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a02      	ldr	r2, [pc, #8]	; (80014fc <HAL_RCC_OscConfig+0x274>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e013      	b.n	8001524 <HAL_RCC_OscConfig+0x29c>
 80014fc:	40021000 	.word	0x40021000
 8001500:	080027ec 	.word	0x080027ec
 8001504:	20000000 	.word	0x20000000
 8001508:	20000004 	.word	0x20000004
 800150c:	4b8f      	ldr	r3, [pc, #572]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a8e      	ldr	r2, [pc, #568]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b8c      	ldr	r3, [pc, #560]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a8b      	ldr	r2, [pc, #556]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fb8e 	bl	8000c4c <HAL_GetTick>
 8001530:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fb8a 	bl	8000c4c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e2f9      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001546:	4b81      	ldr	r3, [pc, #516]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x2ac>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fb7a 	bl	8000c4c <HAL_GetTick>
 8001558:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fb76 	bl	8000c4c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e2e5      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156e:	4b77      	ldr	r3, [pc, #476]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x2d4>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d060      	beq.n	800164c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	2b04      	cmp	r3, #4
 800158e:	d005      	beq.n	800159c <HAL_RCC_OscConfig+0x314>
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d119      	bne.n	80015ca <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d116      	bne.n	80015ca <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159c:	4b6b      	ldr	r3, [pc, #428]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x32c>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e2c2      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b65      	ldr	r3, [pc, #404]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	4962      	ldr	r1, [pc, #392]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	e040      	b.n	800164c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d023      	beq.n	800161a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d2:	4b5e      	ldr	r3, [pc, #376]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a5d      	ldr	r2, [pc, #372]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fb35 	bl	8000c4c <HAL_GetTick>
 80015e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fb31 	bl	8000c4c <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e2a0      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f8:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b51      	ldr	r3, [pc, #324]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	494e      	ldr	r1, [pc, #312]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
 8001618:	e018      	b.n	800164c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b4c      	ldr	r3, [pc, #304]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fb11 	bl	8000c4c <HAL_GetTick>
 800162a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fb0d 	bl	8000c4c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e27c      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001640:	4b42      	ldr	r3, [pc, #264]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8082 	beq.w	800175e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d05f      	beq.n	8001722 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001662:	4b3a      	ldr	r3, [pc, #232]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001668:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	429a      	cmp	r2, r3
 8001676:	d037      	beq.n	80016e8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e254      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01b      	beq.n	80016d2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800169a:	4b2c      	ldr	r3, [pc, #176]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a0:	4a2a      	ldr	r2, [pc, #168]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016aa:	f7ff facf 	bl	8000c4c <HAL_GetTick>
 80016ae:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff facb 	bl	8000c4c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b11      	cmp	r3, #17
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e23a      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1ef      	bne.n	80016b2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d8:	f023 0210 	bic.w	r2, r3, #16
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	491a      	ldr	r1, [pc, #104]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff faa8 	bl	8000c4c <HAL_GetTick>
 80016fc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff faa4 	bl	8000c4c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b11      	cmp	r3, #17
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e213      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ef      	beq.n	8001700 <HAL_RCC_OscConfig+0x478>
 8001720:	e01d      	b.n	800175e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_RCC_OscConfig+0x4c4>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fa8b 	bl	8000c4c <HAL_GetTick>
 8001736:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff fa87 	bl	8000c4c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b11      	cmp	r3, #17
 8001746:	d903      	bls.n	8001750 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1f6      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
 800174c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001750:	4ba9      	ldr	r3, [pc, #676]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ed      	bne.n	800173a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80bd 	beq.w	80018e6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001772:	4ba1      	ldr	r3, [pc, #644]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10e      	bne.n	800179c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b9e      	ldr	r3, [pc, #632]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a9d      	ldr	r2, [pc, #628]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
 800178a:	4b9b      	ldr	r3, [pc, #620]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179c:	4b97      	ldr	r3, [pc, #604]	; (80019fc <HAL_RCC_OscConfig+0x774>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d118      	bne.n	80017da <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017a8:	4b94      	ldr	r3, [pc, #592]	; (80019fc <HAL_RCC_OscConfig+0x774>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a93      	ldr	r2, [pc, #588]	; (80019fc <HAL_RCC_OscConfig+0x774>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fa4a 	bl	8000c4c <HAL_GetTick>
 80017b8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017bc:	f7ff fa46 	bl	8000c4c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1b5      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ce:	4b8b      	ldr	r3, [pc, #556]	; (80019fc <HAL_RCC_OscConfig+0x774>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d02c      	beq.n	8001840 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80017e6:	4b84      	ldr	r3, [pc, #528]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f8:	497f      	ldr	r1, [pc, #508]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d010      	beq.n	800182e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800180c:	4b7a      	ldr	r3, [pc, #488]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	4a79      	ldr	r2, [pc, #484]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800181c:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001822:	4a75      	ldr	r2, [pc, #468]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800182c:	e018      	b.n	8001860 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800182e:	4b72      	ldr	r3, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001834:	4a70      	ldr	r2, [pc, #448]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800183e:	e00f      	b.n	8001860 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001840:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001850:	4b69      	ldr	r3, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001856:	4a68      	ldr	r2, [pc, #416]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d016      	beq.n	8001896 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff f9f0 	bl	8000c4c <HAL_GetTick>
 800186c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186e:	e00a      	b.n	8001886 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff f9ec 	bl	8000c4c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e159      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001886:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ed      	beq.n	8001870 <HAL_RCC_OscConfig+0x5e8>
 8001894:	e01d      	b.n	80018d2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff f9d9 	bl	8000c4c <HAL_GetTick>
 800189a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff f9d5 	bl	8000c4c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e142      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ed      	bne.n	800189e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80018c2:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80018c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c8:	4a4b      	ldr	r2, [pc, #300]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80018ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	4a46      	ldr	r2, [pc, #280]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d03c      	beq.n	800196c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01c      	beq.n	8001934 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018fa:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80018fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001900:	4a3d      	ldr	r2, [pc, #244]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff f99f 	bl	8000c4c <HAL_GetTick>
 800190e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001912:	f7ff f99b 	bl	8000c4c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e10a      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ef      	beq.n	8001912 <HAL_RCC_OscConfig+0x68a>
 8001932:	e01b      	b.n	800196c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800193a:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff f982 	bl	8000c4c <HAL_GetTick>
 8001948:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194c:	f7ff f97e 	bl	8000c4c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0ed      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ef      	bne.n	800194c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80e1 	beq.w	8001b38 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	2b02      	cmp	r3, #2
 800197c:	f040 80b5 	bne.w	8001aea <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	429a      	cmp	r2, r3
 8001992:	d124      	bne.n	80019de <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	3b01      	subs	r3, #1
 80019a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d11b      	bne.n	80019de <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d113      	bne.n	80019de <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	3b01      	subs	r3, #1
 80019c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d109      	bne.n	80019de <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	3b01      	subs	r3, #1
 80019d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d05f      	beq.n	8001a9e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	2b0c      	cmp	r3, #12
 80019e2:	d05a      	beq.n	8001a9a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a03      	ldr	r2, [pc, #12]	; (80019f8 <HAL_RCC_OscConfig+0x770>)
 80019ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f0:	f7ff f92c 	bl	8000c4c <HAL_GetTick>
 80019f4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f6:	e00c      	b.n	8001a12 <HAL_RCC_OscConfig+0x78a>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f924 	bl	8000c4c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e093      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a12:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1e:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x8c0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a2e:	3a01      	subs	r2, #1
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a38:	0212      	lsls	r2, r2, #8
 8001a3a:	4311      	orrs	r1, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a40:	0852      	lsrs	r2, r2, #1
 8001a42:	3a01      	subs	r2, #1
 8001a44:	0552      	lsls	r2, r2, #21
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a4c:	0852      	lsrs	r2, r2, #1
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	0652      	lsls	r2, r2, #25
 8001a52:	430a      	orrs	r2, r1
 8001a54:	493b      	ldr	r1, [pc, #236]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a39      	ldr	r2, [pc, #228]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a64:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a66:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	4a36      	ldr	r2, [pc, #216]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a70:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a72:	f7ff f8eb 	bl	8000c4c <HAL_GetTick>
 8001a76:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff f8e7 	bl	8000c4c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e056      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a98:	e04e      	b.n	8001b38 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e04d      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d146      	bne.n	8001b38 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ac2:	f7ff f8c3 	bl	8000c4c <HAL_GetTick>
 8001ac6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff f8bf 	bl	8000c4c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e02e      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x842>
 8001ae8:	e026      	b.n	8001b38 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d021      	beq.n	8001b34 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f8a6 	bl	8000c4c <HAL_GetTick>
 8001b00:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f8a2 	bl	8000c4c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e011      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_RCC_OscConfig+0x8bc>)
 8001b28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b2c:	f023 0303 	bic.w	r3, r3, #3
 8001b30:	60d3      	str	r3, [r2, #12]
 8001b32:	e001      	b.n	8001b38 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3728      	adds	r7, #40	; 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	f99f808c 	.word	0xf99f808c

08001b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0e7      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCC_ClockConfig+0x1ec>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d910      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_RCC_ClockConfig+0x1ec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4970      	ldr	r1, [pc, #448]	; (8001d38 <HAL_RCC_ClockConfig+0x1ec>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b6e      	ldr	r3, [pc, #440]	; (8001d38 <HAL_RCC_ClockConfig+0x1ec>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0cf      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d010      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d908      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4960      	ldr	r1, [pc, #384]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d04c      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d121      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0a6      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bea:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d115      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e09a      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c02:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e08e      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c12:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e086      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f023 0203 	bic.w	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4943      	ldr	r1, [pc, #268]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c34:	f7ff f80a 	bl	8000c4c <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f7ff f806 	bl	8000c4c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e06e      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 020c 	and.w	r2, r3, #12
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1eb      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d010      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d208      	bcs.n	8001c92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	492b      	ldr	r1, [pc, #172]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCC_ClockConfig+0x1ec>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d210      	bcs.n	8001cc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 0207 	bic.w	r2, r3, #7
 8001ca8:	4923      	ldr	r1, [pc, #140]	; (8001d38 <HAL_RCC_ClockConfig+0x1ec>)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e036      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4918      	ldr	r1, [pc, #96]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4910      	ldr	r1, [pc, #64]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d00:	f000 f824 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	490b      	ldr	r1, [pc, #44]	; (8001d40 <HAL_RCC_ClockConfig+0x1f4>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1fc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe ff41 	bl	8000bac <HAL_InitTick>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	080027ec 	.word	0x080027ec
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x34>
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d121      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d11e      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e005      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10d      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d102      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	e004      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d134      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d003      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0xac>
 8001df0:	e005      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001df4:	617b      	str	r3, [r7, #20]
      break;
 8001df6:	e005      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dfa:	617b      	str	r3, [r7, #20]
      break;
 8001dfc:	e002      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	617b      	str	r3, [r7, #20]
      break;
 8001e02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	3301      	adds	r3, #1
 8001e10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	fb03 f202 	mul.w	r2, r3, r2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	0e5b      	lsrs	r3, r3, #25
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	3301      	adds	r3, #1
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e44:	69bb      	ldr	r3, [r7, #24]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	080027fc 	.word	0x080027fc
 8001e5c:	00f42400 	.word	0x00f42400
 8001e60:	007a1200 	.word	0x007a1200

08001e64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e7c:	f7ff f9a0 	bl	80011c0 <HAL_PWREx_GetVoltageRange>
 8001e80:	6178      	str	r0, [r7, #20]
 8001e82:	e014      	b.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e90:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e9c:	f7ff f990 	bl	80011c0 <HAL_PWREx_GetVoltageRange>
 8001ea0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb4:	d10b      	bne.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d919      	bls.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2ba0      	cmp	r3, #160	; 0xa0
 8001ec0:	d902      	bls.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	e013      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec8:	2301      	movs	r3, #1
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e010      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b80      	cmp	r3, #128	; 0x80
 8001ed2:	d902      	bls.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e00a      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d102      	bne.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e004      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b70      	cmp	r3, #112	; 0x70
 8001eea:	d101      	bne.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eec:	2301      	movs	r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 0207 	bic.w	r2, r3, #7
 8001ef8:	4909      	ldr	r1, [pc, #36]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40022000 	.word	0x40022000

08001f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e095      	b.n	8002062 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d108      	bne.n	8001f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f46:	d009      	beq.n	8001f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
 8001f4e:	e005      	b.n	8001f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fd58 	bl	8000a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f9c:	d902      	bls.n	8001fa4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	e002      	b.n	8001faa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001fb2:	d007      	beq.n	8001fc4 <HAL_SPI_Init+0xa0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fbc:	d002      	beq.n	8001fc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	ea42 0103 	orr.w	r1, r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	0c1b      	lsrs	r3, r3, #16
 8002020:	f003 0204 	and.w	r2, r3, #4
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002040:	ea42 0103 	orr.w	r1, r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b08a      	sub	sp, #40	; 0x28
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002078:	2301      	movs	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_SPI_TransmitReceive+0x26>
 800208c:	2302      	movs	r3, #2
 800208e:	e20a      	b.n	80024a6 <HAL_SPI_TransmitReceive+0x43c>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002098:	f7fe fdd8 	bl	8000c4c <HAL_GetTick>
 800209c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80020ac:	887b      	ldrh	r3, [r7, #2]
 80020ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020b4:	7efb      	ldrb	r3, [r7, #27]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d00e      	beq.n	80020d8 <HAL_SPI_TransmitReceive+0x6e>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020c0:	d106      	bne.n	80020d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <HAL_SPI_TransmitReceive+0x66>
 80020ca:	7efb      	ldrb	r3, [r7, #27]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d003      	beq.n	80020d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80020d0:	2302      	movs	r3, #2
 80020d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80020d6:	e1e0      	b.n	800249a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_SPI_TransmitReceive+0x80>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_SPI_TransmitReceive+0x80>
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80020f0:	e1d3      	b.n	800249a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d003      	beq.n	8002106 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2205      	movs	r2, #5
 8002102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	887a      	ldrh	r2, [r7, #2]
 800211e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	887a      	ldrh	r2, [r7, #2]
 8002132:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002148:	d802      	bhi.n	8002150 <HAL_SPI_TransmitReceive+0xe6>
 800214a:	8a3b      	ldrh	r3, [r7, #16]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d908      	bls.n	8002162 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	e007      	b.n	8002172 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002170:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	d007      	beq.n	8002190 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002198:	f240 8081 	bls.w	800229e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_SPI_TransmitReceive+0x140>
 80021a4:	8a7b      	ldrh	r3, [r7, #18]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d16d      	bne.n	8002286 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	1c9a      	adds	r2, r3, #2
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ce:	e05a      	b.n	8002286 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d11b      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x1ac>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d016      	beq.n	8002216 <HAL_SPI_TransmitReceive+0x1ac>
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d113      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	881a      	ldrh	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	1c9a      	adds	r2, r3, #2
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d11c      	bne.n	800225e <HAL_SPI_TransmitReceive+0x1f4>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d016      	beq.n	800225e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	b292      	uxth	r2, r2
 800223c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	1c9a      	adds	r2, r3, #2
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800225a:	2301      	movs	r3, #1
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800225e:	f7fe fcf5 	bl	8000c4c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226a:	429a      	cmp	r2, r3
 800226c:	d80b      	bhi.n	8002286 <HAL_SPI_TransmitReceive+0x21c>
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d007      	beq.n	8002286 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002284:	e109      	b.n	800249a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d19f      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x166>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d199      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x166>
 800229c:	e0e3      	b.n	8002466 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_SPI_TransmitReceive+0x244>
 80022a6:	8a7b      	ldrh	r3, [r7, #18]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f040 80cf 	bne.w	800244c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d912      	bls.n	80022de <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	1c9a      	adds	r2, r3, #2
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b02      	subs	r3, #2
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022dc:	e0b6      	b.n	800244c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	330c      	adds	r3, #12
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002304:	e0a2      	b.n	800244c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	d134      	bne.n	800237e <HAL_SPI_TransmitReceive+0x314>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d02f      	beq.n	800237e <HAL_SPI_TransmitReceive+0x314>
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	2b01      	cmp	r3, #1
 8002322:	d12c      	bne.n	800237e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d912      	bls.n	8002354 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	1c9a      	adds	r2, r3, #2
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b02      	subs	r3, #2
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002352:	e012      	b.n	800237a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	330c      	adds	r3, #12
 800235e:	7812      	ldrb	r2, [r2, #0]
 8002360:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d148      	bne.n	800241e <HAL_SPI_TransmitReceive+0x3b4>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d042      	beq.n	800241e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d923      	bls.n	80023ec <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	b292      	uxth	r2, r2
 80023b0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	1c9a      	adds	r2, r3, #2
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b02      	subs	r3, #2
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d81f      	bhi.n	800241a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	e016      	b.n	800241a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f103 020c 	add.w	r2, r3, #12
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800241a:	2301      	movs	r3, #1
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800241e:	f7fe fc15 	bl	8000c4c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242a:	429a      	cmp	r2, r3
 800242c:	d803      	bhi.n	8002436 <HAL_SPI_TransmitReceive+0x3cc>
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d102      	bne.n	800243c <HAL_SPI_TransmitReceive+0x3d2>
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800244a:	e026      	b.n	800249a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	f47f af57 	bne.w	8002306 <HAL_SPI_TransmitReceive+0x29c>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	f47f af50 	bne.w	8002306 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f93e 	bl	80026ec <SPI_EndRxTxTransaction>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002490:	e003      	b.n	800249a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80024a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3728      	adds	r7, #40	; 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024c0:	f7fe fbc4 	bl	8000c4c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024d0:	f7fe fbbc 	bl	8000c4c <HAL_GetTick>
 80024d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	015b      	lsls	r3, r3, #5
 80024dc:	0d1b      	lsrs	r3, r3, #20
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	fb02 f303 	mul.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024e6:	e054      	b.n	8002592 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d050      	beq.n	8002592 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024f0:	f7fe fbac 	bl	8000c4c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d902      	bls.n	8002506 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d13d      	bne.n	8002582 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002514:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800251e:	d111      	bne.n	8002544 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002528:	d004      	beq.n	8002534 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002532:	d107      	bne.n	8002544 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002542:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254c:	d10f      	bne.n	800256e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800256c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e017      	b.n	80025b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3b01      	subs	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	429a      	cmp	r2, r3
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d19b      	bne.n	80024e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000000 	.word	0x20000000

080025c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80025d2:	f7fe fb3b 	bl	8000c4c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80025e2:	f7fe fb33 	bl	8000c4c <HAL_GetTick>
 80025e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80025f0:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00da      	lsls	r2, r3, #3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	0d1b      	lsrs	r3, r3, #20
 8002600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002608:	e060      	b.n	80026cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002610:	d107      	bne.n	8002622 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002620:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d050      	beq.n	80026cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800262a:	f7fe fb0f 	bl	8000c4c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002636:	429a      	cmp	r2, r3
 8002638:	d902      	bls.n	8002640 <SPI_WaitFifoStateUntilTimeout+0x80>
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	2b00      	cmp	r3, #0
 800263e:	d13d      	bne.n	80026bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800264e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002658:	d111      	bne.n	800267e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002662:	d004      	beq.n	800266e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266c:	d107      	bne.n	800267e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002686:	d10f      	bne.n	80026a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e010      	b.n	80026de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d196      	bne.n	800260a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3728      	adds	r7, #40	; 0x28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000000 	.word	0x20000000

080026ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff ff5b 	bl	80025c0 <SPI_WaitFifoStateUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002714:	f043 0220 	orr.w	r2, r3, #32
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e027      	b.n	8002770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff fec0 	bl	80024b0 <SPI_WaitFlagStateUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273a:	f043 0220 	orr.w	r2, r3, #32
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e014      	b.n	8002770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7ff ff34 	bl	80025c0 <SPI_WaitFifoStateUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e000      	b.n	8002770 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <memset>:
 8002778:	4402      	add	r2, r0
 800277a:	4603      	mov	r3, r0
 800277c:	4293      	cmp	r3, r2
 800277e:	d100      	bne.n	8002782 <memset+0xa>
 8002780:	4770      	bx	lr
 8002782:	f803 1b01 	strb.w	r1, [r3], #1
 8002786:	e7f9      	b.n	800277c <memset+0x4>

08002788 <__libc_init_array>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	4d0d      	ldr	r5, [pc, #52]	; (80027c0 <__libc_init_array+0x38>)
 800278c:	4c0d      	ldr	r4, [pc, #52]	; (80027c4 <__libc_init_array+0x3c>)
 800278e:	1b64      	subs	r4, r4, r5
 8002790:	10a4      	asrs	r4, r4, #2
 8002792:	2600      	movs	r6, #0
 8002794:	42a6      	cmp	r6, r4
 8002796:	d109      	bne.n	80027ac <__libc_init_array+0x24>
 8002798:	4d0b      	ldr	r5, [pc, #44]	; (80027c8 <__libc_init_array+0x40>)
 800279a:	4c0c      	ldr	r4, [pc, #48]	; (80027cc <__libc_init_array+0x44>)
 800279c:	f000 f818 	bl	80027d0 <_init>
 80027a0:	1b64      	subs	r4, r4, r5
 80027a2:	10a4      	asrs	r4, r4, #2
 80027a4:	2600      	movs	r6, #0
 80027a6:	42a6      	cmp	r6, r4
 80027a8:	d105      	bne.n	80027b6 <__libc_init_array+0x2e>
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b0:	4798      	blx	r3
 80027b2:	3601      	adds	r6, #1
 80027b4:	e7ee      	b.n	8002794 <__libc_init_array+0xc>
 80027b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ba:	4798      	blx	r3
 80027bc:	3601      	adds	r6, #1
 80027be:	e7f2      	b.n	80027a6 <__libc_init_array+0x1e>
 80027c0:	0800282c 	.word	0x0800282c
 80027c4:	0800282c 	.word	0x0800282c
 80027c8:	0800282c 	.word	0x0800282c
 80027cc:	08002830 	.word	0x08002830

080027d0 <_init>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr

080027dc <_fini>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	bf00      	nop
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr
