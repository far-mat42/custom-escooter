
Nucleo-HAL-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001594  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001720  08001720  00011720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001760  08001760  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001760  08001760  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001760  08001760  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001774  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001774  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f24  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014a5  00000000  00000000  00025fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  00027448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e5  00000000  00000000  00027af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001813a  00000000  00000000  00027fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006d9a  00000000  00000000  0004010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097b7c  00000000  00000000  00046ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018a4  00000000  00000000  000dea28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ad  00000000  00000000  000e02cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001708 	.word	0x08001708

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001708 	.word	0x08001708

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa1c 	bl	800060e <HAL_Init>
  HAL_StatusTypeDef hal_status; // Status indicator for SPI transaction

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f83b 	bl	8000250 <SystemClock_Config>

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  initClocks();
 80001da:	f000 f88f 	bl	80002fc <initClocks>
  configGPIO();
 80001de:	f000 f8a3 	bl	8000328 <configGPIO>
  configSPI();
 80001e2:	f000 f8eb 	bl	80003bc <configSPI>

  // SPI addresses
  uint8_t addr[4] = {37, 6, 22, 57};
 80001e6:	4b18      	ldr	r3, [pc, #96]	; (8000248 <main+0x7c>)
 80001e8:	607b      	str	r3, [r7, #4]
  uint8_t data[4] = {197, 5, 73, 41};
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <main+0x80>)
 80001ec:	603b      	str	r3, [r7, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Loop through all addresses and write all 4 data bytes
	  for (int i = 0; i < 4; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
 80001f2:	e024      	b.n	800023e <main+0x72>
		  for (int j = 0; j < 4; j++) {
 80001f4:	2300      	movs	r3, #0
 80001f6:	613b      	str	r3, [r7, #16]
 80001f8:	e01b      	b.n	8000232 <main+0x66>
			  // Load the address and data into the TX buffer
			  txData[0] = addr[i];
 80001fa:	1d3a      	adds	r2, r7, #4
 80001fc:	697b      	ldr	r3, [r7, #20]
 80001fe:	4413      	add	r3, r2
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	733b      	strb	r3, [r7, #12]
			  txData[1] = data[j];
 8000204:	463a      	mov	r2, r7
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	4413      	add	r3, r2
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	737b      	strb	r3, [r7, #13]
//			  // Initiate the SPI transaction
//			  hal_status = HAL_SPI_TransmitReceive(&hspi1, txData, rxData, 2, 0x0000FFFF);
//			  if (hal_status == HAL_OK) {
//				  txData[1] = data[j]; // Placeholder, we really just do nothing
//			  }
			  writeSPI(addr[i], data[j]);
 800020e:	1d3a      	adds	r2, r7, #4
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	4413      	add	r3, r2
 8000214:	7818      	ldrb	r0, [r3, #0]
 8000216:	463a      	mov	r2, r7
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	4413      	add	r3, r2
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	4619      	mov	r1, r3
 8000220:	f000 f924 	bl	800046c <writeSPI>
			  HAL_Delay(1000); // Delay a second between transactions
 8000224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000228:	f000 fa66 	bl	80006f8 <HAL_Delay>
		  for (int j = 0; j < 4; j++) {
 800022c:	693b      	ldr	r3, [r7, #16]
 800022e:	3301      	adds	r3, #1
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	2b03      	cmp	r3, #3
 8000236:	dde0      	ble.n	80001fa <main+0x2e>
	  for (int i = 0; i < 4; i++) {
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	3301      	adds	r3, #1
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	2b03      	cmp	r3, #3
 8000242:	ddd7      	ble.n	80001f4 <main+0x28>
 8000244:	e7d3      	b.n	80001ee <main+0x22>
 8000246:	bf00      	nop
 8000248:	39160625 	.word	0x39160625
 800024c:	294905c5 	.word	0x294905c5

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b096      	sub	sp, #88	; 0x58
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	2244      	movs	r2, #68	; 0x44
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fa26 	bl	80016b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000276:	f000 fb67 	bl	8000948 <HAL_PWREx_ControlVoltageScaling>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000280:	f000 f936 	bl	80004f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000284:	f000 fb42 	bl	800090c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <SystemClock_Config+0xa8>)
 800028a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800028e:	4a1a      	ldr	r2, [pc, #104]	; (80002f8 <SystemClock_Config+0xa8>)
 8000290:	f023 0318 	bic.w	r3, r3, #24
 8000294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000298:	2314      	movs	r3, #20
 800029a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a8:	2360      	movs	r3, #96	; 0x60
 80002aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ac:	2300      	movs	r3, #0
 80002ae:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fb9d 	bl	80009f4 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002c0:	f000 f916 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002c8:	2300      	movs	r3, #0
 80002ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 ffeb 	bl	80012b8 <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002e8:	f000 f902 	bl	80004f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002ec:	f001 f9d0 	bl	8001690 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002f0:	bf00      	nop
 80002f2:	3758      	adds	r7, #88	; 0x58
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40021000 	.word	0x40021000

080002fc <initClocks>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void initClocks(void) {
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= 0x00000003; // Enable AHB2 peripheral clock for GPIOA and GPIOB
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <initClocks+0x28>)
 8000302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000304:	4a07      	ldr	r2, [pc, #28]	; (8000324 <initClocks+0x28>)
 8000306:	f043 0303 	orr.w	r3, r3, #3
 800030a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB2ENR |= 0x00001800; // Enable APB2 peripheral clock for SPI1 and TIM1
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <initClocks+0x28>)
 800030e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <initClocks+0x28>)
 8000312:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000316:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <configGPIO>:

void configGPIO(void) {
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	// Resetting registers to be set later to ensure they are in a known state
	GPIOA->MODER &= (~(0x0000FC00));
 800032c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000336:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800033a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= (~(0x000000C3));
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <configGPIO+0x90>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <configGPIO+0x90>)
 8000342:	f023 03c3 	bic.w	r3, r3, #195	; 0xc3
 8000346:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= (~(0xFFF00000));
 8000348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800034c:	6a1b      	ldr	r3, [r3, #32]
 800034e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000356:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= (~(0x0000000F));
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <configGPIO+0x90>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a16      	ldr	r2, [pc, #88]	; (80003b8 <configGPIO+0x90>)
 800035e:	f023 030f 	bic.w	r3, r3, #15
 8000362:	6213      	str	r3, [r2, #32]

	GPIOA->MODER |= 0x0000A800; // Set PA5-7 to alternate function mode
 8000364:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800036e:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8000372:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00000042; // Set PB0 to alternate function mode, PB3 to general output mode
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <configGPIO+0x90>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0f      	ldr	r2, [pc, #60]	; (80003b8 <configGPIO+0x90>)
 800037a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800037e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= (~(0x00000008)); // Set PB3 to push-pull mode
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <configGPIO+0x90>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <configGPIO+0x90>)
 8000386:	f023 0308 	bic.w	r3, r3, #8
 800038a:	6053      	str	r3, [r2, #4]

	GPIOA->AFR[0] |= 0x55500000; // Set PA5-7 to AF5 (SPI1)
 800038c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000390:	6a1b      	ldr	r3, [r3, #32]
 8000392:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000396:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800039a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800039e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= 0x00000005; // Set PB0 to AF5 (SPI1)
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <configGPIO+0x90>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <configGPIO+0x90>)
 80003a6:	f043 0305 	orr.w	r3, r3, #5
 80003aa:	6213      	str	r3, [r2, #32]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	48000400 	.word	0x48000400

080003bc <configSPI>:

void configSPI(void) {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	//SPI1->CR1 &= (~(0x0040)); // Disable SPI
	SPI1->CR1 &= (~(0x0003)); // Resetting CPOL and CPHA
 80003c0:	4b29      	ldr	r3, [pc, #164]	; (8000468 <configSPI+0xac>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a28      	ldr	r2, [pc, #160]	; (8000468 <configSPI+0xac>)
 80003c6:	f023 0303 	bic.w	r3, r3, #3
 80003ca:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x8400)); // Set to full duplex mode
 80003cc:	4b26      	ldr	r3, [pc, #152]	; (8000468 <configSPI+0xac>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a25      	ldr	r2, [pc, #148]	; (8000468 <configSPI+0xac>)
 80003d2:	f423 4304 	bic.w	r3, r3, #33792	; 0x8400
 80003d6:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x0080)); // Set to MSB first
 80003d8:	4b23      	ldr	r3, [pc, #140]	; (8000468 <configSPI+0xac>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a22      	ldr	r2, [pc, #136]	; (8000468 <configSPI+0xac>)
 80003de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003e2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x0038)); // Reset baud rate register to known state
 80003e4:	4b20      	ldr	r3, [pc, #128]	; (8000468 <configSPI+0xac>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a1f      	ldr	r2, [pc, #124]	; (8000468 <configSPI+0xac>)
 80003ea:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80003ee:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x2000)); // Disable CRC calculation
 80003f0:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <configSPI+0xac>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <configSPI+0xac>)
 80003f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80003fa:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(0x0200)); // Disable software slave management (hardware mode only)
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <configSPI+0xac>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a19      	ldr	r2, [pc, #100]	; (8000468 <configSPI+0xac>)
 8000402:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000406:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0x0010; // Set clock frequency to fPCLK/8 (250kHz)
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <configSPI+0xac>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a16      	ldr	r2, [pc, #88]	; (8000468 <configSPI+0xac>)
 800040e:	f043 0310 	orr.w	r3, r3, #16
 8000412:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0x0004; // Set to master configuration
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <configSPI+0xac>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a13      	ldr	r2, [pc, #76]	; (8000468 <configSPI+0xac>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6013      	str	r3, [r2, #0]

	SPI1->CR2 &= (~(0x1000)); // RXNE event triggers when FIFO level equals 16 bits (performing 16-bit transactions w/ AFE)
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <configSPI+0xac>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4a10      	ldr	r2, [pc, #64]	; (8000468 <configSPI+0xac>)
 8000426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800042a:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= 0x0F00; // Set data length for SPI transfers to 16-bit
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <configSPI+0xac>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <configSPI+0xac>)
 8000432:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000436:	6053      	str	r3, [r2, #4]
	SPI1->CR2 &= (~(0x00F0)); // Mask interrupts & set frame format to Motorola mode
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <configSPI+0xac>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <configSPI+0xac>)
 800043e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000442:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= 0x0004; // Enable slave select output
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <configSPI+0xac>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <configSPI+0xac>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6053      	str	r3, [r2, #4]
	SPI1->CR2 &= (~(0x0003)); // Disable DMA requests
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <configSPI+0xac>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <configSPI+0xac>)
 8000456:	f023 0303 	bic.w	r3, r3, #3
 800045a:	6053      	str	r3, [r2, #4]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40013000 	.word	0x40013000

0800046c <writeSPI>:
	SPI1->CR1 &= (~(0x0040)); // Disable SPI, also pulls CS high

	return rx_data;
}

uint8_t writeSPI(uint8_t addr, uint8_t tx_data) {
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	460a      	mov	r2, r1
 8000476:	71fb      	strb	r3, [r7, #7]
 8000478:	4613      	mov	r3, r2
 800047a:	71bb      	strb	r3, [r7, #6]
	uint16_t rx_data = 0; // Variable for storing slave's response to write
 800047c:	2300      	movs	r3, #0
 800047e:	81fb      	strh	r3, [r7, #14]

	SPI1->CR1 |= 0x0040; // Enable SPI, also pulls CS low
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <writeSPI+0x80>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a19      	ldr	r2, [pc, #100]	; (80004ec <writeSPI+0x80>)
 8000486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048a:	6013      	str	r3, [r2, #0]

	// Shift in address & tx_data into data frame
	SPI1->DR = (uint16_t)(addr << 8);
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	b29b      	uxth	r3, r3
 8000490:	021b      	lsls	r3, r3, #8
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <writeSPI+0x80>)
 8000496:	60da      	str	r2, [r3, #12]
	SPI1->DR |= (uint16_t)(tx_data);
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <writeSPI+0x80>)
 800049a:	68da      	ldr	r2, [r3, #12]
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	4913      	ldr	r1, [pc, #76]	; (80004ec <writeSPI+0x80>)
 80004a0:	4313      	orrs	r3, r2
 80004a2:	60cb      	str	r3, [r1, #12]
	SPI1->DR &= (~(0x8000)); // Set the R/W bit low to indicate a write
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <writeSPI+0x80>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a10      	ldr	r2, [pc, #64]	; (80004ec <writeSPI+0x80>)
 80004aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004ae:	60d3      	str	r3, [r2, #12]
	// Tight poll until SPI not busy and TX buffer is empty
	while ( ((SPI1->SR) & 0x0080) || (!((SPI1->SR) & 0x0002)) ) {}
 80004b0:	bf00      	nop
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <writeSPI+0x80>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d1f9      	bne.n	80004b2 <writeSPI+0x46>
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <writeSPI+0x80>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	f003 0302 	and.w	r3, r3, #2
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f3      	beq.n	80004b2 <writeSPI+0x46>
//	while ( ((SPI1->SR) & 0x0080) ) {}

	rx_data = SPI1->DR; // Store slave's response to write
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <writeSPI+0x80>)
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	81fb      	strh	r3, [r7, #14]

	SPI1->CR1 &= (~(0x0040)); // Disable SPI, also pulls CS high
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <writeSPI+0x80>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a05      	ldr	r2, [pc, #20]	; (80004ec <writeSPI+0x80>)
 80004d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004da:	6013      	str	r3, [r2, #0]

	return rx_data;
 80004dc:	89fb      	ldrh	r3, [r7, #14]
 80004de:	b2db      	uxtb	r3, r3
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40013000 	.word	0x40013000

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>
	...

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_MspInit+0x44>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_MspInit+0x44>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6613      	str	r3, [r2, #96]	; 0x60
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_MspInit+0x44>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_MspInit+0x44>)
 800051c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_MspInit+0x44>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	6593      	str	r3, [r2, #88]	; 0x58
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_MspInit+0x44>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000548:	e7fe      	b.n	8000548 <NMI_Handler+0x4>

0800054a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <HardFault_Handler+0x4>

08000550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <MemManage_Handler+0x4>

08000556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <BusFault_Handler+0x4>

0800055c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <UsageFault_Handler+0x4>

08000562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 f892 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <SystemInit+0x20>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <SystemInit+0x20>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c0:	f7ff ffea 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ea:	f001 f869 	bl	80016c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ee:	f7ff fded 	bl	80001cc <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000600:	08001768 	.word	0x08001768
  ldr r2, =_sbss
 8000604:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000608:	2000002c 	.word	0x2000002c

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>

0800060e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000614:	2300      	movs	r3, #0
 8000616:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f943 	bl	80008a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	200f      	movs	r0, #15
 8000620:	f000 f80e 	bl	8000640 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	e001      	b.n	8000634 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000630:	f7ff ff64 	bl	80004fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000634:	79fb      	ldrb	r3, [r7, #7]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_InitTick+0x6c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d023      	beq.n	800069c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_InitTick+0x70>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_InitTick+0x6c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000662:	fbb3 f3f1 	udiv	r3, r3, r1
 8000666:	fbb2 f3f3 	udiv	r3, r2, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f941 	bl	80008f2 <HAL_SYSTICK_Config>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10f      	bne.n	8000696 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d809      	bhi.n	8000690 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f000 f919 	bl	80008ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000688:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <HAL_InitTick+0x74>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	e007      	b.n	80006a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	e004      	b.n	80006a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	e001      	b.n	80006a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800069c:	2301      	movs	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x20>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x24>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_IncTick+0x24>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000028 	.word	0x20000028

080006e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_GetTick+0x14>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000028 	.word	0x20000028

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff ffee 	bl	80006e0 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000710:	d005      	beq.n	800071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_Delay+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071e:	bf00      	nop
 8000720:	f7ff ffde 	bl	80006e0 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f7      	bhi.n	8000720 <HAL_Delay+0x28>
  {
  }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000870:	d301      	bcc.n	8000876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2301      	movs	r3, #1
 8000874:	e00f      	b.n	8000896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <SysTick_Config+0x40>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087e:	210f      	movs	r1, #15
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f7ff ff8e 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <SysTick_Config+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SysTick_Config+0x40>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff47 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008cc:	f7ff ff5c 	bl	8000788 <__NVIC_GetPriorityGrouping>
 80008d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff8e 	bl	80007f8 <NVIC_EncodePriority>
 80008dc:	4602      	mov	r2, r0
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff5d 	bl	80007a4 <__NVIC_SetPriority>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ffb0 	bl	8000860 <SysTick_Config>
 8000900:	4603      	mov	r3, r0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40007000 	.word	0x40007000

0800092c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <HAL_PWREx_GetVoltageRange+0x18>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40007000 	.word	0x40007000

08000948 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000956:	d130      	bne.n	80009ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000964:	d038      	beq.n	80009d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800096e:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000974:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2232      	movs	r2, #50	; 0x32
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000982:	fba2 2303 	umull	r2, r3, r2, r3
 8000986:	0c9b      	lsrs	r3, r3, #18
 8000988:	3301      	adds	r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800098c:	e002      	b.n	8000994 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3b01      	subs	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800099c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009a0:	d102      	bne.n	80009a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1f2      	bne.n	800098e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009b4:	d110      	bne.n	80009d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80009b6:	2303      	movs	r3, #3
 80009b8:	e00f      	b.n	80009da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009c6:	d007      	beq.n	80009d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40007000 	.word	0x40007000
 80009ec:	20000000 	.word	0x20000000
 80009f0:	431bde83 	.word	0x431bde83

080009f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d102      	bne.n	8000a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f000 bc4f 	b.w	80012a6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a08:	4b97      	ldr	r3, [pc, #604]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 030c 	and.w	r3, r3, #12
 8000a10:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a12:	4b95      	ldr	r3, [pc, #596]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 80e6 	beq.w	8000bf6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d007      	beq.n	8000a40 <HAL_RCC_OscConfig+0x4c>
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	2b0c      	cmp	r3, #12
 8000a34:	f040 808d 	bne.w	8000b52 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	f040 8089 	bne.w	8000b52 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a40:	4b89      	ldr	r3, [pc, #548]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d006      	beq.n	8000a5a <HAL_RCC_OscConfig+0x66>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	f000 bc26 	b.w	80012a6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a5e:	4b82      	ldr	r3, [pc, #520]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d004      	beq.n	8000a74 <HAL_RCC_OscConfig+0x80>
 8000a6a:	4b7f      	ldr	r3, [pc, #508]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a72:	e005      	b.n	8000a80 <HAL_RCC_OscConfig+0x8c>
 8000a74:	4b7c      	ldr	r3, [pc, #496]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d224      	bcs.n	8000ace <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fda1 	bl	80015d0 <RCC_SetFlashLatencyFromMSIRange>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	f000 bc06 	b.w	80012a6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a9a:	4b73      	ldr	r3, [pc, #460]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a72      	ldr	r2, [pc, #456]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	4b70      	ldr	r3, [pc, #448]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab2:	496d      	ldr	r1, [pc, #436]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ab8:	4b6b      	ldr	r3, [pc, #428]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	4968      	ldr	r1, [pc, #416]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
 8000acc:	e025      	b.n	8000b1a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ace:	4b66      	ldr	r3, [pc, #408]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a65      	ldr	r2, [pc, #404]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	4b63      	ldr	r3, [pc, #396]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	4960      	ldr	r1, [pc, #384]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000aec:	4b5e      	ldr	r3, [pc, #376]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	021b      	lsls	r3, r3, #8
 8000afa:	495b      	ldr	r1, [pc, #364]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000afc:	4313      	orrs	r3, r2
 8000afe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d109      	bne.n	8000b1a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fd60 	bl	80015d0 <RCC_SetFlashLatencyFromMSIRange>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e3c5      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b1a:	f000 fccd 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	4950      	ldr	r1, [pc, #320]	; (8000c6c <HAL_RCC_OscConfig+0x278>)
 8000b2c:	5ccb      	ldrb	r3, [r1, r3]
 8000b2e:	f003 031f 	and.w	r3, r3, #31
 8000b32:	fa22 f303 	lsr.w	r3, r2, r3
 8000b36:	4a4e      	ldr	r2, [pc, #312]	; (8000c70 <HAL_RCC_OscConfig+0x27c>)
 8000b38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000b3a:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <HAL_RCC_OscConfig+0x280>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fd7e 	bl	8000640 <HAL_InitTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d052      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000b4e:	7dfb      	ldrb	r3, [r7, #23]
 8000b50:	e3a9      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d032      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000b5a:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a42      	ldr	r2, [pc, #264]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b66:	f7ff fdbb 	bl	80006e0 <HAL_GetTick>
 8000b6a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b6c:	e008      	b.n	8000b80 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fdb7 	bl	80006e0 <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d901      	bls.n	8000b80 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e392      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b80:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f0      	beq.n	8000b6e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b8c:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a35      	ldr	r2, [pc, #212]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba4:	4930      	ldr	r1, [pc, #192]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000baa:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a1b      	ldr	r3, [r3, #32]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	492b      	ldr	r1, [pc, #172]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	604b      	str	r3, [r1, #4]
 8000bbe:	e01a      	b.n	8000bf6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a28      	ldr	r2, [pc, #160]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000bc6:	f023 0301 	bic.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fd88 	bl	80006e0 <HAL_GetTick>
 8000bd0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bd4:	f7ff fd84 	bl	80006e0 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e35f      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f0      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x1e0>
 8000bf2:	e000      	b.n	8000bf6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d073      	beq.n	8000cea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d005      	beq.n	8000c14 <HAL_RCC_OscConfig+0x220>
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	2b0c      	cmp	r3, #12
 8000c0c:	d10e      	bne.n	8000c2c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d10b      	bne.n	8000c2c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d063      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x2f4>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d15f      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e33c      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c34:	d106      	bne.n	8000c44 <HAL_RCC_OscConfig+0x250>
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e025      	b.n	8000c90 <HAL_RCC_OscConfig+0x29c>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c4c:	d114      	bne.n	8000c78 <HAL_RCC_OscConfig+0x284>
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a02      	ldr	r2, [pc, #8]	; (8000c68 <HAL_RCC_OscConfig+0x274>)
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e013      	b.n	8000c90 <HAL_RCC_OscConfig+0x29c>
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	08001720 	.word	0x08001720
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000004 	.word	0x20000004
 8000c78:	4b8f      	ldr	r3, [pc, #572]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a8e      	ldr	r2, [pc, #568]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b8c      	ldr	r3, [pc, #560]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a8b      	ldr	r2, [pc, #556]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d013      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c98:	f7ff fd22 	bl	80006e0 <HAL_GetTick>
 8000c9c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fd1e 	bl	80006e0 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e2f9      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cb2:	4b81      	ldr	r3, [pc, #516]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f0      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x2ac>
 8000cbe:	e014      	b.n	8000cea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fd0e 	bl	80006e0 <HAL_GetTick>
 8000cc4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fd0a 	bl	80006e0 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	; 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e2e5      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cda:	4b77      	ldr	r3, [pc, #476]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f0      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x2d4>
 8000ce6:	e000      	b.n	8000cea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d060      	beq.n	8000db8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d005      	beq.n	8000d08 <HAL_RCC_OscConfig+0x314>
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	2b0c      	cmp	r3, #12
 8000d00:	d119      	bne.n	8000d36 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d116      	bne.n	8000d36 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d08:	4b6b      	ldr	r3, [pc, #428]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <HAL_RCC_OscConfig+0x32c>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e2c2      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d20:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	061b      	lsls	r3, r3, #24
 8000d2e:	4962      	ldr	r1, [pc, #392]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d34:	e040      	b.n	8000db8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d023      	beq.n	8000d86 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d3e:	4b5e      	ldr	r3, [pc, #376]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a5d      	ldr	r2, [pc, #372]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fcc9 	bl	80006e0 <HAL_GetTick>
 8000d4e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d50:	e008      	b.n	8000d64 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d52:	f7ff fcc5 	bl	80006e0 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d901      	bls.n	8000d64 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000d60:	2303      	movs	r3, #3
 8000d62:	e2a0      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0f0      	beq.n	8000d52 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d70:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	061b      	lsls	r3, r3, #24
 8000d7e:	494e      	ldr	r1, [pc, #312]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d80:	4313      	orrs	r3, r2
 8000d82:	604b      	str	r3, [r1, #4]
 8000d84:	e018      	b.n	8000db8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d86:	4b4c      	ldr	r3, [pc, #304]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a4b      	ldr	r2, [pc, #300]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d92:	f7ff fca5 	bl	80006e0 <HAL_GetTick>
 8000d96:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d98:	e008      	b.n	8000dac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fca1 	bl	80006e0 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e27c      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f0      	bne.n	8000d9a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 8082 	beq.w	8000eca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d05f      	beq.n	8000e8e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8000dce:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	699a      	ldr	r2, [r3, #24]
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d037      	beq.n	8000e54 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e254      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d01b      	beq.n	8000e3e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e0c:	4a2a      	ldr	r2, [pc, #168]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000e16:	f7ff fc63 	bl	80006e0 <HAL_GetTick>
 8000e1a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e1e:	f7ff fc5f 	bl	80006e0 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b11      	cmp	r3, #17
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e23a      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1ef      	bne.n	8000e1e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e44:	f023 0210 	bic.w	r2, r3, #16
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	491a      	ldr	r1, [pc, #104]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e64:	f7ff fc3c 	bl	80006e0 <HAL_GetTick>
 8000e68:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fc38 	bl	80006e0 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b11      	cmp	r3, #17
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e213      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0ef      	beq.n	8000e6c <HAL_RCC_OscConfig+0x478>
 8000e8c:	e01d      	b.n	8000eca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	f023 0301 	bic.w	r3, r3, #1
 8000e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fc1f 	bl	80006e0 <HAL_GetTick>
 8000ea2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ea4:	e00a      	b.n	8000ebc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea6:	f7ff fc1b 	bl	80006e0 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b11      	cmp	r3, #17
 8000eb2:	d903      	bls.n	8000ebc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e1f6      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
 8000eb8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ebc:	4ba9      	ldr	r3, [pc, #676]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1ed      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 80bd 	beq.w	8001052 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ede:	4ba1      	ldr	r3, [pc, #644]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10e      	bne.n	8000f08 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b9e      	ldr	r3, [pc, #632]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a9d      	ldr	r2, [pc, #628]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b9b      	ldr	r3, [pc, #620]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f02:	2301      	movs	r3, #1
 8000f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f08:	4b97      	ldr	r3, [pc, #604]	; (8001168 <HAL_RCC_OscConfig+0x774>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d118      	bne.n	8000f46 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f14:	4b94      	ldr	r3, [pc, #592]	; (8001168 <HAL_RCC_OscConfig+0x774>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a93      	ldr	r2, [pc, #588]	; (8001168 <HAL_RCC_OscConfig+0x774>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f20:	f7ff fbde 	bl	80006e0 <HAL_GetTick>
 8000f24:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f28:	f7ff fbda 	bl	80006e0 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e1b5      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f3a:	4b8b      	ldr	r3, [pc, #556]	; (8001168 <HAL_RCC_OscConfig+0x774>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f0      	beq.n	8000f28 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d02c      	beq.n	8000fac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8000f52:	4b84      	ldr	r3, [pc, #528]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f64:	497f      	ldr	r1, [pc, #508]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d010      	beq.n	8000f9a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f78:	4b7a      	ldr	r3, [pc, #488]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f7e:	4a79      	ldr	r2, [pc, #484]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f88:	4b76      	ldr	r3, [pc, #472]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f8e:	4a75      	ldr	r2, [pc, #468]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f98:	e018      	b.n	8000fcc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fa0:	4a70      	ldr	r2, [pc, #448]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000faa:	e00f      	b.n	8000fcc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000fac:	4b6d      	ldr	r3, [pc, #436]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb2:	4a6c      	ldr	r2, [pc, #432]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000fbc:	4b69      	ldr	r3, [pc, #420]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc2:	4a68      	ldr	r2, [pc, #416]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000fc4:	f023 0304 	bic.w	r3, r3, #4
 8000fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d016      	beq.n	8001002 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fb84 	bl	80006e0 <HAL_GetTick>
 8000fd8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fda:	e00a      	b.n	8000ff2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fb80 	bl	80006e0 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e159      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ff2:	4b5c      	ldr	r3, [pc, #368]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8000ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0ed      	beq.n	8000fdc <HAL_RCC_OscConfig+0x5e8>
 8001000:	e01d      	b.n	800103e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001002:	f7ff fb6d 	bl	80006e0 <HAL_GetTick>
 8001006:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001008:	e00a      	b.n	8001020 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100a:	f7ff fb69 	bl	80006e0 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f241 3288 	movw	r2, #5000	; 0x1388
 8001018:	4293      	cmp	r3, r2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e142      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001020:	4b50      	ldr	r3, [pc, #320]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8001022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ed      	bne.n	800100a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8001030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8001036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800103a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800103e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001042:	2b01      	cmp	r3, #1
 8001044:	d105      	bne.n	8001052 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a46      	ldr	r2, [pc, #280]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 800104c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	2b00      	cmp	r3, #0
 800105c:	d03c      	beq.n	80010d8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	2b00      	cmp	r3, #0
 8001064:	d01c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001066:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8001068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800106c:	4a3d      	ldr	r2, [pc, #244]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001076:	f7ff fb33 	bl	80006e0 <HAL_GetTick>
 800107a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800107e:	f7ff fb2f 	bl	80006e0 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e10a      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8001092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0ef      	beq.n	800107e <HAL_RCC_OscConfig+0x68a>
 800109e:	e01b      	b.n	80010d8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 80010a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010a6:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b0:	f7ff fb16 	bl	80006e0 <HAL_GetTick>
 80010b4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010b8:	f7ff fb12 	bl	80006e0 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e0ed      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 80010cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1ef      	bne.n	80010b8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80e1 	beq.w	80012a4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	f040 80b5 	bne.w	8001256 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f003 0203 	and.w	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d124      	bne.n	800114a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	3b01      	subs	r3, #1
 800110c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800110e:	429a      	cmp	r2, r3
 8001110:	d11b      	bne.n	800114a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800111e:	429a      	cmp	r2, r3
 8001120:	d113      	bne.n	800114a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	3b01      	subs	r3, #1
 8001130:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001132:	429a      	cmp	r2, r3
 8001134:	d109      	bne.n	800114a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	085b      	lsrs	r3, r3, #1
 8001142:	3b01      	subs	r3, #1
 8001144:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001146:	429a      	cmp	r2, r3
 8001148:	d05f      	beq.n	800120a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	d05a      	beq.n	8001206 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <HAL_RCC_OscConfig+0x770>)
 8001156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800115a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800115c:	f7ff fac0 	bl	80006e0 <HAL_GetTick>
 8001160:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001162:	e00c      	b.n	800117e <HAL_RCC_OscConfig+0x78a>
 8001164:	40021000 	.word	0x40021000
 8001168:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff fab8 	bl	80006e0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e093      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800118a:	4b49      	ldr	r3, [pc, #292]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <HAL_RCC_OscConfig+0x8c0>)
 8001190:	4013      	ands	r3, r2
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800119a:	3a01      	subs	r2, #1
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	4311      	orrs	r1, r2
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80011a4:	0212      	lsls	r2, r2, #8
 80011a6:	4311      	orrs	r1, r2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011ac:	0852      	lsrs	r2, r2, #1
 80011ae:	3a01      	subs	r2, #1
 80011b0:	0552      	lsls	r2, r2, #21
 80011b2:	4311      	orrs	r1, r2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011b8:	0852      	lsrs	r2, r2, #1
 80011ba:	3a01      	subs	r2, #1
 80011bc:	0652      	lsls	r2, r2, #25
 80011be:	430a      	orrs	r2, r1
 80011c0:	493b      	ldr	r1, [pc, #236]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a39      	ldr	r2, [pc, #228]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 80011cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011d0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011d2:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	4a36      	ldr	r2, [pc, #216]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 80011d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011dc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011de:	f7ff fa7f 	bl	80006e0 <HAL_GetTick>
 80011e2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e6:	f7ff fa7b 	bl	80006e0 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e056      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001204:	e04e      	b.n	80012a4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e04d      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d146      	bne.n	80012a4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 800121c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001220:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 8001228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800122c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800122e:	f7ff fa57 	bl	80006e0 <HAL_GetTick>
 8001232:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001236:	f7ff fa53 	bl	80006e0 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e02e      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x842>
 8001254:	e026      	b.n	80012a4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	2b0c      	cmp	r3, #12
 800125a:	d021      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 8001262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fa3a 	bl	80006e0 <HAL_GetTick>
 800126c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff fa36 	bl	80006e0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e011      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_RCC_OscConfig+0x8bc>)
 8001294:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001298:	f023 0303 	bic.w	r3, r3, #3
 800129c:	60d3      	str	r3, [r2, #12]
 800129e:	e001      	b.n	80012a4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	f99f808c 	.word	0xf99f808c

080012b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0e7      	b.n	800149c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012cc:	4b75      	ldr	r3, [pc, #468]	; (80014a4 <HAL_RCC_ClockConfig+0x1ec>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d910      	bls.n	80012fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012da:	4b72      	ldr	r3, [pc, #456]	; (80014a4 <HAL_RCC_ClockConfig+0x1ec>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 0207 	bic.w	r2, r3, #7
 80012e2:	4970      	ldr	r1, [pc, #448]	; (80014a4 <HAL_RCC_ClockConfig+0x1ec>)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ea:	4b6e      	ldr	r3, [pc, #440]	; (80014a4 <HAL_RCC_ClockConfig+0x1ec>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0cf      	b.n	800149c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d010      	beq.n	800132a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001314:	429a      	cmp	r2, r3
 8001316:	d908      	bls.n	800132a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4960      	ldr	r1, [pc, #384]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001326:	4313      	orrs	r3, r2
 8001328:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d04c      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800133e:	4b5a      	ldr	r3, [pc, #360]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d121      	bne.n	800138e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0a6      	b.n	800149c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d115      	bne.n	800138e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e09a      	b.n	800149c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d107      	bne.n	800137e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800136e:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e08e      	b.n	800149c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800137e:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e086      	b.n	800149c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800138e:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f023 0203 	bic.w	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4943      	ldr	r1, [pc, #268]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 800139c:	4313      	orrs	r3, r2
 800139e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013a0:	f7ff f99e 	bl	80006e0 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	e00a      	b.n	80013be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a8:	f7ff f99a 	bl	80006e0 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e06e      	b.n	800149c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013be:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 020c 	and.w	r2, r3, #12
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d1eb      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d010      	beq.n	80013fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d208      	bcs.n	80013fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ec:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	492b      	ldr	r1, [pc, #172]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d210      	bcs.n	800142e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <HAL_RCC_ClockConfig+0x1ec>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 0207 	bic.w	r2, r3, #7
 8001414:	4923      	ldr	r1, [pc, #140]	; (80014a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_RCC_ClockConfig+0x1ec>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d001      	beq.n	800142e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e036      	b.n	800149c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	4918      	ldr	r1, [pc, #96]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4910      	ldr	r1, [pc, #64]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001468:	4313      	orrs	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800146c:	f000 f824 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	490b      	ldr	r1, [pc, #44]	; (80014ac <HAL_RCC_ClockConfig+0x1f4>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 800148a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_ClockConfig+0x1fc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f8d5 	bl	8000640 <HAL_InitTick>
 8001496:	4603      	mov	r3, r0
 8001498:	72fb      	strb	r3, [r7, #11]

  return status;
 800149a:	7afb      	ldrb	r3, [r7, #11]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40022000 	.word	0x40022000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	08001720 	.word	0x08001720
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004

080014b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d0:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x34>
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d121      	bne.n	800152a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d11e      	bne.n	800152a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014f8:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80014fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e005      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001514:	4a2b      	ldr	r2, [pc, #172]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10d      	bne.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d102      	bne.n	8001536 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001530:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e004      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d101      	bne.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HAL_RCC_GetSysClockFreq+0x114>)
 800153e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d134      	bne.n	80015b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d003      	beq.n	800155e <HAL_RCC_GetSysClockFreq+0xa6>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d003      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0xac>
 800155c:	e005      	b.n	800156a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001560:	617b      	str	r3, [r7, #20]
      break;
 8001562:	e005      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_RCC_GetSysClockFreq+0x114>)
 8001566:	617b      	str	r3, [r7, #20]
      break;
 8001568:	e002      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	617b      	str	r3, [r7, #20]
      break;
 800156e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	3301      	adds	r3, #1
 800157c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	fb03 f202 	mul.w	r2, r3, r2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	fbb2 f3f3 	udiv	r3, r2, r3
 8001594:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	0e5b      	lsrs	r3, r3, #25
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	3301      	adds	r3, #1
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80015b0:	69bb      	ldr	r3, [r7, #24]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	08001730 	.word	0x08001730
 80015c8:	00f42400 	.word	0x00f42400
 80015cc:	007a1200 	.word	0x007a1200

080015d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80015e8:	f7ff f9a0 	bl	800092c <HAL_PWREx_GetVoltageRange>
 80015ec:	6178      	str	r0, [r7, #20]
 80015ee:	e014      	b.n	800161a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	4a24      	ldr	r2, [pc, #144]	; (8001688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6593      	str	r3, [r2, #88]	; 0x58
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001608:	f7ff f990 	bl	800092c <HAL_PWREx_GetVoltageRange>
 800160c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001620:	d10b      	bne.n	800163a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b80      	cmp	r3, #128	; 0x80
 8001626:	d919      	bls.n	800165c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2ba0      	cmp	r3, #160	; 0xa0
 800162c:	d902      	bls.n	8001634 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800162e:	2302      	movs	r3, #2
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	e013      	b.n	800165c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001634:	2301      	movs	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	e010      	b.n	800165c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b80      	cmp	r3, #128	; 0x80
 800163e:	d902      	bls.n	8001646 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001640:	2303      	movs	r3, #3
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	e00a      	b.n	800165c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b80      	cmp	r3, #128	; 0x80
 800164a:	d102      	bne.n	8001652 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800164c:	2302      	movs	r3, #2
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	e004      	b.n	800165c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b70      	cmp	r3, #112	; 0x70
 8001656:	d101      	bne.n	800165c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001658:	2301      	movs	r3, #1
 800165a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 0207 	bic.w	r2, r3, #7
 8001664:	4909      	ldr	r1, [pc, #36]	; (800168c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000
 800168c:	40022000 	.word	0x40022000

08001690 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000

080016b0 <memset>:
 80016b0:	4402      	add	r2, r0
 80016b2:	4603      	mov	r3, r0
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d100      	bne.n	80016ba <memset+0xa>
 80016b8:	4770      	bx	lr
 80016ba:	f803 1b01 	strb.w	r1, [r3], #1
 80016be:	e7f9      	b.n	80016b4 <memset+0x4>

080016c0 <__libc_init_array>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	4d0d      	ldr	r5, [pc, #52]	; (80016f8 <__libc_init_array+0x38>)
 80016c4:	4c0d      	ldr	r4, [pc, #52]	; (80016fc <__libc_init_array+0x3c>)
 80016c6:	1b64      	subs	r4, r4, r5
 80016c8:	10a4      	asrs	r4, r4, #2
 80016ca:	2600      	movs	r6, #0
 80016cc:	42a6      	cmp	r6, r4
 80016ce:	d109      	bne.n	80016e4 <__libc_init_array+0x24>
 80016d0:	4d0b      	ldr	r5, [pc, #44]	; (8001700 <__libc_init_array+0x40>)
 80016d2:	4c0c      	ldr	r4, [pc, #48]	; (8001704 <__libc_init_array+0x44>)
 80016d4:	f000 f818 	bl	8001708 <_init>
 80016d8:	1b64      	subs	r4, r4, r5
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	2600      	movs	r6, #0
 80016de:	42a6      	cmp	r6, r4
 80016e0:	d105      	bne.n	80016ee <__libc_init_array+0x2e>
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
 80016e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016e8:	4798      	blx	r3
 80016ea:	3601      	adds	r6, #1
 80016ec:	e7ee      	b.n	80016cc <__libc_init_array+0xc>
 80016ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f2:	4798      	blx	r3
 80016f4:	3601      	adds	r6, #1
 80016f6:	e7f2      	b.n	80016de <__libc_init_array+0x1e>
 80016f8:	08001760 	.word	0x08001760
 80016fc:	08001760 	.word	0x08001760
 8001700:	08001760 	.word	0x08001760
 8001704:	08001764 	.word	0x08001764

08001708 <_init>:
 8001708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170a:	bf00      	nop
 800170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170e:	bc08      	pop	{r3}
 8001710:	469e      	mov	lr, r3
 8001712:	4770      	bx	lr

08001714 <_fini>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	bf00      	nop
 8001718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171a:	bc08      	pop	{r3}
 800171c:	469e      	mov	lr, r3
 800171e:	4770      	bx	lr
